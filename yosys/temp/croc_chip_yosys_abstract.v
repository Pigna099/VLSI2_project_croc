/* Generated by Yosys 0.55+3 (git sha1 e60cf3e2f, aarch64-linux-gnu-g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3) */

(* src = "rtl/common_cells/addr_decode.sv:35.8" *)
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  (* src = "rtl/common_cells/addr_decode.sv:72.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode.sv:74.31" *)
  input [479:0] addr_map_i;
  wire [479:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode.sv:80.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode.sv:78.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode.sv:90.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:84.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:76.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  (* src = "rtl/common_cells/addr_decode.sv:100.5" *)
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

(* src = "rtl/common_cells/addr_decode.sv:35.8" *)
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  (* src = "rtl/common_cells/addr_decode.sv:72.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode.sv:74.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode.sv:80.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode.sv:78.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode.sv:90.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:84.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:76.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  (* src = "rtl/common_cells/addr_decode.sv:100.5" *)
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

(* src = "rtl/common_cells/addr_decode.sv:35.8" *)
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  (* src = "rtl/common_cells/addr_decode.sv:72.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode.sv:74.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode.sv:80.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode.sv:78.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode.sv:90.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:84.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:76.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  (* src = "rtl/common_cells/addr_decode.sv:100.5" *)
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

(* src = "rtl/common_cells/addr_decode.sv:35.8" *)
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  (* src = "rtl/common_cells/addr_decode.sv:72.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode.sv:74.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode.sv:80.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode.sv:78.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode.sv:90.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:84.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:76.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  (* src = "rtl/common_cells/addr_decode.sv:100.5" *)
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

(* src = "rtl/common_cells/addr_decode.sv:35.8" *)
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  (* src = "rtl/common_cells/addr_decode.sv:72.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode.sv:74.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode.sv:80.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode.sv:78.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode.sv:90.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:84.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:76.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  (* src = "rtl/common_cells/addr_decode.sv:100.5" *)
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

(* src = "rtl/common_cells/addr_decode.sv:35.8" *)
module \addr_decode$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  (* src = "rtl/common_cells/addr_decode.sv:72.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode.sv:74.31" *)
  input [95:0] addr_map_i;
  wire [95:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode.sv:80.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode.sv:78.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode.sv:90.31" *)
  input default_idx_i;
  wire default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:84.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:76.31" *)
  output idx_o;
  wire idx_o;
  (* src = "rtl/common_cells/addr_decode.sv:100.5" *)
  \addr_decode_dync$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

(* src = "rtl/common_cells/addr_decode_dync.sv:40.8" *)
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10y ;
  wire [2:0] \$12y ;
  wire \$17y ;
  wire \$19y ;
  wire \$1y ;
  wire \$20y ;
  wire \$21y ;
  wire \$22y ;
  wire [2:0] \$26y ;
  wire [2:0] \$2y ;
  wire \$31y ;
  wire \$33y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$3y ;
  wire [2:0] \$40y ;
  wire \$45y ;
  wire \$47y ;
  wire \$48y ;
  wire \$49y ;
  wire \$50y ;
  wire [2:0] \$54y ;
  wire \$59y ;
  wire \$5y ;
  wire \$61y ;
  wire \$62y ;
  wire \$63y ;
  wire \$64y ;
  wire [2:0] \$68y ;
  wire \$6y ;
  wire \$7y ;
  wire \$8y ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$16 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$30 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$44 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$58 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$15 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$29 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$43 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$57 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$14 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$28 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$42 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$56 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:77.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:79.31" *)
  input [479:0] addr_map_i;
  wire [479:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:98.31" *)
  input config_ongoing_i;
  wire config_ongoing_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:85.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:83.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:95.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:89.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:81.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  assign \$1y  = ~ (* src = "rtl/common_cells/addr_decode_dync.sv:107.21-107.53" *) en_default_idx_i;
  assign \$10y  = ~ (* src = "rtl/common_cells/addr_decode_dync.sv:118.28-118.45" *) config_ongoing_i;
  assign \$12y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[66:64];
  assign \$17y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[159:128];
  assign \$19y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[127:96];
  assign \$2y  = en_default_idx_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:108.21-108.60" *) default_idx_i : 3'h0;
  assign \$20y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[127:96];
  assign \$21y  = \$19y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$20y ;
  assign \$22y  = \$17y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$21y ;
  assign \$26y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[162:160];
  assign \$3y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[63:32];
  assign \$31y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[255:224];
  assign \$33y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[223:192];
  assign \$34y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[223:192];
  assign \$35y  = \$33y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$34y ;
  assign \$36y  = \$31y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$35y ;
  assign \$40y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[258:256];
  assign \$45y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[351:320];
  assign \$47y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[319:288];
  assign \$48y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[319:288];
  assign \$49y  = \$47y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$48y ;
  assign \$5y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[31:0];
  assign \$50y  = \$45y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$49y ;
  assign \$54y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[354:352];
  assign \$59y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[447:416];
  assign \$6y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[31:0];
  assign \$61y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[415:384];
  assign \$62y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[415:384];
  assign \$63y  = \$61y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$62y ;
  assign \$64y  = \$59y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$63y ;
  assign \$68y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[450:448];
  assign \$7y  = \$5y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$6y ;
  assign \$8y  = \$3y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$7y ;
  assign dec_error_o = \$64y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$58 ;
  assign dec_valid_o = \$64y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y  : \$dec_valid_o$57 ;
  assign idx_o = \$64y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$68y  : \$idx_o$56 ;
  assign \$dec_error_o$58  = \$50y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$44 ;
  assign \$dec_valid_o$57  = \$50y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y  : \$dec_valid_o$43 ;
  assign \$idx_o$56  = \$50y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$54y  : \$idx_o$42 ;
  assign \$dec_error_o$44  = \$36y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$30 ;
  assign \$dec_valid_o$43  = \$36y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y  : \$dec_valid_o$29 ;
  assign \$idx_o$42  = \$36y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$40y  : \$idx_o$28 ;
  assign \$dec_error_o$30  = \$22y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$16 ;
  assign \$dec_valid_o$29  = \$22y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y  : \$dec_valid_o$15 ;
  assign \$idx_o$28  = \$22y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$26y  : \$idx_o$14 ;
  assign \$dec_error_o$16  = \$8y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$1y ;
  assign \$dec_valid_o$15  = \$8y  & (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y ;
  assign \$idx_o$14  = \$8y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$12y  : \$2y ;
endmodule

(* src = "rtl/common_cells/addr_decode_dync.sv:40.8" *)
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10y ;
  wire [2:0] \$12y ;
  wire \$17y ;
  wire \$19y ;
  wire \$1y ;
  wire \$20y ;
  wire \$21y ;
  wire \$22y ;
  wire [2:0] \$26y ;
  wire [2:0] \$2y ;
  wire \$31y ;
  wire \$33y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$3y ;
  wire [2:0] \$40y ;
  wire \$45y ;
  wire \$47y ;
  wire \$48y ;
  wire \$49y ;
  wire \$50y ;
  wire [2:0] \$54y ;
  wire \$5y ;
  wire \$6y ;
  wire \$7y ;
  wire \$8y ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$16 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$30 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$44 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$15 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$29 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$43 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$14 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$28 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$42 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:77.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:79.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:98.31" *)
  input config_ongoing_i;
  wire config_ongoing_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:85.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:83.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:95.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:89.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:81.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  assign \$1y  = ~ (* src = "rtl/common_cells/addr_decode_dync.sv:107.21-107.53" *) en_default_idx_i;
  assign \$10y  = ~ (* src = "rtl/common_cells/addr_decode_dync.sv:118.28-118.45" *) config_ongoing_i;
  assign \$12y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[66:64];
  assign \$17y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[159:128];
  assign \$19y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[127:96];
  assign \$2y  = en_default_idx_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:108.21-108.60" *) default_idx_i : 3'h0;
  assign \$20y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[127:96];
  assign \$21y  = \$19y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$20y ;
  assign \$22y  = \$17y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$21y ;
  assign \$26y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[162:160];
  assign \$3y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[63:32];
  assign \$31y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[255:224];
  assign \$33y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[223:192];
  assign \$34y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[223:192];
  assign \$35y  = \$33y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$34y ;
  assign \$36y  = \$31y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$35y ;
  assign \$40y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[258:256];
  assign \$45y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[351:320];
  assign \$47y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[319:288];
  assign \$48y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[319:288];
  assign \$49y  = \$47y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$48y ;
  assign \$5y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[31:0];
  assign \$50y  = \$45y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$49y ;
  assign \$54y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[354:352];
  assign \$6y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[31:0];
  assign \$7y  = \$5y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$6y ;
  assign \$8y  = \$3y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$7y ;
  assign dec_error_o = \$50y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$44 ;
  assign dec_valid_o = \$50y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y  : \$dec_valid_o$43 ;
  assign idx_o = \$50y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$54y  : \$idx_o$42 ;
  assign \$dec_error_o$44  = \$36y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$30 ;
  assign \$dec_valid_o$43  = \$36y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y  : \$dec_valid_o$29 ;
  assign \$idx_o$42  = \$36y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$40y  : \$idx_o$28 ;
  assign \$dec_error_o$30  = \$22y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$16 ;
  assign \$dec_valid_o$29  = \$22y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y  : \$dec_valid_o$15 ;
  assign \$idx_o$28  = \$22y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$26y  : \$idx_o$14 ;
  assign \$dec_error_o$16  = \$8y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$1y ;
  assign \$dec_valid_o$15  = \$8y  & (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y ;
  assign \$idx_o$14  = \$8y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$12y  : \$2y ;
endmodule

(* src = "rtl/common_cells/addr_decode_dync.sv:40.8" *)
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10y ;
  wire [2:0] \$12y ;
  wire \$17y ;
  wire \$19y ;
  wire \$1y ;
  wire \$20y ;
  wire \$21y ;
  wire \$22y ;
  wire [2:0] \$26y ;
  wire [2:0] \$2y ;
  wire \$31y ;
  wire \$33y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$3y ;
  wire [2:0] \$40y ;
  wire \$45y ;
  wire \$47y ;
  wire \$48y ;
  wire \$49y ;
  wire \$50y ;
  wire [2:0] \$54y ;
  wire \$5y ;
  wire \$6y ;
  wire \$7y ;
  wire \$8y ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$16 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$30 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$44 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$15 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$29 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$43 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$14 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$28 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$42 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:77.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:79.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:98.31" *)
  input config_ongoing_i;
  wire config_ongoing_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:85.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:83.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:95.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:89.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:81.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  assign \$1y  = ~ (* src = "rtl/common_cells/addr_decode_dync.sv:107.21-107.53" *) en_default_idx_i;
  assign \$10y  = ~ (* src = "rtl/common_cells/addr_decode_dync.sv:118.28-118.45" *) config_ongoing_i;
  assign \$12y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[66:64];
  assign \$17y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[159:128];
  assign \$19y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[127:96];
  assign \$2y  = en_default_idx_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:108.21-108.60" *) default_idx_i : 3'h0;
  assign \$20y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[127:96];
  assign \$21y  = \$19y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$20y ;
  assign \$22y  = \$17y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$21y ;
  assign \$26y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[162:160];
  assign \$3y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[63:32];
  assign \$31y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[255:224];
  assign \$33y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[223:192];
  assign \$34y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[223:192];
  assign \$35y  = \$33y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$34y ;
  assign \$36y  = \$31y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$35y ;
  assign \$40y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[258:256];
  assign \$45y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[351:320];
  assign \$47y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[319:288];
  assign \$48y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[319:288];
  assign \$49y  = \$47y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$48y ;
  assign \$5y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[31:0];
  assign \$50y  = \$45y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$49y ;
  assign \$54y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[354:352];
  assign \$6y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[31:0];
  assign \$7y  = \$5y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$6y ;
  assign \$8y  = \$3y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$7y ;
  assign dec_error_o = \$50y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$44 ;
  assign dec_valid_o = \$50y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y  : \$dec_valid_o$43 ;
  assign idx_o = \$50y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$54y  : \$idx_o$42 ;
  assign \$dec_error_o$44  = \$36y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$30 ;
  assign \$dec_valid_o$43  = \$36y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y  : \$dec_valid_o$29 ;
  assign \$idx_o$42  = \$36y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$40y  : \$idx_o$28 ;
  assign \$dec_error_o$30  = \$22y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$16 ;
  assign \$dec_valid_o$29  = \$22y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y  : \$dec_valid_o$15 ;
  assign \$idx_o$28  = \$22y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$26y  : \$idx_o$14 ;
  assign \$dec_error_o$16  = \$8y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$1y ;
  assign \$dec_valid_o$15  = \$8y  & (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y ;
  assign \$idx_o$14  = \$8y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$12y  : \$2y ;
endmodule

(* src = "rtl/common_cells/addr_decode_dync.sv:40.8" *)
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10y ;
  wire [2:0] \$12y ;
  wire \$17y ;
  wire \$19y ;
  wire \$1y ;
  wire \$20y ;
  wire \$21y ;
  wire \$22y ;
  wire [2:0] \$26y ;
  wire [2:0] \$2y ;
  wire \$31y ;
  wire \$33y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$3y ;
  wire [2:0] \$40y ;
  wire \$45y ;
  wire \$47y ;
  wire \$48y ;
  wire \$49y ;
  wire \$50y ;
  wire [2:0] \$54y ;
  wire \$5y ;
  wire \$6y ;
  wire \$7y ;
  wire \$8y ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$16 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$30 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$44 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$15 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$29 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$43 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$14 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$28 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$42 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:77.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:79.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:98.31" *)
  input config_ongoing_i;
  wire config_ongoing_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:85.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:83.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:95.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:89.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:81.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  assign \$1y  = ~ (* src = "rtl/common_cells/addr_decode_dync.sv:107.21-107.53" *) en_default_idx_i;
  assign \$10y  = ~ (* src = "rtl/common_cells/addr_decode_dync.sv:118.28-118.45" *) config_ongoing_i;
  assign \$12y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[66:64];
  assign \$17y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[159:128];
  assign \$19y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[127:96];
  assign \$2y  = en_default_idx_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:108.21-108.60" *) default_idx_i : 3'h0;
  assign \$20y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[127:96];
  assign \$21y  = \$19y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$20y ;
  assign \$22y  = \$17y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$21y ;
  assign \$26y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[162:160];
  assign \$3y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[63:32];
  assign \$31y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[255:224];
  assign \$33y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[223:192];
  assign \$34y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[223:192];
  assign \$35y  = \$33y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$34y ;
  assign \$36y  = \$31y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$35y ;
  assign \$40y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[258:256];
  assign \$45y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[351:320];
  assign \$47y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[319:288];
  assign \$48y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[319:288];
  assign \$49y  = \$47y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$48y ;
  assign \$5y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[31:0];
  assign \$50y  = \$45y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$49y ;
  assign \$54y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[354:352];
  assign \$6y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[31:0];
  assign \$7y  = \$5y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$6y ;
  assign \$8y  = \$3y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$7y ;
  assign dec_error_o = \$50y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$44 ;
  assign dec_valid_o = \$50y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y  : \$dec_valid_o$43 ;
  assign idx_o = \$50y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$54y  : \$idx_o$42 ;
  assign \$dec_error_o$44  = \$36y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$30 ;
  assign \$dec_valid_o$43  = \$36y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y  : \$dec_valid_o$29 ;
  assign \$idx_o$42  = \$36y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$40y  : \$idx_o$28 ;
  assign \$dec_error_o$30  = \$22y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$16 ;
  assign \$dec_valid_o$29  = \$22y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y  : \$dec_valid_o$15 ;
  assign \$idx_o$28  = \$22y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$26y  : \$idx_o$14 ;
  assign \$dec_error_o$16  = \$8y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$1y ;
  assign \$dec_valid_o$15  = \$8y  & (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y ;
  assign \$idx_o$14  = \$8y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$12y  : \$2y ;
endmodule

(* src = "rtl/common_cells/addr_decode_dync.sv:40.8" *)
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10y ;
  wire [2:0] \$12y ;
  wire \$17y ;
  wire \$19y ;
  wire \$1y ;
  wire \$20y ;
  wire \$21y ;
  wire \$22y ;
  wire [2:0] \$26y ;
  wire [2:0] \$2y ;
  wire \$31y ;
  wire \$33y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$3y ;
  wire [2:0] \$40y ;
  wire \$45y ;
  wire \$47y ;
  wire \$48y ;
  wire \$49y ;
  wire \$50y ;
  wire [2:0] \$54y ;
  wire \$5y ;
  wire \$6y ;
  wire \$7y ;
  wire \$8y ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$16 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$30 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$44 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$15 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$29 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$43 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$14 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$28 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$42 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:77.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:79.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:98.31" *)
  input config_ongoing_i;
  wire config_ongoing_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:85.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:83.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:95.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:89.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:81.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  assign \$1y  = ~ (* src = "rtl/common_cells/addr_decode_dync.sv:107.21-107.53" *) en_default_idx_i;
  assign \$10y  = ~ (* src = "rtl/common_cells/addr_decode_dync.sv:118.28-118.45" *) config_ongoing_i;
  assign \$12y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[66:64];
  assign \$17y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[159:128];
  assign \$19y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[127:96];
  assign \$2y  = en_default_idx_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:108.21-108.60" *) default_idx_i : 3'h0;
  assign \$20y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[127:96];
  assign \$21y  = \$19y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$20y ;
  assign \$22y  = \$17y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$21y ;
  assign \$26y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[162:160];
  assign \$3y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[63:32];
  assign \$31y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[255:224];
  assign \$33y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[223:192];
  assign \$34y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[223:192];
  assign \$35y  = \$33y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$34y ;
  assign \$36y  = \$31y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$35y ;
  assign \$40y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[258:256];
  assign \$45y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[351:320];
  assign \$47y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[319:288];
  assign \$48y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[319:288];
  assign \$49y  = \$47y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$48y ;
  assign \$5y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[31:0];
  assign \$50y  = \$45y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$49y ;
  assign \$54y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[354:352];
  assign \$6y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[31:0];
  assign \$7y  = \$5y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$6y ;
  assign \$8y  = \$3y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$7y ;
  assign dec_error_o = \$50y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$44 ;
  assign dec_valid_o = \$50y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y  : \$dec_valid_o$43 ;
  assign idx_o = \$50y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$54y  : \$idx_o$42 ;
  assign \$dec_error_o$44  = \$36y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$30 ;
  assign \$dec_valid_o$43  = \$36y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y  : \$dec_valid_o$29 ;
  assign \$idx_o$42  = \$36y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$40y  : \$idx_o$28 ;
  assign \$dec_error_o$30  = \$22y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$16 ;
  assign \$dec_valid_o$29  = \$22y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y  : \$dec_valid_o$15 ;
  assign \$idx_o$28  = \$22y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$26y  : \$idx_o$14 ;
  assign \$dec_error_o$16  = \$8y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$1y ;
  assign \$dec_valid_o$15  = \$8y  & (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y ;
  assign \$idx_o$14  = \$8y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$12y  : \$2y ;
endmodule

(* src = "rtl/common_cells/addr_decode_dync.sv:40.8" *)
module \addr_decode_dync$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10y ;
  wire \$12y ;
  wire \$1y ;
  wire \$2y ;
  wire \$3y ;
  wire \$5y ;
  wire \$6y ;
  wire \$7y ;
  wire \$8y ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:77.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:79.31" *)
  input [95:0] addr_map_i;
  wire [95:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:98.31" *)
  input config_ongoing_i;
  wire config_ongoing_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:85.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:83.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:95.31" *)
  input default_idx_i;
  wire default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:89.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:81.31" *)
  output idx_o;
  wire idx_o;
  assign \$1y  = ~ (* src = "rtl/common_cells/addr_decode_dync.sv:107.21-107.53" *) en_default_idx_i;
  assign \$10y  = ~ (* src = "rtl/common_cells/addr_decode_dync.sv:118.28-118.45" *) config_ongoing_i;
  assign \$12y  = config_ongoing_i ? (* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" *) default_idx_i : addr_map_i[64];
  assign \$2y  = en_default_idx_i & (* src = "rtl/common_cells/addr_decode_dync.sv:108.21-108.60" *) default_idx_i;
  assign \$3y  = addr_i >= (* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" *) addr_map_i[63:32];
  assign \$5y  = addr_i < (* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" *) addr_map_i[31:0];
  assign \$6y  = ! (* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" *) addr_map_i[31:0];
  assign \$7y  = \$5y  || (* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" *) \$6y ;
  assign \$8y  = \$3y  && (* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" *) \$7y ;
  assign dec_error_o = \$8y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$1y ;
  assign dec_valid_o = \$8y  & (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$10y ;
  assign idx_o = \$8y  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$12y  : \$2y ;
endmodule

(* src = "rtl/apb_uart/apb_uart.sv:35.8" *)
module \apb_uart$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart (CLK, RSTN, PSEL, PENABLE, PWRITE, PADDR, PWDATA, PRDATA, PREADY, PSLVERR, INT, OUT1N, OUT2N, RTSN, DTRN, CTSN, DSRN, DCDN, RIN, SIN, SOUT
);
  wire \$100y ;
  wire \$102y ;
  wire \$105y ;
  wire \$113y ;
  wire \$115y ;
  wire \$116y ;
  wire \$118y ;
  wire \$119y ;
  wire \$120y ;
  wire [5:0] \$121y ;
  wire \$138y ;
  wire \$139y ;
  wire \$141y ;
  wire \$142y ;
  wire \$143y ;
  wire \$149y ;
  wire \$153y ;
  wire \$15y ;
  wire \$16y ;
  wire \$175y ;
  wire \$178y ;
  wire \$17y ;
  wire \$180y ;
  wire \$181y ;
  wire \$197y ;
  wire \$199y ;
  wire \$200y ;
  wire \$205y ;
  wire \$206y ;
  wire \$208y ;
  wire \$210y ;
  wire \$228y ;
  wire \$22y ;
  wire \$233y ;
  wire \$236y ;
  wire \$238y ;
  wire \$248y ;
  wire \$254y ;
  wire \$255y ;
  wire \$256y ;
  wire \$257y ;
  wire \$262y ;
  wire \$264y ;
  wire \$265y ;
  wire \$270y ;
  wire \$272y ;
  wire \$273y ;
  wire \$278y ;
  wire \$280y ;
  wire \$281y ;
  wire \$288y ;
  wire \$294y ;
  wire \$2y ;
  wire \$304y ;
  wire \$316y ;
  wire \$318y ;
  wire \$319y ;
  wire \$320y ;
  wire \$330y ;
  wire \$332y ;
  wire \$333y ;
  wire \$336y ;
  wire \$337y ;
  wire \$338y ;
  wire \$339y ;
  wire \$33y ;
  wire \$341y ;
  wire \$342y ;
  wire \$343y ;
  wire \$345y ;
  wire \$347y ;
  wire \$349y ;
  wire \$34y ;
  wire \$350y ;
  wire \$360y ;
  wire \$361y ;
  wire \$362y ;
  wire \$365y ;
  wire \$366y ;
  wire \$369y ;
  wire \$371y ;
  wire \$373y ;
  wire \$374y ;
  wire \$382y ;
  wire \$383y ;
  wire \$386y ;
  wire \$387y ;
  wire \$420y ;
  wire \$423y ;
  wire \$424y ;
  wire \$429y ;
  wire \$430y ;
  wire \$431y ;
  wire \$439y ;
  wire \$440y ;
  wire \$443y ;
  wire \$444y ;
  wire \$447y ;
  wire \$448y ;
  wire \$451y ;
  wire \$452y ;
  wire \$456y ;
  wire \$45y ;
  wire \$53y ;
  wire \$57y ;
  wire \$61y ;
  wire \$65y ;
  wire \$69y ;
  wire \$86y ;
  wire \$89y ;
  wire \$91y ;
  wire \$92y ;
  wire \$94y ;
  wire \$95y ;
  wire \$97y ;
  wire \$9y ;
  (* src = "rtl/apb_uart/apb_uart.sv:883.13-890.18" *)
  wire [7:0] \$PRDATA[7:0]$460 ;
  (* src = "rtl/apb_uart/apb_uart.sv:895.13-902.18" *)
  wire [7:0] \$PRDATA[7:0]$462 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13798 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13813 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13805 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13818 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13231 ;
  wire [6:0] \$auto$opt_share.cc:222:merge_operators$14972 ;
  wire \$auto$rtlil.cc:2957:Not$13804 ;
  wire [6:0] \$auto$rtlil.cc:3092:Mux$14974 ;
  (* src = "rtl/apb_uart/apb_uart.sv:847.8-850.13" *)
  wire \$iBAUDOUTN$437 ;
  (* src = "rtl/apb_uart/apb_uart.sv:344.18-347.18" *)
  wire \$iCharTimeout$127 ;
  (* src = "rtl/apb_uart/apb_uart.sv:340.13-347.18" *)
  wire \$iCharTimeout$128 ;
  (* src = "rtl/apb_uart/apb_uart.sv:338.8-352.13" *)
  wire \$iCharTimeout$129 ;
  (* src = "rtl/apb_uart/apb_uart.sv:370.8-389.13" *)
  wire \$iFCR_RXFIFOReset$156 ;
  (* src = "rtl/apb_uart/apb_uart.sv:370.8-389.13" *)
  wire \$iFCR_TXFIFOReset$157 ;
  (* src = "rtl/apb_uart/apb_uart.sv:495.8-509.13" *)
  wire [6:0] \$iFECounter$214 ;
  (* src = "rtl/apb_uart/apb_uart.sv:483.13-486.13" *)
  wire \$iLSR_BI$195 ;
  (* src = "rtl/apb_uart/apb_uart.sv:479.8-486.13" *)
  wire \$iLSR_BI$196 ;
  (* src = "rtl/apb_uart/apb_uart.sv:475.13-478.13" *)
  wire \$iLSR_FE$191 ;
  (* src = "rtl/apb_uart/apb_uart.sv:471.8-478.13" *)
  wire \$iLSR_FE$192 ;
  (* src = "rtl/apb_uart/apb_uart.sv:491.13-494.13" *)
  wire \$iLSR_FIFOERR$201 ;
  (* src = "rtl/apb_uart/apb_uart.sv:487.8-494.13" *)
  wire \$iLSR_FIFOERR$202 ;
  (* src = "rtl/apb_uart/apb_uart.sv:459.13-462.13" *)
  wire \$iLSR_OE$183 ;
  (* src = "rtl/apb_uart/apb_uart.sv:455.8-462.13" *)
  wire \$iLSR_OE$184 ;
  (* src = "rtl/apb_uart/apb_uart.sv:467.13-470.13" *)
  wire \$iLSR_PE$187 ;
  (* src = "rtl/apb_uart/apb_uart.sv:463.8-470.13" *)
  wire \$iLSR_PE$188 ;
  (* src = "rtl/apb_uart/apb_uart.sv:591.13-594.13" *)
  wire \$iMSR_TERI$300 ;
  (* src = "rtl/apb_uart/apb_uart.sv:587.8-594.13" *)
  wire \$iMSR_TERI$301 ;
  (* src = "rtl/apb_uart/apb_uart.sv:575.13-578.13" *)
  wire \$iMSR_dCTS$290 ;
  (* src = "rtl/apb_uart/apb_uart.sv:571.8-578.13" *)
  wire \$iMSR_dCTS$291 ;
  (* src = "rtl/apb_uart/apb_uart.sv:599.13-602.13" *)
  wire \$iMSR_dDCD$306 ;
  (* src = "rtl/apb_uart/apb_uart.sv:595.8-602.13" *)
  wire \$iMSR_dDCD$307 ;
  (* src = "rtl/apb_uart/apb_uart.sv:583.13-586.13" *)
  wire \$iMSR_dDSR$296 ;
  (* src = "rtl/apb_uart/apb_uart.sv:579.8-586.13" *)
  wire \$iMSR_dDSR$297 ;
  (* src = "rtl/apb_uart/apb_uart.sv:823.13-826.13" *)
  wire \$iRTS$432 ;
  (* src = "rtl/apb_uart/apb_uart.sv:819.8-826.13" *)
  wire \$iRTS$433 ;
  (* src = "rtl/apb_uart/apb_uart.sv:793.27-794.50" *)
  wire \$iRXFIFOClear$406 ;
  (* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43" *)
  wire \$iRXFIFOClear$407 ;
  (* src = "rtl/apb_uart/apb_uart.sv:787.13-809.21" *)
  wire \$iRXFIFOClear$414 ;
  (* src = "rtl/apb_uart/apb_uart.sv:804.27-805.45" *)
  wire \$iRXFIFOWrite$412 ;
  (* src = "rtl/apb_uart/apb_uart.sv:802.22-805.45" *)
  wire \$iRXFIFOWrite$413 ;
  (* src = "rtl/apb_uart/apb_uart.sv:787.13-809.21" *)
  wire \$iRXFIFOWrite$415 ;
  (* src = "rtl/apb_uart/apb_uart.sv:303.13-306.13" *)
  wire \$iTHRInterrupt$98 ;
  (* src = "rtl/apb_uart/apb_uart.sv:299.8-306.13" *)
  wire \$iTHRInterrupt$99 ;
  (* src = "rtl/apb_uart/apb_uart.sv:740.13-769.20" *)
  wire \$iTXFIFORead$398 ;
  (* src = "rtl/apb_uart/apb_uart.sv:740.13-769.20" *)
  wire \$iTXRunning$400 ;
  (* src = "rtl/apb_uart/apb_uart.sv:740.13-769.20" *)
  wire \$iTXStart$399 ;
  (* src = "rtl/apb_uart/apb_uart.sv:329.8-337.13" *)
  wire [5:0] \$iTimeoutCount$123 ;
  wire \$procmux$11175_Y ;
  wire [1:0] \$procmux$11225_Y ;
  wire \$procmux$11226_CMP ;
  wire \$procmux$11231_CMP ;
  (* src = "rtl/apb_uart/apb_uart.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/apb_uart.sv:51.14" *)
  input CTSN;
  wire CTSN;
  (* src = "rtl/apb_uart/apb_uart.sv:53.14" *)
  input DCDN;
  wire DCDN;
  (* src = "rtl/apb_uart/apb_uart.sv:52.14" *)
  input DSRN;
  wire DSRN;
  (* src = "rtl/apb_uart/apb_uart.sv:50.16" *)
  output DTRN;
  reg DTRN;
  (* src = "rtl/apb_uart/apb_uart.sv:46.16" *)
  output INT;
  wire INT;
  (* src = "rtl/apb_uart/apb_uart.sv:47.16" *)
  output OUT1N;
  reg OUT1N;
  (* src = "rtl/apb_uart/apb_uart.sv:48.16" *)
  output OUT2N;
  reg OUT2N;
  (* src = "rtl/apb_uart/apb_uart.sv:41.20" *)
  input [2:0] PADDR;
  wire [2:0] PADDR;
  (* src = "rtl/apb_uart/apb_uart.sv:39.14" *)
  input PENABLE;
  wire PENABLE;
  (* src = "rtl/apb_uart/apb_uart.sv:43.23" *)
  output [31:0] PRDATA;
  wire [31:0] PRDATA;
  (* src = "rtl/apb_uart/apb_uart.sv:44.16" *)
  output PREADY;
  wire PREADY;
  (* src = "rtl/apb_uart/apb_uart.sv:38.14" *)
  input PSEL;
  wire PSEL;
  (* src = "rtl/apb_uart/apb_uart.sv:45.16" *)
  output PSLVERR;
  wire PSLVERR;
  (* src = "rtl/apb_uart/apb_uart.sv:42.21" *)
  input [31:0] PWDATA;
  wire [31:0] PWDATA;
  (* src = "rtl/apb_uart/apb_uart.sv:40.14" *)
  input PWRITE;
  wire PWRITE;
  (* src = "rtl/apb_uart/apb_uart.sv:54.14" *)
  input RIN;
  wire RIN;
  (* src = "rtl/apb_uart/apb_uart.sv:37.14" *)
  input RSTN;
  wire RSTN;
  (* src = "rtl/apb_uart/apb_uart.sv:49.16" *)
  output RTSN;
  reg RTSN;
  (* src = "rtl/apb_uart/apb_uart.sv:55.14" *)
  input SIN;
  wire SIN;
  (* src = "rtl/apb_uart/apb_uart.sv:56.16" *)
  output SOUT;
  reg SOUT;
  (* src = "rtl/apb_uart/apb_uart.sv:157.5" *)
  reg iBAUDOUTN;
  (* src = "rtl/apb_uart/apb_uart.sv:198.5" *)
  wire iBIRE;
  (* src = "rtl/apb_uart/apb_uart.sv:154.5" *)
  wire iBaudtick16x;
  (* src = "rtl/apb_uart/apb_uart.sv:155.5" *)
  wire iBaudtick2x;
  (* src = "rtl/apb_uart/apb_uart.sv:137.5" *)
  wire iCTSNs;
  (* src = "rtl/apb_uart/apb_uart.sv:141.5" *)
  wire iCTSn;
  (* src = "rtl/apb_uart/apb_uart.sv:146.5" *)
  wire iCTSnFE;
  (* src = "rtl/apb_uart/apb_uart.sv:145.5" *)
  wire iCTSnRE;
  (* src = "rtl/apb_uart/apb_uart.sv:204.5" *)
  reg iCharTimeout;
  (* src = "rtl/apb_uart/apb_uart.sv:139.5" *)
  wire iDCDNs;
  (* src = "rtl/apb_uart/apb_uart.sv:143.5" *)
  wire iDCDn;
  (* src = "rtl/apb_uart/apb_uart.sv:150.5" *)
  wire iDCDnFE;
  (* src = "rtl/apb_uart/apb_uart.sv:149.5" *)
  wire iDCDnRE;
  (* src = "rtl/apb_uart/apb_uart.sv:83.11" *)
  reg [7:0] iDLL;
  (* src = "rtl/apb_uart/apb_uart.sv:71.5" *)
  wire iDLLWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:84.11" *)
  reg [7:0] iDLM;
  (* src = "rtl/apb_uart/apb_uart.sv:72.5" *)
  wire iDLMWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:138.5" *)
  wire iDSRNs;
  (* src = "rtl/apb_uart/apb_uart.sv:142.5" *)
  wire iDSRn;
  (* src = "rtl/apb_uart/apb_uart.sv:148.5" *)
  wire iDSRnFE;
  (* src = "rtl/apb_uart/apb_uart.sv:147.5" *)
  wire iDSRnRE;
  (* src = "rtl/apb_uart/apb_uart.sv:75.5" *)
  wire iFCRWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:106.5" *)
  reg iFCR_FIFO64E;
  (* src = "rtl/apb_uart/apb_uart.sv:102.5" *)
  reg iFCR_FIFOEnable;
  (* src = "rtl/apb_uart/apb_uart.sv:103.5" *)
  reg iFCR_RXFIFOReset;
  (* src = "rtl/apb_uart/apb_uart.sv:107.11" *)
  reg [1:0] iFCR_RXTrigger;
  (* src = "rtl/apb_uart/apb_uart.sv:104.5" *)
  reg iFCR_TXFIFOReset;
  (* src = "rtl/apb_uart/apb_uart.sv:199.11" *)
  reg [6:0] iFECounter;
  (* src = "rtl/apb_uart/apb_uart.sv:201.5" *)
  wire iFEDecrement;
  (* src = "rtl/apb_uart/apb_uart.sv:200.5" *)
  wire iFEIncrement;
  (* src = "rtl/apb_uart/apb_uart.sv:196.5" *)
  wire iFERE;
  (* src = "rtl/apb_uart/apb_uart.sv:85.11" *)
  wire [7:0] iIER;
  (* src = "rtl/apb_uart/apb_uart.sv:73.5" *)
  wire iIERWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:86.11" *)
  wire [7:0] iIIR;
  (* src = "rtl/apb_uart/apb_uart.sv:74.5" *)
  wire iIIRRead;
  (* src = "rtl/apb_uart/apb_uart.sv:101.5" *)
  wire iIIR_FIFO64;
  (* src = "rtl/apb_uart/apb_uart.sv:88.11" *)
  reg [7:0] iLCR;
  (* src = "rtl/apb_uart/apb_uart.sv:76.5" *)
  wire iLCRWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:90.11" *)
  wire [7:0] iLSR;
  (* src = "rtl/apb_uart/apb_uart.sv:78.5" *)
  wire iLSRRead;
  (* src = "rtl/apb_uart/apb_uart.sv:125.5" *)
  reg iLSR_BI;
  (* src = "rtl/apb_uart/apb_uart.sv:121.5" *)
  wire iLSR_DR;
  (* src = "rtl/apb_uart/apb_uart.sv:124.5" *)
  reg iLSR_FE;
  (* src = "rtl/apb_uart/apb_uart.sv:128.5" *)
  reg iLSR_FIFOERR;
  (* src = "rtl/apb_uart/apb_uart.sv:122.5" *)
  reg iLSR_OE;
  (* src = "rtl/apb_uart/apb_uart.sv:123.5" *)
  reg iLSR_PE;
  (* src = "rtl/apb_uart/apb_uart.sv:127.5" *)
  wire iLSR_TEMT;
  (* src = "rtl/apb_uart/apb_uart.sv:126.5" *)
  wire iLSR_THRE;
  (* src = "rtl/apb_uart/apb_uart.sv:205.5" *)
  wire iLSR_THRERE;
  (* src = "rtl/apb_uart/apb_uart.sv:89.11" *)
  wire [7:0] iMCR;
  (* src = "rtl/apb_uart/apb_uart.sv:77.5" *)
  wire iMCRWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:79.5" *)
  wire iMSRRead;
  (* src = "rtl/apb_uart/apb_uart.sv:133.5" *)
  wire iMSR_CTS;
  (* src = "rtl/apb_uart/apb_uart.sv:136.5" *)
  wire iMSR_DCD;
  (* src = "rtl/apb_uart/apb_uart.sv:134.5" *)
  wire iMSR_DSR;
  (* src = "rtl/apb_uart/apb_uart.sv:135.5" *)
  wire iMSR_RI;
  (* src = "rtl/apb_uart/apb_uart.sv:131.5" *)
  reg iMSR_TERI;
  (* src = "rtl/apb_uart/apb_uart.sv:129.5" *)
  reg iMSR_dCTS;
  (* src = "rtl/apb_uart/apb_uart.sv:132.5" *)
  reg iMSR_dDCD;
  (* src = "rtl/apb_uart/apb_uart.sv:130.5" *)
  reg iMSR_dDSR;
  (* src = "rtl/apb_uart/apb_uart.sv:197.5" *)
  wire iPERE;
  (* src = "rtl/apb_uart/apb_uart.sv:69.5" *)
  wire iRBRRead;
  (* src = "rtl/apb_uart/apb_uart.sv:156.5" *)
  wire iRCLK;
  (* src = "rtl/apb_uart/apb_uart.sv:202.5" *)
  wire iRDAInterrupt;
  (* src = "rtl/apb_uart/apb_uart.sv:140.5" *)
  wire iRINs;
  (* src = "rtl/apb_uart/apb_uart.sv:144.5" *)
  wire iRIn;
  (* src = "rtl/apb_uart/apb_uart.sv:152.5" *)
  wire iRInFE;
  (* src = "rtl/apb_uart/apb_uart.sv:151.5" *)
  (* unused_bits = "0" *)
  wire iRInRE;
  (* src = "rtl/apb_uart/apb_uart.sv:68.5" *)
  wire iRST;
  (* src = "rtl/apb_uart/apb_uart.sv:208.5" *)
  reg iRTS;
  (* src = "rtl/apb_uart/apb_uart.sv:195.5" *)
  wire iRXBI;
  (* src = "rtl/apb_uart/apb_uart.sv:192.11" *)
  wire [7:0] iRXData;
  (* src = "rtl/apb_uart/apb_uart.sv:194.5" *)
  wire iRXFE;
  (* src = "rtl/apb_uart/apb_uart.sv:178.5" *)
  wire iRXFIFO16Trigger;
  (* src = "rtl/apb_uart/apb_uart.sv:173.5" *)
  wire iRXFIFO64Full;
  (* src = "rtl/apb_uart/apb_uart.sv:179.5" *)
  wire iRXFIFO64Trigger;
  (* src = "rtl/apb_uart/apb_uart.sv:182.5" *)
  wire iRXFIFOBI;
  (* src = "rtl/apb_uart/apb_uart.sv:167.5" *)
  reg iRXFIFOClear;
  (* src = "rtl/apb_uart/apb_uart.sv:174.12" *)
  reg [10:0] iRXFIFOD;
  (* src = "rtl/apb_uart/apb_uart.sv:170.5" *)
  wire iRXFIFOEmpty;
  (* src = "rtl/apb_uart/apb_uart.sv:181.5" *)
  wire iRXFIFOFE;
  (* src = "rtl/apb_uart/apb_uart.sv:171.5" *)
  wire iRXFIFOFull;
  (* src = "rtl/apb_uart/apb_uart.sv:180.5" *)
  wire iRXFIFOPE;
  (* src = "rtl/apb_uart/apb_uart.sv:175.12" *)
  wire [10:0] iRXFIFOQ;
  (* src = "rtl/apb_uart/apb_uart.sv:177.5" *)
  wire iRXFIFOTrigger;
  (* src = "rtl/apb_uart/apb_uart.sv:176.11" *)
  (* unused_bits = "0" *)
  wire [5:0] iRXFIFOUsage;
  (* src = "rtl/apb_uart/apb_uart.sv:168.5" *)
  reg iRXFIFOWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:190.5" *)
  wire iRXFinished;
  (* src = "rtl/apb_uart/apb_uart.sv:193.5" *)
  wire iRXPE;
  (* src = "rtl/apb_uart/apb_uart.sv:67.5" *)
  wire iRead;
  (* src = "rtl/apb_uart/apb_uart.sv:92.11" *)
  reg [7:0] iSCR;
  (* src = "rtl/apb_uart/apb_uart.sv:80.5" *)
  wire iSCRWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:189.5" *)
  wire iSIN;
  (* src = "rtl/apb_uart/apb_uart.sv:188.5" *)
  wire iSINr;
  (* src = "rtl/apb_uart/apb_uart.sv:183.5" *)
  wire iSOUT;
  (* src = "rtl/apb_uart/apb_uart.sv:206.5" *)
  reg iTHRInterrupt;
  (* src = "rtl/apb_uart/apb_uart.sv:70.5" *)
  wire iTHRWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:81.11" *)
  reg [7:0] iTSR;
  (* src = "rtl/apb_uart/apb_uart.sv:207.5" *)
  wire iTXEnable;
  (* src = "rtl/apb_uart/apb_uart.sv:164.5" *)
  wire iTXFIFO64Full;
  (* src = "rtl/apb_uart/apb_uart.sv:162.5" *)
  wire iTXFIFOFull;
  (* src = "rtl/apb_uart/apb_uart.sv:166.11" *)
  wire [7:0] iTXFIFOQ;
  (* src = "rtl/apb_uart/apb_uart.sv:160.5" *)
  reg iTXFIFORead;
  (* src = "rtl/apb_uart/apb_uart.sv:165.11" *)
  (* unused_bits = "0 1 2 3 5" *)
  wire [5:0] iTXFIFOUsage;
  (* src = "rtl/apb_uart/apb_uart.sv:159.5" *)
  wire iTXFIFOWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:186.5" *)
  wire iTXFinished;
  (* src = "rtl/apb_uart/apb_uart.sv:187.5" *)
  reg iTXRunning;
  (* src = "rtl/apb_uart/apb_uart.sv:184.5" *)
  reg iTXStart;
  (* src = "rtl/apb_uart/apb_uart.sv:203.11" *)
  reg [5:0] iTimeoutCount;
  (* src = "rtl/apb_uart/apb_uart.sv:66.5" *)
  wire iWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:720.18" *)
  reg rx_State;
  (* src = "rtl/apb_uart/apb_uart.sv:721.18" *)
  reg [1:0] tx_State;
  assign iRead = \$2y  && (* src = "rtl/apb_uart/apb_uart.sv:210.24-210.78" *) \$9y ;
  assign \$100y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:309.33-309.57" *) iFCR_FIFOEnable;
  assign \$102y  = \$100y  && (* src = "rtl/apb_uart/apb_uart.sv:309.33-309.77" *) iLSR_DR;
  assign \$105y  = iFCR_FIFOEnable && (* src = "rtl/apb_uart/apb_uart.sv:309.82-309.133" *) iRXFIFOTrigger;
  assign iRDAInterrupt = \$102y  | (* src = "rtl/apb_uart/apb_uart.sv:309.32-309.134" *) \$105y ;
  assign iIIR_FIFO64 = iFCR_FIFOEnable & (* src = "rtl/apb_uart/apb_uart.sv:316.18-316.55" *) iFCR_FIFO64E;
  assign \$113y  = iRXFIFOEmpty | (* src = "rtl/apb_uart/apb_uart.sv:329.14-329.55" *) iRBRRead;
  assign \$115y  = \$113y  | (* src = "rtl/apb_uart/apb_uart.sv:329.13-329.80" *) iRXFIFOWrite;
  assign \$116y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:334.23-334.44" *) iRXFIFOEmpty;
  assign \$118y  = \$116y  && (* src = "rtl/apb_uart/apb_uart.sv:334.23-334.68" *) iBaudtick2x;
  assign \$119y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:334.73-334.98" *) iTimeoutCount[5];
  assign \$120y  = \$118y  && (* src = "rtl/apb_uart/apb_uart.sv:334.22-334.98" *) \$119y ;
  assign \$121y  = iTimeoutCount + (* src = "rtl/apb_uart/apb_uart.sv:336.30-336.47" *) 1'h1;
  assign iRST = ~ (* src = "rtl/apb_uart/apb_uart.sv:211.23-211.53" *) RSTN;
  assign \$138y  = \$100y  && (* src = "rtl/apb_uart/apb_uart.sv:380.41-380.87" *) PWDATA[0];
  assign \$139y  = PWDATA[1] | (* src = "rtl/apb_uart/apb_uart.sv:380.19-380.88" *) \$138y ;
  assign \$141y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:380.121-380.139" *) PWDATA[0];
  assign \$142y  = iFCR_FIFOEnable && (* src = "rtl/apb_uart/apb_uart.sv:380.93-380.139" *) \$141y ;
  assign \$143y  = \$139y  | (* src = "rtl/apb_uart/apb_uart.sv:380.18-380.140" *) \$142y ;
  assign \$149y  = PWDATA[2] | (* src = "rtl/apb_uart/apb_uart.sv:385.19-385.88" *) \$138y ;
  assign \$15y  = ! (* src = "rtl/apb_uart/apb_uart.sv:212.46-212.61" *) PADDR;
  assign \$153y  = \$149y  | (* src = "rtl/apb_uart/apb_uart.sv:385.18-385.140" *) \$142y ;
  assign \$16y  = iRead && (* src = "rtl/apb_uart/apb_uart.sv:212.28-212.61" *) \$15y ;
  assign \$17y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:212.66-212.84" *) iLCR[7];
  assign \$175y  = \$102y  && (* src = "rtl/apb_uart/apb_uart.sv:455.14-455.84" *) iRXFinished;
  assign \$178y  = iFCR_FIFOEnable && (* src = "rtl/apb_uart/apb_uart.sv:455.90-455.138" *) iRXFIFOFull;
  assign iRBRRead = \$16y  && (* src = "rtl/apb_uart/apb_uart.sv:212.27-212.84" *) \$17y ;
  assign \$180y  = \$178y  && (* src = "rtl/apb_uart/apb_uart.sv:455.89-455.163" *) iRXFinished;
  assign \$181y  = \$175y  | (* src = "rtl/apb_uart/apb_uart.sv:455.13-455.164" *) \$180y ;
  assign \$197y  = | (* src = "rtl/apb_uart/apb_uart.sv:487.13-487.28" *) iFECounter;
  assign \$199y  = ! (* src = "rtl/apb_uart/apb_uart.sv:491.46-491.71" *) iRXFIFOQ[10:8];
  assign \$2y  = PSEL && (* src = "rtl/apb_uart/apb_uart.sv:209.26-209.59" *) PENABLE;
  assign \$200y  = iRXFIFOEmpty | (* src = "rtl/apb_uart/apb_uart.sv:491.22-491.71" *) \$199y ;
  assign \$205y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:501.43-501.64" *) iFEDecrement;
  assign \$206y  = iFEIncrement && (* src = "rtl/apb_uart/apb_uart.sv:501.18-501.64" *) \$205y ;
  assign \$auto$opt_share.cc:222:merge_operators$14972  = iFECounter + (* src = "rtl/apb_uart/apb_uart.sv:503.32-503.46" *) { \$auto$rtlil.cc:3092:Mux$14974 [6], \$auto$rtlil.cc:3092:Mux$14974 [6], \$auto$rtlil.cc:3092:Mux$14974 [6], \$auto$rtlil.cc:3092:Mux$14974 [6], \$auto$rtlil.cc:3092:Mux$14974 [6], \$auto$rtlil.cc:3092:Mux$14974 [6], 1'h1 };
  assign \$208y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:505.31-505.52" *) iFEIncrement;
  assign \$210y  = \$208y  && (* src = "rtl/apb_uart/apb_uart.sv:505.31-505.77" *) iFEDecrement;
  assign iRXFIFOPE = \$116y  && (* src = "rtl/apb_uart/apb_uart.sv:512.28-512.73" *) iRXFIFOQ[8];
  assign \$22y  = iWrite && (* src = "rtl/apb_uart/apb_uart.sv:213.29-213.63" *) \$15y ;
  assign iRXFIFOFE = \$116y  && (* src = "rtl/apb_uart/apb_uart.sv:513.28-513.73" *) iRXFIFOQ[9];
  assign iRXFIFOBI = \$116y  && (* src = "rtl/apb_uart/apb_uart.sv:514.28-514.74" *) iRXFIFOQ[10];
  assign \$228y  = | (* src = "rtl/apb_uart/apb_uart.sv:518.56-518.81" *) iRXFIFOD[10:8];
  assign iFEIncrement = iRXFIFOWrite && (* src = "rtl/apb_uart/apb_uart.sv:518.31-518.81" *) \$228y ;
  assign \$233y  = \$197y  && (* src = "rtl/apb_uart/apb_uart.sv:519.32-519.72" *) \$116y ;
  assign \$236y  = iPERE | (* src = "rtl/apb_uart/apb_uart.sv:519.79-519.110" *) iFERE;
  assign \$238y  = \$236y  | (* src = "rtl/apb_uart/apb_uart.sv:519.78-519.128" *) iBIRE;
  assign iFEDecrement = \$233y  && (* src = "rtl/apb_uart/apb_uart.sv:519.31-519.129" *) \$238y ;
  assign iTHRWrite = \$22y  && (* src = "rtl/apb_uart/apb_uart.sv:213.28-213.86" *) \$17y ;
  assign iLSR[7] = iFCR_FIFOEnable && (* src = "rtl/apb_uart/apb_uart.sv:527.30-527.61" *) iLSR_FIFOERR;
  assign iLSR_DR = \$116y  | (* src = "rtl/apb_uart/apb_uart.sv:529.26-529.71" *) iRXFIFOWrite;
  assign \$248y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:531.28-531.47" *) iTXRunning;
  assign iLSR_TEMT = \$248y  && (* src = "rtl/apb_uart/apb_uart.sv:531.28-531.69" *) iLSR_THRE;
  assign \$254y  = iMCR[4] && (* src = "rtl/apb_uart/apb_uart.sv:532.28-532.63" *) iRTS;
  assign \$255y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:532.68-532.86" *) iMCR[4];
  assign \$256y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:532.90-532.104" *) iCTSn;
  assign \$257y  = \$255y  && (* src = "rtl/apb_uart/apb_uart.sv:532.68-532.104" *) \$256y ;
  assign iMSR_CTS = \$254y  | (* src = "rtl/apb_uart/apb_uart.sv:532.27-532.105" *) \$257y ;
  assign \$262y  = iMCR[4] && (* src = "rtl/apb_uart/apb_uart.sv:533.28-533.67" *) iMCR[0];
  assign \$264y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:533.94-533.108" *) iDSRn;
  assign \$265y  = \$255y  && (* src = "rtl/apb_uart/apb_uart.sv:533.72-533.108" *) \$264y ;
  assign iMSR_DSR = \$262y  | (* src = "rtl/apb_uart/apb_uart.sv:533.27-533.109" *) \$265y ;
  assign \$270y  = iMCR[4] && (* src = "rtl/apb_uart/apb_uart.sv:534.27-534.67" *) iMCR[2];
  assign \$272y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:534.94-534.107" *) iRIn;
  assign \$273y  = \$255y  && (* src = "rtl/apb_uart/apb_uart.sv:534.72-534.107" *) \$272y ;
  assign iMSR_RI = \$270y  | (* src = "rtl/apb_uart/apb_uart.sv:534.26-534.108" *) \$273y ;
  assign \$278y  = iMCR[4] && (* src = "rtl/apb_uart/apb_uart.sv:535.28-535.68" *) iMCR[3];
  assign \$280y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:535.95-535.109" *) iDCDn;
  assign \$281y  = \$255y  && (* src = "rtl/apb_uart/apb_uart.sv:535.73-535.109" *) \$280y ;
  assign iMSR_DCD = \$278y  | (* src = "rtl/apb_uart/apb_uart.sv:535.27-535.110" *) \$281y ;
  assign \$288y  = iCTSnRE | (* src = "rtl/apb_uart/apb_uart.sv:571.13-571.48" *) iCTSnFE;
  assign \$294y  = iDSRnRE | (* src = "rtl/apb_uart/apb_uart.sv:579.13-579.48" *) iDSRnFE;
  assign iDLLWrite = \$22y  && (* src = "rtl/apb_uart/apb_uart.sv:214.28-214.86" *) iLCR[7];
  assign \$304y  = iDCDnRE | (* src = "rtl/apb_uart/apb_uart.sv:595.13-595.48" *) iDCDnFE;
  assign iTXFIFOFull = iFCR_FIFO64E ? (* src = "rtl/apb_uart/apb_uart.sv:660.30-660.84" *) iTXFIFO64Full : iTXFIFOUsage[4];
  assign \$316y  = \$100y  && (* src = "rtl/apb_uart/apb_uart.sv:661.33-661.82" *) iLSR_THRE;
  assign \$318y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:661.115-661.135" *) iTXFIFOFull;
  assign \$319y  = iFCR_FIFOEnable && (* src = "rtl/apb_uart/apb_uart.sv:661.87-661.135" *) \$318y ;
  assign \$320y  = \$316y  | (* src = "rtl/apb_uart/apb_uart.sv:661.32-661.136" *) \$319y ;
  assign iTXFIFOWrite = \$320y  && (* src = "rtl/apb_uart/apb_uart.sv:661.31-661.159" *) iTHRWrite;
  assign iRXFIFOFull = iFCR_FIFO64E ? (* src = "rtl/apb_uart/apb_uart.sv:676.30-676.84" *) iRXFIFO64Full : iRXFIFOUsage[4];
  assign \$33y  = PADDR == (* src = "rtl/apb_uart/apb_uart.sv:215.48-215.63" *) 1'h1;
  assign \$330y  = ! (* src = "rtl/apb_uart/apb_uart.sv:678.39-678.62" *) iFCR_RXTrigger;
  assign \$332y  = \$330y  && (* src = "rtl/apb_uart/apb_uart.sv:678.39-678.87" *) \$116y ;
  assign \$333y  = iFCR_RXTrigger == (* src = "rtl/apb_uart/apb_uart.sv:678.92-678.115" *) 1'h1;
  assign \$336y  = iRXFIFOUsage[2] | (* src = "rtl/apb_uart/apb_uart.sv:678.120-678.171" *) iRXFIFOUsage[3];
  assign \$337y  = \$333y  && (* src = "rtl/apb_uart/apb_uart.sv:678.92-678.172" *) \$336y ;
  assign \$338y  = \$332y  | (* src = "rtl/apb_uart/apb_uart.sv:678.38-678.173" *) \$337y ;
  assign \$339y  = iFCR_RXTrigger == (* src = "rtl/apb_uart/apb_uart.sv:678.178-678.201" *) 2'h2;
  assign \$34y  = iWrite && (* src = "rtl/apb_uart/apb_uart.sv:215.29-215.63" *) \$33y ;
  assign \$341y  = \$339y  && (* src = "rtl/apb_uart/apb_uart.sv:678.178-678.229" *) iRXFIFOUsage[3];
  assign \$342y  = \$338y  | (* src = "rtl/apb_uart/apb_uart.sv:678.37-678.230" *) \$341y ;
  assign \$343y  = iFCR_RXTrigger == (* src = "rtl/apb_uart/apb_uart.sv:678.237-678.260" *) 2'h3;
  assign \$345y  = \$343y  && (* src = "rtl/apb_uart/apb_uart.sv:678.237-678.288" *) iRXFIFOUsage[3];
  assign \$347y  = \$345y  && (* src = "rtl/apb_uart/apb_uart.sv:678.236-678.317" *) iRXFIFOUsage[2];
  assign \$349y  = \$347y  && (* src = "rtl/apb_uart/apb_uart.sv:678.235-678.346" *) iRXFIFOUsage[1];
  assign \$350y  = \$342y  | (* src = "rtl/apb_uart/apb_uart.sv:678.36-678.347" *) \$349y ;
  assign iRXFIFO16Trigger = \$350y  | (* src = "rtl/apb_uart/apb_uart.sv:678.35-678.373" *) iRXFIFOUsage[4];
  assign iDLMWrite = \$34y  && (* src = "rtl/apb_uart/apb_uart.sv:215.28-215.86" *) iLCR[7];
  assign \$360y  = iRXFIFOUsage[4] | (* src = "rtl/apb_uart/apb_uart.sv:679.120-679.171" *) iRXFIFOUsage[5];
  assign \$361y  = \$333y  && (* src = "rtl/apb_uart/apb_uart.sv:679.92-679.172" *) \$360y ;
  assign \$362y  = \$332y  | (* src = "rtl/apb_uart/apb_uart.sv:679.38-679.173" *) \$361y ;
  assign \$365y  = \$339y  && (* src = "rtl/apb_uart/apb_uart.sv:679.178-679.229" *) iRXFIFOUsage[5];
  assign \$366y  = \$362y  | (* src = "rtl/apb_uart/apb_uart.sv:679.37-679.230" *) \$365y ;
  assign \$369y  = \$343y  && (* src = "rtl/apb_uart/apb_uart.sv:679.237-679.288" *) iRXFIFOUsage[5];
  assign \$371y  = \$369y  && (* src = "rtl/apb_uart/apb_uart.sv:679.236-679.317" *) iRXFIFOUsage[4];
  assign \$373y  = \$371y  && (* src = "rtl/apb_uart/apb_uart.sv:679.235-679.346" *) iRXFIFOUsage[3];
  assign \$374y  = \$366y  | (* src = "rtl/apb_uart/apb_uart.sv:679.36-679.347" *) \$373y ;
  assign iRXFIFO64Trigger = \$374y  | (* src = "rtl/apb_uart/apb_uart.sv:679.35-679.373" *) iRXFIFO64Full;
  assign iRXFIFOTrigger = iFCR_FIFO64E ? (* src = "rtl/apb_uart/apb_uart.sv:680.33-680.93" *) iRXFIFO64Trigger : iRXFIFO16Trigger;
  assign iSIN = iMCR[4] ? (* src = "rtl/apb_uart/apb_uart.sv:714.23-714.58" *) iSOUT : iSINr;
  assign \$382y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:715.28-715.49" *) iLSR_THRE;
  assign \$383y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:715.54-715.71" *) iMCR[5];
  assign \$386y  = iMCR[5] && (* src = "rtl/apb_uart/apb_uart.sv:715.75-715.113" *) iMSR_CTS;
  assign \$387y  = \$383y  | (* src = "rtl/apb_uart/apb_uart.sv:715.54-715.114" *) \$386y ;
  assign iTXEnable = \$382y  && (* src = "rtl/apb_uart/apb_uart.sv:715.28-715.115" *) \$387y ;
  assign iWrite = \$2y  && (* src = "rtl/apb_uart/apb_uart.sv:209.25-209.79" *) PWRITE;
  assign iIERWrite = \$34y  && (* src = "rtl/apb_uart/apb_uart.sv:216.28-216.86" *) \$17y ;
  assign \$420y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:819.13-819.30" *) iMCR[1];
  assign \$423y  = iMCR[5] && (* src = "rtl/apb_uart/apb_uart.sv:819.34-819.78" *) iRXFIFOTrigger;
  assign \$424y  = \$420y  | (* src = "rtl/apb_uart/apb_uart.sv:819.13-819.79" *) \$423y ;
  assign \$429y  = iMCR[5] && (* src = "rtl/apb_uart/apb_uart.sv:823.65-823.107" *) iRXFIFOEmpty;
  assign \$430y  = \$383y  | (* src = "rtl/apb_uart/apb_uart.sv:823.44-823.108" *) \$429y ;
  assign \$431y  = iMCR[1] && (* src = "rtl/apb_uart/apb_uart.sv:823.22-823.109" *) \$430y ;
  assign \$439y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:852.34-852.52" *) iMCR[2];
  assign \$440y  = iMCR[4] | (* src = "rtl/apb_uart/apb_uart.sv:852.13-852.52" *) \$439y ;
  assign \$443y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:857.34-857.52" *) iMCR[3];
  assign \$444y  = iMCR[4] | (* src = "rtl/apb_uart/apb_uart.sv:857.13-857.52" *) \$443y ;
  assign \$447y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:862.34-862.47" *) iRTS;
  assign \$448y  = iMCR[4] | (* src = "rtl/apb_uart/apb_uart.sv:862.13-862.47" *) \$447y ;
  assign \$45y  = PADDR == (* src = "rtl/apb_uart/apb_uart.sv:217.45-217.60" *) 2'h2;
  assign \$451y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:867.34-867.51" *) iMCR[0];
  assign \$452y  = iMCR[4] | (* src = "rtl/apb_uart/apb_uart.sv:867.13-867.51" *) \$451y ;
  assign \$456y  = iMCR[4] | (* src = "rtl/apb_uart/apb_uart.sv:872.13-872.48" *) iSOUT;
  assign iIIRRead = iRead && (* src = "rtl/apb_uart/apb_uart.sv:217.27-217.60" *) \$45y ;
  assign iFCRWrite = iWrite && (* src = "rtl/apb_uart/apb_uart.sv:218.28-218.62" *) \$45y ;
  assign \$53y  = PADDR == (* src = "rtl/apb_uart/apb_uart.sv:219.47-219.62" *) 2'h3;
  assign iLCRWrite = iWrite && (* src = "rtl/apb_uart/apb_uart.sv:219.28-219.62" *) \$53y ;
  assign \$57y  = PADDR == (* src = "rtl/apb_uart/apb_uart.sv:220.47-220.62" *) 3'h4;
  assign iMCRWrite = iWrite && (* src = "rtl/apb_uart/apb_uart.sv:220.28-220.62" *) \$57y ;
  assign \$61y  = PADDR == (* src = "rtl/apb_uart/apb_uart.sv:221.45-221.60" *) 3'h5;
  assign iLSRRead = iRead && (* src = "rtl/apb_uart/apb_uart.sv:221.27-221.60" *) \$61y ;
  assign \$65y  = PADDR == (* src = "rtl/apb_uart/apb_uart.sv:222.45-222.60" *) 3'h6;
  assign iMSRRead = iRead && (* src = "rtl/apb_uart/apb_uart.sv:222.27-222.60" *) \$65y ;
  assign \$69y  = PADDR == (* src = "rtl/apb_uart/apb_uart.sv:223.47-223.62" *) 3'h7;
  assign iSCRWrite = iWrite && (* src = "rtl/apb_uart/apb_uart.sv:223.28-223.62" *) \$69y ;
  assign \$86y  = iLSR_THRERE | (* src = "rtl/apb_uart/apb_uart.sv:299.14-299.62" *) iFCR_TXFIFOReset;
  assign \$89y  = iIERWrite && (* src = "rtl/apb_uart/apb_uart.sv:299.68-299.108" *) PWDATA[1];
  assign \$9y  = ~ (* src = "rtl/apb_uart/apb_uart.sv:210.63-210.78" *) PWRITE;
  assign \$91y  = \$89y  && (* src = "rtl/apb_uart/apb_uart.sv:299.67-299.131" *) iLSR_THRE;
  assign \$92y  = \$86y  | (* src = "rtl/apb_uart/apb_uart.sv:299.13-299.132" *) \$91y ;
  assign \$94y  = iIIR[3:1] == (* src = "rtl/apb_uart/apb_uart.sv:303.44-303.64" *) 1'h1;
  assign \$95y  = iIIRRead && (* src = "rtl/apb_uart/apb_uart.sv:303.23-303.64" *) \$94y ;
  assign \$97y  = \$95y  | (* src = "rtl/apb_uart/apb_uart.sv:303.22-303.86" *) iTHRWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:320.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iTimeoutCount <= 6'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$13798 ) iTimeoutCount <= \$iTimeoutCount$123 ;
  (* src = "rtl/apb_uart/apb_uart.sv:724.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iTSR <= 8'h00;
    else if (\$iTXFIFORead$398 ) iTSR <= iTXFIFOQ;
  (* src = "rtl/apb_uart/apb_uart.sv:614.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iSCR <= 8'h00;
    else if (iSCRWrite) iSCR <= PWDATA[7:0];
  (* src = "rtl/apb_uart/apb_uart.sv:773.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iRXFIFOD <= 11'h000;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$13805 ) iRXFIFOD <= { iRXBI, iRXFE, iRXPE, iRXData };
  reg [5:0] \$auto$ff.cc:266:slice$13807 ;
  (* src = "rtl/apb_uart/apb_uart.sv:422.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) \$auto$ff.cc:266:slice$13807  <= 6'h00;
    else if (iMCRWrite) \$auto$ff.cc:266:slice$13807  <= PWDATA[5:0];
  assign iMCR[5:0] = \$auto$ff.cc:266:slice$13807 ;
  (* src = "rtl/apb_uart/apb_uart.sv:400.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iLCR <= 8'h00;
    else if (iLCRWrite) iLCR <= PWDATA[7:0];
  reg [3:0] \$auto$ff.cc:266:slice$13810 ;
  (* src = "rtl/apb_uart/apb_uart.sv:254.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) \$auto$ff.cc:266:slice$13810  <= 4'h0;
    else if (iIERWrite) \$auto$ff.cc:266:slice$13810  <= PWDATA[3:0];
  assign iIER[3:0] = \$auto$ff.cc:266:slice$13810 ;
  (* src = "rtl/apb_uart/apb_uart.sv:443.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iFECounter <= 7'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$13813 ) iFECounter <= \$iFECounter$214 ;
  (* src = "rtl/apb_uart/apb_uart.sv:355.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iFCR_RXTrigger <= 2'h0;
    else if (iFCRWrite) iFCR_RXTrigger <= PWDATA[7:6];
  (* src = "rtl/apb_uart/apb_uart.sv:355.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iFCR_FIFOEnable <= 1'h0;
    else if (iFCRWrite) iFCR_FIFOEnable <= PWDATA[0];
  (* src = "rtl/apb_uart/apb_uart.sv:355.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iFCR_FIFO64E <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$13818 ) iFCR_FIFO64E <= PWDATA[5];
  (* src = "rtl/apb_uart/apb_uart.sv:234.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iDLM <= 8'h00;
    else if (iDLMWrite) iDLM <= PWDATA[7:0];
  (* src = "rtl/apb_uart/apb_uart.sv:234.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iDLL <= 8'h01;
    else if (iDLLWrite) iDLL <= PWDATA[7:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13798  = | { \$120y , \$115y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13813  = | { iRXFIFOClear, \$206y , \$210y  };
  assign \$auto$rtlil.cc:2957:Not$13804  = ~ rx_State;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$13805  = & { \$auto$rtlil.cc:2957:Not$13804 , iRXFinished };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$13818  = & { iLCR[7], iFCRWrite };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13231  = | { \$iTXRunning$400 , \$iTXFIFORead$398  };
  assign \$auto$rtlil.cc:3092:Mux$14974 [6] = ~ \$206y ;
  (* src = "rtl/apb_uart/apb_uart.sv:829.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) DTRN <= 1'h1;
    else DTRN <= \$452y ;
  (* src = "rtl/apb_uart/apb_uart.sv:829.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) OUT1N <= 1'h1;
    else OUT1N <= \$440y ;
  (* src = "rtl/apb_uart/apb_uart.sv:829.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) OUT2N <= 1'h1;
    else OUT2N <= \$444y ;
  (* src = "rtl/apb_uart/apb_uart.sv:829.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) RTSN <= 1'h1;
    else RTSN <= \$448y ;
  (* src = "rtl/apb_uart/apb_uart.sv:829.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) SOUT <= 1'h1;
    else SOUT <= \$456y ;
  (* src = "rtl/apb_uart/apb_uart.sv:829.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iBAUDOUTN <= 1'h1;
    else iBAUDOUTN <= \$iBAUDOUTN$437 ;
  (* src = "rtl/apb_uart/apb_uart.sv:320.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iCharTimeout <= 1'h0;
    else iCharTimeout <= \$iCharTimeout$129 ;
  (* src = "rtl/apb_uart/apb_uart.sv:355.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iFCR_RXFIFOReset <= 1'h0;
    else iFCR_RXFIFOReset <= \$iFCR_RXFIFOReset$156 ;
  (* src = "rtl/apb_uart/apb_uart.sv:355.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iFCR_TXFIFOReset <= 1'h0;
    else iFCR_TXFIFOReset <= \$iFCR_TXFIFOReset$157 ;
  (* src = "rtl/apb_uart/apb_uart.sv:443.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iLSR_BI <= 1'h0;
    else iLSR_BI <= \$iLSR_BI$196 ;
  (* src = "rtl/apb_uart/apb_uart.sv:443.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iLSR_FE <= 1'h0;
    else iLSR_FE <= \$iLSR_FE$192 ;
  (* src = "rtl/apb_uart/apb_uart.sv:443.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iLSR_FIFOERR <= 1'h0;
    else iLSR_FIFOERR <= \$iLSR_FIFOERR$202 ;
  (* src = "rtl/apb_uart/apb_uart.sv:443.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iLSR_OE <= 1'h0;
    else iLSR_OE <= \$iLSR_OE$184 ;
  (* src = "rtl/apb_uart/apb_uart.sv:443.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iLSR_PE <= 1'h0;
    else iLSR_PE <= \$iLSR_PE$188 ;
  (* src = "rtl/apb_uart/apb_uart.sv:561.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iMSR_TERI <= 1'h0;
    else iMSR_TERI <= \$iMSR_TERI$301 ;
  (* src = "rtl/apb_uart/apb_uart.sv:561.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iMSR_dCTS <= 1'h0;
    else iMSR_dCTS <= \$iMSR_dCTS$291 ;
  (* src = "rtl/apb_uart/apb_uart.sv:561.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iMSR_dDCD <= 1'h0;
    else iMSR_dDCD <= \$iMSR_dDCD$307 ;
  (* src = "rtl/apb_uart/apb_uart.sv:561.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iMSR_dDSR <= 1'h0;
    else iMSR_dDSR <= \$iMSR_dDSR$297 ;
  (* src = "rtl/apb_uart/apb_uart.sv:812.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iRTS <= 1'h0;
    else iRTS <= \$iRTS$433 ;
  (* src = "rtl/apb_uart/apb_uart.sv:773.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iRXFIFOClear <= 1'h0;
    else iRXFIFOClear <= \$iRXFIFOClear$414 ;
  (* src = "rtl/apb_uart/apb_uart.sv:773.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iRXFIFOWrite <= 1'h0;
    else iRXFIFOWrite <= \$iRXFIFOWrite$415 ;
  (* src = "rtl/apb_uart/apb_uart.sv:292.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iTHRInterrupt <= 1'h0;
    else iTHRInterrupt <= \$iTHRInterrupt$99 ;
  (* src = "rtl/apb_uart/apb_uart.sv:724.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iTXFIFORead <= 1'h0;
    else iTXFIFORead <= \$iTXFIFORead$398 ;
  (* src = "rtl/apb_uart/apb_uart.sv:724.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iTXRunning <= 1'h0;
    else iTXRunning <= \$iTXRunning$400 ;
  (* src = "rtl/apb_uart/apb_uart.sv:724.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iTXStart <= 1'h0;
    else iTXStart <= \$iTXStart$399 ;
  (* src = "rtl/apb_uart/apb_uart.sv:773.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) rx_State <= 1'h0;
    else rx_State <= \$procmux$11175_Y ;
  (* src = "rtl/apb_uart/apb_uart.sv:724.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) tx_State <= 2'h0;
    else tx_State <= \$procmux$11225_Y ;
  assign \$PRDATA[7:0]$462  = iLCR[7] ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:897.18-897.38|rtl/apb_uart/apb_uart.sv:895.13-902.18" *) iDLM : { 4'h0, iIER[3:0] };
  function [7:0] \$procmux$11112 ;
    input [7:0] a;
    input [55:0] b;
    input [6:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/apb_uart/apb_uart.sv:932.13-932.33|rtl/apb_uart/apb_uart.sv:880.7-940.14" *)
    (* parallel_case *)
    casez (s)
      7'b??????1:
        \$procmux$11112  = b[7:0];
      7'b?????1?:
        \$procmux$11112  = b[15:8];
      7'b????1??:
        \$procmux$11112  = b[23:16];
      7'b???1???:
        \$procmux$11112  = b[31:24];
      7'b??1????:
        \$procmux$11112  = b[39:32];
      7'b?1?????:
        \$procmux$11112  = b[47:40];
      7'b1??????:
        \$procmux$11112  = b[55:48];
      default:
        \$procmux$11112  = a;
    endcase
  endfunction
  assign PRDATA[7:0] = \$procmux$11112 (\$PRDATA[7:0]$460 , { \$PRDATA[7:0]$462 , iFCR_FIFOEnable, iFCR_FIFOEnable, iIIR_FIFO64, 1'h0, iIIR[3:0], iLCR, 2'h0, iMCR[5:0], iLSR[7], iLSR_TEMT, iLSR_THRE, iLSR_BI, iLSR_FE, iLSR_PE, iLSR_OE, iLSR_DR, iMSR_DCD, iMSR_RI, iMSR_DSR, iMSR_CTS, iMSR_dDCD, iMSR_TERI, iMSR_dDSR, iMSR_dCTS, iSCR }, { \$33y , \$45y , \$53y , \$57y , \$61y , \$65y , \$69y  });
  assign \$PRDATA[7:0]$460  = iLCR[7] ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:885.18-885.38|rtl/apb_uart/apb_uart.sv:883.13-890.18" *) iDLL : iRXFIFOQ[7:0];
  assign \$iBAUDOUTN$437  = ~ (* src = "rtl/apb_uart/apb_uart.sv:849.13-849.32|rtl/apb_uart/apb_uart.sv:847.8-850.13" *) iBaudtick16x;
  assign \$iRTS$432  = iRTS | (* src = "rtl/apb_uart/apb_uart.sv:825.13-825.27|rtl/apb_uart/apb_uart.sv:823.13-826.13" *) \$431y ;
  assign \$iRTS$433  = \$424y  ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:821.13-821.27|rtl/apb_uart/apb_uart.sv:819.8-826.13" *) 1'h0 : \$iRTS$432 ;
  assign \$iRXFIFOWrite$412  = ~ (* src = "rtl/apb_uart/apb_uart.sv:805.24-805.45|rtl/apb_uart/apb_uart.sv:804.27-805.45" *) iRXFIFOFull;
  assign \$iRXFIFOWrite$413  = iFCR_FIFOEnable ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:803.24-803.45|rtl/apb_uart/apb_uart.sv:802.22-805.45" *) \$iRXFIFOWrite$412  : 1'h1;
  assign \$procmux$11175_Y  = rx_State ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:801.19-807.22|rtl/apb_uart/apb_uart.sv:787.13-809.21" *) 1'h0 : iRXFinished;
  assign \$iRXFIFOClear$406  = iFCR_FIFOEnable ? (* src = "rtl/apb_uart/apb_uart.sv:794.29-794.50|rtl/apb_uart/apb_uart.sv:793.27-794.50" *) iFCR_RXFIFOReset : 1'h1;
  assign \$iRXFIFOClear$407  = iRXFinished ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:791.24-796.27|rtl/apb_uart/apb_uart.sv:790.22-798.43" *) \$iRXFIFOClear$406  : iFCR_RXFIFOReset;
  assign \$iRXFIFOWrite$415  = rx_State & (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:801.19-807.22|rtl/apb_uart/apb_uart.sv:787.13-809.21" *) \$iRXFIFOWrite$413 ;
  assign \$iRXFIFOClear$414  = rx_State ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43|rtl/apb_uart/apb_uart.sv:787.13-809.21" *) iFCR_RXFIFOReset : \$iRXFIFOClear$407 ;
  assign \$iTXRunning$400  = tx_State == (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:759.19-766.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" *) 2'h2;
  function [1:0] \$procmux$11225 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/apb_uart/apb_uart.sv:767.31-767.50|rtl/apb_uart/apb_uart.sv:740.13-769.20" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$11225  = b[1:0];
      3'b?1?:
        \$procmux$11225  = b[3:2];
      3'b1??:
        \$procmux$11225  = b[5:4];
      default:
        \$procmux$11225  = a;
    endcase
  endfunction
  assign \$procmux$11225_Y  = \$procmux$11225 ({ 1'h0, iTXEnable }, { 3'h5, iTXFinished, 2'h0 }, { \$iTXFIFORead$398 , \$iTXRunning$400 , \$procmux$11226_CMP  });
  assign \$procmux$11226_CMP  = tx_State == (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:767.31-767.50|rtl/apb_uart/apb_uart.sv:740.13-769.20" *) 2'h3;
  assign \$iTXFIFORead$398  = tx_State == (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:752.19-757.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" *) 1'h1;
  assign \$procmux$11231_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:743.22-749.43|rtl/apb_uart/apb_uart.sv:740.13-769.20" *) tx_State;
  function [0:0] \$procmux$11254 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/apb_uart/apb_uart.sv:759.19-766.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11254  = b[0:0];
      2'b1?:
        \$procmux$11254  = b[1:1];
      default:
        \$procmux$11254  = a;
    endcase
  endfunction
  assign \$iTXStart$399  = \$procmux$11254 (1'h0, { iTXEnable, 1'h1 }, { \$procmux$11231_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13231  });
  assign \$iMSR_dDCD$306  = iMSRRead ? (* src = "rtl/apb_uart/apb_uart.sv:601.13-601.32|rtl/apb_uart/apb_uart.sv:599.13-602.13" *) 1'h0 : iMSR_dDCD;
  assign \$iMSR_dDCD$307  = \$iMSR_dDCD$306  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:597.13-597.32|rtl/apb_uart/apb_uart.sv:595.8-602.13" *) \$304y ;
  assign \$iMSR_TERI$300  = iMSRRead ? (* src = "rtl/apb_uart/apb_uart.sv:593.13-593.32|rtl/apb_uart/apb_uart.sv:591.13-594.13" *) 1'h0 : iMSR_TERI;
  assign \$iMSR_TERI$301  = \$iMSR_TERI$300  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:589.13-589.32|rtl/apb_uart/apb_uart.sv:587.8-594.13" *) iRInFE;
  assign \$iMSR_dDSR$296  = iMSRRead ? (* src = "rtl/apb_uart/apb_uart.sv:585.13-585.32|rtl/apb_uart/apb_uart.sv:583.13-586.13" *) 1'h0 : iMSR_dDSR;
  assign \$iMSR_dDSR$297  = \$iMSR_dDSR$296  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:581.13-581.32|rtl/apb_uart/apb_uart.sv:579.8-586.13" *) \$294y ;
  assign \$iMSR_dCTS$290  = iMSRRead ? (* src = "rtl/apb_uart/apb_uart.sv:577.13-577.32|rtl/apb_uart/apb_uart.sv:575.13-578.13" *) 1'h0 : iMSR_dCTS;
  assign \$iMSR_dCTS$291  = \$iMSR_dCTS$290  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:573.13-573.32|rtl/apb_uart/apb_uart.sv:571.8-578.13" *) \$288y ;
  assign \$iFECounter$214  = iRXFIFOClear ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:497.13-497.29|rtl/apb_uart/apb_uart.sv:495.8-509.13" *) 7'h00 : \$auto$opt_share.cc:222:merge_operators$14972 ;
  assign \$iLSR_FIFOERR$201  = \$200y  ? (* src = "rtl/apb_uart/apb_uart.sv:493.13-493.35|rtl/apb_uart/apb_uart.sv:491.13-494.13" *) 1'h0 : iLSR_FIFOERR;
  assign \$iLSR_FIFOERR$202  = \$iLSR_FIFOERR$201  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:489.13-489.35|rtl/apb_uart/apb_uart.sv:487.8-494.13" *) \$197y ;
  assign \$iLSR_BI$195  = iLSRRead ? (* src = "rtl/apb_uart/apb_uart.sv:485.13-485.30|rtl/apb_uart/apb_uart.sv:483.13-486.13" *) 1'h0 : iLSR_BI;
  assign \$iLSR_BI$196  = \$iLSR_BI$195  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:481.13-481.30|rtl/apb_uart/apb_uart.sv:479.8-486.13" *) iBIRE;
  assign \$iLSR_FE$191  = iLSRRead ? (* src = "rtl/apb_uart/apb_uart.sv:477.13-477.30|rtl/apb_uart/apb_uart.sv:475.13-478.13" *) 1'h0 : iLSR_FE;
  assign \$iLSR_FE$192  = \$iLSR_FE$191  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:473.13-473.30|rtl/apb_uart/apb_uart.sv:471.8-478.13" *) iFERE;
  assign \$iLSR_PE$187  = iLSRRead ? (* src = "rtl/apb_uart/apb_uart.sv:469.13-469.30|rtl/apb_uart/apb_uart.sv:467.13-470.13" *) 1'h0 : iLSR_PE;
  assign \$iLSR_PE$188  = \$iLSR_PE$187  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:465.13-465.30|rtl/apb_uart/apb_uart.sv:463.8-470.13" *) iPERE;
  assign \$iLSR_OE$183  = iLSRRead ? (* src = "rtl/apb_uart/apb_uart.sv:461.13-461.30|rtl/apb_uart/apb_uart.sv:459.13-462.13" *) 1'h0 : iLSR_OE;
  assign \$iLSR_OE$184  = \$iLSR_OE$183  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:457.13-457.30|rtl/apb_uart/apb_uart.sv:455.8-462.13" *) \$181y ;
  assign \$iFCR_TXFIFOReset$157  = iFCRWrite & (* src = "rtl/apb_uart/apb_uart.sv:371.10-389.13|rtl/apb_uart/apb_uart.sv:370.8-389.13" *) \$153y ;
  assign \$iFCR_RXFIFOReset$156  = iFCRWrite & (* src = "rtl/apb_uart/apb_uart.sv:371.10-389.13|rtl/apb_uart/apb_uart.sv:370.8-389.13" *) \$143y ;
  assign \$iCharTimeout$129  = iFCR_FIFOEnable & (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:340.13-347.18|rtl/apb_uart/apb_uart.sv:338.8-352.13" *) \$iCharTimeout$128 ;
  assign \$iCharTimeout$127  = iCharTimeout | (* src = "rtl/apb_uart/apb_uart.sv:346.18-346.40|rtl/apb_uart/apb_uart.sv:344.18-347.18" *) iTimeoutCount[5];
  assign \$iCharTimeout$128  = iRBRRead ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:342.18-342.40|rtl/apb_uart/apb_uart.sv:340.13-347.18" *) 1'h0 : \$iCharTimeout$127 ;
  assign \$iTimeoutCount$123  = \$115y  ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:332.13-332.72|rtl/apb_uart/apb_uart.sv:329.8-337.13" *) 6'h00 : \$121y ;
  assign \$iTHRInterrupt$98  = \$97y  ? (* src = "rtl/apb_uart/apb_uart.sv:305.13-305.36|rtl/apb_uart/apb_uart.sv:303.13-306.13" *) 1'h0 : iTHRInterrupt;
  assign \$iTHRInterrupt$99  = \$iTHRInterrupt$98  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:301.13-301.36|rtl/apb_uart/apb_uart.sv:299.8-306.13" *) \$92y ;
  (* src = "rtl/apb_uart/apb_uart.sv:630.14" *)
  \uart_baudgen$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG16  UART_BG16 (
    .BAUDTICK(iBaudtick16x),
    .CE(1'h1),
    .CLEAR(1'h0),
    .CLK(CLK),
    .DIVIDER({ iDLM, iDLL }),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:637.29" *)
  \slib_clock_div$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG2  UART_BG2 (
    .CE(iBaudtick16x),
    .CLK(CLK),
    .Q(iBaudtick2x),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:517.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BIDET  UART_BIDET (
    .CLK(CLK),
    .D(iRXFIFOBI),
    .RE(iBIRE),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:536.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_CTS  UART_ED_CTS (
    .CLK(CLK),
    .D(iMSR_CTS),
    .FE(iCTSnFE),
    .RE(iCTSnRE),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:554.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DCD  UART_ED_DCD (
    .CLK(CLK),
    .D(iMSR_DCD),
    .FE(iDCDnFE),
    .RE(iDCDnRE),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:542.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DSR  UART_ED_DSR (
    .CLK(CLK),
    .D(iMSR_DSR),
    .FE(iDSRnFE),
    .RE(iDSRnRE),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:548.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_RI  UART_ED_RI (
    .CLK(CLK),
    .D(iMSR_RI),
    .FE(iRInFE),
    .RE(iRInRE),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:516.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_FEDET  UART_FEDET (
    .CLK(CLK),
    .D(iRXFIFOFE),
    .RE(iFERE),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:229.31" *)
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_CTS  UART_IF_CTS (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iCTSNs),
    .Q(iCTSn),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:231.31" *)
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DCD  UART_IF_DCD (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iDCDNs),
    .Q(iDCDn),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:230.31" *)
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DSR  UART_IF_DSR (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iDSRNs),
    .Q(iDSRn),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:232.31" *)
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_RI  UART_IF_RI (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iRINs),
    .Q(iRIn),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:273.16" *)
  \uart_interrupt$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC  UART_IIC (
    .AFE(iMCR[5]),
    .CLK(CLK),
    .CTI(iCharTimeout),
    .IER(iIER[3:0]),
    .IIR(iIIR[3:0]),
    .INT(INT),
    .LSR({ iLSR_BI, iLSR_FE, iLSR_PE, iLSR_OE, iLSR_DR }),
    .MSR({ iMSR_dDCD, iMSR_TERI, iMSR_dDSR, iMSR_dCTS }),
    .RDA(iRDAInterrupt),
    .RST(iRST),
    .THI(iTHRInterrupt)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:285.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC_THRE_ED  UART_IIC_THRE_ED (
    .CLK(CLK),
    .D(iLSR_THRE),
    .RE(iLSR_THRERE),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:225.17" *)
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_CTS  UART_IS_CTS (
    .CLK(CLK),
    .D(CTSN),
    .Q(iCTSNs),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:227.17" *)
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DCD  UART_IS_DCD (
    .CLK(CLK),
    .D(DCDN),
    .Q(iDCDNs),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:226.17" *)
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DSR  UART_IS_DSR (
    .CLK(CLK),
    .D(DSRN),
    .Q(iDSRNs),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:228.17" *)
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_RI  UART_IS_RI (
    .CLK(CLK),
    .D(RIN),
    .Q(iRINs),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:224.17" *)
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_SIN  UART_IS_SIN (
    .CLK(CLK),
    .D(SIN),
    .Q(iSINr),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:515.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_PEDET  UART_PEDET (
    .CLK(CLK),
    .D(iRXFIFOPE),
    .RE(iPERE),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:642.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RCLK  UART_RCLK (
    .CLK(CLK),
    .D(iBAUDOUTN),
    .RE(iRCLK),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:697.15" *)
  \uart_receiver$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX  UART_RX (
    .BI(iRXBI),
    .CLK(CLK),
    .DOUT(iRXData),
    .EPS(iLCR[4]),
    .FE(iRXFE),
    .PE(iRXPE),
    .PEN(iLCR[3]),
    .RST(iRST),
    .RXCLEAR(1'h0),
    .RXCLK(iRCLK),
    .RXFINISHED(iRXFinished),
    .SIN(iSIN),
    .SP(iLCR[5]),
    .STB(iLCR[2]),
    .WLS(iLCR[1:0])
  );
  (* src = "rtl/apb_uart/apb_uart.sv:663.37" *)
  \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RXFF  UART_RXFF (
    .CLEAR(iRXFIFOClear),
    .CLK(CLK),
    .D(iRXFIFOD),
    .EMPTY(iRXFIFOEmpty),
    .FULL(iRXFIFO64Full),
    .Q(iRXFIFOQ),
    .READ(iRBRRead),
    .RST(iRST),
    .USAGE(iRXFIFOUsage),
    .WRITE(iRXFIFOWrite)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:681.18" *)
  \uart_transmitter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TX  UART_TX (
    .BC(iLCR[6]),
    .CLEAR(1'h0),
    .CLK(CLK),
    .DIN(iTSR),
    .EPS(iLCR[4]),
    .PEN(iLCR[3]),
    .RST(iRST),
    .SOUT(iSOUT),
    .SP(iLCR[5]),
    .STB(iLCR[2]),
    .TXCLK(iBaudtick2x),
    .TXFINISHED(iTXFinished),
    .TXSTART(iTXStart),
    .WLS(iLCR[1:0])
  );
  (* src = "rtl/apb_uart/apb_uart.sv:648.36" *)
  \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TXFF  UART_TXFF (
    .CLEAR(iFCR_TXFIFOReset),
    .CLK(CLK),
    .D(PWDATA[7:0]),
    .EMPTY(iLSR_THRE),
    .FULL(iTXFIFO64Full),
    .Q(iTXFIFOQ),
    .READ(iTXFIFORead),
    .RST(iRST),
    .USAGE(iTXFIFOUsage),
    .WRITE(iTXFIFOWrite)
  );
  assign \$auto$rtlil.cc:3092:Mux$14974 [5:0] = { \$auto$rtlil.cc:3092:Mux$14974 [6], \$auto$rtlil.cc:3092:Mux$14974 [6], \$auto$rtlil.cc:3092:Mux$14974 [6], \$auto$rtlil.cc:3092:Mux$14974 [6], \$auto$rtlil.cc:3092:Mux$14974 [6], 1'h1 };
  assign PRDATA[31:8] = 24'h000000;
  assign PREADY = 1'h1;
  assign PSLVERR = 1'h0;
  assign iIER[7:4] = 4'h0;
  assign iIIR[7:4] = { iFCR_FIFOEnable, iFCR_FIFOEnable, iIIR_FIFO64, 1'h0 };
  assign iLSR[6:0] = { iLSR_TEMT, iLSR_THRE, iLSR_BI, iLSR_FE, iLSR_PE, iLSR_OE, iLSR_DR };
  assign iMCR[7:6] = 2'h0;
endmodule

(* src = "rtl/common_cells/cdc_2phase_clearable.sv:54.8" *)
module \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req (src_rst_ni, src_clk_i, src_clear_i, src_data_i, src_valid_i, src_ready_o, dst_rst_ni, dst_clk_i, dst_clear_i, dst_clear_pending_o, dst_data_o, dst_valid_o, dst_ready_i, src_clear_pending_o);
  wire \$0y ;
  wire \$1y ;
  wire \$4y ;
  wire \$5y ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:88.35" *)
  wire async_ack;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:89.31" *)
  wire [40:0] async_data;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:87.35" *)
  wire async_req;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:69.16" *)
  input dst_clear_i;
  wire dst_clear_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:70.16" *)
  output dst_clear_pending_o;
  wire dst_clear_pending_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:68.16" *)
  input dst_clk_i;
  wire dst_clk_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:71.16" *)
  output [40:0] dst_data_o;
  wire [40:0] dst_data_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:73.16" *)
  input dst_ready_i;
  wire dst_ready_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:67.16" *)
  input dst_rst_ni;
  wire dst_rst_ni;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:72.16" *)
  output dst_valid_o;
  wire dst_valid_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:81.16" *)
  reg s_dst_clear_ack_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:80.16" *)
  wire s_dst_clear_req;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:84.16" *)
  reg s_dst_isolate_ack_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:82.16" *)
  wire s_dst_valid;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:76.16" *)
  reg s_src_clear_ack_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:75.16" *)
  wire s_src_clear_req;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:79.16" *)
  reg s_src_isolate_ack_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:77.16" *)
  wire s_src_ready;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:61.16" *)
  input src_clear_i;
  wire src_clear_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:62.16" *)
  output src_clear_pending_o;
  wire src_clear_pending_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:60.16" *)
  input src_clk_i;
  wire src_clk_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:63.16" *)
  input [40:0] src_data_i;
  wire [40:0] src_data_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:65.16" *)
  output src_ready_o;
  wire src_ready_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:59.16" *)
  input src_rst_ni;
  wire src_rst_ni;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:64.16" *)
  input src_valid_i;
  wire src_valid_i;
  assign \$0y  = ! (* src = "rtl/common_cells/cdc_2phase_clearable.sv:111.35-111.53" *) src_clear_pending_o;
  assign \$1y  = src_valid_i & (* src = "rtl/common_cells/cdc_2phase_clearable.sv:111.21-111.53" *) \$0y ;
  assign src_ready_o = s_src_ready & (* src = "rtl/common_cells/cdc_2phase_clearable.sv:118.24-118.56" *) \$0y ;
  assign \$4y  = ! (* src = "rtl/common_cells/cdc_2phase_clearable.sv:131.35-131.53" *) dst_clear_pending_o;
  assign \$5y  = dst_ready_i & (* src = "rtl/common_cells/cdc_2phase_clearable.sv:131.21-131.53" *) \$4y ;
  assign dst_valid_o = s_dst_valid & (* src = "rtl/common_cells/cdc_2phase_clearable.sv:137.24-137.56" *) \$4y ;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:172.3" *)
  always @(posedge dst_clk_i, negedge dst_rst_ni)
    if (!dst_rst_ni) s_dst_clear_ack_q <= 1'h0;
    else s_dst_clear_ack_q <= s_dst_clear_req;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:172.3" *)
  always @(posedge dst_clk_i, negedge dst_rst_ni)
    if (!dst_rst_ni) s_dst_isolate_ack_q <= 1'h0;
    else s_dst_isolate_ack_q <= dst_clear_pending_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:162.3" *)
  always @(posedge src_clk_i, negedge src_rst_ni)
    if (!src_rst_ni) s_src_clear_ack_q <= 1'h0;
    else s_src_clear_ack_q <= s_src_clear_req;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:162.3" *)
  always @(posedge src_clk_i, negedge src_rst_ni)
    if (!src_rst_ni) s_src_isolate_ack_q <= 1'h0;
    else s_src_isolate_ack_q <= src_clear_pending_o;
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:143.5" *)
  \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr  i_cdc_reset_ctrlr (
    .a_clear_ack_i(s_src_clear_ack_q),
    .a_clear_i(src_clear_i),
    .a_clear_o(s_src_clear_req),
    .a_clk_i(src_clk_i),
    .a_isolate_ack_i(s_src_isolate_ack_q),
    .a_isolate_o(src_clear_pending_o),
    .a_rst_ni(src_rst_ni),
    .b_clear_ack_i(s_dst_clear_ack_q),
    .b_clear_i(dst_clear_i),
    .b_clear_o(s_dst_clear_req),
    .b_clk_i(dst_clk_i),
    .b_isolate_ack_i(s_dst_isolate_ack_q),
    .b_isolate_o(dst_clear_pending_o),
    .b_rst_ni(dst_rst_ni)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:125.5" *)
  \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst  i_dst (
    .async_ack_o(async_ack),
    .async_data_i(async_data),
    .async_req_i(async_req),
    .clear_i(s_dst_clear_req),
    .clk_i(dst_clk_i),
    .data_o(dst_data_o),
    .ready_i(\$5y ),
    .rst_ni(dst_rst_ni),
    .valid_o(s_dst_valid)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:106.5" *)
  \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src  i_src (
    .async_ack_i(async_ack),
    .async_data_o(async_data),
    .async_req_o(async_req),
    .clear_i(s_src_clear_req),
    .clk_i(src_clk_i),
    .data_i(src_data_i),
    .ready_o(s_src_ready),
    .rst_ni(src_rst_ni),
    .valid_i(\$1y )
  );
endmodule

(* src = "rtl/common_cells/cdc_2phase_clearable.sv:54.8" *)
module \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp (src_rst_ni, src_clk_i, src_clear_i, src_data_i, src_valid_i, src_ready_o, dst_rst_ni, dst_clk_i, dst_clear_i, dst_clear_pending_o, dst_data_o, dst_valid_o, dst_ready_i, src_clear_pending_o);
  wire \$0y ;
  wire \$1y ;
  wire \$4y ;
  wire \$5y ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:88.35" *)
  wire async_ack;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:89.31" *)
  wire [33:0] async_data;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:87.35" *)
  wire async_req;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:69.16" *)
  input dst_clear_i;
  wire dst_clear_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:70.16" *)
  output dst_clear_pending_o;
  wire dst_clear_pending_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:68.16" *)
  input dst_clk_i;
  wire dst_clk_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:71.16" *)
  output [33:0] dst_data_o;
  wire [33:0] dst_data_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:73.16" *)
  input dst_ready_i;
  wire dst_ready_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:67.16" *)
  input dst_rst_ni;
  wire dst_rst_ni;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:72.16" *)
  output dst_valid_o;
  wire dst_valid_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:81.16" *)
  reg s_dst_clear_ack_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:80.16" *)
  wire s_dst_clear_req;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:84.16" *)
  reg s_dst_isolate_ack_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:82.16" *)
  wire s_dst_valid;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:76.16" *)
  reg s_src_clear_ack_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:75.16" *)
  wire s_src_clear_req;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:79.16" *)
  reg s_src_isolate_ack_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:77.16" *)
  wire s_src_ready;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:61.16" *)
  input src_clear_i;
  wire src_clear_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:62.16" *)
  output src_clear_pending_o;
  wire src_clear_pending_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:60.16" *)
  input src_clk_i;
  wire src_clk_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:63.16" *)
  input [33:0] src_data_i;
  wire [33:0] src_data_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:65.16" *)
  output src_ready_o;
  wire src_ready_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:59.16" *)
  input src_rst_ni;
  wire src_rst_ni;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:64.16" *)
  input src_valid_i;
  wire src_valid_i;
  assign \$0y  = ! (* src = "rtl/common_cells/cdc_2phase_clearable.sv:111.35-111.53" *) src_clear_pending_o;
  assign \$1y  = src_valid_i & (* src = "rtl/common_cells/cdc_2phase_clearable.sv:111.21-111.53" *) \$0y ;
  assign src_ready_o = s_src_ready & (* src = "rtl/common_cells/cdc_2phase_clearable.sv:118.24-118.56" *) \$0y ;
  assign \$4y  = ! (* src = "rtl/common_cells/cdc_2phase_clearable.sv:131.35-131.53" *) dst_clear_pending_o;
  assign \$5y  = dst_ready_i & (* src = "rtl/common_cells/cdc_2phase_clearable.sv:131.21-131.53" *) \$4y ;
  assign dst_valid_o = s_dst_valid & (* src = "rtl/common_cells/cdc_2phase_clearable.sv:137.24-137.56" *) \$4y ;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:172.3" *)
  always @(posedge dst_clk_i, negedge dst_rst_ni)
    if (!dst_rst_ni) s_dst_clear_ack_q <= 1'h0;
    else s_dst_clear_ack_q <= s_dst_clear_req;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:172.3" *)
  always @(posedge dst_clk_i, negedge dst_rst_ni)
    if (!dst_rst_ni) s_dst_isolate_ack_q <= 1'h0;
    else s_dst_isolate_ack_q <= dst_clear_pending_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:162.3" *)
  always @(posedge src_clk_i, negedge src_rst_ni)
    if (!src_rst_ni) s_src_clear_ack_q <= 1'h0;
    else s_src_clear_ack_q <= s_src_clear_req;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:162.3" *)
  always @(posedge src_clk_i, negedge src_rst_ni)
    if (!src_rst_ni) s_src_isolate_ack_q <= 1'h0;
    else s_src_isolate_ack_q <= src_clear_pending_o;
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:143.5" *)
  \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr  i_cdc_reset_ctrlr (
    .a_clear_ack_i(s_src_clear_ack_q),
    .a_clear_i(src_clear_i),
    .a_clear_o(s_src_clear_req),
    .a_clk_i(src_clk_i),
    .a_isolate_ack_i(s_src_isolate_ack_q),
    .a_isolate_o(src_clear_pending_o),
    .a_rst_ni(src_rst_ni),
    .b_clear_ack_i(s_dst_clear_ack_q),
    .b_clear_i(dst_clear_i),
    .b_clear_o(s_dst_clear_req),
    .b_clk_i(dst_clk_i),
    .b_isolate_ack_i(s_dst_isolate_ack_q),
    .b_isolate_o(dst_clear_pending_o),
    .b_rst_ni(dst_rst_ni)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:125.5" *)
  \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst  i_dst (
    .async_ack_o(async_ack),
    .async_data_i(async_data),
    .async_req_i(async_req),
    .clear_i(s_dst_clear_req),
    .clk_i(dst_clk_i),
    .data_o(dst_data_o),
    .ready_i(\$5y ),
    .rst_ni(dst_rst_ni),
    .valid_o(s_dst_valid)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:106.5" *)
  \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src  i_src (
    .async_ack_i(async_ack),
    .async_data_o(async_data),
    .async_req_o(async_req),
    .clear_i(s_src_clear_req),
    .clk_i(src_clk_i),
    .data_i(src_data_i),
    .ready_o(s_src_ready),
    .rst_ni(src_rst_ni),
    .valid_i(\$1y )
  );
endmodule

(* src = "rtl/common_cells/cdc_2phase_clearable.sv:269.8" *)
module \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst (clk_i, rst_ni, data_o, clear_i, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$1y ;
  wire \$2y ;
  wire \$6y ;
  wire \$7y ;
  wire \$8y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13826 ;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.8" *)
  wire ack_dst_d;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.19" *)
  wire ack_dst_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:280.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:281.16" *)
  input [40:0] async_data_i;
  wire [40:0] async_data_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:279.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:275.16" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:274.16" *)
  input clk_i;
  wire clk_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:288.5" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40" *)
  wire [40:0] data_dst_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:288.17" *)
  wire [40:0] data_dst_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:276.16" *)
  output [40:0] data_o;
  reg [40:0] data_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:278.16" *)
  input ready_i;
  wire ready_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.30" *)
  wire req_synced;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.42" *)
  reg req_synced_q1;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:273.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:277.16" *)
  output valid_o;
  wire valid_o;
  assign \$1y  = valid_o && (* src = "rtl/common_cells/cdc_2phase_clearable.sv:306.18-306.36" *) ready_i;
  assign valid_o = async_ack_o != (* src = "rtl/common_cells/cdc_2phase_clearable.sv:335.21-335.47" *) req_synced_q1;
  assign \$2y  = ~ (* src = "rtl/common_cells/cdc_2phase_clearable.sv:307.19-307.29" *) async_ack_o;
  assign \$6y  = req_synced != (* src = "rtl/common_cells/cdc_2phase_clearable.sv:315.9-315.36" *) req_synced_q1;
  assign \$7y  = ! (* src = "rtl/common_cells/cdc_2phase_clearable.sv:315.40-315.48" *) valid_o;
  assign \$8y  = \$6y  && (* src = "rtl/common_cells/cdc_2phase_clearable.sv:315.9-315.48" *) \$7y ;
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$8y ) data_o[33:32] <= async_data_i[33:32];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$8y ) data_o[31:0] <= async_data_i[31:0];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$8y ) data_o[40:34] <= async_data_i[40:34];
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:322.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$13826 ) async_ack_o <= ack_dst_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13826  = | { clear_i, \$1y  };
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:322.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) req_synced_q1 <= 1'h0;
    else req_synced_q1 <= req_synced;
  assign data_dst_d = \$8y  ? (* keep = "true" *) (* src = "rtl/common_cells/cdc_2phase_clearable.sv:316.7-316.33|rtl/common_cells/cdc_2phase_clearable.sv:315.5-317.8" *) async_data_i : data_o;
  assign ack_dst_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "rtl/common_cells/cdc_2phase_clearable.sv:305.7-305.24|rtl/common_cells/cdc_2phase_clearable.sv:304.5-308.8" *) 1'h0 : \$2y ;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:294.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_dst_q = data_o;
endmodule

(* src = "rtl/common_cells/cdc_2phase_clearable.sv:269.8" *)
module \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst (clk_i, rst_ni, data_o, clear_i, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$1y ;
  wire \$2y ;
  wire \$6y ;
  wire \$7y ;
  wire \$8y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13831 ;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.8" *)
  wire ack_dst_d;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.19" *)
  wire ack_dst_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:280.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:281.16" *)
  input [33:0] async_data_i;
  wire [33:0] async_data_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:279.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:275.16" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:274.16" *)
  input clk_i;
  wire clk_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:288.5" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" *)
  wire [33:0] data_dst_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:288.17" *)
  wire [33:0] data_dst_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:276.16" *)
  output [33:0] data_o;
  reg [33:0] data_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:278.16" *)
  input ready_i;
  wire ready_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.30" *)
  wire req_synced;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.42" *)
  reg req_synced_q1;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:273.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:277.16" *)
  output valid_o;
  wire valid_o;
  assign \$1y  = valid_o && (* src = "rtl/common_cells/cdc_2phase_clearable.sv:306.18-306.36" *) ready_i;
  assign valid_o = async_ack_o != (* src = "rtl/common_cells/cdc_2phase_clearable.sv:335.21-335.47" *) req_synced_q1;
  assign \$2y  = ~ (* src = "rtl/common_cells/cdc_2phase_clearable.sv:307.19-307.29" *) async_ack_o;
  assign \$6y  = req_synced != (* src = "rtl/common_cells/cdc_2phase_clearable.sv:315.9-315.36" *) req_synced_q1;
  assign \$7y  = ! (* src = "rtl/common_cells/cdc_2phase_clearable.sv:315.40-315.48" *) valid_o;
  assign \$8y  = \$6y  && (* src = "rtl/common_cells/cdc_2phase_clearable.sv:315.9-315.48" *) \$7y ;
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$8y ) data_o[1:0] <= async_data_i[1:0];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$8y ) data_o[33:2] <= async_data_i[33:2];
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:322.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$13831 ) async_ack_o <= ack_dst_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13831  = | { clear_i, \$1y  };
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:322.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) req_synced_q1 <= 1'h0;
    else req_synced_q1 <= req_synced;
  assign data_dst_d = \$8y  ? (* keep = "true" *) (* src = "rtl/common_cells/cdc_2phase_clearable.sv:316.7-316.33|rtl/common_cells/cdc_2phase_clearable.sv:315.5-317.8" *) async_data_i : data_o;
  assign ack_dst_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "rtl/common_cells/cdc_2phase_clearable.sv:305.7-305.24|rtl/common_cells/cdc_2phase_clearable.sv:304.5-308.8" *) 1'h0 : \$2y ;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:294.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_dst_q = data_o;
endmodule

(* src = "rtl/common_cells/cdc_2phase_clearable.sv:199.8" *)
module \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src (clk_i, rst_ni, data_i, clear_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$1y ;
  wire \$2y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13834 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13839 ;
  wire \$auto$rtlil.cc:2957:Not$13838 ;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" *)
  wire [40:0] \$data_src_d$4 ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.32" *)
  wire ack_synced;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:210.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:211.16" *)
  output [40:0] async_data_o;
  reg [40:0] async_data_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:209.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:205.16" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:204.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:206.16" *)
  input [40:0] data_i;
  wire [40:0] data_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:217.5" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40" *)
  wire [40:0] data_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:217.17" *)
  wire [40:0] data_src_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:208.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.21" *)
  wire req_src_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:203.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:207.16" *)
  input valid_i;
  wire valid_i;
  assign \$1y  = valid_i && (* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.18-237.36" *) ready_o;
  assign ready_o = async_req_o == (* src = "rtl/common_cells/cdc_2phase_clearable.sv:254.21-254.44" *) ack_synced;
  assign \$2y  = ~ (* src = "rtl/common_cells/cdc_2phase_clearable.sv:238.20-238.30" *) async_req_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:245.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$13834 ) async_req_o <= req_src_d;
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$opt_dff.cc:219:make_patterns_logic$13839 ) async_data_o[33:32] <= data_i[33:32];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$opt_dff.cc:219:make_patterns_logic$13839 ) async_data_o[31:0] <= data_i[31:0];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$opt_dff.cc:219:make_patterns_logic$13839 ) async_data_o[40:34] <= data_i[40:34];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13834  = | { clear_i, \$1y  };
  assign \$auto$rtlil.cc:2957:Not$13838  = ~ clear_i;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$13839  = & { \$auto$rtlil.cc:2957:Not$13838 , \$1y  };
  assign \$data_src_d$4  = \$1y  ? (* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.38-240.8|rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" *) data_i : async_data_o;
  assign req_src_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" *) 1'h0 : \$2y ;
  assign data_src_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" *) async_data_o : \$data_src_d$4 ;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:222.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "rtl/common_cells/cdc_2phase_clearable.sv:199.8" *)
module \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src (clk_i, rst_ni, data_i, clear_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$1y ;
  wire \$2y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13852 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13857 ;
  wire \$auto$rtlil.cc:2957:Not$13856 ;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" *)
  wire [33:0] \$data_src_d$4 ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.32" *)
  wire ack_synced;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:210.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:211.16" *)
  output [33:0] async_data_o;
  reg [33:0] async_data_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:209.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:205.16" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:204.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:206.16" *)
  input [33:0] data_i;
  wire [33:0] data_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:217.5" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" *)
  wire [33:0] data_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:217.17" *)
  wire [33:0] data_src_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:208.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.21" *)
  wire req_src_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:203.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:207.16" *)
  input valid_i;
  wire valid_i;
  assign \$1y  = valid_i && (* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.18-237.36" *) ready_o;
  assign ready_o = async_req_o == (* src = "rtl/common_cells/cdc_2phase_clearable.sv:254.21-254.44" *) ack_synced;
  assign \$2y  = ~ (* src = "rtl/common_cells/cdc_2phase_clearable.sv:238.20-238.30" *) async_req_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:245.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$13852 ) async_req_o <= req_src_d;
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$opt_dff.cc:219:make_patterns_logic$13857 ) async_data_o[1:0] <= data_i[1:0];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$opt_dff.cc:219:make_patterns_logic$13857 ) async_data_o[33:2] <= data_i[33:2];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13852  = | { clear_i, \$1y  };
  assign \$auto$rtlil.cc:2957:Not$13856  = ~ clear_i;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$13857  = & { \$auto$rtlil.cc:2957:Not$13856 , \$1y  };
  assign \$data_src_d$4  = \$1y  ? (* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.38-240.8|rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" *) data_i : async_data_o;
  assign req_src_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" *) 1'h0 : \$2y ;
  assign data_src_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" *) async_data_o : \$data_src_d$4 ;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:222.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "rtl/common_cells/cdc_4phase.sv:205.8" *)
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13865 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13867 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13869 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13871 ;
  wire \$procmux$460_CMP ;
  wire \$procmux$471_CMP ;
  wire \$procmux$485_CMP ;
  wire [1:0] \$procmux$490_Y ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:221.10" *)
  wire ack_dst_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:221.21" *)
  wire ack_dst_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:216.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:217.16" *)
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:215.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:211.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:212.16" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:214.16" *)
  input ready_i;
  wire ready_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:223.10" *)
  wire req_synced;
  (* src = "rtl/common_cells/cdc_4phase.sv:210.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_4phase.sv:231.11" *)
  wire [1:0] state_d;
  (* src = "rtl/common_cells/cdc_4phase.sv:231.20" *)
  reg [1:0] state_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:213.16" *)
  output valid_o;
  wire valid_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:284.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$13871 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13865  = { \$procmux$471_CMP , ready_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13867  = { \$procmux$485_CMP , req_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13869  = { \$procmux$460_CMP , req_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$13871  = & { \$auto$opt_dff.cc:194:make_patterns_logic$13865 , \$auto$opt_dff.cc:194:make_patterns_logic$13867 , \$auto$opt_dff.cc:194:make_patterns_logic$13869  };
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:293.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else async_ack_o <= ack_dst_d;
  assign \$procmux$460_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 2'h2;
  assign \$procmux$471_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 1'h1;
  function [1:0] \$procmux$480 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$480  = b[1:0];
      2'b1?:
        \$procmux$480  = b[3:2];
      default:
        \$procmux$480  = a;
    endcase
  endfunction
  assign state_d = \$procmux$480 (2'h0, { \$procmux$490_Y , 2'h2 }, { \$procmux$485_CMP , \$procmux$471_CMP  });
  assign \$procmux$485_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) state_q;
  assign \$procmux$490_Y  = ready_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:255.13-255.41|rtl/common_cells/cdc_4phase.sv:254.11-258.14" *) 2'h2 : 2'h1;
  function [0:0] \$procmux$515 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$515  = b[0:0];
      2'b1?:
        \$procmux$515  = b[1:1];
      default:
        \$procmux$515  = a;
    endcase
  endfunction
  assign valid_o = \$procmux$515 (1'h0, { req_synced, 1'h1 }, { \$procmux$485_CMP , \$procmux$471_CMP  });
  function [0:0] \$procmux$521 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$521  = b[0:0];
      2'b1?:
        \$procmux$521  = b[1:1];
      default:
        \$procmux$521  = a;
    endcase
  endfunction
  assign ack_dst_d = \$procmux$521 (1'h0, { ready_i, req_synced }, { \$procmux$471_CMP , \$procmux$460_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_4phase.sv:236.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_o = async_data_i;
endmodule

(* src = "rtl/common_cells/cdc_4phase.sv:205.8" *)
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13874 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13876 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13878 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13880 ;
  wire \$procmux$311_CMP ;
  wire \$procmux$322_CMP ;
  wire \$procmux$336_CMP ;
  wire [1:0] \$procmux$341_Y ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:221.10" *)
  wire ack_dst_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:221.21" *)
  wire ack_dst_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:216.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:217.16" *)
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:215.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:211.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:212.16" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:214.16" *)
  input ready_i;
  wire ready_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:223.10" *)
  wire req_synced;
  (* src = "rtl/common_cells/cdc_4phase.sv:210.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_4phase.sv:231.11" *)
  wire [1:0] state_d;
  (* src = "rtl/common_cells/cdc_4phase.sv:231.20" *)
  reg [1:0] state_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:213.16" *)
  output valid_o;
  wire valid_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:284.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$13880 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13874  = { \$procmux$322_CMP , ready_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13876  = { \$procmux$336_CMP , req_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13878  = { \$procmux$311_CMP , req_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$13880  = & { \$auto$opt_dff.cc:194:make_patterns_logic$13878 , \$auto$opt_dff.cc:194:make_patterns_logic$13876 , \$auto$opt_dff.cc:194:make_patterns_logic$13874  };
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:293.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else async_ack_o <= ack_dst_d;
  assign \$procmux$311_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 2'h2;
  assign \$procmux$322_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 1'h1;
  function [1:0] \$procmux$331 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$331  = b[1:0];
      2'b1?:
        \$procmux$331  = b[3:2];
      default:
        \$procmux$331  = a;
    endcase
  endfunction
  assign state_d = \$procmux$331 (2'h0, { \$procmux$341_Y , 2'h2 }, { \$procmux$336_CMP , \$procmux$322_CMP  });
  assign \$procmux$336_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) state_q;
  assign \$procmux$341_Y  = ready_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:255.13-255.41|rtl/common_cells/cdc_4phase.sv:254.11-258.14" *) 2'h2 : 2'h1;
  function [0:0] \$procmux$366 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$366  = b[0:0];
      2'b1?:
        \$procmux$366  = b[1:1];
      default:
        \$procmux$366  = a;
    endcase
  endfunction
  assign valid_o = \$procmux$366 (1'h0, { req_synced, 1'h1 }, { \$procmux$336_CMP , \$procmux$322_CMP  });
  function [0:0] \$procmux$372 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$372  = b[0:0];
      2'b1?:
        \$procmux$372  = b[1:1];
      default:
        \$procmux$372  = a;
    endcase
  endfunction
  assign ack_dst_d = \$procmux$372 (1'h0, { ready_i, req_synced }, { \$procmux$322_CMP , \$procmux$311_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_4phase.sv:236.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_o = async_data_i;
endmodule

(* src = "rtl/common_cells/cdc_4phase.sv:205.8" *)
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13883 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13885 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13887 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13889 ;
  wire \$procmux$162_CMP ;
  wire \$procmux$173_CMP ;
  wire \$procmux$187_CMP ;
  wire [1:0] \$procmux$192_Y ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:221.10" *)
  wire ack_dst_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:221.21" *)
  wire ack_dst_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:216.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:217.16" *)
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:215.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:211.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:212.16" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:214.16" *)
  input ready_i;
  wire ready_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:223.10" *)
  wire req_synced;
  (* src = "rtl/common_cells/cdc_4phase.sv:210.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_4phase.sv:231.11" *)
  wire [1:0] state_d;
  (* src = "rtl/common_cells/cdc_4phase.sv:231.20" *)
  reg [1:0] state_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:213.16" *)
  output valid_o;
  wire valid_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:284.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$13889 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13883  = { \$procmux$173_CMP , ready_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13885  = { \$procmux$187_CMP , req_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13887  = { \$procmux$162_CMP , req_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$13889  = & { \$auto$opt_dff.cc:194:make_patterns_logic$13883 , \$auto$opt_dff.cc:194:make_patterns_logic$13885 , \$auto$opt_dff.cc:194:make_patterns_logic$13887  };
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:293.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else async_ack_o <= ack_dst_d;
  assign \$procmux$162_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 2'h2;
  assign \$procmux$173_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 1'h1;
  function [1:0] \$procmux$182 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$182  = b[1:0];
      2'b1?:
        \$procmux$182  = b[3:2];
      default:
        \$procmux$182  = a;
    endcase
  endfunction
  assign state_d = \$procmux$182 (2'h0, { \$procmux$192_Y , 2'h2 }, { \$procmux$187_CMP , \$procmux$173_CMP  });
  assign \$procmux$187_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) state_q;
  assign \$procmux$192_Y  = ready_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:255.13-255.41|rtl/common_cells/cdc_4phase.sv:254.11-258.14" *) 2'h2 : 2'h1;
  function [0:0] \$procmux$217 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$217  = b[0:0];
      2'b1?:
        \$procmux$217  = b[1:1];
      default:
        \$procmux$217  = a;
    endcase
  endfunction
  assign valid_o = \$procmux$217 (1'h0, { req_synced, 1'h1 }, { \$procmux$187_CMP , \$procmux$173_CMP  });
  function [0:0] \$procmux$223 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$223  = b[0:0];
      2'b1?:
        \$procmux$223  = b[1:1];
      default:
        \$procmux$223  = a;
    endcase
  endfunction
  assign ack_dst_d = \$procmux$223 (1'h0, { ready_i, req_synced }, { \$procmux$173_CMP , \$procmux$162_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_4phase.sv:236.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_o = async_data_i;
endmodule

(* src = "rtl/common_cells/cdc_4phase.sv:205.8" *)
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13892 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13894 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13896 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13898 ;
  wire \$procmux$13_CMP ;
  wire \$procmux$24_CMP ;
  wire \$procmux$38_CMP ;
  wire [1:0] \$procmux$43_Y ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:221.10" *)
  wire ack_dst_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:221.21" *)
  wire ack_dst_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:216.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:217.16" *)
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:215.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:211.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:212.16" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:214.16" *)
  input ready_i;
  wire ready_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:223.10" *)
  wire req_synced;
  (* src = "rtl/common_cells/cdc_4phase.sv:210.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_4phase.sv:231.11" *)
  wire [1:0] state_d;
  (* src = "rtl/common_cells/cdc_4phase.sv:231.20" *)
  reg [1:0] state_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:213.16" *)
  output valid_o;
  wire valid_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:284.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$13898 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13892  = { \$procmux$24_CMP , ready_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13894  = { \$procmux$38_CMP , req_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13896  = { \$procmux$13_CMP , req_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$13898  = & { \$auto$opt_dff.cc:194:make_patterns_logic$13892 , \$auto$opt_dff.cc:194:make_patterns_logic$13894 , \$auto$opt_dff.cc:194:make_patterns_logic$13896  };
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:293.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else async_ack_o <= ack_dst_d;
  assign \$procmux$13_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 2'h2;
  assign \$procmux$24_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 1'h1;
  function [1:0] \$procmux$33 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$33  = b[1:0];
      2'b1?:
        \$procmux$33  = b[3:2];
      default:
        \$procmux$33  = a;
    endcase
  endfunction
  assign state_d = \$procmux$33 (2'h0, { \$procmux$43_Y , 2'h2 }, { \$procmux$38_CMP , \$procmux$24_CMP  });
  assign \$procmux$38_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) state_q;
  assign \$procmux$43_Y  = ready_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:255.13-255.41|rtl/common_cells/cdc_4phase.sv:254.11-258.14" *) 2'h2 : 2'h1;
  function [0:0] \$procmux$68 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$68  = b[0:0];
      2'b1?:
        \$procmux$68  = b[1:1];
      default:
        \$procmux$68  = a;
    endcase
  endfunction
  assign valid_o = \$procmux$68 (1'h0, { req_synced, 1'h1 }, { \$procmux$38_CMP , \$procmux$24_CMP  });
  function [0:0] \$procmux$74 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$74  = b[0:0];
      2'b1?:
        \$procmux$74  = b[1:1];
      default:
        \$procmux$74  = a;
    endcase
  endfunction
  assign ack_dst_d = \$procmux$74 (1'h0, { ready_i, req_synced }, { \$procmux$24_CMP , \$procmux$13_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_4phase.sv:236.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_o = async_data_i;
endmodule

(* src = "rtl/common_cells/cdc_4phase.sv:92.8" *)
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13904 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13906 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13908 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13901 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13910 ;
  (* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" *)
  wire [1:0] \$data_src_d$3 ;
  wire \$procmux$529_CMP ;
  wire \$procmux$531_Y ;
  wire \$procmux$545_CMP ;
  wire \$procmux$559_CMP ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:114.10" *)
  wire ack_synced;
  (* src = "rtl/common_cells/cdc_4phase.sv:105.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:106.16" *)
  output [1:0] async_data_o;
  reg [1:0] async_data_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:104.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:100.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:101.16" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:112.5" *)
  (* unused_bits = "0 1" *)
  wire [1:0] data_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:112.17" *)
  wire [1:0] data_src_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:103.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:110.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:110.21" *)
  wire req_src_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:99.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_4phase.sv:117.11" *)
  wire [1:0] state_d;
  (* src = "rtl/common_cells/cdc_4phase.sv:117.20" *)
  reg [1:0] state_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:102.16" *)
  input valid_i;
  wire valid_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_data_o <= 2'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$13901 ) async_data_o <= data_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:172.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$13910 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13904  = { \$procmux$559_CMP , valid_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13906  = { \$procmux$545_CMP , ack_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13908  = { \$procmux$529_CMP , ack_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$13901  = & { \$procmux$559_CMP , valid_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$13910  = & { \$auto$opt_dff.cc:194:make_patterns_logic$13906 , \$auto$opt_dff.cc:194:make_patterns_logic$13908 , \$auto$opt_dff.cc:194:make_patterns_logic$13904  };
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h1;
    else async_req_o <= req_src_d;
  assign \$procmux$529_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 2'h2;
  assign \$procmux$545_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 1'h1;
  assign \$procmux$531_Y  = ~ (* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" *) ack_synced;
  function [1:0] \$procmux$554 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$554  = b[1:0];
      2'b1?:
        \$procmux$554  = b[3:2];
      default:
        \$procmux$554  = a;
    endcase
  endfunction
  assign state_d = \$procmux$554 (2'h0, 4'h6, { \$procmux$559_CMP , \$procmux$545_CMP  });
  assign \$procmux$559_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) state_q;
  assign \$data_src_d$3  = valid_i ? (* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" *) data_i : async_data_o;
  assign ready_o = \$procmux$529_CMP  & (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$procmux$531_Y ;
  assign data_src_d = \$procmux$559_CMP  ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$data_src_d$3  : async_data_o;
  function [0:0] \$procmux$601 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$601  = b[0:0];
      2'b1?:
        \$procmux$601  = b[1:1];
      default:
        \$procmux$601  = a;
    endcase
  endfunction
  assign req_src_d = \$procmux$601 (1'h0, { valid_i, \$procmux$531_Y  }, { \$procmux$559_CMP , \$procmux$545_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_4phase.sv:122.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "rtl/common_cells/cdc_4phase.sv:92.8" *)
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13916 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13918 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13920 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13913 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13922 ;
  (* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" *)
  wire [1:0] \$data_src_d$3 ;
  wire \$procmux$380_CMP ;
  wire \$procmux$382_Y ;
  wire \$procmux$396_CMP ;
  wire \$procmux$410_CMP ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:114.10" *)
  wire ack_synced;
  (* src = "rtl/common_cells/cdc_4phase.sv:105.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:106.16" *)
  output [1:0] async_data_o;
  reg [1:0] async_data_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:104.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:100.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:101.16" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:112.5" *)
  (* unused_bits = "0 1" *)
  wire [1:0] data_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:112.17" *)
  wire [1:0] data_src_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:103.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:110.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:110.21" *)
  wire req_src_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:99.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_4phase.sv:117.11" *)
  wire [1:0] state_d;
  (* src = "rtl/common_cells/cdc_4phase.sv:117.20" *)
  reg [1:0] state_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:102.16" *)
  input valid_i;
  wire valid_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_data_o <= 2'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$13913 ) async_data_o <= data_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:172.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$13922 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13916  = { \$procmux$410_CMP , valid_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13918  = { \$procmux$396_CMP , ack_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13920  = { \$procmux$380_CMP , ack_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$13913  = & { \$procmux$410_CMP , valid_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$13922  = & { \$auto$opt_dff.cc:194:make_patterns_logic$13916 , \$auto$opt_dff.cc:194:make_patterns_logic$13918 , \$auto$opt_dff.cc:194:make_patterns_logic$13920  };
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h1;
    else async_req_o <= req_src_d;
  assign \$procmux$380_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 2'h2;
  assign \$procmux$396_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 1'h1;
  assign \$procmux$382_Y  = ~ (* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" *) ack_synced;
  function [1:0] \$procmux$405 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$405  = b[1:0];
      2'b1?:
        \$procmux$405  = b[3:2];
      default:
        \$procmux$405  = a;
    endcase
  endfunction
  assign state_d = \$procmux$405 (2'h0, 4'h6, { \$procmux$410_CMP , \$procmux$396_CMP  });
  assign \$procmux$410_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) state_q;
  assign \$data_src_d$3  = valid_i ? (* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" *) data_i : async_data_o;
  assign ready_o = \$procmux$380_CMP  & (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$procmux$382_Y ;
  assign data_src_d = \$procmux$410_CMP  ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$data_src_d$3  : async_data_o;
  function [0:0] \$procmux$452 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$452  = b[0:0];
      2'b1?:
        \$procmux$452  = b[1:1];
      default:
        \$procmux$452  = a;
    endcase
  endfunction
  assign req_src_d = \$procmux$452 (1'h0, { valid_i, \$procmux$382_Y  }, { \$procmux$410_CMP , \$procmux$396_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_4phase.sv:122.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "rtl/common_cells/cdc_4phase.sv:92.8" *)
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13928 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13930 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13932 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13925 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13934 ;
  (* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" *)
  wire [1:0] \$data_src_d$3 ;
  wire \$procmux$231_CMP ;
  wire \$procmux$233_Y ;
  wire \$procmux$247_CMP ;
  wire \$procmux$261_CMP ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:114.10" *)
  wire ack_synced;
  (* src = "rtl/common_cells/cdc_4phase.sv:105.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:106.16" *)
  output [1:0] async_data_o;
  reg [1:0] async_data_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:104.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:100.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:101.16" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:112.5" *)
  (* unused_bits = "0 1" *)
  wire [1:0] data_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:112.17" *)
  wire [1:0] data_src_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:103.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:110.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:110.21" *)
  wire req_src_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:99.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_4phase.sv:117.11" *)
  wire [1:0] state_d;
  (* src = "rtl/common_cells/cdc_4phase.sv:117.20" *)
  reg [1:0] state_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:102.16" *)
  input valid_i;
  wire valid_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_data_o <= 2'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$13925 ) async_data_o <= data_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:172.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$13934 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13928  = { \$procmux$261_CMP , valid_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13930  = { \$procmux$247_CMP , ack_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13932  = { \$procmux$231_CMP , ack_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$13925  = & { \$procmux$261_CMP , valid_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$13934  = & { \$auto$opt_dff.cc:194:make_patterns_logic$13928 , \$auto$opt_dff.cc:194:make_patterns_logic$13930 , \$auto$opt_dff.cc:194:make_patterns_logic$13932  };
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h1;
    else async_req_o <= req_src_d;
  assign \$procmux$231_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 2'h2;
  assign \$procmux$247_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 1'h1;
  assign \$procmux$233_Y  = ~ (* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" *) ack_synced;
  function [1:0] \$procmux$256 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$256  = b[1:0];
      2'b1?:
        \$procmux$256  = b[3:2];
      default:
        \$procmux$256  = a;
    endcase
  endfunction
  assign state_d = \$procmux$256 (2'h0, 4'h6, { \$procmux$261_CMP , \$procmux$247_CMP  });
  assign \$procmux$261_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) state_q;
  assign \$data_src_d$3  = valid_i ? (* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" *) data_i : async_data_o;
  assign ready_o = \$procmux$231_CMP  & (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$procmux$233_Y ;
  assign data_src_d = \$procmux$261_CMP  ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$data_src_d$3  : async_data_o;
  function [0:0] \$procmux$303 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$303  = b[0:0];
      2'b1?:
        \$procmux$303  = b[1:1];
      default:
        \$procmux$303  = a;
    endcase
  endfunction
  assign req_src_d = \$procmux$303 (1'h0, { valid_i, \$procmux$233_Y  }, { \$procmux$261_CMP , \$procmux$247_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_4phase.sv:122.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "rtl/common_cells/cdc_4phase.sv:92.8" *)
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13940 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13942 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13944 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13937 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13946 ;
  (* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" *)
  wire [1:0] \$data_src_d$3 ;
  wire \$procmux$101_Y ;
  wire \$procmux$104_CMP ;
  wire \$procmux$108_CMP ;
  wire \$procmux$112_CMP ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:114.10" *)
  wire ack_synced;
  (* src = "rtl/common_cells/cdc_4phase.sv:105.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:106.16" *)
  output [1:0] async_data_o;
  reg [1:0] async_data_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:104.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:100.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:101.16" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:112.5" *)
  (* unused_bits = "0 1" *)
  wire [1:0] data_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:112.17" *)
  wire [1:0] data_src_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:103.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:110.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:110.21" *)
  wire req_src_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:99.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_4phase.sv:117.11" *)
  wire [1:0] state_d;
  (* src = "rtl/common_cells/cdc_4phase.sv:117.20" *)
  reg [1:0] state_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:102.16" *)
  input valid_i;
  wire valid_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_data_o <= 2'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$13937 ) async_data_o <= data_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:172.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$13946 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13940  = { \$procmux$112_CMP , valid_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13942  = { \$procmux$104_CMP , ack_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13944  = { \$procmux$108_CMP , ack_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$13937  = & { \$procmux$112_CMP , valid_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$13946  = & { \$auto$opt_dff.cc:194:make_patterns_logic$13940 , \$auto$opt_dff.cc:194:make_patterns_logic$13942 , \$auto$opt_dff.cc:194:make_patterns_logic$13944  };
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h1;
    else async_req_o <= req_src_d;
  assign \$procmux$101_Y  = ~ (* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" *) ack_synced;
  assign \$procmux$104_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 1'h1;
  function [1:0] \$procmux$107 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$107  = b[1:0];
      2'b1?:
        \$procmux$107  = b[3:2];
      default:
        \$procmux$107  = a;
    endcase
  endfunction
  assign state_d = \$procmux$107 (2'h0, 4'h6, { \$procmux$112_CMP , \$procmux$104_CMP  });
  assign \$procmux$108_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 2'h2;
  assign \$procmux$112_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) state_q;
  assign \$data_src_d$3  = valid_i ? (* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" *) data_i : async_data_o;
  assign ready_o = \$procmux$108_CMP  & (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$procmux$101_Y ;
  assign data_src_d = \$procmux$112_CMP  ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$data_src_d$3  : async_data_o;
  function [0:0] \$procmux$154 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$154  = b[0:0];
      2'b1?:
        \$procmux$154  = b[1:1];
      default:
        \$procmux$154  = a;
    endcase
  endfunction
  assign req_src_d = \$procmux$154 (1'h0, { valid_i, \$procmux$101_Y  }, { \$procmux$112_CMP , \$procmux$104_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_4phase.sv:122.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "rtl/common_cells/cdc_reset_ctrlr.sv:109.8" *)
module \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr (a_clk_i, a_rst_ni, a_clear_i, a_clear_o, a_clear_ack_i, a_isolate_o, a_isolate_ack_i, b_clk_i, b_rst_ni, b_clear_i, b_clear_o, b_clear_ack_i, b_isolate_o, b_isolate_ack_i);
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:125.15" *)
  input a_clear_ack_i;
  wire a_clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:123.16" *)
  input a_clear_i;
  wire a_clear_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:124.16" *)
  output a_clear_o;
  wire a_clear_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:121.16" *)
  input a_clk_i;
  wire a_clk_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:127.16" *)
  input a_isolate_ack_i;
  wire a_isolate_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:126.16" *)
  output a_isolate_o;
  wire a_isolate_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:122.16" *)
  input a_rst_ni;
  wire a_rst_ni;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:143.31" *)
  wire async_a2b_ack;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:141.21" *)
  wire [1:0] async_a2b_next_phase;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:139.16" *)
  wire async_a2b_req;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:139.31" *)
  wire async_b2a_ack;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:145.21" *)
  wire [1:0] async_b2a_next_phase;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:143.16" *)
  wire async_b2a_req;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:133.16" *)
  input b_clear_ack_i;
  wire b_clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:131.16" *)
  input b_clear_i;
  wire b_clear_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:132.16" *)
  output b_clear_o;
  wire b_clear_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:129.16" *)
  input b_clk_i;
  wire b_clk_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:135.16" *)
  input b_isolate_ack_i;
  wire b_isolate_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:134.16" *)
  output b_isolate_o;
  wire b_isolate_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:130.16" *)
  input b_rst_ni;
  wire b_rst_ni;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:150.5" *)
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a  i_cdc_reset_ctrlr_half_a (
    .async_ack_i(async_b2a_ack),
    .async_ack_o(async_a2b_ack),
    .async_next_phase_i(async_b2a_next_phase),
    .async_next_phase_o(async_a2b_next_phase),
    .async_req_i(async_b2a_req),
    .async_req_o(async_a2b_req),
    .clear_ack_i(a_clear_ack_i),
    .clear_i(a_clear_i),
    .clear_o(a_clear_o),
    .clk_i(a_clk_i),
    .isolate_ack_i(a_isolate_ack_i),
    .isolate_o(a_isolate_o),
    .rst_ni(a_rst_ni)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:169.5" *)
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b  i_cdc_reset_ctrlr_half_b (
    .async_ack_i(async_a2b_ack),
    .async_ack_o(async_b2a_ack),
    .async_next_phase_i(async_a2b_next_phase),
    .async_next_phase_o(async_b2a_next_phase),
    .async_req_i(async_a2b_req),
    .async_req_o(async_b2a_req),
    .clear_ack_i(b_clear_ack_i),
    .clear_i(b_clear_i),
    .clear_o(b_clear_o),
    .clk_i(b_clk_i),
    .isolate_ack_i(b_isolate_ack_i),
    .isolate_o(b_isolate_o),
    .rst_ni(b_rst_ni)
  );
endmodule

(* src = "rtl/common_cells/cdc_reset_ctrlr.sv:109.8" *)
module \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr (a_clk_i, a_rst_ni, a_clear_i, a_clear_o, a_clear_ack_i, a_isolate_o, a_isolate_ack_i, b_clk_i, b_rst_ni, b_clear_i, b_clear_o, b_clear_ack_i, b_isolate_o, b_isolate_ack_i);
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:125.15" *)
  input a_clear_ack_i;
  wire a_clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:123.16" *)
  input a_clear_i;
  wire a_clear_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:124.16" *)
  output a_clear_o;
  wire a_clear_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:121.16" *)
  input a_clk_i;
  wire a_clk_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:127.16" *)
  input a_isolate_ack_i;
  wire a_isolate_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:126.16" *)
  output a_isolate_o;
  wire a_isolate_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:122.16" *)
  input a_rst_ni;
  wire a_rst_ni;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:143.31" *)
  wire async_a2b_ack;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:141.21" *)
  wire [1:0] async_a2b_next_phase;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:139.16" *)
  wire async_a2b_req;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:139.31" *)
  wire async_b2a_ack;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:145.21" *)
  wire [1:0] async_b2a_next_phase;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:143.16" *)
  wire async_b2a_req;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:133.16" *)
  input b_clear_ack_i;
  wire b_clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:131.16" *)
  input b_clear_i;
  wire b_clear_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:132.16" *)
  output b_clear_o;
  wire b_clear_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:129.16" *)
  input b_clk_i;
  wire b_clk_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:135.16" *)
  input b_isolate_ack_i;
  wire b_isolate_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:134.16" *)
  output b_isolate_o;
  wire b_isolate_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:130.16" *)
  input b_rst_ni;
  wire b_rst_ni;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:150.5" *)
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a  i_cdc_reset_ctrlr_half_a (
    .async_ack_i(async_b2a_ack),
    .async_ack_o(async_a2b_ack),
    .async_next_phase_i(async_b2a_next_phase),
    .async_next_phase_o(async_a2b_next_phase),
    .async_req_i(async_b2a_req),
    .async_req_o(async_a2b_req),
    .clear_ack_i(a_clear_ack_i),
    .clear_i(a_clear_i),
    .clear_o(a_clear_o),
    .clk_i(a_clk_i),
    .isolate_ack_i(a_isolate_ack_i),
    .isolate_o(a_isolate_o),
    .rst_ni(a_rst_ni)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:169.5" *)
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b  i_cdc_reset_ctrlr_half_b (
    .async_ack_i(async_a2b_ack),
    .async_ack_o(async_b2a_ack),
    .async_next_phase_i(async_a2b_next_phase),
    .async_next_phase_o(async_b2a_next_phase),
    .async_req_i(async_a2b_req),
    .async_req_o(async_b2a_req),
    .clear_ack_i(b_clear_ack_i),
    .clear_i(b_clear_i),
    .clear_o(b_clear_o),
    .clk_i(b_clk_i),
    .isolate_ack_i(b_isolate_ack_i),
    .isolate_o(b_isolate_o),
    .rst_ni(b_rst_ni)
  );
endmodule

(* src = "rtl/common_cells/cdc_reset_ctrlr.sv:187.8" *)
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$28y ;
  wire \$2y ;
  wire \$8y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13950 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13952 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13954 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13956 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13958 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13960 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13962 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13964 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13966 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13968 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13233 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13235 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13241 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13245 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13247 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13251 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$14947 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$14949 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *)
  wire [3:0] \$initiator_state_d$10 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *)
  wire [3:0] \$initiator_state_d$11 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *)
  wire [3:0] \$initiator_state_d$5 ;
  wire \$procmux$1487_Y ;
  wire \$procmux$1488_CMP ;
  wire \$procmux$1489_CMP ;
  wire \$procmux$1490_CMP ;
  wire \$procmux$1491_CMP ;
  wire \$procmux$1522_Y ;
  wire \$procmux$1523_CMP ;
  wire \$procmux$1524_CMP ;
  wire \$procmux$1525_CMP ;
  wire \$procmux$1526_CMP ;
  wire \$procmux$1538_Y ;
  wire \$procmux$1551_CMP ;
  wire \$procmux$1557_CMP ;
  wire \$procmux$1564_CMP ;
  wire \$procmux$1572_CMP ;
  wire \$procmux$1587_CMP ;
  wire \$procmux$1622_CMP ;
  wire \$procmux$1633_CMP ;
  wire \$procmux$1651_CMP ;
  wire \$procmux$1702_CMP ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:209.30" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:212.30" *)
  output async_ack_o;
  wire async_ack_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:210.30" *)
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:207.30" *)
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:211.30" *)
  input async_req_i;
  wire async_req_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:208.30" *)
  output async_req_o;
  wire async_req_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:205.30" *)
  input clear_ack_i;
  wire clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:201.30" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:204.30" *)
  output clear_o;
  wire clear_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:199.30" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:263.30" *)
  wire initiator_clear_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:259.30" *)
  wire [1:0] initiator_clear_seq_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:262.30" *)
  wire initiator_isolate_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:261.30" *)
  wire initiator_phase_transition_ack;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:260.30" *)
  wire initiator_phase_transition_req;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.21" *)
  wire [3:0] initiator_state_d;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.40" *)
  reg [3:0] initiator_state_q;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:203.30" *)
  input isolate_ack_i;
  wire isolate_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:202.30" *)
  output isolate_o;
  wire isolate_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:419.9" *)
  wire receiver_clear_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:418.9" *)
  wire receiver_isolate_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:415.21" *)
  wire [1:0] receiver_next_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.29" *)
  wire receiver_phase_ack;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:414.21" *)
  reg [1:0] receiver_phase_q;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.9" *)
  wire receiver_phase_req;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:200.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$2y  = initiator_phase_transition_ack && (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.13-284.60" *) isolate_ack_i;
  assign \$28y  = receiver_phase_req && (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:441.18-441.58" *) receiver_phase_ack;
  assign clear_o = initiator_clear_out || (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:526.20-526.61" *) receiver_clear_out;
  assign isolate_o = initiator_isolate_out || (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:527.22-527.67" *) receiver_isolate_out;
  assign \$8y  = initiator_phase_transition_ack && (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.13-317.58" *) clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:438.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) receiver_phase_q <= 2'h0;
    else if (\$28y ) receiver_phase_q <= receiver_next_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:371.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) initiator_state_q <= 4'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$13968 ) initiator_state_q <= initiator_state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13950  = { \$procmux$1651_CMP , initiator_phase_transition_ack, isolate_ack_i, \$2y  } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13952  = { \$procmux$1587_CMP , initiator_phase_transition_ack, clear_ack_i, \$8y  } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13954  = { \$procmux$1702_CMP , clear_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13956  = { \$procmux$1633_CMP , isolate_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13958  = { \$procmux$1572_CMP , clear_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13960  = { \$procmux$1551_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13962  = { \$procmux$1557_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13964  = { \$procmux$1564_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13966  = { \$procmux$1622_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$13968  = & { \$auto$opt_dff.cc:194:make_patterns_logic$13950 , \$auto$opt_dff.cc:194:make_patterns_logic$13952 , \$auto$opt_dff.cc:194:make_patterns_logic$13954 , \$auto$opt_dff.cc:194:make_patterns_logic$13956 , \$auto$opt_dff.cc:194:make_patterns_logic$13958 , \$auto$opt_dff.cc:194:make_patterns_logic$13960 , \$auto$opt_dff.cc:194:make_patterns_logic$13962 , \$auto$opt_dff.cc:194:make_patterns_logic$13964 , \$auto$opt_dff.cc:194:make_patterns_logic$13966  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13233  = | { \$procmux$1490_CMP , \$procmux$1489_CMP , \$procmux$1488_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13235  = | { \$procmux$1526_CMP , \$procmux$1525_CMP , \$procmux$1523_CMP  };
  assign initiator_isolate_out = | { \$procmux$1651_CMP , \$procmux$1633_CMP , \$procmux$1622_CMP , \$procmux$1587_CMP , \$procmux$1572_CMP , \$procmux$1564_CMP , \$procmux$1557_CMP , \$procmux$1551_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13241  = | { \$procmux$1525_CMP , \$procmux$1524_CMP , \$procmux$1523_CMP  };
  assign initiator_phase_transition_req = | { \$procmux$1651_CMP , \$procmux$1622_CMP , \$procmux$1587_CMP , \$procmux$1564_CMP , \$procmux$1557_CMP , \$procmux$1551_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13245  = | { \$procmux$1526_CMP , \$procmux$1523_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13247  = | { \$procmux$1491_CMP , \$procmux$1490_CMP , \$procmux$1488_CMP  };
  assign initiator_clear_out = | { \$procmux$1587_CMP , \$procmux$1572_CMP , \$procmux$1564_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13251  = | { \$procmux$1651_CMP , \$procmux$1633_CMP , \$procmux$1622_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$14947  = | { \$procmux$1572_CMP , \$procmux$1564_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$14949  = | { \$procmux$1633_CMP , \$procmux$1622_CMP  };
  assign \$procmux$1487_Y  = ~ (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) \$auto$opt_reduce.cc:137:opt_pmux$13247 ;
  assign \$procmux$1488_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h3;
  assign \$procmux$1489_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h2;
  assign \$procmux$1490_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 1'h1;
  assign \$procmux$1491_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) receiver_phase_q;
  assign receiver_clear_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$procmux$1522_Y  : \$procmux$1487_Y ;
  assign receiver_isolate_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$opt_reduce.cc:137:opt_pmux$13241  : \$auto$opt_reduce.cc:137:opt_pmux$13233 ;
  assign receiver_phase_ack = receiver_phase_req & (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$procmux$1538_Y ;
  assign \$procmux$1522_Y  = ~ (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) \$auto$opt_reduce.cc:137:opt_pmux$13235 ;
  assign \$procmux$1523_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h3;
  assign \$procmux$1524_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h2;
  assign \$procmux$1525_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 1'h1;
  assign \$procmux$1526_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) receiver_next_phase;
  function [0:0] \$procmux$1538 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1538  = b[0:0];
      2'b1?:
        \$procmux$1538  = b[1:1];
      default:
        \$procmux$1538  = a;
    endcase
  endfunction
  assign \$procmux$1538_Y  = \$procmux$1538 (isolate_ack_i, { clear_ack_i, 1'h1 }, { \$procmux$1524_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13245  });
  assign \$procmux$1551_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 4'h8;
  assign \$procmux$1557_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h7;
  assign \$procmux$1564_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h5;
  assign \$procmux$1572_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h6;
  assign \$procmux$1587_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h4;
  assign \$initiator_state_d$10 [1:0] = initiator_phase_transition_ack ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *) 2'h2 : 2'h1;
  assign \$initiator_state_d$11 [1:0] = \$8y  ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *) 2'h3 : \$initiator_state_d$10 [1:0];
  assign \$procmux$1622_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h2;
  assign \$procmux$1633_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h3;
  assign \$procmux$1651_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 1'h1;
  assign \$initiator_state_d$5 [2:0] = \$2y  ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *) 3'h4 : { 2'h1, initiator_phase_transition_ack };
  function [3:0] \$procmux$1685 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$1685  = b[3:0];
      6'b????1?:
        \$procmux$1685  = b[7:4];
      6'b???1??:
        \$procmux$1685  = b[11:8];
      6'b??1???:
        \$procmux$1685  = b[15:12];
      6'b?1????:
        \$procmux$1685  = b[19:16];
      6'b1?????:
        \$procmux$1685  = b[23:20];
      default:
        \$procmux$1685  = a;
    endcase
  endfunction
  assign initiator_state_d = \$procmux$1685 (4'h1, { 1'h0, \$initiator_state_d$5 [2:0], 6'h11, \$initiator_state_d$11 [1:0], 12'h780 }, { \$procmux$1651_CMP , \$auto$opt_reduce.cc:137:opt_pmux$14949 , \$procmux$1587_CMP , \$auto$opt_reduce.cc:137:opt_pmux$14947 , \$procmux$1557_CMP , \$procmux$1551_CMP  });
  assign \$procmux$1702_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) initiator_state_q;
  function [1:0] \$procmux$1767 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$1767  = b[1:0];
      3'b?1?:
        \$procmux$1767  = b[3:2];
      3'b1??:
        \$procmux$1767  = b[5:4];
      default:
        \$procmux$1767  = a;
    endcase
  endfunction
  assign initiator_clear_seq_phase = \$procmux$1767 (2'h0, 6'h1b, { \$auto$opt_reduce.cc:137:opt_pmux$13251 , initiator_clear_out, \$procmux$1557_CMP  });
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:427.5" *)
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:398.5" *)
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$initiator_state_d$10 [3:2] = 2'h1;
  assign \$initiator_state_d$11 [3:2] = 2'h1;
  assign \$initiator_state_d$5 [3] = 1'h0;
endmodule

(* src = "rtl/common_cells/cdc_reset_ctrlr.sv:187.8" *)
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$28y ;
  wire \$2y ;
  wire \$8y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13972 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13974 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13976 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13978 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13980 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13982 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13984 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13986 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13988 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13990 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13253 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13255 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13261 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13265 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13267 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13271 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$14951 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$14953 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *)
  wire [3:0] \$initiator_state_d$10 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *)
  wire [3:0] \$initiator_state_d$11 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *)
  wire [3:0] \$initiator_state_d$5 ;
  wire \$procmux$1193_Y ;
  wire \$procmux$1194_CMP ;
  wire \$procmux$1195_CMP ;
  wire \$procmux$1196_CMP ;
  wire \$procmux$1197_CMP ;
  wire \$procmux$1228_Y ;
  wire \$procmux$1229_CMP ;
  wire \$procmux$1230_CMP ;
  wire \$procmux$1231_CMP ;
  wire \$procmux$1232_CMP ;
  wire \$procmux$1244_Y ;
  wire \$procmux$1257_CMP ;
  wire \$procmux$1263_CMP ;
  wire \$procmux$1270_CMP ;
  wire \$procmux$1278_CMP ;
  wire \$procmux$1293_CMP ;
  wire \$procmux$1328_CMP ;
  wire \$procmux$1339_CMP ;
  wire \$procmux$1357_CMP ;
  wire \$procmux$1408_CMP ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:209.30" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:212.30" *)
  output async_ack_o;
  wire async_ack_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:210.30" *)
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:207.30" *)
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:211.30" *)
  input async_req_i;
  wire async_req_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:208.30" *)
  output async_req_o;
  wire async_req_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:205.30" *)
  input clear_ack_i;
  wire clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:201.30" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:204.30" *)
  output clear_o;
  wire clear_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:199.30" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:263.30" *)
  wire initiator_clear_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:259.30" *)
  wire [1:0] initiator_clear_seq_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:262.30" *)
  wire initiator_isolate_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:261.30" *)
  wire initiator_phase_transition_ack;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:260.30" *)
  wire initiator_phase_transition_req;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.21" *)
  wire [3:0] initiator_state_d;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.40" *)
  reg [3:0] initiator_state_q;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:203.30" *)
  input isolate_ack_i;
  wire isolate_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:202.30" *)
  output isolate_o;
  wire isolate_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:419.9" *)
  wire receiver_clear_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:418.9" *)
  wire receiver_isolate_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:415.21" *)
  wire [1:0] receiver_next_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.29" *)
  wire receiver_phase_ack;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:414.21" *)
  reg [1:0] receiver_phase_q;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.9" *)
  wire receiver_phase_req;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:200.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$2y  = initiator_phase_transition_ack && (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.13-284.60" *) isolate_ack_i;
  assign \$28y  = receiver_phase_req && (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:441.18-441.58" *) receiver_phase_ack;
  assign clear_o = initiator_clear_out || (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:526.20-526.61" *) receiver_clear_out;
  assign isolate_o = initiator_isolate_out || (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:527.22-527.67" *) receiver_isolate_out;
  assign \$8y  = initiator_phase_transition_ack && (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.13-317.58" *) clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:438.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) receiver_phase_q <= 2'h0;
    else if (\$28y ) receiver_phase_q <= receiver_next_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:371.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) initiator_state_q <= 4'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$13990 ) initiator_state_q <= initiator_state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13972  = { \$procmux$1357_CMP , initiator_phase_transition_ack, isolate_ack_i, \$2y  } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13974  = { \$procmux$1293_CMP , initiator_phase_transition_ack, clear_ack_i, \$8y  } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13976  = { \$procmux$1408_CMP , clear_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13978  = { \$procmux$1339_CMP , isolate_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13980  = { \$procmux$1278_CMP , clear_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13982  = { \$procmux$1257_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13984  = { \$procmux$1263_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13986  = { \$procmux$1270_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13988  = { \$procmux$1328_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$13990  = & { \$auto$opt_dff.cc:194:make_patterns_logic$13978 , \$auto$opt_dff.cc:194:make_patterns_logic$13980 , \$auto$opt_dff.cc:194:make_patterns_logic$13982 , \$auto$opt_dff.cc:194:make_patterns_logic$13984 , \$auto$opt_dff.cc:194:make_patterns_logic$13986 , \$auto$opt_dff.cc:194:make_patterns_logic$13988 , \$auto$opt_dff.cc:194:make_patterns_logic$13972 , \$auto$opt_dff.cc:194:make_patterns_logic$13974 , \$auto$opt_dff.cc:194:make_patterns_logic$13976  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13253  = | { \$procmux$1196_CMP , \$procmux$1195_CMP , \$procmux$1194_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13255  = | { \$procmux$1232_CMP , \$procmux$1231_CMP , \$procmux$1229_CMP  };
  assign initiator_isolate_out = | { \$procmux$1357_CMP , \$procmux$1339_CMP , \$procmux$1328_CMP , \$procmux$1293_CMP , \$procmux$1278_CMP , \$procmux$1270_CMP , \$procmux$1263_CMP , \$procmux$1257_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13261  = | { \$procmux$1231_CMP , \$procmux$1230_CMP , \$procmux$1229_CMP  };
  assign initiator_phase_transition_req = | { \$procmux$1357_CMP , \$procmux$1328_CMP , \$procmux$1293_CMP , \$procmux$1270_CMP , \$procmux$1263_CMP , \$procmux$1257_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13265  = | { \$procmux$1232_CMP , \$procmux$1229_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13267  = | { \$procmux$1197_CMP , \$procmux$1196_CMP , \$procmux$1194_CMP  };
  assign initiator_clear_out = | { \$procmux$1293_CMP , \$procmux$1278_CMP , \$procmux$1270_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13271  = | { \$procmux$1357_CMP , \$procmux$1339_CMP , \$procmux$1328_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$14951  = | { \$procmux$1278_CMP , \$procmux$1270_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$14953  = | { \$procmux$1339_CMP , \$procmux$1328_CMP  };
  assign \$procmux$1193_Y  = ~ (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) \$auto$opt_reduce.cc:137:opt_pmux$13267 ;
  assign \$procmux$1194_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h3;
  assign \$procmux$1195_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h2;
  assign \$procmux$1196_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 1'h1;
  assign \$procmux$1197_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) receiver_phase_q;
  assign receiver_clear_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$procmux$1228_Y  : \$procmux$1193_Y ;
  assign receiver_isolate_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$opt_reduce.cc:137:opt_pmux$13261  : \$auto$opt_reduce.cc:137:opt_pmux$13253 ;
  assign receiver_phase_ack = receiver_phase_req & (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$procmux$1244_Y ;
  assign \$procmux$1228_Y  = ~ (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) \$auto$opt_reduce.cc:137:opt_pmux$13255 ;
  assign \$procmux$1229_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h3;
  assign \$procmux$1230_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h2;
  assign \$procmux$1231_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 1'h1;
  assign \$procmux$1232_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) receiver_next_phase;
  function [0:0] \$procmux$1244 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1244  = b[0:0];
      2'b1?:
        \$procmux$1244  = b[1:1];
      default:
        \$procmux$1244  = a;
    endcase
  endfunction
  assign \$procmux$1244_Y  = \$procmux$1244 (isolate_ack_i, { clear_ack_i, 1'h1 }, { \$procmux$1230_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13265  });
  assign \$procmux$1257_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 4'h8;
  assign \$procmux$1263_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h7;
  assign \$procmux$1270_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h5;
  assign \$procmux$1278_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h6;
  assign \$procmux$1293_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h4;
  assign \$initiator_state_d$10 [1:0] = initiator_phase_transition_ack ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *) 2'h2 : 2'h1;
  assign \$initiator_state_d$11 [1:0] = \$8y  ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *) 2'h3 : \$initiator_state_d$10 [1:0];
  assign \$procmux$1328_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h2;
  assign \$procmux$1339_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h3;
  assign \$procmux$1357_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 1'h1;
  assign \$initiator_state_d$5 [2:0] = \$2y  ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *) 3'h4 : { 2'h1, initiator_phase_transition_ack };
  function [3:0] \$procmux$1391 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$1391  = b[3:0];
      6'b????1?:
        \$procmux$1391  = b[7:4];
      6'b???1??:
        \$procmux$1391  = b[11:8];
      6'b??1???:
        \$procmux$1391  = b[15:12];
      6'b?1????:
        \$procmux$1391  = b[19:16];
      6'b1?????:
        \$procmux$1391  = b[23:20];
      default:
        \$procmux$1391  = a;
    endcase
  endfunction
  assign initiator_state_d = \$procmux$1391 (4'h1, { 1'h0, \$initiator_state_d$5 [2:0], 6'h11, \$initiator_state_d$11 [1:0], 12'h780 }, { \$procmux$1357_CMP , \$auto$opt_reduce.cc:137:opt_pmux$14953 , \$procmux$1293_CMP , \$auto$opt_reduce.cc:137:opt_pmux$14951 , \$procmux$1263_CMP , \$procmux$1257_CMP  });
  assign \$procmux$1408_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) initiator_state_q;
  function [1:0] \$procmux$1473 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$1473  = b[1:0];
      3'b?1?:
        \$procmux$1473  = b[3:2];
      3'b1??:
        \$procmux$1473  = b[5:4];
      default:
        \$procmux$1473  = a;
    endcase
  endfunction
  assign initiator_clear_seq_phase = \$procmux$1473 (2'h0, 6'h1b, { \$auto$opt_reduce.cc:137:opt_pmux$13271 , initiator_clear_out, \$procmux$1263_CMP  });
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:427.5" *)
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:398.5" *)
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$initiator_state_d$10 [3:2] = 2'h1;
  assign \$initiator_state_d$11 [3:2] = 2'h1;
  assign \$initiator_state_d$5 [3] = 1'h0;
endmodule

(* src = "rtl/common_cells/cdc_reset_ctrlr.sv:187.8" *)
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$28y ;
  wire \$2y ;
  wire \$8y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13994 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13996 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13998 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14000 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14002 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14004 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14006 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14008 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14010 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14012 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13273 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13277 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13279 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13281 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13285 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13289 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$14955 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$14957 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *)
  wire [3:0] \$initiator_state_d$10 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *)
  wire [3:0] \$initiator_state_d$11 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *)
  wire [3:0] \$initiator_state_d$5 ;
  wire \$procmux$1013_CMP ;
  wire \$procmux$1034_CMP ;
  wire \$procmux$1045_CMP ;
  wire \$procmux$1063_CMP ;
  wire \$procmux$1098_CMP ;
  wire \$procmux$1100_CMP ;
  wire \$procmux$1102_CMP ;
  wire \$procmux$1104_CMP ;
  wire \$procmux$1114_CMP ;
  wire \$procmux$899_Y ;
  wire \$procmux$900_CMP ;
  wire \$procmux$901_CMP ;
  wire \$procmux$902_CMP ;
  wire \$procmux$903_CMP ;
  wire \$procmux$934_Y ;
  wire \$procmux$935_CMP ;
  wire \$procmux$936_CMP ;
  wire \$procmux$937_CMP ;
  wire \$procmux$938_CMP ;
  wire \$procmux$950_Y ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:209.30" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:212.30" *)
  output async_ack_o;
  wire async_ack_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:210.30" *)
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:207.30" *)
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:211.30" *)
  input async_req_i;
  wire async_req_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:208.30" *)
  output async_req_o;
  wire async_req_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:205.30" *)
  input clear_ack_i;
  wire clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:201.30" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:204.30" *)
  output clear_o;
  wire clear_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:199.30" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:263.30" *)
  wire initiator_clear_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:259.30" *)
  wire [1:0] initiator_clear_seq_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:262.30" *)
  wire initiator_isolate_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:261.30" *)
  wire initiator_phase_transition_ack;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:260.30" *)
  wire initiator_phase_transition_req;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.21" *)
  wire [3:0] initiator_state_d;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.40" *)
  reg [3:0] initiator_state_q;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:203.30" *)
  input isolate_ack_i;
  wire isolate_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:202.30" *)
  output isolate_o;
  wire isolate_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:419.9" *)
  wire receiver_clear_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:418.9" *)
  wire receiver_isolate_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:415.21" *)
  wire [1:0] receiver_next_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.29" *)
  wire receiver_phase_ack;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:414.21" *)
  reg [1:0] receiver_phase_q;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.9" *)
  wire receiver_phase_req;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:200.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$2y  = initiator_phase_transition_ack && (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.13-284.60" *) isolate_ack_i;
  assign \$28y  = receiver_phase_req && (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:441.18-441.58" *) receiver_phase_ack;
  assign clear_o = initiator_clear_out || (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:526.20-526.61" *) receiver_clear_out;
  assign isolate_o = initiator_isolate_out || (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:527.22-527.67" *) receiver_isolate_out;
  assign \$8y  = initiator_phase_transition_ack && (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.13-317.58" *) clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:438.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) receiver_phase_q <= 2'h0;
    else if (\$28y ) receiver_phase_q <= receiver_next_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:371.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) initiator_state_q <= 4'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14012 ) initiator_state_q <= initiator_state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13994  = { \$procmux$1063_CMP , initiator_phase_transition_ack, isolate_ack_i, \$2y  } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13996  = { \$procmux$1013_CMP , initiator_phase_transition_ack, clear_ack_i, \$8y  } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$13998  = { \$procmux$1114_CMP , clear_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14000  = { \$procmux$1045_CMP , isolate_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14002  = { \$procmux$1104_CMP , clear_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14004  = { \$procmux$1034_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14006  = { \$procmux$1098_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14008  = { \$procmux$1100_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14010  = { \$procmux$1102_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14012  = & { \$auto$opt_dff.cc:194:make_patterns_logic$13994 , \$auto$opt_dff.cc:194:make_patterns_logic$13996 , \$auto$opt_dff.cc:194:make_patterns_logic$13998 , \$auto$opt_dff.cc:194:make_patterns_logic$14000 , \$auto$opt_dff.cc:194:make_patterns_logic$14002 , \$auto$opt_dff.cc:194:make_patterns_logic$14004 , \$auto$opt_dff.cc:194:make_patterns_logic$14006 , \$auto$opt_dff.cc:194:make_patterns_logic$14008 , \$auto$opt_dff.cc:194:make_patterns_logic$14010  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13273  = | { \$procmux$903_CMP , \$procmux$902_CMP , \$procmux$900_CMP  };
  assign initiator_phase_transition_req = | { \$procmux$1102_CMP , \$procmux$1100_CMP , \$procmux$1098_CMP , \$procmux$1063_CMP , \$procmux$1034_CMP , \$procmux$1013_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13277  = | { \$procmux$902_CMP , \$procmux$901_CMP , \$procmux$900_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13279  = | { \$procmux$938_CMP , \$procmux$937_CMP , \$procmux$935_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13281  = | { \$procmux$937_CMP , \$procmux$936_CMP , \$procmux$935_CMP  };
  assign initiator_isolate_out = | { \$procmux$1104_CMP , \$procmux$1102_CMP , \$procmux$1100_CMP , \$procmux$1098_CMP , \$procmux$1063_CMP , \$procmux$1045_CMP , \$procmux$1034_CMP , \$procmux$1013_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13285  = | { \$procmux$938_CMP , \$procmux$935_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13289  = | { \$procmux$1063_CMP , \$procmux$1045_CMP , \$procmux$1034_CMP  };
  assign initiator_clear_out = | { \$procmux$1104_CMP , \$procmux$1102_CMP , \$procmux$1013_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$14955  = | { \$procmux$1104_CMP , \$procmux$1102_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$14957  = | { \$procmux$1045_CMP , \$procmux$1034_CMP  };
  assign \$initiator_state_d$10 [1:0] = initiator_phase_transition_ack ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *) 2'h2 : 2'h1;
  assign \$procmux$1013_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h4;
  assign \$initiator_state_d$11 [1:0] = \$8y  ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *) 2'h3 : \$initiator_state_d$10 [1:0];
  assign \$procmux$1034_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h2;
  assign \$procmux$1045_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h3;
  assign \$procmux$1063_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 1'h1;
  assign \$initiator_state_d$5 [2:0] = \$2y  ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *) 3'h4 : { 2'h1, initiator_phase_transition_ack };
  function [3:0] \$procmux$1097 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$1097  = b[3:0];
      6'b????1?:
        \$procmux$1097  = b[7:4];
      6'b???1??:
        \$procmux$1097  = b[11:8];
      6'b??1???:
        \$procmux$1097  = b[15:12];
      6'b?1????:
        \$procmux$1097  = b[19:16];
      6'b1?????:
        \$procmux$1097  = b[23:20];
      default:
        \$procmux$1097  = a;
    endcase
  endfunction
  assign initiator_state_d = \$procmux$1097 (4'h1, { 1'h0, \$initiator_state_d$5 [2:0], 6'h11, \$initiator_state_d$11 [1:0], 12'h780 }, { \$procmux$1063_CMP , \$auto$opt_reduce.cc:137:opt_pmux$14957 , \$procmux$1013_CMP , \$auto$opt_reduce.cc:137:opt_pmux$14955 , \$procmux$1100_CMP , \$procmux$1098_CMP  });
  assign \$procmux$1098_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 4'h8;
  assign \$procmux$1100_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h7;
  assign \$procmux$1102_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h5;
  assign \$procmux$1104_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h6;
  assign \$procmux$1114_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) initiator_state_q;
  function [1:0] \$procmux$1179 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$1179  = b[1:0];
      3'b?1?:
        \$procmux$1179  = b[3:2];
      3'b1??:
        \$procmux$1179  = b[5:4];
      default:
        \$procmux$1179  = a;
    endcase
  endfunction
  assign initiator_clear_seq_phase = \$procmux$1179 (2'h0, 6'h1b, { \$auto$opt_reduce.cc:137:opt_pmux$13289 , initiator_clear_out, \$procmux$1100_CMP  });
  assign \$procmux$899_Y  = ~ (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) \$auto$opt_reduce.cc:137:opt_pmux$13273 ;
  assign \$procmux$900_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h3;
  assign \$procmux$901_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h2;
  assign \$procmux$902_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 1'h1;
  assign \$procmux$903_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) receiver_phase_q;
  assign receiver_clear_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$procmux$934_Y  : \$procmux$899_Y ;
  assign receiver_isolate_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$opt_reduce.cc:137:opt_pmux$13281  : \$auto$opt_reduce.cc:137:opt_pmux$13277 ;
  assign receiver_phase_ack = receiver_phase_req & (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$procmux$950_Y ;
  assign \$procmux$934_Y  = ~ (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) \$auto$opt_reduce.cc:137:opt_pmux$13279 ;
  assign \$procmux$935_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h3;
  assign \$procmux$936_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h2;
  assign \$procmux$937_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 1'h1;
  assign \$procmux$938_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) receiver_next_phase;
  function [0:0] \$procmux$950 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$950  = b[0:0];
      2'b1?:
        \$procmux$950  = b[1:1];
      default:
        \$procmux$950  = a;
    endcase
  endfunction
  assign \$procmux$950_Y  = \$procmux$950 (isolate_ack_i, { clear_ack_i, 1'h1 }, { \$procmux$936_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13285  });
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:427.5" *)
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:398.5" *)
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$initiator_state_d$10 [3:2] = 2'h1;
  assign \$initiator_state_d$11 [3:2] = 2'h1;
  assign \$initiator_state_d$5 [3] = 1'h0;
endmodule

(* src = "rtl/common_cells/cdc_reset_ctrlr.sv:187.8" *)
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$28y ;
  wire \$2y ;
  wire \$8y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14016 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14018 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14020 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14022 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14024 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14026 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14028 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14030 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14032 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14034 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13293 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13295 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13301 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13305 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13307 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13311 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$14959 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$14961 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *)
  wire [3:0] \$initiator_state_d$10 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *)
  wire [3:0] \$initiator_state_d$11 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *)
  wire [3:0] \$initiator_state_d$5 ;
  wire \$procmux$605_Y ;
  wire \$procmux$606_CMP ;
  wire \$procmux$607_CMP ;
  wire \$procmux$608_CMP ;
  wire \$procmux$609_CMP ;
  wire \$procmux$640_Y ;
  wire \$procmux$641_CMP ;
  wire \$procmux$642_CMP ;
  wire \$procmux$643_CMP ;
  wire \$procmux$644_CMP ;
  wire \$procmux$656_Y ;
  wire \$procmux$669_CMP ;
  wire \$procmux$675_CMP ;
  wire \$procmux$682_CMP ;
  wire \$procmux$690_CMP ;
  wire \$procmux$705_CMP ;
  wire \$procmux$740_CMP ;
  wire \$procmux$751_CMP ;
  wire \$procmux$769_CMP ;
  wire \$procmux$820_CMP ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:209.30" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:212.30" *)
  output async_ack_o;
  wire async_ack_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:210.30" *)
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:207.30" *)
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:211.30" *)
  input async_req_i;
  wire async_req_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:208.30" *)
  output async_req_o;
  wire async_req_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:205.30" *)
  input clear_ack_i;
  wire clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:201.30" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:204.30" *)
  output clear_o;
  wire clear_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:199.30" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:263.30" *)
  wire initiator_clear_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:259.30" *)
  wire [1:0] initiator_clear_seq_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:262.30" *)
  wire initiator_isolate_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:261.30" *)
  wire initiator_phase_transition_ack;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:260.30" *)
  wire initiator_phase_transition_req;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.21" *)
  wire [3:0] initiator_state_d;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.40" *)
  reg [3:0] initiator_state_q;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:203.30" *)
  input isolate_ack_i;
  wire isolate_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:202.30" *)
  output isolate_o;
  wire isolate_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:419.9" *)
  wire receiver_clear_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:418.9" *)
  wire receiver_isolate_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:415.21" *)
  wire [1:0] receiver_next_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.29" *)
  wire receiver_phase_ack;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:414.21" *)
  reg [1:0] receiver_phase_q;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.9" *)
  wire receiver_phase_req;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:200.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$2y  = initiator_phase_transition_ack && (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.13-284.60" *) isolate_ack_i;
  assign \$28y  = receiver_phase_req && (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:441.18-441.58" *) receiver_phase_ack;
  assign clear_o = initiator_clear_out || (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:526.20-526.61" *) receiver_clear_out;
  assign isolate_o = initiator_isolate_out || (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:527.22-527.67" *) receiver_isolate_out;
  assign \$8y  = initiator_phase_transition_ack && (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.13-317.58" *) clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:438.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) receiver_phase_q <= 2'h0;
    else if (\$28y ) receiver_phase_q <= receiver_next_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:371.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) initiator_state_q <= 4'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14034 ) initiator_state_q <= initiator_state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14016  = { \$procmux$769_CMP , initiator_phase_transition_ack, isolate_ack_i, \$2y  } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14018  = { \$procmux$705_CMP , initiator_phase_transition_ack, clear_ack_i, \$8y  } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14020  = { \$procmux$820_CMP , clear_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14022  = { \$procmux$751_CMP , isolate_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14024  = { \$procmux$690_CMP , clear_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14026  = { \$procmux$669_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14028  = { \$procmux$675_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14030  = { \$procmux$682_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14032  = { \$procmux$740_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14034  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14032 , \$auto$opt_dff.cc:194:make_patterns_logic$14016 , \$auto$opt_dff.cc:194:make_patterns_logic$14018 , \$auto$opt_dff.cc:194:make_patterns_logic$14020 , \$auto$opt_dff.cc:194:make_patterns_logic$14022 , \$auto$opt_dff.cc:194:make_patterns_logic$14024 , \$auto$opt_dff.cc:194:make_patterns_logic$14026 , \$auto$opt_dff.cc:194:make_patterns_logic$14030 , \$auto$opt_dff.cc:194:make_patterns_logic$14028  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13293  = | { \$procmux$608_CMP , \$procmux$607_CMP , \$procmux$606_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13295  = | { \$procmux$644_CMP , \$procmux$643_CMP , \$procmux$641_CMP  };
  assign initiator_isolate_out = | { \$procmux$769_CMP , \$procmux$751_CMP , \$procmux$740_CMP , \$procmux$705_CMP , \$procmux$690_CMP , \$procmux$682_CMP , \$procmux$675_CMP , \$procmux$669_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13301  = | { \$procmux$643_CMP , \$procmux$642_CMP , \$procmux$641_CMP  };
  assign initiator_phase_transition_req = | { \$procmux$769_CMP , \$procmux$740_CMP , \$procmux$705_CMP , \$procmux$682_CMP , \$procmux$675_CMP , \$procmux$669_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13305  = | { \$procmux$644_CMP , \$procmux$641_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13307  = | { \$procmux$609_CMP , \$procmux$608_CMP , \$procmux$606_CMP  };
  assign initiator_clear_out = | { \$procmux$705_CMP , \$procmux$690_CMP , \$procmux$682_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13311  = | { \$procmux$769_CMP , \$procmux$751_CMP , \$procmux$740_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$14959  = | { \$procmux$690_CMP , \$procmux$682_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$14961  = | { \$procmux$751_CMP , \$procmux$740_CMP  };
  assign \$procmux$605_Y  = ~ (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) \$auto$opt_reduce.cc:137:opt_pmux$13307 ;
  assign \$procmux$606_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h3;
  assign \$procmux$607_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h2;
  assign \$procmux$608_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 1'h1;
  assign \$procmux$609_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) receiver_phase_q;
  assign receiver_clear_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$procmux$640_Y  : \$procmux$605_Y ;
  assign receiver_isolate_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$opt_reduce.cc:137:opt_pmux$13301  : \$auto$opt_reduce.cc:137:opt_pmux$13293 ;
  assign receiver_phase_ack = receiver_phase_req & (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$procmux$656_Y ;
  assign \$procmux$640_Y  = ~ (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) \$auto$opt_reduce.cc:137:opt_pmux$13295 ;
  assign \$procmux$641_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h3;
  assign \$procmux$642_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h2;
  assign \$procmux$643_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 1'h1;
  assign \$procmux$644_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) receiver_next_phase;
  function [0:0] \$procmux$656 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$656  = b[0:0];
      2'b1?:
        \$procmux$656  = b[1:1];
      default:
        \$procmux$656  = a;
    endcase
  endfunction
  assign \$procmux$656_Y  = \$procmux$656 (isolate_ack_i, { clear_ack_i, 1'h1 }, { \$procmux$642_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13305  });
  assign \$procmux$669_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 4'h8;
  assign \$procmux$675_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h7;
  assign \$procmux$682_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h5;
  assign \$procmux$690_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h6;
  assign \$procmux$705_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h4;
  assign \$initiator_state_d$10 [1:0] = initiator_phase_transition_ack ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *) 2'h2 : 2'h1;
  assign \$initiator_state_d$11 [1:0] = \$8y  ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *) 2'h3 : \$initiator_state_d$10 [1:0];
  assign \$procmux$740_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h2;
  assign \$procmux$751_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h3;
  assign \$procmux$769_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 1'h1;
  assign \$initiator_state_d$5 [2:0] = \$2y  ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *) 3'h4 : { 2'h1, initiator_phase_transition_ack };
  function [3:0] \$procmux$803 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$803  = b[3:0];
      6'b????1?:
        \$procmux$803  = b[7:4];
      6'b???1??:
        \$procmux$803  = b[11:8];
      6'b??1???:
        \$procmux$803  = b[15:12];
      6'b?1????:
        \$procmux$803  = b[19:16];
      6'b1?????:
        \$procmux$803  = b[23:20];
      default:
        \$procmux$803  = a;
    endcase
  endfunction
  assign initiator_state_d = \$procmux$803 (4'h1, { 1'h0, \$initiator_state_d$5 [2:0], 6'h11, \$initiator_state_d$11 [1:0], 12'h780 }, { \$procmux$769_CMP , \$auto$opt_reduce.cc:137:opt_pmux$14961 , \$procmux$705_CMP , \$auto$opt_reduce.cc:137:opt_pmux$14959 , \$procmux$675_CMP , \$procmux$669_CMP  });
  assign \$procmux$820_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) initiator_state_q;
  function [1:0] \$procmux$885 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$885  = b[1:0];
      3'b?1?:
        \$procmux$885  = b[3:2];
      3'b1??:
        \$procmux$885  = b[5:4];
      default:
        \$procmux$885  = a;
    endcase
  endfunction
  assign initiator_clear_seq_phase = \$procmux$885 (2'h0, 6'h1b, { \$auto$opt_reduce.cc:137:opt_pmux$13311 , initiator_clear_out, \$procmux$675_CMP  });
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:427.5" *)
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:398.5" *)
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$initiator_state_d$10 [3:2] = 2'h1;
  assign \$initiator_state_d$11 [3:2] = 2'h1;
  assign \$initiator_state_d$5 [3] = 1'h0;
endmodule

(* src = "rtl/core_wrap.sv:8.8" *)
module \core_wrap$croc_chip.i_croc_soc.i_croc.i_core_wrap (clk_i, rst_ni, ref_clk_i, core_busy_o, test_enable_i, irqs_i, timer0_irq_i, boot_addr_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_be_o, data_addr_o, data_wdata_o
, data_rdata_i, data_err_i, debug_req_i, fetch_enable_i);
  (* src = "rtl/core_wrap.sv:17.23" *)
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  (* src = "rtl/core_wrap.sv:9.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/core_wrap.sv:44.23" *)
  output core_busy_o;
  wire core_busy_o;
  (* src = "rtl/core_wrap.sv:33.23" *)
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  (* src = "rtl/core_wrap.sv:32.23" *)
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  (* src = "rtl/core_wrap.sv:36.23" *)
  input data_err_i;
  wire data_err_i;
  (* src = "rtl/core_wrap.sv:29.23" *)
  input data_gnt_i;
  wire data_gnt_i;
  (* src = "rtl/core_wrap.sv:35.23" *)
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  (* src = "rtl/core_wrap.sv:28.23" *)
  output data_req_o;
  wire data_req_o;
  (* src = "rtl/core_wrap.sv:30.23" *)
  input data_rvalid_i;
  wire data_rvalid_i;
  (* src = "rtl/core_wrap.sv:34.23" *)
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  (* src = "rtl/core_wrap.sv:31.23" *)
  output data_we_o;
  wire data_we_o;
  (* src = "rtl/core_wrap.sv:39.23" *)
  input debug_req_i;
  wire debug_req_i;
  (* src = "rtl/core_wrap.sv:42.23" *)
  input fetch_enable_i;
  wire fetch_enable_i;
  (* src = "rtl/core_wrap.sv:23.23" *)
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  (* src = "rtl/core_wrap.sv:25.23" *)
  input instr_err_i;
  wire instr_err_i;
  (* src = "rtl/core_wrap.sv:21.23" *)
  input instr_gnt_i;
  wire instr_gnt_i;
  (* src = "rtl/core_wrap.sv:24.23" *)
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  (* src = "rtl/core_wrap.sv:20.23" *)
  output instr_req_o;
  wire instr_req_o;
  (* src = "rtl/core_wrap.sv:22.23" *)
  input instr_rvalid_i;
  wire instr_rvalid_i;
  (* src = "rtl/core_wrap.sv:14.22" *)
  input [15:0] irqs_i;
  wire [15:0] irqs_i;
  (* src = "rtl/core_wrap.sv:11.16" *)
  input ref_clk_i;
  wire ref_clk_i;
  (* src = "rtl/core_wrap.sv:10.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/core_wrap.sv:12.16" *)
  input test_enable_i;
  wire test_enable_i;
  (* src = "rtl/core_wrap.sv:15.15" *)
  input timer0_irq_i;
  wire timer0_irq_i;
  (* src = "rtl/core_wrap.sv:68.5" *)
  \cve2_core$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex  i_ibex (
    .boot_addr_i({ boot_addr_i[31:8], 8'h00 }),
    .clk_i(clk_i),
    .core_busy_o(core_busy_o),
    .data_addr_o(data_addr_o),
    .data_be_o(data_be_o),
    .data_err_i(data_err_i),
    .data_gnt_i(data_gnt_i),
    .data_rdata_i(data_rdata_i),
    .data_req_o(data_req_o),
    .data_rvalid_i(data_rvalid_i),
    .data_wdata_o(data_wdata_o),
    .data_we_o(data_we_o),
    .debug_req_i(debug_req_i),
    .fetch_enable_i(fetch_enable_i),
    .hart_id_i(32'd0),
    .instr_addr_o(instr_addr_o),
    .instr_err_i(instr_err_i),
    .instr_gnt_i(instr_gnt_i),
    .instr_rdata_i(instr_rdata_i),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .irq_external_i(1'h0),
    .irq_fast_i(irqs_i),
    .irq_nm_i(1'h0),
    .irq_software_i(1'h0),
    .irq_timer_i(timer0_irq_i),
    .rst_ni(rst_ni),
    .test_en_i(test_enable_i)
  );
endmodule

(* top =  1  *)
(* src = "rtl/croc_chip.sv:8.8" *)
module croc_chip(clk_i, rst_ni, ref_clk_i, jtag_tck_i, jtag_trst_ni, jtag_tms_i, jtag_tdi_i, jtag_tdo_o, uart_rx_i, uart_tx_o, fetch_en_i, status_o, gpio0_io, gpio1_io, gpio2_io, gpio3_io, gpio4_io, gpio5_io, gpio6_io, gpio7_io, gpio8_io
, gpio9_io, gpio10_io, gpio11_io, gpio12_io, gpio13_io, gpio14_io, gpio15_io, gpio16_io, gpio17_io, gpio18_io, gpio19_io, gpio20_io, gpio21_io, gpio22_io, gpio23_io, gpio24_io, gpio25_io, gpio26_io, gpio27_io, gpio28_io, gpio29_io
, gpio30_io, gpio31_io, unused0_o, unused1_o, unused2_o, unused3_o);
  (* src = "rtl/croc_chip.sv:9.15" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/croc_chip.sv:22.15" *)
  input fetch_en_i;
  wire fetch_en_i;
  (* src = "rtl/croc_chip.sv:25.15" *)
  inout gpio0_io;
  wire gpio0_io;
  (* src = "rtl/croc_chip.sv:35.15" *)
  inout gpio10_io;
  wire gpio10_io;
  (* src = "rtl/croc_chip.sv:36.15" *)
  inout gpio11_io;
  wire gpio11_io;
  (* src = "rtl/croc_chip.sv:37.15" *)
  inout gpio12_io;
  wire gpio12_io;
  (* src = "rtl/croc_chip.sv:38.15" *)
  inout gpio13_io;
  wire gpio13_io;
  (* src = "rtl/croc_chip.sv:39.15" *)
  inout gpio14_io;
  wire gpio14_io;
  (* src = "rtl/croc_chip.sv:40.15" *)
  inout gpio15_io;
  wire gpio15_io;
  (* src = "rtl/croc_chip.sv:41.15" *)
  inout gpio16_io;
  wire gpio16_io;
  (* src = "rtl/croc_chip.sv:42.15" *)
  inout gpio17_io;
  wire gpio17_io;
  (* src = "rtl/croc_chip.sv:43.15" *)
  inout gpio18_io;
  wire gpio18_io;
  (* src = "rtl/croc_chip.sv:44.15" *)
  inout gpio19_io;
  wire gpio19_io;
  (* src = "rtl/croc_chip.sv:26.15" *)
  inout gpio1_io;
  wire gpio1_io;
  (* src = "rtl/croc_chip.sv:45.15" *)
  inout gpio20_io;
  wire gpio20_io;
  (* src = "rtl/croc_chip.sv:46.15" *)
  inout gpio21_io;
  wire gpio21_io;
  (* src = "rtl/croc_chip.sv:47.15" *)
  inout gpio22_io;
  wire gpio22_io;
  (* src = "rtl/croc_chip.sv:48.15" *)
  inout gpio23_io;
  wire gpio23_io;
  (* src = "rtl/croc_chip.sv:49.15" *)
  inout gpio24_io;
  wire gpio24_io;
  (* src = "rtl/croc_chip.sv:50.15" *)
  inout gpio25_io;
  wire gpio25_io;
  (* src = "rtl/croc_chip.sv:51.15" *)
  inout gpio26_io;
  wire gpio26_io;
  (* src = "rtl/croc_chip.sv:52.15" *)
  inout gpio27_io;
  wire gpio27_io;
  (* src = "rtl/croc_chip.sv:53.15" *)
  inout gpio28_io;
  wire gpio28_io;
  (* src = "rtl/croc_chip.sv:54.15" *)
  inout gpio29_io;
  wire gpio29_io;
  (* src = "rtl/croc_chip.sv:27.15" *)
  inout gpio2_io;
  wire gpio2_io;
  (* src = "rtl/croc_chip.sv:55.15" *)
  inout gpio30_io;
  wire gpio30_io;
  (* src = "rtl/croc_chip.sv:56.15" *)
  inout gpio31_io;
  wire gpio31_io;
  (* src = "rtl/croc_chip.sv:28.15" *)
  inout gpio3_io;
  wire gpio3_io;
  (* src = "rtl/croc_chip.sv:29.15" *)
  inout gpio4_io;
  wire gpio4_io;
  (* src = "rtl/croc_chip.sv:30.15" *)
  inout gpio5_io;
  wire gpio5_io;
  (* src = "rtl/croc_chip.sv:31.15" *)
  inout gpio6_io;
  wire gpio6_io;
  (* src = "rtl/croc_chip.sv:32.15" *)
  inout gpio7_io;
  wire gpio7_io;
  (* src = "rtl/croc_chip.sv:33.15" *)
  inout gpio8_io;
  wire gpio8_io;
  (* src = "rtl/croc_chip.sv:34.15" *)
  inout gpio9_io;
  wire gpio9_io;
  (* src = "rtl/croc_chip.sv:13.15" *)
  input jtag_tck_i;
  wire jtag_tck_i;
  (* src = "rtl/croc_chip.sv:16.15" *)
  input jtag_tdi_i;
  wire jtag_tdi_i;
  (* src = "rtl/croc_chip.sv:17.15" *)
  output jtag_tdo_o;
  wire jtag_tdo_o;
  (* src = "rtl/croc_chip.sv:15.15" *)
  input jtag_tms_i;
  wire jtag_tms_i;
  (* src = "rtl/croc_chip.sv:14.15" *)
  input jtag_trst_ni;
  wire jtag_trst_ni;
  (* src = "rtl/croc_chip.sv:11.15" *)
  input ref_clk_i;
  wire ref_clk_i;
  (* src = "rtl/croc_chip.sv:10.15" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/croc_chip.sv:62.11" *)
  wire soc_clk_i;
  (* src = "rtl/croc_chip.sv:73.11" *)
  wire soc_fetch_en_i;
  (* src = "rtl/croc_chip.sv:78.27" *)
  wire [31:0] soc_gpio_i;
  (* src = "rtl/croc_chip.sv:79.27" *)
  wire [31:0] soc_gpio_o;
  (* src = "rtl/croc_chip.sv:80.27" *)
  wire [31:0] soc_gpio_out_en_o;
  (* src = "rtl/croc_chip.sv:67.11" *)
  wire soc_jtag_tck_i;
  (* src = "rtl/croc_chip.sv:70.11" *)
  wire soc_jtag_tdi_i;
  (* src = "rtl/croc_chip.sv:71.11" *)
  wire soc_jtag_tdo_o;
  (* src = "rtl/croc_chip.sv:69.11" *)
  wire soc_jtag_tms_i;
  (* src = "rtl/croc_chip.sv:68.11" *)
  wire soc_jtag_trst_ni;
  (* src = "rtl/croc_chip.sv:64.11" *)
  wire soc_ref_clk_i;
  (* src = "rtl/croc_chip.sv:63.11" *)
  wire soc_rst_ni;
  (* src = "rtl/croc_chip.sv:74.11" *)
  wire soc_status_o;
  (* src = "rtl/croc_chip.sv:93.70" *)
  wire soc_uart_rx_i;
  (* src = "rtl/croc_chip.sv:94.70" *)
  wire soc_uart_tx_o;
  (* src = "rtl/croc_chip.sv:23.15" *)
  output status_o;
  wire status_o;
  (* src = "rtl/croc_chip.sv:19.15" *)
  input uart_rx_i;
  wire uart_rx_i;
  (* src = "rtl/croc_chip.sv:20.15" *)
  output uart_tx_o;
  wire uart_tx_o;
  (* src = "rtl/croc_chip.sv:57.15" *)
  output unused0_o;
  wire unused0_o;
  (* src = "rtl/croc_chip.sv:58.15" *)
  output unused1_o;
  wire unused1_o;
  (* src = "rtl/croc_chip.sv:59.15" *)
  output unused2_o;
  wire unused2_o;
  (* src = "rtl/croc_chip.sv:60.15" *)
  output unused3_o;
  wire unused3_o;
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_chip.sv:159.3" *)
  \croc_soc$croc_chip.i_croc_soc  i_croc_soc (
    .clk_i(soc_clk_i),
    .fetch_en_i(soc_fetch_en_i),
    .gpio_i(soc_gpio_i),
    .gpio_o(soc_gpio_o),
    .gpio_out_en_o(soc_gpio_out_en_o),
    .jtag_tck_i(soc_jtag_tck_i),
    .jtag_tdi_i(soc_jtag_tdi_i),
    .jtag_tdo_o(soc_jtag_tdo_o),
    .jtag_tms_i(soc_jtag_tms_i),
    .jtag_trst_ni(soc_jtag_trst_ni),
    .ref_clk_i(soc_ref_clk_i),
    .rst_ni(soc_rst_ni),
    .status_o(soc_status_o),
    .testmode_i(1'h0),
    .uart_rx_i(soc_uart_rx_i),
    .uart_tx_o(soc_uart_tx_o)
  );
  (* src = "rtl/croc_chip.sv:82.27" *)
  sg13g2_IOPadIn pad_clk_i (
    .p2c(soc_clk_i),
    .pad(clk_i)
  );
  (* src = "rtl/croc_chip.sv:96.27" *)
  sg13g2_IOPadIn pad_fetch_en_i (
    .p2c(soc_fetch_en_i),
    .pad(fetch_en_i)
  );
  (* src = "rtl/croc_chip.sv:99.27" *)
  sg13g2_IOPadInOut30mA pad_gpio0_io (
    .c2p(soc_gpio_o[0]),
    .c2p_en(soc_gpio_out_en_o[0]),
    .p2c(soc_gpio_i[0]),
    .pad(gpio0_io)
  );
  (* src = "rtl/croc_chip.sv:109.27" *)
  sg13g2_IOPadInOut30mA pad_gpio10_io (
    .c2p(soc_gpio_o[10]),
    .c2p_en(soc_gpio_out_en_o[10]),
    .p2c(soc_gpio_i[10]),
    .pad(gpio10_io)
  );
  (* src = "rtl/croc_chip.sv:110.27" *)
  sg13g2_IOPadInOut30mA pad_gpio11_io (
    .c2p(soc_gpio_o[11]),
    .c2p_en(soc_gpio_out_en_o[11]),
    .p2c(soc_gpio_i[11]),
    .pad(gpio11_io)
  );
  (* src = "rtl/croc_chip.sv:111.27" *)
  sg13g2_IOPadInOut30mA pad_gpio12_io (
    .c2p(soc_gpio_o[12]),
    .c2p_en(soc_gpio_out_en_o[12]),
    .p2c(soc_gpio_i[12]),
    .pad(gpio12_io)
  );
  (* src = "rtl/croc_chip.sv:112.27" *)
  sg13g2_IOPadInOut30mA pad_gpio13_io (
    .c2p(soc_gpio_o[13]),
    .c2p_en(soc_gpio_out_en_o[13]),
    .p2c(soc_gpio_i[13]),
    .pad(gpio13_io)
  );
  (* src = "rtl/croc_chip.sv:113.27" *)
  sg13g2_IOPadInOut30mA pad_gpio14_io (
    .c2p(soc_gpio_o[14]),
    .c2p_en(soc_gpio_out_en_o[14]),
    .p2c(soc_gpio_i[14]),
    .pad(gpio14_io)
  );
  (* src = "rtl/croc_chip.sv:114.27" *)
  sg13g2_IOPadInOut30mA pad_gpio15_io (
    .c2p(soc_gpio_o[15]),
    .c2p_en(soc_gpio_out_en_o[15]),
    .p2c(soc_gpio_i[15]),
    .pad(gpio15_io)
  );
  (* src = "rtl/croc_chip.sv:115.27" *)
  sg13g2_IOPadInOut30mA pad_gpio16_io (
    .c2p(soc_gpio_o[16]),
    .c2p_en(soc_gpio_out_en_o[16]),
    .p2c(soc_gpio_i[16]),
    .pad(gpio16_io)
  );
  (* src = "rtl/croc_chip.sv:116.27" *)
  sg13g2_IOPadInOut30mA pad_gpio17_io (
    .c2p(soc_gpio_o[17]),
    .c2p_en(soc_gpio_out_en_o[17]),
    .p2c(soc_gpio_i[17]),
    .pad(gpio17_io)
  );
  (* src = "rtl/croc_chip.sv:117.27" *)
  sg13g2_IOPadInOut30mA pad_gpio18_io (
    .c2p(soc_gpio_o[18]),
    .c2p_en(soc_gpio_out_en_o[18]),
    .p2c(soc_gpio_i[18]),
    .pad(gpio18_io)
  );
  (* src = "rtl/croc_chip.sv:118.27" *)
  sg13g2_IOPadInOut30mA pad_gpio19_io (
    .c2p(soc_gpio_o[19]),
    .c2p_en(soc_gpio_out_en_o[19]),
    .p2c(soc_gpio_i[19]),
    .pad(gpio19_io)
  );
  (* src = "rtl/croc_chip.sv:100.27" *)
  sg13g2_IOPadInOut30mA pad_gpio1_io (
    .c2p(soc_gpio_o[1]),
    .c2p_en(soc_gpio_out_en_o[1]),
    .p2c(soc_gpio_i[1]),
    .pad(gpio1_io)
  );
  (* src = "rtl/croc_chip.sv:119.27" *)
  sg13g2_IOPadInOut30mA pad_gpio20_io (
    .c2p(soc_gpio_o[20]),
    .c2p_en(soc_gpio_out_en_o[20]),
    .p2c(soc_gpio_i[20]),
    .pad(gpio20_io)
  );
  (* src = "rtl/croc_chip.sv:120.27" *)
  sg13g2_IOPadInOut30mA pad_gpio21_io (
    .c2p(soc_gpio_o[21]),
    .c2p_en(soc_gpio_out_en_o[21]),
    .p2c(soc_gpio_i[21]),
    .pad(gpio21_io)
  );
  (* src = "rtl/croc_chip.sv:121.27" *)
  sg13g2_IOPadInOut30mA pad_gpio22_io (
    .c2p(soc_gpio_o[22]),
    .c2p_en(soc_gpio_out_en_o[22]),
    .p2c(soc_gpio_i[22]),
    .pad(gpio22_io)
  );
  (* src = "rtl/croc_chip.sv:122.27" *)
  sg13g2_IOPadInOut30mA pad_gpio23_io (
    .c2p(soc_gpio_o[23]),
    .c2p_en(soc_gpio_out_en_o[23]),
    .p2c(soc_gpio_i[23]),
    .pad(gpio23_io)
  );
  (* src = "rtl/croc_chip.sv:123.27" *)
  sg13g2_IOPadInOut30mA pad_gpio24_io (
    .c2p(soc_gpio_o[24]),
    .c2p_en(soc_gpio_out_en_o[24]),
    .p2c(soc_gpio_i[24]),
    .pad(gpio24_io)
  );
  (* src = "rtl/croc_chip.sv:124.27" *)
  sg13g2_IOPadInOut30mA pad_gpio25_io (
    .c2p(soc_gpio_o[25]),
    .c2p_en(soc_gpio_out_en_o[25]),
    .p2c(soc_gpio_i[25]),
    .pad(gpio25_io)
  );
  (* src = "rtl/croc_chip.sv:125.27" *)
  sg13g2_IOPadInOut30mA pad_gpio26_io (
    .c2p(soc_gpio_o[26]),
    .c2p_en(soc_gpio_out_en_o[26]),
    .p2c(soc_gpio_i[26]),
    .pad(gpio26_io)
  );
  (* src = "rtl/croc_chip.sv:126.27" *)
  sg13g2_IOPadInOut30mA pad_gpio27_io (
    .c2p(soc_gpio_o[27]),
    .c2p_en(soc_gpio_out_en_o[27]),
    .p2c(soc_gpio_i[27]),
    .pad(gpio27_io)
  );
  (* src = "rtl/croc_chip.sv:127.27" *)
  sg13g2_IOPadInOut30mA pad_gpio28_io (
    .c2p(soc_gpio_o[28]),
    .c2p_en(soc_gpio_out_en_o[28]),
    .p2c(soc_gpio_i[28]),
    .pad(gpio28_io)
  );
  (* src = "rtl/croc_chip.sv:128.27" *)
  sg13g2_IOPadInOut30mA pad_gpio29_io (
    .c2p(soc_gpio_o[29]),
    .c2p_en(soc_gpio_out_en_o[29]),
    .p2c(soc_gpio_i[29]),
    .pad(gpio29_io)
  );
  (* src = "rtl/croc_chip.sv:101.27" *)
  sg13g2_IOPadInOut30mA pad_gpio2_io (
    .c2p(soc_gpio_o[2]),
    .c2p_en(soc_gpio_out_en_o[2]),
    .p2c(soc_gpio_i[2]),
    .pad(gpio2_io)
  );
  (* src = "rtl/croc_chip.sv:129.27" *)
  sg13g2_IOPadInOut30mA pad_gpio30_io (
    .c2p(soc_gpio_o[30]),
    .c2p_en(soc_gpio_out_en_o[30]),
    .p2c(soc_gpio_i[30]),
    .pad(gpio30_io)
  );
  (* src = "rtl/croc_chip.sv:130.27" *)
  sg13g2_IOPadInOut30mA pad_gpio31_io (
    .c2p(soc_gpio_o[31]),
    .c2p_en(soc_gpio_out_en_o[31]),
    .p2c(soc_gpio_i[31]),
    .pad(gpio31_io)
  );
  (* src = "rtl/croc_chip.sv:102.27" *)
  sg13g2_IOPadInOut30mA pad_gpio3_io (
    .c2p(soc_gpio_o[3]),
    .c2p_en(soc_gpio_out_en_o[3]),
    .p2c(soc_gpio_i[3]),
    .pad(gpio3_io)
  );
  (* src = "rtl/croc_chip.sv:103.27" *)
  sg13g2_IOPadInOut30mA pad_gpio4_io (
    .c2p(soc_gpio_o[4]),
    .c2p_en(soc_gpio_out_en_o[4]),
    .p2c(soc_gpio_i[4]),
    .pad(gpio4_io)
  );
  (* src = "rtl/croc_chip.sv:104.27" *)
  sg13g2_IOPadInOut30mA pad_gpio5_io (
    .c2p(soc_gpio_o[5]),
    .c2p_en(soc_gpio_out_en_o[5]),
    .p2c(soc_gpio_i[5]),
    .pad(gpio5_io)
  );
  (* src = "rtl/croc_chip.sv:105.27" *)
  sg13g2_IOPadInOut30mA pad_gpio6_io (
    .c2p(soc_gpio_o[6]),
    .c2p_en(soc_gpio_out_en_o[6]),
    .p2c(soc_gpio_i[6]),
    .pad(gpio6_io)
  );
  (* src = "rtl/croc_chip.sv:106.27" *)
  sg13g2_IOPadInOut30mA pad_gpio7_io (
    .c2p(soc_gpio_o[7]),
    .c2p_en(soc_gpio_out_en_o[7]),
    .p2c(soc_gpio_i[7]),
    .pad(gpio7_io)
  );
  (* src = "rtl/croc_chip.sv:107.27" *)
  sg13g2_IOPadInOut30mA pad_gpio8_io (
    .c2p(soc_gpio_o[8]),
    .c2p_en(soc_gpio_out_en_o[8]),
    .p2c(soc_gpio_i[8]),
    .pad(gpio8_io)
  );
  (* src = "rtl/croc_chip.sv:108.27" *)
  sg13g2_IOPadInOut30mA pad_gpio9_io (
    .c2p(soc_gpio_o[9]),
    .c2p_en(soc_gpio_out_en_o[9]),
    .p2c(soc_gpio_i[9]),
    .pad(gpio9_io)
  );
  (* src = "rtl/croc_chip.sv:87.27" *)
  sg13g2_IOPadIn pad_jtag_tck_i (
    .p2c(soc_jtag_tck_i),
    .pad(jtag_tck_i)
  );
  (* src = "rtl/croc_chip.sv:90.27" *)
  sg13g2_IOPadIn pad_jtag_tdi_i (
    .p2c(soc_jtag_tdi_i),
    .pad(jtag_tdi_i)
  );
  (* src = "rtl/croc_chip.sv:91.27" *)
  sg13g2_IOPadOut16mA pad_jtag_tdo_o (
    .c2p(soc_jtag_tdo_o),
    .pad(jtag_tdo_o)
  );
  (* src = "rtl/croc_chip.sv:89.27" *)
  sg13g2_IOPadIn pad_jtag_tms_i (
    .p2c(soc_jtag_tms_i),
    .pad(jtag_tms_i)
  );
  (* src = "rtl/croc_chip.sv:88.27" *)
  sg13g2_IOPadIn pad_jtag_trst_ni (
    .p2c(soc_jtag_trst_ni),
    .pad(jtag_trst_ni)
  );
  (* src = "rtl/croc_chip.sv:84.27" *)
  sg13g2_IOPadIn pad_ref_clk_i (
    .p2c(soc_ref_clk_i),
    .pad(ref_clk_i)
  );
  (* src = "rtl/croc_chip.sv:83.27" *)
  sg13g2_IOPadIn pad_rst_ni (
    .p2c(soc_rst_ni),
    .pad(rst_ni)
  );
  (* src = "rtl/croc_chip.sv:97.27" *)
  sg13g2_IOPadOut16mA pad_status_o (
    .c2p(soc_status_o),
    .pad(status_o)
  );
  (* src = "rtl/croc_chip.sv:93.27" *)
  sg13g2_IOPadIn pad_uart_rx_i (
    .p2c(soc_uart_rx_i),
    .pad(uart_rx_i)
  );
  (* src = "rtl/croc_chip.sv:94.27" *)
  sg13g2_IOPadOut16mA pad_uart_tx_o (
    .c2p(soc_uart_tx_o),
    .pad(uart_tx_o)
  );
  (* src = "rtl/croc_chip.sv:131.25" *)
  sg13g2_IOPadOut16mA pad_unused0_o (
    .c2p(soc_status_o),
    .pad(unused0_o)
  );
  (* src = "rtl/croc_chip.sv:132.25" *)
  sg13g2_IOPadOut16mA pad_unused1_o (
    .c2p(soc_status_o),
    .pad(unused1_o)
  );
  (* src = "rtl/croc_chip.sv:133.25" *)
  sg13g2_IOPadOut16mA pad_unused2_o (
    .c2p(soc_status_o),
    .pad(unused2_o)
  );
  (* src = "rtl/croc_chip.sv:134.25" *)
  sg13g2_IOPadOut16mA pad_unused3_o (
    .c2p(soc_status_o),
    .pad(unused3_o)
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:136.46" *)
  sg13g2_IOPadVdd pad_vdd0 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:137.46" *)
  sg13g2_IOPadVdd pad_vdd1 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:138.46" *)
  sg13g2_IOPadVdd pad_vdd2 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:139.46" *)
  sg13g2_IOPadVdd pad_vdd3 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:146.48" *)
  sg13g2_IOPadIOVdd pad_vddio0 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:147.48" *)
  sg13g2_IOPadIOVdd pad_vddio1 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:148.48" *)
  sg13g2_IOPadIOVdd pad_vddio2 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:149.48" *)
  sg13g2_IOPadIOVdd pad_vddio3 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:141.46" *)
  sg13g2_IOPadVss pad_vss0 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:142.46" *)
  sg13g2_IOPadVss pad_vss1 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:143.46" *)
  sg13g2_IOPadVss pad_vss2 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:144.46" *)
  sg13g2_IOPadVss pad_vss3 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:151.48" *)
  sg13g2_IOPadIOVss pad_vssio0 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:152.48" *)
  sg13g2_IOPadIOVss pad_vssio1 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:153.48" *)
  sg13g2_IOPadIOVss pad_vssio2 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:154.48" *)
  sg13g2_IOPadIOVss pad_vssio3 (
  );
endmodule

(* src = "rtl/croc_domain.sv:8.8" *)
module \croc_domain$croc_chip.i_croc_soc.i_croc (clk_i, rst_ni, ref_clk_i, jtag_tck_i, jtag_trst_ni, jtag_tms_i, jtag_tdi_i, jtag_tdo_o, uart_rx_i, uart_tx_o, fetch_en_i, testmode_i, gpio_i, gpio_o, gpio_out_en_o, gpio_in_sync_o, user_sbr_obi_req_o, user_sbr_obi_rsp_i, user_mgr_obi_req_i, user_mgr_obi_rsp_o, interrupts_i
, core_busy_o);
  wire \$1y ;
  wire \$3y ;
  wire \$4y ;
  (* src = "rtl/croc_domain.sv:133.34" *)
  (* unused_bits = "75 149 223 371" *)
  wire [443:0] all_periph_obi_req;
  (* src = "rtl/croc_domain.sv:134.34" *)
  wire [233:0] all_periph_obi_rsp;
  (* src = "rtl/croc_domain.sv:97.34" *)
  wire [369:0] all_sbr_obi_req;
  (* src = "rtl/croc_domain.sv:98.34" *)
  wire [194:0] all_sbr_obi_rsp;
  (* src = "rtl/croc_domain.sv:11.21" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/croc_domain.sv:43.16" *)
  output core_busy_o;
  wire core_busy_o;
  (* src = "rtl/croc_domain.sv:82.17" *)
  wire [71:0] core_data_obi_req;
  (* src = "rtl/croc_domain.sv:83.17" *)
  (* unused_bits = "2 4" *)
  wire [36:0] core_data_obi_rsp;
  (* src = "rtl/croc_domain.sv:73.17" *)
  wire [71:0] core_instr_obi_req;
  (* src = "rtl/croc_domain.sv:74.17" *)
  (* unused_bits = "2 4" *)
  wire [36:0] core_instr_obi_rsp;
  (* src = "rtl/croc_domain.sv:88.17" *)
  wire [71:0] dbg_req_obi_req;
  (* src = "rtl/croc_domain.sv:89.17" *)
  (* unused_bits = "2 4" *)
  wire [36:0] dbg_req_obi_rsp;
  (* src = "rtl/croc_domain.sv:50.9" *)
  wire debug_req;
  (* src = "rtl/croc_domain.sv:228.17" *)
  wire [40:0] dmi_req;
  (* src = "rtl/croc_domain.sv:227.35" *)
  wire dmi_req_ready;
  (* src = "rtl/croc_domain.sv:227.20" *)
  wire dmi_req_valid;
  (* src = "rtl/croc_domain.sv:229.18" *)
  wire [33:0] dmi_resp;
  (* src = "rtl/croc_domain.sv:227.66" *)
  wire dmi_resp_ready;
  (* src = "rtl/croc_domain.sv:227.50" *)
  wire dmi_resp_valid;
  (* src = "rtl/croc_domain.sv:227.9" *)
  wire dmi_rst_n;
  (* src = "rtl/croc_domain.sv:138.17" *)
  wire [38:0] error_obi_rsp;
  (* src = "rtl/croc_domain.sv:15.21" *)
  input fetch_en_i;
  wire fetch_en_i;
  (* src = "rtl/croc_domain.sv:51.9" *)
  wire fetch_enable;
  (* src = "rtl/croc_domain.sv:347.39" *)
  wire [3:0] \gen_sram_bank[0].bank_be ;
  (* src = "rtl/croc_domain.sv:344.37" *)
  (* unused_bits = "0 1 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] \gen_sram_bank[0].bank_byte_addr ;
  (* src = "rtl/croc_domain.sv:346.49" *)
  wire [31:0] \gen_sram_bank[0].bank_rdata ;
  (* src = "rtl/croc_domain.sv:343.11" *)
  wire \gen_sram_bank[0].bank_req ;
  (* src = "rtl/croc_domain.sv:346.37" *)
  wire [31:0] \gen_sram_bank[0].bank_wdata ;
  (* src = "rtl/croc_domain.sv:343.21" *)
  wire \gen_sram_bank[0].bank_we ;
  (* src = "rtl/croc_domain.sv:347.39" *)
  wire [3:0] \gen_sram_bank[1].bank_be ;
  (* src = "rtl/croc_domain.sv:344.37" *)
  (* unused_bits = "0 1 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] \gen_sram_bank[1].bank_byte_addr ;
  (* src = "rtl/croc_domain.sv:346.49" *)
  wire [31:0] \gen_sram_bank[1].bank_rdata ;
  (* src = "rtl/croc_domain.sv:343.11" *)
  wire \gen_sram_bank[1].bank_req ;
  (* src = "rtl/croc_domain.sv:346.37" *)
  wire [31:0] \gen_sram_bank[1].bank_wdata ;
  (* src = "rtl/croc_domain.sv:343.21" *)
  wire \gen_sram_bank[1].bank_we ;
  (* src = "rtl/croc_domain.sv:26.32" *)
  input [31:0] gpio_i;
  wire [31:0] gpio_i;
  (* src = "rtl/croc_domain.sv:30.32" *)
  output [31:0] gpio_in_sync_o;
  wire [31:0] gpio_in_sync_o;
  (* src = "rtl/croc_domain.sv:56.9" *)
  wire gpio_irq;
  (* src = "rtl/croc_domain.sv:27.32" *)
  output [31:0] gpio_o;
  wire [31:0] gpio_o;
  (* src = "rtl/croc_domain.sv:154.17" *)
  wire [38:0] gpio_obi_rsp;
  (* src = "rtl/croc_domain.sv:28.32" *)
  output [31:0] gpio_out_en_o;
  wire [31:0] gpio_out_en_o;
  (* src = "rtl/croc_domain.sv:42.38" *)
  input [3:0] interrupts_i;
  wire [3:0] interrupts_i;
  (* src = "rtl/croc_domain.sv:17.21" *)
  input jtag_tck_i;
  wire jtag_tck_i;
  (* src = "rtl/croc_domain.sv:18.21" *)
  input jtag_tdi_i;
  wire jtag_tdi_i;
  (* src = "rtl/croc_domain.sv:19.21" *)
  output jtag_tdo_o;
  wire jtag_tdo_o;
  (* src = "rtl/croc_domain.sv:20.21" *)
  input jtag_tms_i;
  wire jtag_tms_i;
  (* src = "rtl/croc_domain.sv:21.21" *)
  input jtag_trst_ni;
  wire jtag_trst_ni;
  (* src = "rtl/croc_domain.sv:418.50" *)
  wire [2:0] periph_idx;
  (* src = "rtl/croc_domain.sv:13.21" *)
  input ref_clk_i;
  wire ref_clk_i;
  (* src = "rtl/croc_domain.sv:12.21" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/croc_domain.sv:502.39" *)
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" *)
  wire [66:0] soc_ctrl_reg2hw;
  (* src = "rtl/croc_domain.sv:470.13" *)
  wire [69:0] soc_ctrl_reg_req;
  (* src = "rtl/croc_domain.sv:471.13" *)
  wire [33:0] soc_ctrl_reg_rsp;
  (* src = "rtl/croc_domain.sv:14.21" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/croc_domain.sv:57.9" *)
  wire timer0_irq0;
  (* src = "rtl/croc_domain.sv:58.9" *)
  wire timer0_irq1;
  (* src = "rtl/croc_domain.sv:55.9" *)
  wire uart_irq;
  (* src = "rtl/croc_domain.sv:524.13" *)
  wire [69:0] uart_reg_req;
  (* src = "rtl/croc_domain.sv:525.13" *)
  wire [33:0] uart_reg_rsp;
  (* src = "rtl/croc_domain.sv:23.21" *)
  input uart_rx_i;
  wire uart_rx_i;
  (* src = "rtl/croc_domain.sv:24.21" *)
  output uart_tx_o;
  wire uart_tx_o;
  (* src = "rtl/croc_domain.sv:39.24" *)
  input [71:0] user_mgr_obi_req_i;
  wire [71:0] user_mgr_obi_req_i;
  (* src = "rtl/croc_domain.sv:40.24" *)
  output [36:0] user_mgr_obi_rsp_o;
  wire [36:0] user_mgr_obi_rsp_o;
  (* src = "rtl/croc_domain.sv:35.24" *)
  output [73:0] user_sbr_obi_req_o;
  wire [73:0] user_sbr_obi_req_o;
  (* src = "rtl/croc_domain.sv:36.24" *)
  input [38:0] user_sbr_obi_rsp_i;
  wire [38:0] user_sbr_obi_rsp_i;
  (* src = "rtl/croc_domain.sv:112.17" *)
  wire [38:0] xbar_error_obi_rsp;
  (* src = "rtl/croc_domain.sv:108.17" *)
  wire [38:0] xbar_periph_obi_rsp;
  assign \$1y  = ~ (* src = "rtl/croc_domain.sv:486.18-486.40" *) all_periph_obi_req[189];
  assign fetch_enable = soc_ctrl_reg2hw[34] | (* src = "rtl/croc_domain.sv:504.28-504.66" *) fetch_en_i;
  assign \$3y  = ~ (* src = "rtl/croc_domain.sv:540.18-540.36" *) all_periph_obi_req[263];
  assign \$4y  = ~ (* src = "rtl/croc_domain.sv:606.19-606.38" *) all_periph_obi_req[411];
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_domain.sv:377.7" *)
  \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram  \gen_sram_bank[0].i_sram  (
    .addr_i(\gen_sram_bank[0].bank_byte_addr [10:2]),
    .be_i(\gen_sram_bank[0].bank_be ),
    .clk_i(clk_i),
    .impl_i(soc_ctrl_reg2hw[0]),
    .rdata_o(\gen_sram_bank[0].bank_rdata ),
    .req_i(\gen_sram_bank[0].bank_req ),
    .rst_ni(rst_ni),
    .wdata_i(\gen_sram_bank[0].bank_wdata ),
    .we_i(\gen_sram_bank[0].bank_we )
  );
  (* src = "rtl/croc_domain.sv:353.7" *)
  \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram_shim  \gen_sram_bank[0].i_sram_shim  (
    .addr_o(\gen_sram_bank[0].bank_byte_addr ),
    .be_o(\gen_sram_bank[0].bank_be ),
    .clk_i(clk_i),
    .gnt_i(1'h1),
    .obi_req_i(all_sbr_obi_req[221:148]),
    .obi_rsp_o(all_sbr_obi_rsp[116:78]),
    .rdata_i(\gen_sram_bank[0].bank_rdata ),
    .req_o(\gen_sram_bank[0].bank_req ),
    .rst_ni(rst_ni),
    .wdata_o(\gen_sram_bank[0].bank_wdata ),
    .we_o(\gen_sram_bank[0].bank_we )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_domain.sv:377.7" *)
  \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram  \gen_sram_bank[1].i_sram  (
    .addr_i(\gen_sram_bank[1].bank_byte_addr [10:2]),
    .be_i(\gen_sram_bank[1].bank_be ),
    .clk_i(clk_i),
    .impl_i(soc_ctrl_reg2hw[0]),
    .rdata_o(\gen_sram_bank[1].bank_rdata ),
    .req_i(\gen_sram_bank[1].bank_req ),
    .rst_ni(rst_ni),
    .wdata_i(\gen_sram_bank[1].bank_wdata ),
    .we_i(\gen_sram_bank[1].bank_we )
  );
  (* src = "rtl/croc_domain.sv:353.7" *)
  \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram_shim  \gen_sram_bank[1].i_sram_shim  (
    .addr_o(\gen_sram_bank[1].bank_byte_addr ),
    .be_o(\gen_sram_bank[1].bank_be ),
    .clk_i(clk_i),
    .gnt_i(1'h1),
    .obi_req_i(all_sbr_obi_req[295:222]),
    .obi_rsp_o(all_sbr_obi_rsp[155:117]),
    .rdata_i(\gen_sram_bank[1].bank_rdata ),
    .req_o(\gen_sram_bank[1].bank_req ),
    .rst_ni(rst_ni),
    .wdata_o(\gen_sram_bank[1].bank_wdata ),
    .we_o(\gen_sram_bank[1].bank_we )
  );
  (* src = "rtl/croc_domain.sv:426.5" *)
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs  i_addr_decode_periphs (
    .addr_i(all_sbr_obi_req[147:116]),
    .addr_map_i(480'h000000010000000000040000000000020300000003001000000000030300200003003000000000040300500003006000000000050300a0000300b000),
    .default_idx_i(3'h0),
    .en_default_idx_i(1'h1),
    .idx_o(periph_idx)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_domain.sv:179.5" *)
  \core_wrap$croc_chip.i_croc_soc.i_croc.i_core_wrap  i_core_wrap (
    .boot_addr_i(soc_ctrl_reg2hw[66:35]),
    .clk_i(clk_i),
    .core_busy_o(core_busy_o),
    .data_addr_o(core_data_obi_req[71:40]),
    .data_be_o(core_data_obi_req[38:35]),
    .data_err_i(core_data_obi_rsp[3]),
    .data_gnt_i(core_data_obi_rsp[1]),
    .data_rdata_i(core_data_obi_rsp[36:5]),
    .data_req_o(core_data_obi_req[0]),
    .data_rvalid_i(core_data_obi_rsp[0]),
    .data_wdata_o(core_data_obi_req[34:3]),
    .data_we_o(core_data_obi_req[39]),
    .debug_req_i(debug_req),
    .fetch_enable_i(fetch_enable),
    .instr_addr_o(core_instr_obi_req[71:40]),
    .instr_err_i(core_instr_obi_rsp[3]),
    .instr_gnt_i(core_instr_obi_rsp[1]),
    .instr_rdata_i(core_instr_obi_rsp[36:5]),
    .instr_req_o(core_instr_obi_req[0]),
    .instr_rvalid_i(core_instr_obi_rsp[0]),
    .irqs_i({ 9'h000, interrupts_i, gpio_irq, uart_irq, timer0_irq1 }),
    .ref_clk_i(ref_clk_i),
    .rst_ni(rst_ni),
    .test_enable_i(testmode_i),
    .timer0_irq_i(timer0_irq0)
  );
  (* src = "rtl/croc_domain.sv:258.5" *)
  \dm_obi_top$croc_chip.i_croc_soc.i_croc.i_dm_top  i_dm_top (
    .clk_i(clk_i),
    .debug_req_o(debug_req),
    .dmi_req_i(dmi_req),
    .dmi_req_ready_o(dmi_req_ready),
    .dmi_req_valid_i(dmi_req_valid),
    .dmi_resp_o(dmi_resp),
    .dmi_resp_ready_i(dmi_resp_ready),
    .dmi_resp_valid_o(dmi_resp_valid),
    .dmi_rst_ni(dmi_rst_n),
    .hartinfo_i(32'd2171776),
    .master_addr_o(dbg_req_obi_req[71:40]),
    .master_be_o(dbg_req_obi_req[38:35]),
    .master_err_i(dbg_req_obi_rsp[3]),
    .master_gnt_i(dbg_req_obi_rsp[1]),
    .master_other_err_i(1'h0),
    .master_rdata_i(dbg_req_obi_rsp[36:5]),
    .master_req_o(dbg_req_obi_req[0]),
    .master_rvalid_i(dbg_req_obi_rsp[0]),
    .master_wdata_o(dbg_req_obi_req[34:3]),
    .master_we_o(dbg_req_obi_req[39]),
    .rst_ni(rst_ni),
    .slave_addr_i(all_periph_obi_req[147:116]),
    .slave_aid_i(all_periph_obi_req[78:76]),
    .slave_be_i(all_periph_obi_req[114:111]),
    .slave_gnt_o(all_periph_obi_rsp[40]),
    .slave_rdata_o(all_periph_obi_rsp[77:46]),
    .slave_req_i(all_periph_obi_req[74]),
    .slave_rid_o(all_periph_obi_rsp[45:43]),
    .slave_rvalid_o(all_periph_obi_rsp[39]),
    .slave_wdata_i(all_periph_obi_req[110:79]),
    .slave_we_i(all_periph_obi_req[115]),
    .testmode_i(testmode_i),
    .unavailable_i(1'h0)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_domain.sv:233.5" *)
  \dmi_jtag$croc_chip.i_croc_soc.i_croc.i_dmi_jtag  i_dmi_jtag (
    .clk_i(clk_i),
    .dmi_req_o(dmi_req),
    .dmi_req_ready_i(dmi_req_ready),
    .dmi_req_valid_o(dmi_req_valid),
    .dmi_resp_i(dmi_resp),
    .dmi_resp_ready_o(dmi_resp_ready),
    .dmi_resp_valid_i(dmi_resp_valid),
    .dmi_rst_no(dmi_rst_n),
    .rst_ni(rst_ni),
    .tck_i(jtag_tck_i),
    .td_i(jtag_tdi_i),
    .td_o(jtag_tdo_o),
    .testmode_i(testmode_i),
    .tms_i(jtag_tms_i),
    .trst_ni(jtag_trst_ni)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_domain.sv:584.5" *)
  \gpio$croc_chip.i_croc_soc.i_croc.i_gpio  i_gpio (
    .clk_i(clk_i),
    .gpio_i(gpio_i),
    .gpio_in_sync_o(gpio_in_sync_o),
    .gpio_o(gpio_o),
    .gpio_out_en_o(gpio_out_en_o),
    .interrupt_o(gpio_irq),
    .obi_req_i(all_periph_obi_req[369:296]),
    .obi_rsp_o(gpio_obi_rsp),
    .rst_ni(rst_ni)
  );
  (* src = "rtl/croc_domain.sv:323.5" *)
  \obi_xbar$croc_chip.i_croc_soc.i_croc.i_main_xbar  i_main_xbar (
    .addr_map_i(384'h000000042000000080000000000000031000080010001000000000021000000010000800000000010000000010000000),
    .clk_i(clk_i),
    .default_idx_i(12'h000),
    .en_default_idx_i(4'hf),
    .mgr_ports_req_o(all_sbr_obi_req),
    .mgr_ports_rsp_i({ user_sbr_obi_rsp_i, all_sbr_obi_rsp[155:78], xbar_periph_obi_rsp, xbar_error_obi_rsp }),
    .rst_ni(rst_ni),
    .sbr_ports_req_i({ core_instr_obi_req[71:40], 39'h3c00000000, core_instr_obi_req[0], core_data_obi_req[71:3], 2'h0, core_data_obi_req[0], dbg_req_obi_req[71:3], 2'h0, dbg_req_obi_req[0], user_mgr_obi_req_i }),
    .sbr_ports_rsp_o({ core_instr_obi_rsp, core_data_obi_rsp, dbg_req_obi_rsp, user_mgr_obi_rsp_o }),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/croc_domain.sv:442.5" *)
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_obi_demux  i_obi_demux (
    .clk_i(clk_i),
    .mgr_ports_req_o(all_periph_obi_req),
    .mgr_ports_rsp_i({ all_periph_obi_rsp[233:199], 2'h0, all_periph_obi_rsp[196:195], gpio_obi_rsp, all_periph_obi_rsp[155:120], 1'h0, all_periph_obi_rsp[118:81], 1'h0, all_periph_obi_rsp[79:43], 2'h0, all_periph_obi_rsp[40:39], error_obi_rsp }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(all_sbr_obi_req[147:74]),
    .sbr_port_rsp_o(xbar_periph_obi_rsp),
    .sbr_port_select_i(periph_idx)
  );
  (* src = "rtl/croc_domain.sv:461.5" *)
  \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_periph_err  i_periph_err (
    .clk_i(clk_i),
    .obi_req_i(all_periph_obi_req[73:0]),
    .obi_rsp_o(error_obi_rsp),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_domain.sv:513.5" *)
  \soc_ctrl_reg_top$croc_chip.i_croc_soc.i_croc.i_soc_ctrl  i_soc_ctrl (
    .clk_i(clk_i),
    .devmode_i(1'h0),
    .hw2reg(4'h0),
    .reg2hw(soc_ctrl_reg2hw),
    .reg_req_i(soc_ctrl_reg_req),
    .reg_rsp_o(soc_ctrl_reg_rsp),
    .rst_ni(rst_ni)
  );
  (* src = "rtl/croc_domain.sv:480.5" *)
  \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl_translate  i_soc_ctrl_translate (
    .add_i(all_periph_obi_req[221:190]),
    .be_i(all_periph_obi_req[188:185]),
    .clk_i(clk_i),
    .gnt_o(all_periph_obi_rsp[79]),
    .id_i(all_periph_obi_req[152:150]),
    .r_id_o(all_periph_obi_rsp[84:82]),
    .r_opc_o(all_periph_obi_rsp[81]),
    .r_rdata_o(all_periph_obi_rsp[116:85]),
    .r_valid_o(all_periph_obi_rsp[78]),
    .reg_req_o(soc_ctrl_reg_req),
    .reg_rsp_i(soc_ctrl_reg_rsp),
    .req_i(all_periph_obi_req[148]),
    .rst_ni(rst_ni),
    .wdata_i(all_periph_obi_req[184:153]),
    .wen_i(\$1y )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_domain.sv:599.5" *)
  \timer_unit$croc_chip.i_croc_soc.i_croc.i_timer  i_timer (
    .addr_i(all_periph_obi_req[443:412]),
    .be_i(all_periph_obi_req[410:407]),
    .clk_i(clk_i),
    .event_hi_i(1'h0),
    .event_lo_i(1'h0),
    .gnt_o(all_periph_obi_rsp[196]),
    .id_i(all_periph_obi_req[374:372]),
    .irq_hi_o(timer0_irq1),
    .irq_lo_o(timer0_irq0),
    .r_id_o(all_periph_obi_rsp[201:199]),
    .r_rdata_o(all_periph_obi_rsp[233:202]),
    .r_valid_o(all_periph_obi_rsp[195]),
    .ref_clk_i(ref_clk_i),
    .req_i(all_periph_obi_req[370]),
    .rst_ni(rst_ni),
    .wdata_i(all_periph_obi_req[406:375]),
    .wen_i(\$4y )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_domain.sv:559.5" *)
  \reg_uart_wrap$croc_chip.i_croc_soc.i_croc.i_uart  i_uart (
    .clk_i(clk_i),
    .cts_ni(1'h0),
    .dcd_ni(1'h0),
    .dsr_ni(1'h0),
    .intr_o(uart_irq),
    .reg_req_i(uart_reg_req),
    .reg_rsp_o(uart_reg_rsp),
    .rin_ni(1'h0),
    .rst_ni(rst_ni),
    .sin_i(uart_rx_i),
    .sout_o(uart_tx_o)
  );
  (* src = "rtl/croc_domain.sv:534.5" *)
  \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_uart_translate  i_uart_translate (
    .add_i(all_periph_obi_req[295:264]),
    .be_i(all_periph_obi_req[262:259]),
    .clk_i(clk_i),
    .gnt_o(all_periph_obi_rsp[118]),
    .id_i(all_periph_obi_req[226:224]),
    .r_id_o(all_periph_obi_rsp[123:121]),
    .r_opc_o(all_periph_obi_rsp[120]),
    .r_rdata_o(all_periph_obi_rsp[155:124]),
    .r_valid_o(all_periph_obi_rsp[117]),
    .reg_req_o(uart_reg_req),
    .reg_rsp_i(uart_reg_rsp),
    .req_i(all_periph_obi_req[222]),
    .rst_ni(rst_ni),
    .wdata_i(all_periph_obi_req[258:227]),
    .wen_i(\$3y )
  );
  (* src = "rtl/croc_domain.sv:404.5" *)
  \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_xbar_err  i_xbar_err (
    .clk_i(clk_i),
    .obi_req_i(all_sbr_obi_req[73:0]),
    .obi_rsp_o(xbar_error_obi_rsp),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign dbg_req_obi_req[2:1] = 2'h0;
  assign core_instr_obi_req[39:1] = 39'h3c00000000;
  assign core_data_obi_req[2:1] = 2'h0;
  assign { all_sbr_obi_rsp[194:156], all_sbr_obi_rsp[77:0] } = { user_sbr_obi_rsp_i, xbar_periph_obi_rsp, xbar_error_obi_rsp };
  assign { all_periph_obi_rsp[198:197], all_periph_obi_rsp[194:156], all_periph_obi_rsp[119], all_periph_obi_rsp[80], all_periph_obi_rsp[42:41], all_periph_obi_rsp[38:0] } = { 2'h0, gpio_obi_rsp, 4'h0, error_obi_rsp };
  assign user_sbr_obi_req_o = all_sbr_obi_req[369:296];
endmodule

(* src = "rtl/croc_soc.sv:8.8" *)
module \croc_soc$croc_chip.i_croc_soc (clk_i, rst_ni, ref_clk_i, jtag_tck_i, jtag_trst_ni, jtag_tms_i, jtag_tdi_i, jtag_tdo_o, uart_rx_i, uart_tx_o, fetch_en_i, status_o, testmode_i, gpio_i, gpio_o, gpio_out_en_o);
  (* src = "rtl/croc_soc.sv:11.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/croc_soc.sv:15.16" *)
  input fetch_en_i;
  wire fetch_en_i;
  (* src = "rtl/croc_soc.sv:27.32" *)
  input [31:0] gpio_i;
  wire [31:0] gpio_i;
  (* src = "rtl/croc_soc.sv:61.23" *)
  wire [31:0] gpio_in_sync;
  (* src = "rtl/croc_soc.sv:28.32" *)
  output [31:0] gpio_o;
  wire [31:0] gpio_o;
  (* src = "rtl/croc_soc.sv:29.32" *)
  output [31:0] gpio_out_en_o;
  wire [31:0] gpio_out_en_o;
  (* src = "rtl/croc_soc.sv:60.29" *)
  wire [3:0] interrupts;
  (* src = "rtl/croc_soc.sv:18.16" *)
  input jtag_tck_i;
  wire jtag_tck_i;
  (* src = "rtl/croc_soc.sv:19.16" *)
  input jtag_tdi_i;
  wire jtag_tdi_i;
  (* src = "rtl/croc_soc.sv:20.16" *)
  output jtag_tdo_o;
  wire jtag_tdo_o;
  (* src = "rtl/croc_soc.sv:21.16" *)
  input jtag_tms_i;
  wire jtag_tms_i;
  (* src = "rtl/croc_soc.sv:22.16" *)
  input jtag_trst_ni;
  wire jtag_trst_ni;
  (* src = "rtl/croc_soc.sv:13.16" *)
  input ref_clk_i;
  wire ref_clk_i;
  (* src = "rtl/croc_soc.sv:12.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/croc_soc.sv:16.16" *)
  output status_o;
  wire status_o;
  (* src = "rtl/croc_soc.sv:32.23" *)
  wire synced_fetch_en;
  (* src = "rtl/croc_soc.sv:32.9" *)
  wire synced_rst_n;
  (* src = "rtl/croc_soc.sv:14.16" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/croc_soc.sv:24.16" *)
  input uart_rx_i;
  wire uart_rx_i;
  (* src = "rtl/croc_soc.sv:25.16" *)
  output uart_tx_o;
  wire uart_tx_o;
  (* src = "rtl/croc_soc.sv:57.15" *)
  wire [71:0] user_mgr_obi_req;
  (* src = "rtl/croc_soc.sv:58.15" *)
  wire [36:0] user_mgr_obi_rsp;
  (* src = "rtl/croc_soc.sv:53.15" *)
  wire [73:0] user_sbr_obi_req;
  (* src = "rtl/croc_soc.sv:54.15" *)
  wire [38:0] user_sbr_obi_rsp;
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_soc.sv:65.3" *)
  \croc_domain$croc_chip.i_croc_soc.i_croc  i_croc (
    .clk_i(clk_i),
    .core_busy_o(status_o),
    .fetch_en_i(synced_fetch_en),
    .gpio_i(gpio_i),
    .gpio_in_sync_o(gpio_in_sync),
    .gpio_o(gpio_o),
    .gpio_out_en_o(gpio_out_en_o),
    .interrupts_i(interrupts),
    .jtag_tck_i(jtag_tck_i),
    .jtag_tdi_i(jtag_tdi_i),
    .jtag_tdo_o(jtag_tdo_o),
    .jtag_tms_i(jtag_tms_i),
    .jtag_trst_ni(jtag_trst_ni),
    .ref_clk_i(ref_clk_i),
    .rst_ni(synced_rst_n),
    .testmode_i(testmode_i),
    .uart_rx_i(uart_rx_i),
    .uart_tx_o(uart_tx_o),
    .user_mgr_obi_req_i(user_mgr_obi_req),
    .user_mgr_obi_rsp_o(user_mgr_obi_rsp),
    .user_sbr_obi_req_o(user_sbr_obi_req),
    .user_sbr_obi_rsp_i(user_sbr_obi_rsp)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_soc.sv:45.7" *)
  \sync$croc_chip.i_croc_soc.i_ext_intr_sync  i_ext_intr_sync (
    .clk_i(clk_i),
    .rst_ni(synced_rst_n),
    .serial_i(fetch_en_i),
    .serial_o(synced_fetch_en)
  );
  (* src = "rtl/croc_soc.sv:34.10" *)
  \rstgen$croc_chip.i_croc_soc.i_rstgen  i_rstgen (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .rst_no(synced_rst_n),
    .test_mode_i(testmode_i)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_soc.sv:99.3" *)
  \user_domain$croc_chip.i_croc_soc.i_user  i_user (
    .clk_i(clk_i),
    .gpio_in_sync_i(gpio_in_sync),
    .interrupts_o(interrupts),
    .ref_clk_i(ref_clk_i),
    .rst_ni(synced_rst_n),
    .testmode_i(testmode_i),
    .user_mgr_obi_req_o(user_mgr_obi_req),
    .user_mgr_obi_rsp_i(user_mgr_obi_rsp),
    .user_sbr_obi_req_i(user_sbr_obi_req),
    .user_sbr_obi_rsp_o(user_sbr_obi_rsp)
  );
endmodule

(* src = "rtl/cve2/cve2_alu.sv:9.8" *)
module \cve2_alu$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.ex_block_i.alu_i (multdiv_operand_a_i, multdiv_operand_b_i, imd_val_we_o, imd_val_d_o, imd_val_q_i, instr_first_cycle_i, operator_i, operand_a_i, operand_b_i, multdiv_sel_i, adder_result_o, adder_result_ext_o, result_o, comparison_result_o, is_equal_result_o);
  wire \$12y ;
  wire \$14y ;
  wire \$15y ;
  wire \$18y ;
  wire \$19y ;
  wire \$41y ;
  wire \$51y ;
  wire \$52y ;
  wire \$54y ;
  wire \$55y ;
  wire [7:0] \$procmux$2067_CMP ;
  wire \$procmux$2067_CTRL ;
  wire [4:0] \$procmux$2068_CMP ;
  wire \$procmux$2068_CTRL ;
  wire [4:0] \$procmux$2069_CMP ;
  wire \$procmux$2069_CTRL ;
  wire [5:0] \$procmux$2070_CMP ;
  wire \$procmux$2070_CTRL ;
  wire [5:0] \$procmux$2095_CMP ;
  wire \$procmux$2095_CTRL ;
  wire [3:0] \$procmux$2096_CMP ;
  wire \$procmux$2096_CTRL ;
  (* src = "rtl/cve2/cve2_alu.sv:52.16" *)
  wire [32:0] adder_in_a;
  (* src = "rtl/cve2/cve2_alu.sv:52.28" *)
  wire [32:0] adder_in_b;
  (* src = "rtl/cve2/cve2_alu.sv:51.16" *)
  wire adder_op_b_negate;
  (* src = "rtl/cve2/cve2_alu.sv:28.29" *)
  output [33:0] adder_result_ext_o;
  wire [33:0] adder_result_ext_o;
  (* src = "rtl/cve2/cve2_alu.sv:27.29" *)
  output [31:0] adder_result_o;
  wire [31:0] adder_result_o;
  (* src = "rtl/cve2/cve2_alu.sv:362.9" *)
  wire bwlogic_and;
  (* src = "rtl/cve2/cve2_alu.sv:365.16" *)
  wire [31:0] bwlogic_and_result;
  (* src = "rtl/cve2/cve2_alu.sv:361.9" *)
  wire bwlogic_or;
  (* src = "rtl/cve2/cve2_alu.sv:364.16" *)
  wire [31:0] bwlogic_or_result;
  (* src = "rtl/cve2/cve2_alu.sv:367.16" *)
  wire [31:0] bwlogic_result;
  (* src = "rtl/cve2/cve2_alu.sv:366.16" *)
  wire [31:0] bwlogic_xor_result;
  (* src = "rtl/cve2/cve2_alu.sv:117.9" *)
  wire cmp_signed;
  (* src = "rtl/cve2/cve2_alu.sv:31.29" *)
  output comparison_result_o;
  wire comparison_result_o;
  (* src = "rtl/cve2/cve2_alu.sv:24.29" *)
  output [63:0] imd_val_d_o;
  wire [63:0] imd_val_d_o;
  (* src = "rtl/cve2/cve2_alu.sv:23.29" *)
  input [63:0] imd_val_q_i;
  wire [63:0] imd_val_q_i;
  (* src = "rtl/cve2/cve2_alu.sv:25.29" *)
  output [1:0] imd_val_we_o;
  wire [1:0] imd_val_we_o;
  (* src = "rtl/cve2/cve2_alu.sv:16.29" *)
  input instr_first_cycle_i;
  wire instr_first_cycle_i;
  (* src = "rtl/cve2/cve2_alu.sv:32.29" *)
  output is_equal_result_o;
  wire is_equal_result_o;
  (* src = "rtl/cve2/cve2_alu.sv:116.9" *)
  wire is_greater_equal;
  (* src = "rtl/cve2/cve2_alu.sv:18.29" *)
  input [32:0] multdiv_operand_a_i;
  wire [32:0] multdiv_operand_a_i;
  (* src = "rtl/cve2/cve2_alu.sv:19.29" *)
  input [32:0] multdiv_operand_b_i;
  wire [32:0] multdiv_operand_b_i;
  (* src = "rtl/cve2/cve2_alu.sv:21.29" *)
  input multdiv_sel_i;
  wire multdiv_sel_i;
  (* src = "rtl/cve2/cve2_alu.sv:13.29" *)
  input [31:0] operand_a_i;
  wire [31:0] operand_a_i;
  (* src = "rtl/cve2/cve2_alu.sv:14.29" *)
  input [31:0] operand_b_i;
  wire [31:0] operand_b_i;
  (* src = "rtl/cve2/cve2_alu.sv:37.16" *)
  wire [32:0] operand_b_neg;
  (* src = "rtl/cve2/cve2_alu.sv:12.29" *)
  input [6:0] operator_i;
  wire [6:0] operator_i;
  (* src = "rtl/cve2/cve2_alu.sv:30.29" *)
  output [31:0] result_o;
  wire [31:0] result_o;
  wire [4:0] shift_amt;
  wire [4:0] shift_amt_compl;
  (* src = "rtl/cve2/cve2_alu.sv:244.15" *)
  wire shift_arith;
  (* src = "rtl/cve2/cve2_alu.sv:242.15" *)
  wire shift_left;
  (* src = "rtl/cve2/cve2_alu.sv:250.23" *)
  wire [31:0] shift_operand;
  (* src = "rtl/cve2/cve2_alu.sv:254.23" *)
  wire [31:0] shift_result;
  wire [31:0] shift_result_ext;
  assign is_equal_result_o = ! (* src = "rtl/cve2/cve2_alu.sv:132.22-132.43" *) adder_result_ext_o[32:1];
  assign \$12y  = operand_a_i[31] ^ (* src = "rtl/cve2/cve2_alu.sv:137.10-137.43" *) operand_b_i[31];
  assign \$14y  = ~ (* src = "rtl/cve2/cve2_alu.sv:138.27-138.51" *) adder_result_ext_o[32];
  assign \$15y  = operand_a_i[31] ^ (* src = "rtl/cve2/cve2_alu.sv:140.26-140.56" *) cmp_signed;
  assign \$18y  = ~ (* src = "rtl/cve2/cve2_alu.sv:162.40-162.49" *) is_equal_result_o;
  assign \$19y  = ~ (* src = "rtl/cve2/cve2_alu.sv:167.40-167.57" *) is_greater_equal;
  assign shift_amt_compl = 1'h0 - (* src = "rtl/cve2/cve2_alu.sv:280.28-280.49" *) operand_b_i[4:0];
  assign shift_amt = instr_first_cycle_i ? (* src = "rtl/cve2/cve2_alu.sv:286.24-288.85" *) operand_b_i[4:0] : shift_amt_compl;
  assign shift_arith = operator_i == (* src = "rtl/cve2/cve2_alu.sv:322.26-322.47" *) 4'h8;
  assign shift_operand = shift_left ? (* src = "rtl/cve2/cve2_alu.sv:333.23-333.63" *) { operand_a_i[0], operand_a_i[1], operand_a_i[2], operand_a_i[3], operand_a_i[4], operand_a_i[5], operand_a_i[6], operand_a_i[7], operand_a_i[8], operand_a_i[9], operand_a_i[10], operand_a_i[11], operand_a_i[12], operand_a_i[13], operand_a_i[14], operand_a_i[15], operand_a_i[16], operand_a_i[17], operand_a_i[18], operand_a_i[19], operand_a_i[20], operand_a_i[21], operand_a_i[22], operand_a_i[23], operand_a_i[24], operand_a_i[25], operand_a_i[26], operand_a_i[27], operand_a_i[28], operand_a_i[29], operand_a_i[30], operand_a_i[31] } : operand_a_i;
  assign \$41y  = shift_arith & (* src = "rtl/cve2/cve2_alu.sv:343.32-343.63" *) shift_operand[31];
  assign shift_result_ext = $signed({ \$41y , shift_operand }) >>> (* src = "rtl/cve2/cve2_alu.sv:343.9-343.100" *) shift_amt;
  assign shift_result = shift_left ? (* src = "rtl/cve2/cve2_alu.sv:353.20-353.64" *) { shift_result_ext[0], shift_result_ext[1], shift_result_ext[2], shift_result_ext[3], shift_result_ext[4], shift_result_ext[5], shift_result_ext[6], shift_result_ext[7], shift_result_ext[8], shift_result_ext[9], shift_result_ext[10], shift_result_ext[11], shift_result_ext[12], shift_result_ext[13], shift_result_ext[14], shift_result_ext[15], shift_result_ext[16], shift_result_ext[17], shift_result_ext[18], shift_result_ext[19], shift_result_ext[20], shift_result_ext[21], shift_result_ext[22], shift_result_ext[23], shift_result_ext[24], shift_result_ext[25], shift_result_ext[26], shift_result_ext[27], shift_result_ext[28], shift_result_ext[29], shift_result_ext[30], shift_result_ext[31] } : shift_result_ext;
  assign bwlogic_or_result = operand_a_i | (* src = "rtl/cve2/cve2_alu.sv:384.31-384.62" *) operand_b_i;
  assign bwlogic_and_result = operand_a_i & (* src = "rtl/cve2/cve2_alu.sv:385.31-385.62" *) operand_b_i;
  assign bwlogic_xor_result = operand_a_i ^ (* src = "rtl/cve2/cve2_alu.sv:386.31-386.62" *) operand_b_i;
  assign \$51y  = operator_i == (* src = "rtl/cve2/cve2_alu.sv:388.25-388.45" *) 2'h3;
  assign \$52y  = operator_i == (* src = "rtl/cve2/cve2_alu.sv:388.51-388.72" *) 3'h6;
  assign bwlogic_or = \$51y  | (* src = "rtl/cve2/cve2_alu.sv:388.24-388.73" *) \$52y ;
  assign \$54y  = operator_i == (* src = "rtl/cve2/cve2_alu.sv:389.25-389.46" *) 3'h4;
  assign \$55y  = operator_i == (* src = "rtl/cve2/cve2_alu.sv:389.51-389.73" *) 3'h7;
  assign bwlogic_and = \$54y  | (* src = "rtl/cve2/cve2_alu.sv:389.24-389.74" *) \$55y ;
  assign adder_result_ext_o = adder_in_a + (* src = "rtl/cve2/cve2_alu.sv:105.31-105.76" *) adder_in_b;
  assign operand_b_neg[32:1] = ~ operand_b_i;
  function [31:0] \$procmux$2066 ;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$2066  = b[31:0];
      4'b??1?:
        \$procmux$2066  = b[63:32];
      4'b?1??:
        \$procmux$2066  = b[95:64];
      4'b1???:
        \$procmux$2066  = b[127:96];
      default:
        \$procmux$2066  = a;
    endcase
  endfunction
  assign result_o = \$procmux$2066 (32'd0, { bwlogic_result, adder_result_ext_o[32:1], shift_result, 31'h00000000, comparison_result_o }, { \$procmux$2070_CTRL , \$procmux$2069_CTRL , \$procmux$2068_CTRL , \$procmux$2067_CTRL  });
  assign \$procmux$2067_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) \$procmux$2067_CMP ;
  assign \$procmux$2067_CMP [0] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h1d;
  assign \$procmux$2067_CMP [1] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h1e;
  assign \$procmux$2067_CMP [2] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h1b;
  assign \$procmux$2067_CMP [3] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h1c;
  assign \$procmux$2067_CMP [4] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h19;
  assign \$procmux$2067_CMP [5] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h1a;
  assign \$procmux$2067_CMP [6] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 6'h2b;
  assign \$procmux$2067_CMP [7] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 6'h2c;
  assign \$procmux$2068_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) { \$procmux$2068_CMP [4:3], \$procmux$2068_CMP [1], shift_arith, shift_left };
  assign shift_left = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 4'ha;
  assign \$procmux$2068_CMP [1] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 4'h9;
  assign \$procmux$2068_CMP [3] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 4'hc;
  assign \$procmux$2068_CMP [4] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 4'hb;
  assign \$procmux$2069_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) \$procmux$2069_CMP ;
  assign \$procmux$2069_CMP [0] = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) operator_i;
  assign \$procmux$2069_CMP [1] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 1'h1;
  assign \$procmux$2069_CMP [2] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h16;
  assign \$procmux$2069_CMP [3] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h17;
  assign \$procmux$2069_CMP [4] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h18;
  assign \$procmux$2070_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1326.27-1326.53|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) { \$procmux$2070_CMP [1:0], \$55y , \$54y , \$52y , \$51y  };
  assign \$procmux$2070_CMP [0] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1326.27-1326.53|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 2'h2;
  assign \$procmux$2070_CMP [1] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1326.27-1326.53|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 3'h5;
  function [31:0] \$procmux$2072 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_alu.sv:394.20-394.56|rtl/cve2/cve2_alu.sv:392.5-396.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$2072  = b[31:0];
      2'b1?:
        \$procmux$2072  = b[63:32];
      default:
        \$procmux$2072  = a;
    endcase
  endfunction
  assign bwlogic_result = \$procmux$2072 (bwlogic_xor_result, { bwlogic_or_result, bwlogic_and_result }, { bwlogic_or, bwlogic_and });
  function [0:0] \$procmux$2094 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$2094  = b[0:0];
      3'b?1?:
        \$procmux$2094  = b[1:1];
      3'b1??:
        \$procmux$2094  = b[2:2];
      default:
        \$procmux$2094  = a;
    endcase
  endfunction
  assign comparison_result_o = \$procmux$2094 (is_equal_result_o, { \$18y , is_greater_equal, \$19y  }, { \$procmux$2067_CMP [1], \$procmux$2096_CTRL , \$procmux$2095_CTRL  });
  assign \$procmux$2095_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" *) { \$procmux$2095_CMP [3:2], \$procmux$2067_CMP [7:4] };
  assign \$procmux$2095_CMP [2] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" *) 5'h1f;
  assign \$procmux$2095_CMP [3] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" *) 6'h20;
  assign \$procmux$2096_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:164.27-164.57|rtl/cve2/cve2_alu.sv:160.5-170.12" *) { \$procmux$2096_CMP [3:2], \$procmux$2067_CMP [3:2] };
  assign \$procmux$2096_CMP [2] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:164.27-164.57|rtl/cve2/cve2_alu.sv:160.5-170.12" *) 6'h21;
  assign \$procmux$2096_CMP [3] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:164.27-164.57|rtl/cve2/cve2_alu.sv:160.5-170.12" *) 6'h22;
  assign is_greater_equal = \$12y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:138.7-138.53|rtl/cve2/cve2_alu.sv:137.5-141.8" *) \$15y  : \$14y ;
  assign cmp_signed = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:126.16-126.34|rtl/cve2/cve2_alu.sv:120.5-129.12" *) { \$procmux$2096_CMP [2], \$procmux$2095_CMP [2], \$procmux$2067_CMP [6], \$procmux$2067_CMP [4], \$procmux$2067_CMP [2] };
  function [32:0] \$procmux$2105 ;
    input [32:0] a;
    input [65:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_alu.sv:99.26-99.53|rtl/cve2/cve2_alu.sv:97.5-101.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$2105  = b[32:0];
      2'b1?:
        \$procmux$2105  = b[65:33];
      default:
        \$procmux$2105  = a;
    endcase
  endfunction
  assign adder_in_b = \$procmux$2105 ({ operand_b_i, 1'h0 }, { multdiv_operand_b_i, operand_b_neg[32:1], 1'h1 }, { multdiv_sel_i, adder_op_b_negate });
  assign adder_in_a = multdiv_sel_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:89.26-89.67|rtl/cve2/cve2_alu.sv:85.5-91.12" *) multdiv_operand_a_i : { operand_a_i, 1'h1 };
  assign adder_op_b_negate = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:72.27-72.52|rtl/cve2/cve2_alu.sv:60.5-80.12" *) { \$procmux$2096_CMP [3:2], \$procmux$2095_CMP [3:2], \$procmux$2069_CMP [1], \$procmux$2067_CMP  };
  assign adder_result_o = adder_result_ext_o[32:1];
  assign \$procmux$2096_CMP [1:0] = \$procmux$2067_CMP [3:2];
  assign { \$procmux$2095_CMP [5:4], \$procmux$2095_CMP [1:0] } = \$procmux$2067_CMP [7:4];
  assign \$procmux$2070_CMP [5:2] = { \$55y , \$54y , \$52y , \$51y  };
  assign imd_val_d_o = 64'h0000000000000000;
  assign imd_val_we_o = 2'h0;
  assign { \$procmux$2068_CMP [2], \$procmux$2068_CMP [0] } = { shift_arith, shift_left };
  assign operand_b_neg[0] = 1'h1;
endmodule

(* src = "rtl/cve2/cve2_compressed_decoder.sv:16.8" *)
module \cve2_compressed_decoder$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.compressed_decoder_i (clk_i, rst_ni, valid_i, instr_i, instr_o, is_compressed_o, illegal_instr_o);
  wire \$1y ;
  wire \$20y ;
  wire \$23y ;
  wire \$5y ;
  wire \$6y ;
  wire \$8y ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" *)
  wire [31:0] \$auto$wreduce.cc:514:run$13466 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:240.17-246.20" *)
  wire [31:0] \$auto$wreduce.cc:514:run$13467 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:235.15-247.18" *)
  wire [31:0] \$auto$wreduce.cc:514:run$13468 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" *)
  wire [31:0] \$auto$wreduce.cc:514:run$13469 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *)
  wire \$illegal_instr_o$13 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *)
  wire \$illegal_instr_o$15 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" *)
  wire \$illegal_instr_o$17 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" *)
  wire \$illegal_instr_o$27 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" *)
  wire \$illegal_instr_o$33 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *)
  wire \$illegal_instr_o$35 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" *)
  wire \$illegal_instr_o$4 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *)
  wire [31:0] \$instr_o$12 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *)
  wire [31:0] \$instr_o$14 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" *)
  wire [31:0] \$instr_o$16 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" *)
  wire [31:0] \$instr_o$3 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *)
  wire [31:0] \$instr_o$34 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:114.13-118.16" *)
  wire [31:0] \$instr_o$7 ;
  wire \$procmux$4979_CMP ;
  wire \$procmux$4981_CMP ;
  wire \$procmux$5069_CMP ;
  wire \$procmux$5080_CMP ;
  wire [3:0] \$procmux$5085_CMP ;
  wire \$procmux$5085_CTRL ;
  wire \$procmux$5097_CMP ;
  wire [3:0] \$procmux$5110_CMP ;
  wire \$procmux$5112_CMP ;
  wire \$procmux$5116_CMP ;
  wire \$procmux$5122_CMP ;
  wire \$procmux$5123_CMP ;
  wire \$procmux$5124_CMP ;
  wire \$procmux$5125_CMP ;
  wire \$procmux$5138_CMP ;
  wire [1:0] \$procmux$5140_CMP ;
  wire \$procmux$5140_CTRL ;
  wire \$procmux$5194_CTRL ;
  wire \$procmux$5200_CTRL ;
  wire \$procmux$5225_CMP ;
  wire \$procmux$5230_CTRL ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:17.23" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:23.23" *)
  output illegal_instr_o;
  wire illegal_instr_o;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:20.23" *)
  input [31:0] instr_i;
  wire [31:0] instr_i;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:21.23" *)
  output [31:0] instr_o;
  wire [31:0] instr_o;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:22.23" *)
  output is_compressed_o;
  wire is_compressed_o;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:18.23" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:19.23" *)
  input valid_i;
  wire valid_i;
  assign \$1y  = ! (* src = "rtl/cve2/cve2_compressed_decoder.sv:50.17-50.38" *) instr_i[12:5];
  assign \$20y  = ! (* src = "rtl/cve2/cve2_compressed_decoder.sv:220.17-220.38" *) instr_i[11:7];
  assign \$23y  = | (* src = "rtl/cve2/cve2_compressed_decoder.sv:225.19-225.39" *) instr_i[6:2];
  assign is_compressed_o = instr_i[1:0] != (* src = "rtl/cve2/cve2_compressed_decoder.sv:279.29-279.50" *) 2'h3;
  assign \$5y  = ~ (* src = "rtl/cve2/cve2_compressed_decoder.sv:99.49-99.61" *) instr_i[15];
  assign \$6y  = instr_i[11:7] == (* src = "rtl/cve2/cve2_compressed_decoder.sv:114.17-114.39" *) 2'h2;
  assign \$8y  = ! (* src = "rtl/cve2/cve2_compressed_decoder.sv:120.17-120.52" *) { instr_i[12], instr_i[6:2] };
  assign { \$auto$wreduce.cc:514:run$13467 [19:15], \$auto$wreduce.cc:514:run$13467 [20], \$auto$wreduce.cc:514:run$13467 [7] } = \$20y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:242.19-242.47|rtl/cve2/cve2_compressed_decoder.sv:240.17-246.20" *) 7'h02 : { instr_i[11:7], 2'h1 };
  assign \$procmux$4979_CMP  = instr_i[15:13] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) 3'h4;
  assign \$procmux$4981_CMP  = instr_i[1:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" *) 2'h2;
  assign { \$auto$wreduce.cc:514:run$13468 [24:15], \$auto$wreduce.cc:514:run$13468 [11:6], \$auto$wreduce.cc:514:run$13468 [4], \$auto$wreduce.cc:514:run$13468 [2] } = \$23y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:238.17-238.97|rtl/cve2/cve2_compressed_decoder.sv:235.15-247.18" *) { instr_i[6:2], instr_i[11:7], instr_i[11:7], 3'h2 } : { 4'h0, \$auto$wreduce.cc:514:run$13467 [20:15], 4'h0, \$auto$wreduce.cc:514:run$13467 [7], 1'h1, \$auto$wreduce.cc:514:run$13467 [20], \$auto$wreduce.cc:514:run$13467 [7] };
  assign { \$auto$wreduce.cc:514:run$13469 [24:15], \$auto$wreduce.cc:514:run$13469 [11:6], \$auto$wreduce.cc:514:run$13469 [4], \$auto$wreduce.cc:514:run$13469 [2] } = instr_i[12] ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18|rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" *) { \$auto$wreduce.cc:514:run$13468 [24:15], \$auto$wreduce.cc:514:run$13468 [11:6], \$auto$wreduce.cc:514:run$13468 [4], \$auto$wreduce.cc:514:run$13468 [2] } : { \$auto$wreduce.cc:514:run$13466 [24:15], \$auto$wreduce.cc:514:run$13466 [11:6], \$auto$wreduce.cc:514:run$13466 [4], \$auto$wreduce.cc:514:run$13466 [6] };
  assign { \$auto$wreduce.cc:514:run$13466 [24:15], \$auto$wreduce.cc:514:run$13466 [11:7], \$auto$wreduce.cc:514:run$13466 [4], \$auto$wreduce.cc:514:run$13466 [6] } = \$23y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:228.17-228.88|rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" *) { instr_i[6:2], 5'h00, instr_i[11:7], 2'h2 } : { 5'h00, instr_i[11:7], 7'h01 };
  assign \$illegal_instr_o$27  = \$23y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:228.17-228.88|rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" *) 1'h0 : \$20y ;
  assign \$illegal_instr_o$33  = instr_i[12] ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18|rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" *) 1'h0 : \$illegal_instr_o$27 ;
  assign \$procmux$5069_CMP  = instr_i[15:13] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:216.19-221.14|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) 2'h2;
  assign \$procmux$5080_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:209.19-214.14|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) instr_i[15:13];
  function [0:0] \$procmux$5084 ;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$5084  = b[0:0];
      4'b??1?:
        \$procmux$5084  = b[1:1];
      4'b?1??:
        \$procmux$5084  = b[2:2];
      4'b1???:
        \$procmux$5084  = b[3:3];
      default:
        \$procmux$5084  = a;
    endcase
  endfunction
  assign \$illegal_instr_o$35  = \$procmux$5084 (1'h0, { instr_i[12], \$20y , \$illegal_instr_o$33 , 1'h1 }, { \$procmux$5080_CMP , \$procmux$5069_CMP , \$procmux$4979_CMP , \$procmux$5085_CTRL  });
  assign \$procmux$5085_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) \$procmux$5085_CMP ;
  assign \$procmux$5085_CMP [0] = instr_i[15:13] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) 1'h1;
  assign \$procmux$5085_CMP [1] = instr_i[15:13] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) 2'h3;
  assign \$procmux$5085_CMP [2] = instr_i[15:13] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) 3'h5;
  assign \$procmux$5085_CMP [3] = instr_i[15:13] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) 3'h7;
  function [31:0] \$procmux$5096 ;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:253.13-254.62|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$5096  = b[31:0];
      4'b??1?:
        \$procmux$5096  = b[63:32];
      4'b?1??:
        \$procmux$5096  = b[95:64];
      4'b1???:
        \$procmux$5096  = b[127:96];
      default:
        \$procmux$5096  = a;
    endcase
  endfunction
  assign \$instr_o$34  = \$procmux$5096 (instr_i, { 7'h00, instr_i[6:2], instr_i[11:7], 3'h1, instr_i[11:7], 11'h130, instr_i[3:2], instr_i[12], instr_i[6:4], 10'h012, instr_i[11:7], 14'h0180, \$auto$wreduce.cc:514:run$13469 [24:15], 3'h0, \$auto$wreduce.cc:514:run$13469 [11:6], 1'h1, \$auto$wreduce.cc:514:run$13469 [4], 1'h0, \$auto$wreduce.cc:514:run$13469 [2], 6'h30, instr_i[8:7], instr_i[12], instr_i[6:2], 8'h12, instr_i[11:9], 9'h023 }, { \$procmux$5080_CMP , \$procmux$5069_CMP , \$procmux$4979_CMP , \$procmux$5097_CMP  });
  assign \$procmux$5097_CMP  = instr_i[15:13] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:253.13-254.62|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) 3'h6;
  assign \$illegal_instr_o$13  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) \$procmux$5110_CMP ;
  assign \$procmux$5110_CMP [0] = { instr_i[12], instr_i[6:5] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) 3'h4;
  assign \$procmux$5110_CMP [1] = { instr_i[12], instr_i[6:5] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) 3'h5;
  assign \$procmux$5110_CMP [2] = { instr_i[12], instr_i[6:5] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) 3'h6;
  assign \$procmux$5110_CMP [3] = { instr_i[12], instr_i[6:5] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) 3'h7;
  assign \$procmux$5112_CMP  = instr_i[11:10] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *) 2'h3;
  assign \$procmux$5116_CMP  = instr_i[1:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" *) 1'h1;
  function [28:0] \$procmux$5121 ;
    input [28:0] a;
    input [115:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:163.21-164.66|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$5121  = b[28:0];
      4'b??1?:
        \$procmux$5121  = b[57:29];
      4'b?1??:
        \$procmux$5121  = b[86:58];
      4'b1???:
        \$procmux$5121  = b[115:87];
      default:
        \$procmux$5121  = a;
    endcase
  endfunction
  assign { \$instr_o$12 [31:10], \$instr_o$12 [6:0] } = \$procmux$5121 ({ instr_i[31:10], instr_i[6:0] }, { 9'h081, instr_i[4:2], 2'h1, instr_i[9:7], 21'h016601, instr_i[4:2], 2'h1, instr_i[9:7], 21'h116601, instr_i[4:2], 2'h1, instr_i[9:7], 21'h196601, instr_i[4:2], 2'h1, instr_i[9:7], 12'heb3 }, { \$procmux$5125_CMP , \$procmux$5124_CMP , \$procmux$5123_CMP , \$procmux$5122_CMP  });
  assign \$procmux$5122_CMP  = { instr_i[12], instr_i[6:5] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:163.21-164.66|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) 2'h3;
  assign \$procmux$5123_CMP  = { instr_i[12], instr_i[6:5] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:157.21-158.66|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) 2'h2;
  assign \$procmux$5124_CMP  = { instr_i[12], instr_i[6:5] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:151.21-152.66|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) 1'h1;
  assign \$procmux$5125_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:145.21-146.74|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) { instr_i[12], instr_i[6:5] };
  function [28:0] \$procmux$5136 ;
    input [28:0] a;
    input [57:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$5136  = b[28:0];
      2'b1?:
        \$procmux$5136  = b[57:29];
      default:
        \$procmux$5136  = a;
    endcase
  endfunction
  assign { \$instr_o$14 [31:10], \$instr_o$14 [6:0] } = \$procmux$5136 ({ 1'h0, instr_i[10], 5'h00, instr_i[6:2], 2'h1, instr_i[9:7], 12'ha93 }, { instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], 2'h1, instr_i[9:7], 12'he93, \$instr_o$12 [31:10], \$instr_o$12 [6:0] }, { \$procmux$5138_CMP , \$procmux$5112_CMP  });
  assign \$procmux$5138_CMP  = instr_i[11:10] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:137.17-138.74|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *) 2'h2;
  assign \$procmux$5140_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *) \$procmux$5140_CMP ;
  assign \$procmux$5140_CMP [0] = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *) instr_i[11:10];
  assign \$procmux$5140_CMP [1] = instr_i[11:10] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *) 1'h1;
  function [0:0] \$procmux$5162 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$5162  = b[0:0];
      2'b1?:
        \$procmux$5162  = b[1:1];
      default:
        \$procmux$5162  = a;
    endcase
  endfunction
  assign \$illegal_instr_o$15  = \$procmux$5162 (1'h0, { instr_i[12], \$illegal_instr_o$13  }, { \$procmux$5140_CTRL , \$procmux$5112_CMP  });
  assign { \$instr_o$7 [28:23], \$instr_o$7 [16:7], \$instr_o$7 [5] } = \$6y  ? (* src = "rtl/cve2/cve2_compressed_decoder.sv:116.15-117.83|rtl/cve2/cve2_compressed_decoder.sv:114.13-118.16" *) { instr_i[4:3], instr_i[5], instr_i[2], instr_i[6], 12'h404 } : { instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], instr_i[11:7], 1'h1 };
  function [31:0] \$procmux$5193 ;
    input [31:0] a;
    input [159:0] b;
    input [4:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:191.13-193.54|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        \$procmux$5193  = b[31:0];
      5'b???1?:
        \$procmux$5193  = b[63:32];
      5'b??1??:
        \$procmux$5193  = b[95:64];
      5'b?1???:
        \$procmux$5193  = b[127:96];
      5'b1????:
        \$procmux$5193  = b[159:128];
      default:
        \$procmux$5193  = a;
    endcase
  endfunction
  assign \$instr_o$16  = \$procmux$5193 ({ instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], instr_i[11:7], 3'h0, instr_i[11:7], 7'h13 }, { instr_i[12], instr_i[8], instr_i[10:9], instr_i[6], instr_i[7], instr_i[2], instr_i[11], instr_i[5:3], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], 4'h0, \$5y , 7'h6f, instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], 8'h00, instr_i[11:7], 7'h13, instr_i[12], instr_i[12], instr_i[12], \$instr_o$7 [28:23], \$instr_o$7 [23], \$instr_o$7 [23], \$instr_o$7 [23], \$instr_o$7 [23], \$instr_o$7 [23], \$instr_o$7 [23], \$instr_o$7 [16:7], 1'h0, \$instr_o$7 [5], 2'h2, \$instr_o$7 [5], 2'h3, \$instr_o$14 [31:10], instr_i[9:7], \$instr_o$14 [6:0], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:5], instr_i[2], 7'h01, instr_i[9:7], 2'h0, instr_i[13], instr_i[11:10], instr_i[4:3], instr_i[12], 7'h63 }, { \$procmux$5200_CTRL , \$procmux$5069_CMP , \$procmux$5085_CMP [1], \$procmux$4979_CMP , \$procmux$5194_CTRL  });
  assign \$procmux$5194_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:191.13-193.54|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" *) { \$procmux$5097_CMP , \$procmux$5085_CMP [3] };
  assign \$procmux$5200_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:97.13-99.77|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" *) { \$procmux$5085_CMP [2], \$procmux$5085_CMP [0] };
  function [0:0] \$procmux$5208 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$5208  = b[0:0];
      2'b1?:
        \$procmux$5208  = b[1:1];
      default:
        \$procmux$5208  = a;
    endcase
  endfunction
  assign \$illegal_instr_o$17  = \$procmux$5208 (1'h0, { \$8y , \$illegal_instr_o$15  }, { \$procmux$5085_CMP [1], \$procmux$4979_CMP  });
  assign \$procmux$5225_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" *) instr_i[1:0];
  function [0:0] \$procmux$5229 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:71.13-71.36|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$5229  = b[0:0];
      2'b1?:
        \$procmux$5229  = b[1:1];
      default:
        \$procmux$5229  = a;
    endcase
  endfunction
  assign \$illegal_instr_o$4  = \$procmux$5229 (1'h0, { \$1y , 1'h1 }, { \$procmux$5080_CMP , \$procmux$5230_CTRL  });
  assign \$procmux$5230_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:71.13-71.36|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" *) { \$procmux$5085_CMP , \$procmux$4979_CMP  };
  function [31:0] \$procmux$5239 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:61.13-63.47|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$5239  = b[31:0];
      3'b?1?:
        \$procmux$5239  = b[63:32];
      3'b1??:
        \$procmux$5239  = b[95:64];
      default:
        \$procmux$5239  = a;
    endcase
  endfunction
  assign \$instr_o$3  = \$procmux$5239 (instr_i, { 2'h0, instr_i[10:7], instr_i[12:11], instr_i[5], instr_i[6], 12'h041, instr_i[4:2], 12'h260, instr_i[5], instr_i[12:10], instr_i[6], 4'h1, instr_i[9:7], 5'h09, instr_i[4:2], 12'h060, instr_i[5], instr_i[12], 2'h1, instr_i[4:2], 2'h1, instr_i[9:7], 3'h2, instr_i[11:10], instr_i[6], 9'h023 }, { \$procmux$5080_CMP , \$procmux$5069_CMP , \$procmux$5097_CMP  });
  function [0:0] \$procmux$5248 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$5248  = b[0:0];
      3'b?1?:
        \$procmux$5248  = b[1:1];
      3'b1??:
        \$procmux$5248  = b[2:2];
      default:
        \$procmux$5248  = a;
    endcase
  endfunction
  assign illegal_instr_o = \$procmux$5248 (1'h0, { \$illegal_instr_o$4 , \$illegal_instr_o$17 , \$illegal_instr_o$35  }, { \$procmux$5225_CMP , \$procmux$5116_CMP , \$procmux$4981_CMP  });
  function [31:0] \$procmux$5256 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$5256  = b[31:0];
      3'b?1?:
        \$procmux$5256  = b[63:32];
      3'b1??:
        \$procmux$5256  = b[95:64];
      default:
        \$procmux$5256  = a;
    endcase
  endfunction
  assign instr_o = \$procmux$5256 (instr_i, { \$instr_o$3 , \$instr_o$16 , \$instr_o$34  }, { \$procmux$5225_CMP , \$procmux$5116_CMP , \$procmux$4981_CMP  });
  assign { \$auto$wreduce.cc:514:run$13466 [31:25], \$auto$wreduce.cc:514:run$13466 [14:12], \$auto$wreduce.cc:514:run$13466 [5], \$auto$wreduce.cc:514:run$13466 [3:0] } = { 12'h002, \$auto$wreduce.cc:514:run$13466 [6], 2'h3 };
  assign { \$auto$wreduce.cc:514:run$13467 [31:21], \$auto$wreduce.cc:514:run$13467 [14:8], \$auto$wreduce.cc:514:run$13467 [6:0] } = { 20'h00003, \$auto$wreduce.cc:514:run$13467 [20], 1'h0, \$auto$wreduce.cc:514:run$13467 [7], 2'h3 };
  assign { \$auto$wreduce.cc:514:run$13468 [31:25], \$auto$wreduce.cc:514:run$13468 [14:12], \$auto$wreduce.cc:514:run$13468 [5], \$auto$wreduce.cc:514:run$13468 [3], \$auto$wreduce.cc:514:run$13468 [1:0] } = 14'h000b;
  assign { \$auto$wreduce.cc:514:run$13469 [31:25], \$auto$wreduce.cc:514:run$13469 [14:12], \$auto$wreduce.cc:514:run$13469 [5], \$auto$wreduce.cc:514:run$13469 [3], \$auto$wreduce.cc:514:run$13469 [1:0] } = 14'h000b;
  assign \$instr_o$12 [9:7] = instr_i[9:7];
  assign \$instr_o$14 [9:7] = instr_i[9:7];
  assign { \$instr_o$7 [31:29], \$instr_o$7 [22:17], \$instr_o$7 [6], \$instr_o$7 [4:0] } = { instr_i[12], instr_i[12], instr_i[12], \$instr_o$7 [23], \$instr_o$7 [23], \$instr_o$7 [23], \$instr_o$7 [23], \$instr_o$7 [23], \$instr_o$7 [23], 3'h2, \$instr_o$7 [5], 2'h3 };
endmodule

(* src = "rtl/cve2/cve2_controller.sv:12.8" *)
module \cve2_controller$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.controller_i (clk_i, rst_ni, irqs_i, instr_req_o, debug_req_i, fetch_enable_i, irq_nm_i, ctrl_busy_o, instr_valid_i, instr_is_compressed_i, instr_valid_clear_o, id_in_ready_o, pc_set_o, pc_mux_o, exc_pc_mux_o, exc_cause_o, instr_fetch_err_i, instr_fetch_err_plus2_i, pc_id_i, csr_save_if_o, csr_save_id_o
, csr_restore_mret_id_o, csr_restore_dret_id_o, csr_save_cause_o, csr_mtval_o, priv_mode_i, csr_mstatus_tw_i, lsu_addr_last_i, csr_mstatus_mie_i, irq_pending_i, nmi_mode_o, debug_mode_o, debug_cause_o, debug_csr_save_o, debug_single_step_i, debug_ebreakm_i, debug_ebreaku_i, trigger_match_i, perf_jump_o, perf_tbranch_o, instr_i, illegal_insn_i
, ecall_insn_i, mret_insn_i, dret_insn_i, wfi_insn_i, ebrk_insn_i, csr_pipe_flush_i, instr_compressed_i, controller_run_o, load_err_i, store_err_i, branch_set_i, jump_set_i, stall_id_i, flush_id_o);
  wire \$102y ;
  wire \$106y ;
  wire \$107y ;
  wire \$108y ;
  wire \$10y ;
  wire \$110y ;
  wire \$111y ;
  wire \$112y ;
  wire \$113y ;
  wire \$114y ;
  wire \$11y ;
  wire \$121y ;
  wire \$122y ;
  wire \$123y ;
  wire \$136y ;
  wire \$137y ;
  wire \$13y ;
  wire \$142y ;
  wire \$143y ;
  wire [31:0] \$145y ;
  wire [31:0] \$146y ;
  wire [31:0] \$147y ;
  wire \$148y ;
  wire \$14y ;
  wire \$150y ;
  wire \$15y ;
  wire \$17y ;
  wire \$18y ;
  wire \$191y ;
  wire \$192y ;
  wire \$193y ;
  wire \$19y ;
  wire \$218y ;
  wire \$219y ;
  wire \$220y ;
  wire \$221y ;
  wire \$223y ;
  wire \$224y ;
  wire \$24y ;
  wire \$25y ;
  wire \$50y ;
  wire \$51y ;
  wire \$53y ;
  wire \$57y ;
  wire \$59y ;
  wire \$60y ;
  wire \$64y ;
  wire \$65y ;
  wire \$66y ;
  wire \$67y ;
  wire \$89y ;
  wire \$90y ;
  wire \$91y ;
  wire \$92y ;
  wire \$9y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14037 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14039 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14041 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14043 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14048 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14050 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14054 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14059 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14061 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14063 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14045 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14056 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14065 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13313 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13315 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13319 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13323 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13325 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13327 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$14963 ;
  (* src = "rtl/cve2/cve2_controller.sv:670.20-672.14" *)
  wire [3:0] \$auto$wreduce.cc:514:run$13471 ;
  (* src = "rtl/cve2/cve2_controller.sv:665.20-672.14" *)
  wire [3:0] \$auto$wreduce.cc:514:run$13472 ;
  (* src = "rtl/cve2/cve2_controller.sv:658.11-672.14" *)
  wire [3:0] \$auto$wreduce.cc:514:run$13473 ;
  (* src = "rtl/cve2/cve2_controller.sv:509.20-513.14" *)
  wire [6:0] \$auto$wreduce.cc:514:run$13474 ;
  (* src = "rtl/cve2/cve2_controller.sv:507.20-513.14" *)
  wire [6:0] \$auto$wreduce.cc:514:run$13475 ;
  (* src = "rtl/cve2/cve2_controller.sv:500.20-513.14" *)
  wire [6:0] \$auto$wreduce.cc:514:run$13476 ;
  (* src = "rtl/cve2/cve2_controller.sv:614.15-644.18" *)
  wire [6:0] \$auto$wreduce.cc:514:run$13477 ;
  (* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" *)
  wire [6:0] \$auto$wreduce.cc:514:run$13478 ;
  (* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire [6:0] \$auto$wreduce.cc:514:run$13479 ;
  (* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" *)
  wire [31:0] \$csr_mtval_o$163 ;
  (* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire [31:0] \$csr_mtval_o$190 ;
  (* src = "rtl/cve2/cve2_controller.sv:658.11-672.14" *)
  wire \$csr_restore_dret_id_o$177 ;
  (* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire \$csr_restore_dret_id_o$188 ;
  (* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire \$csr_restore_mret_id_o$187 ;
  (* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" *)
  wire \$csr_save_cause_o$162 ;
  (* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire \$csr_save_cause_o$189 ;
  (* src = "rtl/cve2/cve2_controller.sv:441.9-450.12" *)
  wire [3:0] \$ctrl_fsm_ns$100 ;
  (* src = "rtl/cve2/cve2_controller.sv:472.20-481.14" *)
  wire [3:0] \$ctrl_fsm_ns$115 ;
  (* src = "rtl/cve2/cve2_controller.sv:466.11-481.14" *)
  wire [3:0] \$ctrl_fsm_ns$117 ;
  (* src = "rtl/cve2/cve2_controller.sv:465.9-482.12" *)
  wire [3:0] \$ctrl_fsm_ns$119 ;
  (* src = "rtl/cve2/cve2_controller.sv:614.15-644.18" *)
  wire [3:0] \$ctrl_fsm_ns$151 ;
  (* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" *)
  wire [3:0] \$ctrl_fsm_ns$157 ;
  (* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire [3:0] \$ctrl_fsm_ns$178 ;
  (* src = "rtl/cve2/cve2_controller.sv:689.9-691.12" *)
  wire [3:0] \$ctrl_fsm_ns$194 ;
  (* src = "rtl/cve2/cve2_controller.sv:417.9-422.12" *)
  wire [3:0] \$ctrl_fsm_ns$98 ;
  (* src = "rtl/cve2/cve2_controller.sv:534.18-538.12" *)
  wire [2:0] \$debug_cause_o$134 ;
  (* src = "rtl/cve2/cve2_controller.sv:532.9-538.12" *)
  wire [2:0] \$debug_cause_o$135 ;
  (* src = "rtl/cve2/cve2_controller.sv:237.16-245.10" *)
  wire \$ebrk_insn_prio$36 ;
  (* src = "rtl/cve2/cve2_controller.sv:235.16-245.10" *)
  wire \$ebrk_insn_prio$41 ;
  (* src = "rtl/cve2/cve2_controller.sv:235.16-245.10" *)
  wire \$ecall_insn_prio$40 ;
  (* src = "rtl/cve2/cve2_controller.sv:497.11-513.14" *)
  wire [6:0] \$exc_cause_o$128 ;
  (* src = "rtl/cve2/cve2_controller.sv:490.9-514.12" *)
  wire [6:0] \$exc_cause_o$131 ;
  (* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire [1:0] \$exc_pc_mux_o$184 ;
  (* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire \$flush_id$181 ;
  (* src = "rtl/cve2/cve2_controller.sv:472.20-481.14" *)
  wire \$halt_if$116 ;
  (* src = "rtl/cve2/cve2_controller.sv:466.11-481.14" *)
  wire \$halt_if$118 ;
  (* src = "rtl/cve2/cve2_controller.sv:465.9-482.12" *)
  wire \$halt_if$120 ;
  (* src = "rtl/cve2/cve2_controller.sv:417.9-422.12" *)
  wire \$halt_if$99 ;
  (* src = "rtl/cve2/cve2_controller.sv:241.16-245.10" *)
  wire \$load_err_prio$31 ;
  (* src = "rtl/cve2/cve2_controller.sv:239.16-245.10" *)
  wire \$load_err_prio$34 ;
  (* src = "rtl/cve2/cve2_controller.sv:237.16-245.10" *)
  wire \$load_err_prio$38 ;
  (* src = "rtl/cve2/cve2_controller.sv:235.16-245.10" *)
  wire \$load_err_prio$43 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$71 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$72 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$73 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$74 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$75 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$76 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$77 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$78 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$79 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$80 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$81 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$82 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$83 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$84 ;
  (* src = "rtl/cve2/cve2_controller.sv:497.11-513.14" *)
  wire \$nmi_mode_d$127 ;
  (* src = "rtl/cve2/cve2_controller.sv:658.11-672.14" *)
  wire [2:0] \$pc_mux_o$175 ;
  (* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire [2:0] \$pc_mux_o$183 ;
  (* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire \$pc_set_o$182 ;
  (* src = "rtl/cve2/cve2_controller.sv:452.9-457.12" *)
  wire \$perf_jump_o$104 ;
  (* src = "rtl/cve2/cve2_controller.sv:452.9-457.12" *)
  wire \$perf_tbranch_o$105 ;
  wire \$procmux$2125_CMP ;
  wire \$procmux$2553_CMP ;
  wire \$procmux$2581_CMP ;
  wire \$procmux$2610_CMP ;
  wire \$procmux$2856_CMP ;
  wire \$procmux$2911_CMP ;
  wire \$procmux$2940_CMP ;
  wire \$procmux$2941_CMP ;
  wire \$procmux$2943_CMP ;
  wire \$procmux$3251_Y ;
  wire \$procmux$3286_Y ;
  wire \$procmux$3322_Y ;
  (* src = "rtl/cve2/cve2_controller.sv:58.33" *)
  input branch_set_i;
  wire branch_set_i;
  (* src = "rtl/cve2/cve2_controller.sv:14.33" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_controller.sv:41.33" *)
  output controller_run_o;
  wire controller_run_o;
  (* src = "rtl/cve2/cve2_controller.sv:63.33" *)
  input csr_mstatus_mie_i;
  wire csr_mstatus_mie_i;
  (* src = "rtl/cve2/cve2_controller.sv:87.33" *)
  input csr_mstatus_tw_i;
  wire csr_mstatus_tw_i;
  (* src = "rtl/cve2/cve2_controller.sv:85.33" *)
  output [31:0] csr_mtval_o;
  wire [31:0] csr_mtval_o;
  (* src = "rtl/cve2/cve2_controller.sv:150.9" *)
  wire csr_pipe_flush;
  (* src = "rtl/cve2/cve2_controller.sv:27.33" *)
  input csr_pipe_flush_i;
  wire csr_pipe_flush_i;
  (* src = "rtl/cve2/cve2_controller.sv:83.33" *)
  output csr_restore_dret_id_o;
  wire csr_restore_dret_id_o;
  (* src = "rtl/cve2/cve2_controller.sv:82.33" *)
  output csr_restore_mret_id_o;
  wire csr_restore_mret_id_o;
  (* src = "rtl/cve2/cve2_controller.sv:84.33" *)
  output csr_save_cause_o;
  wire csr_save_cause_o;
  (* src = "rtl/cve2/cve2_controller.sv:81.33" *)
  output csr_save_id_o;
  wire csr_save_id_o;
  (* src = "rtl/cve2/cve2_controller.sv:80.33" *)
  output csr_save_if_o;
  wire csr_save_if_o;
  (* src = "rtl/cve2/cve2_controller.sv:18.33" *)
  output ctrl_busy_o;
  wire ctrl_busy_o;
  (* src = "rtl/cve2/cve2_controller.sv:107.14" *)
  reg [3:0] ctrl_fsm_cs;
  (* src = "rtl/cve2/cve2_controller.sv:107.27" *)
  wire [3:0] ctrl_fsm_ns;
  (* src = "rtl/cve2/cve2_controller.sv:72.33" *)
  output [2:0] debug_cause_o;
  wire [2:0] debug_cause_o;
  (* src = "rtl/cve2/cve2_controller.sv:73.33" *)
  output debug_csr_save_o;
  wire debug_csr_save_o;
  (* src = "rtl/cve2/cve2_controller.sv:76.33" *)
  input debug_ebreakm_i;
  wire debug_ebreakm_i;
  (* src = "rtl/cve2/cve2_controller.sv:77.33" *)
  input debug_ebreaku_i;
  wire debug_ebreaku_i;
  (* src = "rtl/cve2/cve2_controller.sv:110.23" *)
  wire debug_mode_d;
  (* src = "rtl/cve2/cve2_controller.sv:74.33" *)
  output debug_mode_o;
  reg debug_mode_o;
  (* src = "rtl/cve2/cve2_controller.sv:71.33" *)
  input debug_req_i;
  wire debug_req_i;
  (* src = "rtl/cve2/cve2_controller.sv:75.33" *)
  input debug_single_step_i;
  wire debug_single_step_i;
  (* src = "rtl/cve2/cve2_controller.sv:135.9" *)
  wire do_single_step_d;
  (* src = "rtl/cve2/cve2_controller.sv:136.9" *)
  reg do_single_step_q;
  (* src = "rtl/cve2/cve2_controller.sv:147.9" *)
  wire dret_insn;
  (* src = "rtl/cve2/cve2_controller.sv:24.33" *)
  input dret_insn_i;
  wire dret_insn_i;
  (* src = "rtl/cve2/cve2_controller.sv:140.9" *)
  wire ebreak_into_debug;
  (* src = "rtl/cve2/cve2_controller.sv:149.9" *)
  wire ebrk_insn;
  (* src = "rtl/cve2/cve2_controller.sv:26.33" *)
  input ebrk_insn_i;
  wire ebrk_insn_i;
  (* src = "rtl/cve2/cve2_controller.sv:121.9" *)
  wire ebrk_insn_prio;
  (* src = "rtl/cve2/cve2_controller.sv:145.9" *)
  wire ecall_insn;
  (* src = "rtl/cve2/cve2_controller.sv:22.33" *)
  input ecall_insn_i;
  wire ecall_insn_i;
  (* src = "rtl/cve2/cve2_controller.sv:120.9" *)
  wire ecall_insn_prio;
  (* src = "rtl/cve2/cve2_controller.sv:139.9" *)
  wire enter_debug_mode;
  (* src = "rtl/cve2/cve2_controller.sv:137.9" *)
  wire enter_debug_mode_prio_d;
  (* src = "rtl/cve2/cve2_controller.sv:138.9" *)
  reg enter_debug_mode_prio_q;
  (* src = "rtl/cve2/cve2_controller.sv:50.33" *)
  output [6:0] exc_cause_o;
  wire [6:0] exc_cause_o;
  (* src = "rtl/cve2/cve2_controller.sv:49.33" *)
  output [1:0] exc_pc_mux_o;
  wire [1:0] exc_pc_mux_o;
  (* src = "rtl/cve2/cve2_controller.sv:113.20" *)
  wire exc_req_d;
  (* src = "rtl/cve2/cve2_controller.sv:131.9" *)
  wire exc_req_lsu;
  (* src = "rtl/cve2/cve2_controller.sv:113.9" *)
  reg exc_req_q;
  (* src = "rtl/cve2/cve2_controller.sv:17.33" *)
  input fetch_enable_i;
  wire fetch_enable_i;
  (* src = "rtl/cve2/cve2_controller.sv:91.33" *)
  output flush_id_o;
  wire flush_id_o;
  (* src = "rtl/cve2/cve2_controller.sv:126.9" *)
  wire halt_if;
  (* src = "rtl/cve2/cve2_controller.sv:141.9" *)
  wire handle_irq;
  (* src = "rtl/cve2/cve2_controller.sv:40.33" *)
  output id_in_ready_o;
  wire id_in_ready_o;
  (* src = "rtl/cve2/cve2_controller.sv:129.9" *)
  wire illegal_dret;
  (* src = "rtl/cve2/cve2_controller.sv:114.25" *)
  wire illegal_insn_d;
  (* src = "rtl/cve2/cve2_controller.sv:21.33" *)
  input illegal_insn_i;
  wire illegal_insn_i;
  (* src = "rtl/cve2/cve2_controller.sv:119.9" *)
  wire illegal_insn_prio;
  (* src = "rtl/cve2/cve2_controller.sv:114.9" *)
  reg illegal_insn_q;
  (* src = "rtl/cve2/cve2_controller.sv:130.9" *)
  wire illegal_umode;
  (* src = "rtl/cve2/cve2_controller.sv:32.33" *)
  input [15:0] instr_compressed_i;
  wire [15:0] instr_compressed_i;
  (* src = "rtl/cve2/cve2_controller.sv:151.9" *)
  wire instr_fetch_err;
  (* src = "rtl/cve2/cve2_controller.sv:34.33" *)
  input instr_fetch_err_i;
  wire instr_fetch_err_i;
  (* src = "rtl/cve2/cve2_controller.sv:35.33" *)
  input instr_fetch_err_plus2_i;
  wire instr_fetch_err_plus2_i;
  (* src = "rtl/cve2/cve2_controller.sv:31.33" *)
  input [31:0] instr_i;
  wire [31:0] instr_i;
  (* src = "rtl/cve2/cve2_controller.sv:33.33" *)
  input instr_is_compressed_i;
  wire instr_is_compressed_i;
  (* src = "rtl/cve2/cve2_controller.sv:45.33" *)
  output instr_req_o;
  wire instr_req_o;
  (* src = "rtl/cve2/cve2_controller.sv:39.33" *)
  output instr_valid_clear_o;
  wire instr_valid_clear_o;
  (* src = "rtl/cve2/cve2_controller.sv:30.33" *)
  input instr_valid_i;
  wire instr_valid_i;
  (* src = "rtl/cve2/cve2_controller.sv:67.33" *)
  input irq_nm_i;
  wire irq_nm_i;
  (* src = "rtl/cve2/cve2_controller.sv:64.33" *)
  input irq_pending_i;
  wire irq_pending_i;
  (* src = "rtl/cve2/cve2_controller.sv:65.33" *)
  input [18:0] irqs_i;
  wire [18:0] irqs_i;
  (* src = "rtl/cve2/cve2_controller.sv:60.33" *)
  input jump_set_i;
  wire jump_set_i;
  (* src = "rtl/cve2/cve2_controller.sv:54.33" *)
  input load_err_i;
  wire load_err_i;
  (* src = "rtl/cve2/cve2_controller.sv:123.9" *)
  wire load_err_prio;
  (* src = "rtl/cve2/cve2_controller.sv:111.9" *)
  reg load_err_q;
  (* src = "rtl/cve2/cve2_controller.sv:53.33" *)
  input [31:0] lsu_addr_last_i;
  wire [31:0] lsu_addr_last_i;
  (* src = "rtl/cve2/cve2_controller.sv:142.15" *)
  wire [3:0] mfip_id;
  (* src = "rtl/cve2/cve2_controller.sv:146.9" *)
  wire mret_insn;
  (* src = "rtl/cve2/cve2_controller.sv:23.33" *)
  input mret_insn_i;
  wire mret_insn_i;
  (* src = "rtl/cve2/cve2_controller.sv:109.21" *)
  wire nmi_mode_d;
  (* src = "rtl/cve2/cve2_controller.sv:68.33" *)
  output nmi_mode_o;
  reg nmi_mode_o;
  (* src = "rtl/cve2/cve2_controller.sv:36.33" *)
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  (* src = "rtl/cve2/cve2_controller.sv:47.33" *)
  output [2:0] pc_mux_o;
  wire [2:0] pc_mux_o;
  (* src = "rtl/cve2/cve2_controller.sv:46.33" *)
  output pc_set_o;
  wire pc_set_o;
  (* src = "rtl/cve2/cve2_controller.sv:94.33" *)
  output perf_jump_o;
  wire perf_jump_o;
  (* src = "rtl/cve2/cve2_controller.sv:96.33" *)
  output perf_tbranch_o;
  wire perf_tbranch_o;
  (* src = "rtl/cve2/cve2_controller.sv:86.33" *)
  input [1:0] priv_mode_i;
  wire [1:0] priv_mode_i;
  (* src = "rtl/cve2/cve2_controller.sv:127.9" *)
  wire retain_id;
  (* src = "rtl/cve2/cve2_controller.sv:15.33" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_controller.sv:132.9" *)
  wire special_req;
  (* src = "rtl/cve2/cve2_controller.sv:134.9" *)
  wire special_req_flush_only;
  (* src = "rtl/cve2/cve2_controller.sv:133.9" *)
  wire special_req_pc_change;
  (* src = "rtl/cve2/cve2_controller.sv:90.33" *)
  input stall_id_i;
  wire stall_id_i;
  (* src = "rtl/cve2/cve2_controller.sv:55.33" *)
  input store_err_i;
  wire store_err_i;
  (* src = "rtl/cve2/cve2_controller.sv:122.9" *)
  wire store_err_prio;
  (* src = "rtl/cve2/cve2_controller.sv:112.9" *)
  reg store_err_q;
  (* src = "rtl/cve2/cve2_controller.sv:78.33" *)
  input trigger_match_i;
  wire trigger_match_i;
  (* src = "rtl/cve2/cve2_controller.sv:148.9" *)
  wire wfi_insn;
  (* src = "rtl/cve2/cve2_controller.sv:25.33" *)
  input wfi_insn_i;
  wire wfi_insn_i;
  assign ecall_insn = ecall_insn_i & (* src = "rtl/cve2/cve2_controller.sv:175.28-175.61" *) instr_valid_i;
  assign mret_insn = mret_insn_i & (* src = "rtl/cve2/cve2_controller.sv:176.28-176.61" *) instr_valid_i;
  assign \$10y  = csr_mstatus_tw_i & (* src = "rtl/cve2/cve2_controller.sv:190.40-190.67" *) wfi_insn;
  assign \$102y  = branch_set_i || (* src = "rtl/cve2/cve2_controller.sv:452.13-452.39" *) jump_set_i;
  assign \$106y  = enter_debug_mode || (* src = "rtl/cve2/cve2_controller.sv:461.14-461.44" *) handle_irq;
  assign \$107y  = stall_id_i || (* src = "rtl/cve2/cve2_controller.sv:461.50-461.72" *) instr_valid_i;
  assign \$108y  = \$106y  && (* src = "rtl/cve2/cve2_controller.sv:461.13-461.73" *) \$107y ;
  assign \$11y  = mret_insn | (* src = "rtl/cve2/cve2_controller.sv:190.27-190.68" *) \$10y ;
  assign \$110y  = ! (* src = "rtl/cve2/cve2_controller.sv:465.13-465.19" *) stall_id_i;
  assign \$111y  = ! (* src = "rtl/cve2/cve2_controller.sv:465.23-465.35" *) special_req;
  assign \$112y  = \$110y  && (* src = "rtl/cve2/cve2_controller.sv:465.13-465.35" *) \$111y ;
  assign \$113y  = ! (* src = "rtl/cve2/cve2_controller.sv:465.39-465.53" *) instr_valid_i;
  assign \$114y  = \$112y  && (* src = "rtl/cve2/cve2_controller.sv:465.13-465.53" *) \$113y ;
  assign illegal_umode = \$9y  & (* src = "rtl/cve2/cve2_controller.sv:188.26-190.69" *) \$11y ;
  assign \$121y  = ! (* src = "rtl/cve2/cve2_controller.sv:497.27-497.38" *) nmi_mode_o;
  assign \$122y  = irq_nm_i && (* src = "rtl/cve2/cve2_controller.sv:497.15-497.38" *) \$121y ;
  assign \$123y  = | (* src = "rtl/cve2/cve2_controller.sv:500.24-500.48" *) irqs_i[15:0];
  assign \$13y  = illegal_insn_i | (* src = "rtl/cve2/cve2_controller.sv:197.28-197.57" *) illegal_dret;
  assign \$136y  = ! (* src = "rtl/cve2/cve2_controller.sv:560.34-560.47" *) debug_mode_o;
  assign \$137y  = ebreak_into_debug && (* src = "rtl/cve2/cve2_controller.sv:560.13-560.47" *) \$136y ;
  assign \$14y  = \$13y  | (* src = "rtl/cve2/cve2_controller.sv:197.28-197.73" *) illegal_umode;
  assign \$142y  = exc_req_q || (* src = "rtl/cve2/cve2_controller.sv:588.13-588.37" *) store_err_q;
  assign \$143y  = \$142y  || (* src = "rtl/cve2/cve2_controller.sv:588.13-588.51" *) load_err_q;
  assign \$145y [31:1] = pc_id_i[31:1] + (* src = "rtl/cve2/cve2_controller.sv:603.56-603.71" *) 1'h1;
  assign \$146y [31:1] = instr_fetch_err_plus2_i ? (* src = "rtl/cve2/cve2_controller.sv:603.29-603.82" *) \$145y [31:1] : pc_id_i[31:1];
  assign \$147y  = instr_is_compressed_i ? (* src = "rtl/cve2/cve2_controller.sv:607.29-607.90" *) { 16'h0000, instr_compressed_i } : instr_i;
  assign \$148y  = priv_mode_i == (* src = "rtl/cve2/cve2_controller.sv:610.30-610.55" *) 2'h3;
  assign \$15y  = ctrl_fsm_cs != (* src = "rtl/cve2/cve2_controller.sv:197.78-197.98" *) 3'h6;
  assign \$150y  = debug_mode_o | (* src = "rtl/cve2/cve2_controller.sv:614.19-614.51" *) ebreak_into_debug;
  assign illegal_insn_d = \$14y  & (* src = "rtl/cve2/cve2_controller.sv:197.27-197.99" *) \$15y ;
  assign \$17y  = ecall_insn | (* src = "rtl/cve2/cve2_controller.sv:204.23-204.45" *) ebrk_insn;
  assign \$18y  = \$17y  | (* src = "rtl/cve2/cve2_controller.sv:204.23-204.62" *) illegal_insn_d;
  assign \$19y  = \$18y  | (* src = "rtl/cve2/cve2_controller.sv:204.23-204.80" *) instr_fetch_err;
  assign \$191y  = ebrk_insn_prio && (* src = "rtl/cve2/cve2_controller.sv:689.42-689.77" *) ebreak_into_debug;
  assign \$192y  = ! (* src = "rtl/cve2/cve2_controller.sv:689.40-689.78" *) \$191y ;
  assign \$193y  = enter_debug_mode_prio_q && (* src = "rtl/cve2/cve2_controller.sv:689.13-689.78" *) \$192y ;
  assign dret_insn = dret_insn_i & (* src = "rtl/cve2/cve2_controller.sv:177.28-177.61" *) instr_valid_i;
  assign exc_req_d = \$19y  & (* src = "rtl/cve2/cve2_controller.sv:204.22-205.44" *) \$15y ;
  assign \$218y  = ~ (* src = "rtl/cve2/cve2_controller.sv:718.26-718.32" *) stall_id_i;
  assign \$219y  = ~ (* src = "rtl/cve2/cve2_controller.sv:718.35-718.43" *) halt_if;
  assign exc_req_lsu = store_err_i | (* src = "rtl/cve2/cve2_controller.sv:208.24-208.48" *) load_err_i;
  assign \$220y  = \$218y  & (* src = "rtl/cve2/cve2_controller.sv:718.26-718.43" *) \$219y ;
  assign \$221y  = ~ (* src = "rtl/cve2/cve2_controller.sv:718.46-718.56" *) retain_id;
  assign id_in_ready_o = \$220y  & (* src = "rtl/cve2/cve2_controller.sv:718.26-718.56" *) \$221y ;
  assign \$223y  = stall_id_i | (* src = "rtl/cve2/cve2_controller.sv:725.34-725.51" *) retain_id;
  assign \$224y  = ~ (* src = "rtl/cve2/cve2_controller.sv:725.32-725.52" *) \$223y ;
  assign instr_valid_clear_o = \$224y  | (* src = "rtl/cve2/cve2_controller.sv:725.32-725.63" *) flush_id_o;
  assign special_req_flush_only = wfi_insn | (* src = "rtl/cve2/cve2_controller.sv:216.35-216.60" *) csr_pipe_flush;
  assign \$24y  = mret_insn | (* src = "rtl/cve2/cve2_controller.sv:219.34-219.55" *) dret_insn;
  assign \$25y  = \$24y  | (* src = "rtl/cve2/cve2_controller.sv:219.34-219.67" *) exc_req_d;
  assign special_req_pc_change = \$25y  | (* src = "rtl/cve2/cve2_controller.sv:219.34-219.81" *) exc_req_lsu;
  assign special_req = special_req_pc_change | (* src = "rtl/cve2/cve2_controller.sv:222.24-222.70" *) special_req_flush_only;
  assign wfi_insn = wfi_insn_i & (* src = "rtl/cve2/cve2_controller.sv:178.28-178.61" *) instr_valid_i;
  assign ebrk_insn = ebrk_insn_i & (* src = "rtl/cve2/cve2_controller.sv:179.28-179.61" *) instr_valid_i;
  assign csr_pipe_flush = csr_pipe_flush_i & (* src = "rtl/cve2/cve2_controller.sv:180.28-180.61" *) instr_valid_i;
  assign \$50y  = ~ (* src = "rtl/cve2/cve2_controller.sv:272.45-272.58" *) debug_mode_o;
  assign \$51y  = \$50y  & (* src = "rtl/cve2/cve2_controller.sv:272.45-272.80" *) debug_single_step_i;
  assign do_single_step_d = instr_valid_i ? (* src = "rtl/cve2/cve2_controller.sv:272.29-272.99" *) \$51y  : do_single_step_q;
  assign \$53y  = debug_req_i | (* src = "rtl/cve2/cve2_controller.sv:283.37-283.67" *) do_single_step_d;
  assign enter_debug_mode_prio_d = \$53y  & (* src = "rtl/cve2/cve2_controller.sv:283.36-283.84" *) \$50y ;
  assign \$57y  = trigger_match_i & (* src = "rtl/cve2/cve2_controller.sv:284.56-284.87" *) \$50y ;
  assign enter_debug_mode = enter_debug_mode_prio_d | (* src = "rtl/cve2/cve2_controller.sv:284.29-284.88" *) \$57y ;
  assign \$59y  = ! (* src = "rtl/cve2/cve2_controller.sv:289.30-289.55" *) priv_mode_i;
  assign instr_fetch_err = instr_fetch_err_i & (* src = "rtl/cve2/cve2_controller.sv:181.28-181.61" *) instr_valid_i;
  assign \$60y  = \$59y  & (* src = "rtl/cve2/cve2_controller.sv:289.30-290.62" *) debug_ebreaku_i;
  assign ebreak_into_debug = \$148y  ? (* src = "rtl/cve2/cve2_controller.sv:288.30-290.62" *) debug_ebreakm_i : \$60y ;
  assign \$64y  = ~ (* src = "rtl/cve2/cve2_controller.sv:297.39-297.50" *) nmi_mode_o;
  assign \$65y  = \$50y  & (* src = "rtl/cve2/cve2_controller.sv:297.23-297.50" *) \$64y ;
  assign \$66y  = irq_pending_i & (* src = "rtl/cve2/cve2_controller.sv:298.20-298.53" *) csr_mstatus_mie_i;
  assign \$67y  = irq_nm_i | (* src = "rtl/cve2/cve2_controller.sv:298.8-298.54" *) \$66y ;
  assign handle_irq = \$65y  & (* src = "rtl/cve2/cve2_controller.sv:297.23-298.55" *) \$67y ;
  assign illegal_dret = dret_insn & (* src = "rtl/cve2/cve2_controller.sv:185.25-185.50" *) \$50y ;
  assign \$89y  = irq_nm_i || (* src = "rtl/cve2/cve2_controller.sv:392.13-392.38" *) irq_pending_i;
  assign \$9y  = priv_mode_i != (* src = "rtl/cve2/cve2_controller.sv:188.27-188.52" *) 2'h3;
  assign \$90y  = \$89y  || (* src = "rtl/cve2/cve2_controller.sv:392.13-392.53" *) debug_req_i;
  assign \$91y  = \$90y  || (* src = "rtl/cve2/cve2_controller.sv:392.13-392.69" *) debug_mode_o;
  assign \$92y  = \$91y  || (* src = "rtl/cve2/cve2_controller.sv:392.13-392.92" *) debug_single_step_i;
  (* src = "rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) nmi_mode_o <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14045 ) nmi_mode_o <= nmi_mode_d;
  (* src = "rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) debug_mode_o <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14056 ) debug_mode_o <= debug_mode_d;
  (* src = "rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) ctrl_fsm_cs <= 4'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14065 ) ctrl_fsm_cs <= ctrl_fsm_ns;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14037  = { \$procmux$2125_CMP , mret_insn, \$143y  } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14039  = { \$procmux$2125_CMP , \$143y  } != 2'h3;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14041  = { \$procmux$2610_CMP , handle_irq } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14043  = | { \$procmux$2610_CMP , \$procmux$2125_CMP  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14048  = { \$procmux$2125_CMP , dret_insn, mret_insn, \$143y  } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14050  = { \$procmux$2125_CMP , mret_insn, \$143y  } != 3'h6;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14054  = | { \$auto$opt_reduce.cc:137:opt_pmux$13315 , \$procmux$2125_CMP  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14059  = { \$procmux$2943_CMP , fetch_enable_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14061  = { \$procmux$2911_CMP , \$92y  } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14063  = { \$procmux$2856_CMP , handle_irq, enter_debug_mode, id_in_ready_o } != 4'h8;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14045  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14037 , \$auto$opt_dff.cc:194:make_patterns_logic$14039 , \$auto$opt_dff.cc:194:make_patterns_logic$14041 , \$auto$opt_dff.cc:194:make_patterns_logic$14043  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14056  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14050 , \$auto$opt_dff.cc:194:make_patterns_logic$14048 , \$auto$opt_dff.cc:194:make_patterns_logic$14039 , \$auto$opt_dff.cc:194:make_patterns_logic$14054  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14065  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14059 , \$auto$opt_dff.cc:194:make_patterns_logic$14063 , \$auto$opt_dff.cc:194:make_patterns_logic$14061  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13315  = | { \$procmux$2581_CMP , \$procmux$2553_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13313  = | { \$procmux$2610_CMP , \$procmux$2581_CMP , \$procmux$2553_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13319  = | { \$procmux$2943_CMP , \$procmux$2941_CMP , \$procmux$2581_CMP , \$procmux$2553_CMP  };
  assign instr_req_o = | { \$procmux$2941_CMP , \$procmux$2856_CMP , \$procmux$2610_CMP , \$procmux$2581_CMP , \$procmux$2553_CMP , \$procmux$2125_CMP , controller_run_o };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13323  = | { load_err_prio, store_err_prio };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13325  = | { \$procmux$2940_CMP , \$procmux$2911_CMP , \$procmux$2581_CMP , \$procmux$2553_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13327  = | { \$procmux$2940_CMP , \$procmux$2911_CMP , \$procmux$2125_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$14963  = | { \$procmux$2941_CMP , \$procmux$2911_CMP  };
  (* src = "rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) do_single_step_q <= 1'h0;
    else do_single_step_q <= do_single_step_d;
  (* src = "rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) enter_debug_mode_prio_q <= 1'h0;
    else enter_debug_mode_prio_q <= enter_debug_mode_prio_d;
  (* src = "rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) exc_req_q <= 1'h0;
    else exc_req_q <= exc_req_d;
  (* src = "rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) illegal_insn_q <= 1'h0;
    else illegal_insn_q <= illegal_insn_d;
  (* src = "rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) load_err_q <= 1'h0;
    else load_err_q <= load_err_i;
  (* src = "rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) store_err_q <= 1'h0;
    else store_err_q <= store_err_i;
  assign \$ctrl_fsm_ns$194  = \$193y  ? (* src = "rtl/cve2/cve2_controller.sv:690.11-690.38|rtl/cve2/cve2_controller.sv:689.9-691.12" *) 4'h8 : \$ctrl_fsm_ns$178 ;
  assign \$procmux$2125_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) 3'h6;
  assign { \$auto$wreduce.cc:514:run$13471 [1], \$auto$wreduce.cc:514:run$13471 [2] } = wfi_insn ? (* src = "rtl/cve2/cve2_controller.sv:671.13-671.48|rtl/cve2/cve2_controller.sv:670.20-672.14" *) 2'h2 : 2'h1;
  assign { \$auto$wreduce.cc:514:run$13472 [1], \$auto$wreduce.cc:514:run$13472 [2] } = dret_insn ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:665.35-670.14|rtl/cve2/cve2_controller.sv:665.20-672.14" *) 2'h1 : { \$auto$wreduce.cc:514:run$13471 [1], \$auto$wreduce.cc:514:run$13471 [2] };
  assign \$pc_mux_o$175 [2:1] = mret_insn ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" *) 2'h1 : { dret_insn, 1'h0 };
  assign \$csr_restore_dret_id_o$177  = mret_insn ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" *) 1'h0 : dret_insn;
  assign { \$auto$wreduce.cc:514:run$13473 [1], \$auto$wreduce.cc:514:run$13473 [2] } = mret_insn ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" *) 2'h1 : { \$auto$wreduce.cc:514:run$13472 [1], \$auto$wreduce.cc:514:run$13472 [2] };
  assign \$pc_mux_o$183  = \$143y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" *) 3'h2 : { \$pc_mux_o$175 [2:1], \$pc_mux_o$175 [1] };
  assign \$pc_set_o$182  = \$143y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" *) \$csr_save_cause_o$162  : \$24y ;
  assign \$ctrl_fsm_ns$178  = \$143y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" *) { \$ctrl_fsm_ns$157 [3:2], 2'h1 } : { 1'h0, \$auto$wreduce.cc:514:run$13473 [2:1], \$auto$wreduce.cc:514:run$13473 [2] };
  assign \$auto$wreduce.cc:514:run$13477 [1] = ~ (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:614.53-633.18|rtl/cve2/cve2_controller.sv:614.15-644.18" *) \$150y ;
  assign \$ctrl_fsm_ns$151 [3:2] = \$150y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:614.53-633.18|rtl/cve2/cve2_controller.sv:614.15-644.18" *) 2'h2 : 2'h1;
  function [31:0] \$procmux$2394 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:650.28-653.16|rtl/cve2/cve2_controller.sv:600.11-655.18" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$2394  = b[31:0];
      3'b?1?:
        \$procmux$2394  = b[63:32];
      3'b1??:
        \$procmux$2394  = b[95:64];
      default:
        \$procmux$2394  = a;
    endcase
  endfunction
  assign \$csr_mtval_o$163  = \$procmux$2394 (32'd0, { \$146y [31:1], pc_id_i[0], \$147y , lsu_addr_last_i }, { instr_fetch_err, illegal_insn_prio, \$auto$opt_reduce.cc:137:opt_pmux$13323  });
  assign \$csr_save_cause_o$162  = ebrk_insn_prio ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:614.15-644.18|rtl/cve2/cve2_controller.sv:600.11-655.18" *) \$auto$wreduce.cc:514:run$13477 [1] : 1'h1;
  function [3:0] \$procmux$2430 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:650.28-653.16|rtl/cve2/cve2_controller.sv:600.11-655.18" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$2430  = b[3:0];
      6'b????1?:
        \$procmux$2430  = b[7:4];
      6'b???1??:
        \$procmux$2430  = b[11:8];
      6'b??1???:
        \$procmux$2430  = b[15:12];
      6'b?1????:
        \$procmux$2430  = b[19:16];
      6'b1?????:
        \$procmux$2430  = b[23:20];
      default:
        \$procmux$2430  = a;
    endcase
  endfunction
  assign \$auto$wreduce.cc:514:run$13478 [3:0] = \$procmux$2430 (4'h0, { 10'h04a, \$148y , \$148y , 2'h0, \$auto$wreduce.cc:514:run$13477 [1], \$auto$wreduce.cc:514:run$13477 [1], 8'h75 }, { instr_fetch_err, illegal_insn_prio, ecall_insn_prio, ebrk_insn_prio, store_err_prio, load_err_prio });
  assign \$ctrl_fsm_ns$157 [3:2] = ebrk_insn_prio ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:614.15-644.18|rtl/cve2/cve2_controller.sv:600.11-655.18" *) \$ctrl_fsm_ns$151 [3:2] : 2'h1;
  assign \$csr_mtval_o$190  = \$143y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" *) \$csr_mtval_o$163  : 32'd0;
  assign \$csr_save_cause_o$189  = \$143y  & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" *) \$csr_save_cause_o$162 ;
  assign \$csr_restore_dret_id_o$188  = \$143y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" *) 1'h0 : \$csr_restore_dret_id_o$177 ;
  assign \$csr_restore_mret_id_o$187  = \$143y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" *) 1'h0 : mret_insn;
  assign \$auto$wreduce.cc:514:run$13479 [3:0] = \$143y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" *) \$auto$wreduce.cc:514:run$13478 [3:0] : 4'h0;
  assign \$exc_pc_mux_o$184  = \$143y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" *) { debug_mode_o, debug_mode_o } : 2'h1;
  assign \$flush_id$181  = \$143y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" *) \$csr_save_cause_o$162  : 1'h1;
  assign \$procmux$2553_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) 4'h9;
  assign \$debug_cause_o$134 [2:1] = debug_req_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:535.11-535.45|rtl/cve2/cve2_controller.sv:534.18-538.12" *) 2'h1 : 2'h2;
  assign \$procmux$2581_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) 4'h8;
  assign \$debug_cause_o$135  = trigger_match_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:533.11-533.45|rtl/cve2/cve2_controller.sv:532.9-538.12" *) 3'h2 : { \$debug_cause_o$134 [2:1], \$debug_cause_o$134 [1] };
  assign \$auto$wreduce.cc:514:run$13474 [2] = ~ (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:510.13-510.52|rtl/cve2/cve2_controller.sv:509.20-513.14" *) irqs_i[18];
  assign \$procmux$2610_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) 3'h7;
  assign \$auto$wreduce.cc:514:run$13475 [3:2] = irqs_i[16] ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:508.13-508.52|rtl/cve2/cve2_controller.sv:507.20-513.14" *) 2'h2 : { 1'h0, \$auto$wreduce.cc:514:run$13474 [2] };
  assign \$auto$wreduce.cc:514:run$13476 [4:0] = \$123y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:506.13-506.59|rtl/cve2/cve2_controller.sv:500.20-513.14" *) { 1'h1, mfip_id } : { 1'h0, \$auto$wreduce.cc:514:run$13475 [3:2], 2'h3 };
  assign \$exc_cause_o$128 [5:0] = \$122y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:497.40-500.14|rtl/cve2/cve2_controller.sv:497.11-513.14" *) 6'h20 : { 1'h0, \$auto$wreduce.cc:514:run$13476 [4:0] };
  assign \$nmi_mode_d$127  = nmi_mode_o | (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:497.40-500.14|rtl/cve2/cve2_controller.sv:497.11-513.14" *) \$122y ;
  assign \$exc_cause_o$131  = handle_irq ? (* src = "rtl/cve2/cve2_controller.sv:490.25-514.12|rtl/cve2/cve2_controller.sv:490.9-514.12" *) { 1'h1, \$exc_cause_o$128 [5:0] } : 7'h00;
  assign \$halt_if$116  = \$108y  | (* src = "rtl/cve2/cve2_controller.sv:472.36-481.14|rtl/cve2/cve2_controller.sv:472.20-481.14" *) handle_irq;
  assign controller_run_o = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) 3'h5;
  assign \$ctrl_fsm_ns$115  = handle_irq ? (* src = "rtl/cve2/cve2_controller.sv:472.36-481.14|rtl/cve2/cve2_controller.sv:472.20-481.14" *) 4'h7 : \$ctrl_fsm_ns$100 ;
  assign \$halt_if$118  = \$halt_if$116  | (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:466.33-472.14|rtl/cve2/cve2_controller.sv:466.11-481.14" *) enter_debug_mode;
  assign \$ctrl_fsm_ns$117  = enter_debug_mode ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:466.33-472.14|rtl/cve2/cve2_controller.sv:466.11-481.14" *) 4'h8 : \$ctrl_fsm_ns$115 ;
  assign \$halt_if$120  = \$114y  ? (* src = "rtl/cve2/cve2_controller.sv:466.11-481.14|rtl/cve2/cve2_controller.sv:465.9-482.12" *) \$halt_if$118  : \$108y ;
  assign \$ctrl_fsm_ns$119  = \$114y  ? (* src = "rtl/cve2/cve2_controller.sv:466.11-481.14|rtl/cve2/cve2_controller.sv:465.9-482.12" *) \$ctrl_fsm_ns$117  : \$ctrl_fsm_ns$100 ;
  assign \$perf_tbranch_o$105  = \$102y  & (* src = "rtl/cve2/cve2_controller.sv:452.41-457.12|rtl/cve2/cve2_controller.sv:452.9-457.12" *) branch_set_i;
  assign \$perf_jump_o$104  = \$102y  & (* src = "rtl/cve2/cve2_controller.sv:452.41-457.12|rtl/cve2/cve2_controller.sv:452.9-457.12" *) jump_set_i;
  assign \$ctrl_fsm_ns$100  = special_req ? (* src = "rtl/cve2/cve2_controller.sv:441.26-450.12|rtl/cve2/cve2_controller.sv:441.9-450.12" *) 4'h6 : ctrl_fsm_cs;
  assign \$halt_if$99  = handle_irq | (* src = "rtl/cve2/cve2_controller.sv:417.31-422.12|rtl/cve2/cve2_controller.sv:417.9-422.12" *) enter_debug_mode;
  assign \$procmux$2856_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:400.20-423.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) 3'h4;
  assign { \$ctrl_fsm_ns$98 [3], \$ctrl_fsm_ns$98 [1], \$ctrl_fsm_ns$98 [2] } = enter_debug_mode ? (* src = "rtl/cve2/cve2_controller.sv:417.31-422.12|rtl/cve2/cve2_controller.sv:417.9-422.12" *) 3'h4 : { 1'h0, handle_irq, 1'h1 };
  assign \$procmux$2911_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:383.14-398.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) 2'h3;
  function [3:0] \$procmux$2926 ;
    input [3:0] a;
    input [27:0] b;
    input [6:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      7'b??????1:
        \$procmux$2926  = b[3:0];
      7'b?????1?:
        \$procmux$2926  = b[7:4];
      7'b????1??:
        \$procmux$2926  = b[11:8];
      7'b???1???:
        \$procmux$2926  = b[15:12];
      7'b??1????:
        \$procmux$2926  = b[19:16];
      7'b?1?????:
        \$procmux$2926  = b[23:20];
      7'b1??????:
        \$procmux$2926  = b[27:24];
      default:
        \$procmux$2926  = a;
    endcase
  endfunction
  assign ctrl_fsm_ns = \$procmux$2926 (4'h0, { 12'h134, \$ctrl_fsm_ns$98 [3:1], \$ctrl_fsm_ns$98 [2], \$ctrl_fsm_ns$119 , 4'h5, \$ctrl_fsm_ns$194  }, { \$procmux$2943_CMP , \$procmux$2940_CMP , \$auto$opt_reduce.cc:137:opt_pmux$14963 , \$procmux$2856_CMP , controller_run_o, \$auto$opt_reduce.cc:137:opt_pmux$13313 , \$procmux$2125_CMP  });
  assign \$procmux$2940_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:375.19-381.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) 2'h2;
  assign \$procmux$2941_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:366.17-373.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) 1'h1;
  assign \$procmux$2943_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:357.14-365.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) ctrl_fsm_cs;
  assign perf_tbranch_o = controller_run_o & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$perf_tbranch_o$105 ;
  assign perf_jump_o = controller_run_o & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$perf_jump_o$104 ;
  assign csr_mtval_o = \$procmux$2125_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$csr_mtval_o$190  : 32'd0;
  function [0:0] \$procmux$2980 ;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$2980  = b[0:0];
      4'b??1?:
        \$procmux$2980  = b[1:1];
      4'b?1??:
        \$procmux$2980  = b[2:2];
      4'b1???:
        \$procmux$2980  = b[3:3];
      default:
        \$procmux$2980  = a;
    endcase
  endfunction
  assign csr_save_cause_o = \$procmux$2980 (1'h0, { handle_irq, 1'h1, \$137y , \$csr_save_cause_o$189  }, { \$procmux$2610_CMP , \$procmux$2581_CMP , \$procmux$2553_CMP , \$procmux$2125_CMP  });
  assign csr_restore_dret_id_o = \$procmux$2125_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$csr_restore_dret_id_o$188 ;
  assign csr_restore_mret_id_o = \$procmux$2125_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$csr_restore_mret_id_o$187 ;
  assign csr_save_id_o = \$procmux$2553_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$137y ;
  function [0:0] \$procmux$3006 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$3006  = b[0:0];
      2'b1?:
        \$procmux$3006  = b[1:1];
      default:
        \$procmux$3006  = a;
    endcase
  endfunction
  assign csr_save_if_o = \$procmux$3006 (1'h0, { handle_irq, 1'h1 }, { \$procmux$2610_CMP , \$procmux$2581_CMP  });
  function [0:0] \$procmux$3013 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$3013  = b[0:0];
      2'b1?:
        \$procmux$3013  = b[1:1];
      default:
        \$procmux$3013  = a;
    endcase
  endfunction
  assign debug_csr_save_o = \$procmux$3013 (1'h0, { 1'h1, \$137y  }, { \$procmux$2581_CMP , \$procmux$2553_CMP  });
  assign debug_cause_o = \$procmux$2581_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$debug_cause_o$135  : 3'h1;
  function [6:0] \$procmux$3026 ;
    input [6:0] a;
    input [13:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$3026  = b[6:0];
      2'b1?:
        \$procmux$3026  = b[13:7];
      default:
        \$procmux$3026  = a;
    endcase
  endfunction
  assign exc_cause_o = \$procmux$3026 (7'h00, { \$exc_cause_o$131 , 3'h0, \$auto$wreduce.cc:514:run$13479 [3:0] }, { \$procmux$2610_CMP , \$procmux$2125_CMP  });
  function [1:0] \$procmux$3032 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$3032  = b[1:0];
      2'b1?:
        \$procmux$3032  = b[3:2];
      default:
        \$procmux$3032  = a;
    endcase
  endfunction
  assign exc_pc_mux_o = \$procmux$3032 (2'h1, { 2'h2, \$exc_pc_mux_o$184  }, { \$auto$opt_reduce.cc:137:opt_pmux$13315 , \$procmux$2125_CMP  });
  function [2:0] \$procmux$3041 ;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$3041  = b[2:0];
      3'b?1?:
        \$procmux$3041  = b[5:3];
      3'b1??:
        \$procmux$3041  = b[8:6];
      default:
        \$procmux$3041  = a;
    endcase
  endfunction
  assign pc_mux_o = \$procmux$3041 (3'h0, { 6'h0a, \$pc_mux_o$183  }, { controller_run_o, \$auto$opt_reduce.cc:137:opt_pmux$13313 , \$procmux$2125_CMP  });
  function [0:0] \$procmux$3054 ;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$3054  = b[0:0];
      4'b??1?:
        \$procmux$3054  = b[1:1];
      4'b?1??:
        \$procmux$3054  = b[2:2];
      4'b1???:
        \$procmux$3054  = b[3:3];
      default:
        \$procmux$3054  = a;
    endcase
  endfunction
  assign pc_set_o = \$procmux$3054 (1'h0, { \$102y , handle_irq, 1'h1, \$pc_set_o$182  }, { controller_run_o, \$procmux$2610_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13319 , \$procmux$2125_CMP  });
  function [0:0] \$procmux$3094 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:383.14-398.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$3094  = b[0:0];
      2'b1?:
        \$procmux$3094  = b[1:1];
      default:
        \$procmux$3094  = a;
    endcase
  endfunction
  assign ctrl_busy_o = \$procmux$3094 (1'h1, { 1'h0, \$92y  }, { \$procmux$2940_CMP , \$procmux$2911_CMP  });
  function [0:0] \$procmux$3099 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$3099  = b[0:0];
      2'b1?:
        \$procmux$3099  = b[1:1];
      default:
        \$procmux$3099  = a;
    endcase
  endfunction
  assign flush_id_o = \$procmux$3099 (1'h0, { 1'h1, \$flush_id$181  }, { \$auto$opt_reduce.cc:137:opt_pmux$13325 , \$procmux$2125_CMP  });
  assign retain_id = controller_run_o & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) special_req;
  function [0:0] \$procmux$3118 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$3118  = b[0:0];
      3'b?1?:
        \$procmux$3118  = b[1:1];
      3'b1??:
        \$procmux$3118  = b[2:2];
      default:
        \$procmux$3118  = a;
    endcase
  endfunction
  assign halt_if = \$procmux$3118 (1'h0, { \$halt_if$99 , \$halt_if$120 , 1'h1 }, { \$procmux$2856_CMP , controller_run_o, \$auto$opt_reduce.cc:137:opt_pmux$13327  });
  assign debug_mode_d = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$procmux$2125_CMP ;
  assign nmi_mode_d = \$procmux$2125_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) 1'h0 : \$nmi_mode_d$127 ;
  assign mfip_id = irqs_i[0] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h0 : \$mfip_id$84 ;
  assign \$mfip_id$84  = irqs_i[1] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h1 : \$mfip_id$83 ;
  assign \$mfip_id$83  = irqs_i[2] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h2 : \$mfip_id$82 ;
  assign \$mfip_id$82  = irqs_i[3] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h3 : \$mfip_id$81 ;
  assign \$mfip_id$81  = irqs_i[4] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h4 : \$mfip_id$80 ;
  assign \$mfip_id$80  = irqs_i[5] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h5 : \$mfip_id$79 ;
  assign \$mfip_id$79  = irqs_i[6] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h6 : \$mfip_id$78 ;
  assign \$mfip_id$78  = irqs_i[7] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h7 : \$mfip_id$77 ;
  assign \$mfip_id$77  = irqs_i[8] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h8 : \$mfip_id$76 ;
  assign \$mfip_id$76  = irqs_i[9] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h9 : \$mfip_id$75 ;
  assign \$mfip_id$75  = irqs_i[10] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'ha : \$mfip_id$74 ;
  assign \$mfip_id$74  = irqs_i[11] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'hb : { \$mfip_id$73 [3], \$mfip_id$73 [3], \$mfip_id$73 [1:0] };
  assign { \$mfip_id$73 [3], \$mfip_id$73 [1:0] } = irqs_i[12] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 3'h4 : { \$mfip_id$72 [3], \$mfip_id$72 [1:0] };
  assign { \$mfip_id$72 [3], \$mfip_id$72 [1:0] } = irqs_i[13] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 3'h5 : { \$mfip_id$71 [3], \$mfip_id$71 [3], \$mfip_id$71 [0] };
  assign { \$mfip_id$71 [3], \$mfip_id$71 [0] } = irqs_i[14] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 2'h2 : { irqs_i[15], irqs_i[15] };
  assign \$load_err_prio$31  = store_err_q ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:242.9-242.31|rtl/cve2/cve2_controller.sv:241.16-245.10" *) 1'h0 : load_err_q;
  assign \$load_err_prio$34  = ebrk_insn ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:240.9-240.31|rtl/cve2/cve2_controller.sv:239.16-245.10" *) 1'h0 : \$load_err_prio$31 ;
  assign \$procmux$3251_Y  = ebrk_insn ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:240.9-240.31|rtl/cve2/cve2_controller.sv:239.16-245.10" *) 1'h0 : store_err_q;
  assign \$load_err_prio$38  = ecall_insn ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" *) 1'h0 : \$load_err_prio$34 ;
  assign \$procmux$3286_Y  = ecall_insn ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" *) 1'h0 : \$procmux$3251_Y ;
  assign \$ebrk_insn_prio$36  = ecall_insn ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" *) 1'h0 : ebrk_insn;
  assign \$load_err_prio$43  = illegal_insn_q ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" *) 1'h0 : \$load_err_prio$38 ;
  assign \$procmux$3322_Y  = illegal_insn_q ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" *) 1'h0 : \$procmux$3286_Y ;
  assign \$ebrk_insn_prio$41  = illegal_insn_q ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" *) 1'h0 : \$ebrk_insn_prio$36 ;
  assign \$ecall_insn_prio$40  = illegal_insn_q ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" *) 1'h0 : ecall_insn;
  assign load_err_prio = instr_fetch_err ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" *) 1'h0 : \$load_err_prio$43 ;
  assign store_err_prio = instr_fetch_err ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" *) 1'h0 : \$procmux$3322_Y ;
  assign ebrk_insn_prio = instr_fetch_err ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" *) 1'h0 : \$ebrk_insn_prio$41 ;
  assign ecall_insn_prio = instr_fetch_err ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" *) 1'h0 : \$ecall_insn_prio$40 ;
  assign illegal_insn_prio = instr_fetch_err ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" *) 1'h0 : illegal_insn_q;
  assign \$145y [0] = pc_id_i[0];
  assign \$146y [0] = pc_id_i[0];
  assign { \$auto$wreduce.cc:514:run$13471 [3], \$auto$wreduce.cc:514:run$13471 [0] } = { 1'h0, \$auto$wreduce.cc:514:run$13471 [2] };
  assign { \$auto$wreduce.cc:514:run$13472 [3], \$auto$wreduce.cc:514:run$13472 [0] } = { 1'h0, \$auto$wreduce.cc:514:run$13472 [2] };
  assign { \$auto$wreduce.cc:514:run$13473 [3], \$auto$wreduce.cc:514:run$13473 [0] } = { 1'h0, \$auto$wreduce.cc:514:run$13473 [2] };
  assign { \$auto$wreduce.cc:514:run$13474 [6:3], \$auto$wreduce.cc:514:run$13474 [1:0] } = 6'h23;
  assign { \$auto$wreduce.cc:514:run$13475 [6:4], \$auto$wreduce.cc:514:run$13475 [1:0] } = 5'h13;
  assign \$auto$wreduce.cc:514:run$13476 [6:5] = 2'h2;
  assign { \$auto$wreduce.cc:514:run$13477 [6:2], \$auto$wreduce.cc:514:run$13477 [0] } = { 5'h00, \$auto$wreduce.cc:514:run$13477 [1] };
  assign \$auto$wreduce.cc:514:run$13478 [6:4] = 3'h0;
  assign \$auto$wreduce.cc:514:run$13479 [6:4] = 3'h0;
  assign \$ctrl_fsm_ns$151 [1:0] = 2'h1;
  assign \$ctrl_fsm_ns$157 [1:0] = 2'h1;
  assign \$ctrl_fsm_ns$98 [0] = \$ctrl_fsm_ns$98 [2];
  assign \$debug_cause_o$134 [0] = \$debug_cause_o$134 [1];
  assign \$exc_cause_o$128 [6] = 1'h1;
  assign \$mfip_id$71 [2:1] = { \$mfip_id$71 [3], \$mfip_id$71 [3] };
  assign \$mfip_id$72 [2] = \$mfip_id$72 [3];
  assign \$mfip_id$73 [2] = \$mfip_id$73 [3];
  assign \$pc_mux_o$175 [0] = \$pc_mux_o$175 [1];
endmodule

(* src = "rtl/cve2/cve2_core.sv:15.8" *)
module \cve2_core$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex (clk_i, rst_ni, core_busy_o, boot_addr_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_be_o, data_addr_o, data_wdata_o, data_rdata_i, data_err_i, debug_req_i, fetch_enable_i
, test_en_i, hart_id_i, irq_software_i, irq_timer_i, irq_external_i, irq_fast_i, irq_nm_i, irq_pending_o, crash_dump_o);
  wire \$0y ;
  wire \$2y ;
  (* src = "rtl/cve2/cve2_core.sv:178.16" *)
  wire [31:0] alu_adder_result_ex;
  (* src = "rtl/cve2/cve2_core.sv:175.16" *)
  wire [31:0] alu_operand_a_ex;
  (* src = "rtl/cve2/cve2_core.sv:176.16" *)
  wire [31:0] alu_operand_b_ex;
  (* src = "rtl/cve2/cve2_core.sv:174.16" *)
  wire [6:0] alu_operator_ex;
  (* src = "rtl/cve2/cve2_core.sv:36.40" *)
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  (* src = "rtl/cve2/cve2_core.sv:146.16" *)
  wire branch_decision;
  (* src = "rtl/cve2/cve2_core.sv:145.16" *)
  wire [31:0] branch_target_ex;
  (* src = "rtl/cve2/cve2_core.sv:30.40" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_core.sv:106.40" *)
  output core_busy_o;
  wire core_busy_o;
  (* src = "rtl/cve2/cve2_core.sv:67.40" *)
  output [127:0] crash_dump_o;
  wire [127:0] crash_dump_o;
  (* src = "rtl/cve2/cve2_core.sv:192.16" *)
  wire csr_access;
  (* src = "rtl/cve2/cve2_core.sv:195.16" *)
  wire [11:0] csr_addr;
  (* src = "rtl/cve2/cve2_core.sv:227.26" *)
  wire [31:0] csr_depc;
  (* src = "rtl/cve2/cve2_core.sv:227.16" *)
  wire [31:0] csr_mepc;
  (* src = "rtl/cve2/cve2_core.sv:226.16" *)
  wire csr_mstatus_mie;
  (* src = "rtl/cve2/cve2_core.sv:244.16" *)
  wire csr_mstatus_tw;
  (* src = "rtl/cve2/cve2_core.sv:243.16" *)
  wire [31:0] csr_mtval;
  (* src = "rtl/cve2/cve2_core.sv:242.16" *)
  wire [31:0] csr_mtvec;
  (* src = "rtl/cve2/cve2_core.sv:241.16" *)
  wire csr_mtvec_init;
  (* src = "rtl/cve2/cve2_core.sv:193.16" *)
  wire [1:0] csr_op;
  (* src = "rtl/cve2/cve2_core.sv:194.16" *)
  wire csr_op_en;
  (* src = "rtl/cve2/cve2_core.sv:230.17" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135" *)
  wire [135:0] csr_pmp_addr;
  (* src = "rtl/cve2/cve2_core.sv:231.17" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23" *)
  wire [23:0] csr_pmp_cfg;
  (* src = "rtl/cve2/cve2_core.sv:232.17" *)
  (* unused_bits = "0 1 2" *)
  wire [2:0] csr_pmp_mseccfg;
  (* src = "rtl/cve2/cve2_core.sv:196.16" *)
  wire [31:0] csr_rdata;
  (* src = "rtl/cve2/cve2_core.sv:239.16" *)
  wire csr_restore_dret_id;
  (* src = "rtl/cve2/cve2_core.sv:238.16" *)
  wire csr_restore_mret_id;
  (* src = "rtl/cve2/cve2_core.sv:240.16" *)
  wire csr_save_cause;
  (* src = "rtl/cve2/cve2_core.sv:237.16" *)
  wire csr_save_id;
  (* src = "rtl/cve2/cve2_core.sv:236.16" *)
  wire csr_save_if;
  (* src = "rtl/cve2/cve2_core.sv:149.16" *)
  wire ctrl_busy;
  (* src = "rtl/cve2/cve2_core.sv:52.40" *)
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  (* src = "rtl/cve2/cve2_core.sv:51.40" *)
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  (* src = "rtl/cve2/cve2_core.sv:55.40" *)
  input data_err_i;
  wire data_err_i;
  (* src = "rtl/cve2/cve2_core.sv:48.40" *)
  input data_gnt_i;
  wire data_gnt_i;
  (* src = "rtl/cve2/cve2_core.sv:54.40" *)
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  (* src = "rtl/cve2/cve2_core.sv:47.40" *)
  output data_req_o;
  wire data_req_o;
  (* src = "rtl/cve2/cve2_core.sv:49.40" *)
  input data_rvalid_i;
  wire data_rvalid_i;
  (* src = "rtl/cve2/cve2_core.sv:53.40" *)
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  (* src = "rtl/cve2/cve2_core.sv:50.40" *)
  output data_we_o;
  wire data_we_o;
  (* src = "rtl/cve2/cve2_core.sv:250.16" *)
  wire [2:0] debug_cause;
  (* src = "rtl/cve2/cve2_core.sv:251.16" *)
  wire debug_csr_save;
  (* src = "rtl/cve2/cve2_core.sv:253.16" *)
  wire debug_ebreakm;
  (* src = "rtl/cve2/cve2_core.sv:254.16" *)
  wire debug_ebreaku;
  (* src = "rtl/cve2/cve2_core.sv:249.16" *)
  wire debug_mode;
  (* src = "rtl/cve2/cve2_core.sv:66.40" *)
  input debug_req_i;
  wire debug_req_i;
  (* src = "rtl/cve2/cve2_core.sv:252.16" *)
  wire debug_single_step;
  (* src = "rtl/cve2/cve2_core.sv:183.16" *)
  wire div_en_ex;
  (* src = "rtl/cve2/cve2_core.sv:185.16" *)
  wire div_sel_ex;
  (* src = "rtl/cve2/cve2_core.sv:221.16" *)
  wire en_wb;
  (* src = "rtl/cve2/cve2_core.sv:211.16" *)
  wire ex_valid;
  (* src = "rtl/cve2/cve2_core.sv:135.16" *)
  wire [6:0] exc_cause;
  (* src = "rtl/cve2/cve2_core.sv:134.16" *)
  wire [1:0] exc_pc_mux_id;
  (* src = "rtl/cve2/cve2_core.sv:105.40" *)
  input fetch_enable_i;
  wire fetch_enable_i;
  (* src = "rtl/cve2/cve2_core.sv:800.16" *)
  (* unused_bits = "0 1" *)
  wire [1:0] \g_no_pmp.unused_priv_lvl_ls ;
  (* src = "rtl/cve2/cve2_core.sv:35.40" *)
  input [31:0] hart_id_i;
  wire [31:0] hart_id_i;
  (* src = "rtl/cve2/cve2_core.sv:210.16" *)
  wire id_in_ready;
  (* src = "rtl/cve2/cve2_core.sv:150.16" *)
  wire if_busy;
  (* src = "rtl/cve2/cve2_core.sv:123.16" *)
  wire illegal_c_insn_id;
  (* src = "rtl/cve2/cve2_core.sv:198.16" *)
  wire illegal_csr_insn_id;
  (* src = "rtl/cve2/cve2_core.sv:274.16" *)
  (* unused_bits = "0" *)
  wire illegal_insn_id;
  (* src = "rtl/cve2/cve2_core.sv:126.16" *)
  wire [67:0] imd_val_d_ex;
  (* src = "rtl/cve2/cve2_core.sv:127.16" *)
  wire [67:0] imd_val_q_ex;
  (* src = "rtl/cve2/cve2_core.sv:128.16" *)
  wire [1:0] imd_val_we_ex;
  (* src = "rtl/cve2/cve2_core.sv:42.40" *)
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  (* src = "rtl/cve2/cve2_core.sv:44.40" *)
  input instr_err_i;
  wire instr_err_i;
  (* src = "rtl/cve2/cve2_core.sv:121.16" *)
  wire instr_fetch_err;
  (* src = "rtl/cve2/cve2_core.sv:122.16" *)
  wire instr_fetch_err_plus2;
  (* src = "rtl/cve2/cve2_core.sv:130.16" *)
  wire instr_first_cycle_id;
  (* src = "rtl/cve2/cve2_core.sv:40.40" *)
  input instr_gnt_i;
  wire instr_gnt_i;
  (* src = "rtl/cve2/cve2_core.sv:259.16" *)
  (* unused_bits = "0" *)
  wire instr_id_done;
  (* src = "rtl/cve2/cve2_core.sv:119.16" *)
  wire instr_is_compressed_id;
  (* src = "rtl/cve2/cve2_core.sv:114.16" *)
  (* unused_bits = "0" *)
  wire instr_new_id;
  (* src = "rtl/cve2/cve2_core.sv:120.16" *)
  wire instr_perf_count_id;
  (* src = "rtl/cve2/cve2_core.sv:116.16" *)
  wire [31:0] instr_rdata_alu_id;
  (* src = "rtl/cve2/cve2_core.sv:118.16" *)
  wire [15:0] instr_rdata_c_id;
  (* src = "rtl/cve2/cve2_core.sv:43.40" *)
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  (* src = "rtl/cve2/cve2_core.sv:115.16" *)
  wire [31:0] instr_rdata_id;
  (* src = "rtl/cve2/cve2_core.sv:218.16" *)
  wire instr_req_gated;
  (* src = "rtl/cve2/cve2_core.sv:39.40" *)
  output instr_req_o;
  wire instr_req_o;
  (* src = "rtl/cve2/cve2_core.sv:41.40" *)
  input instr_rvalid_i;
  wire instr_rvalid_i;
  (* src = "rtl/cve2/cve2_core.sv:131.16" *)
  wire instr_valid_clear;
  (* src = "rtl/cve2/cve2_core.sv:113.16" *)
  wire instr_valid_id;
  (* src = "rtl/cve2/cve2_core.sv:60.40" *)
  input irq_external_i;
  wire irq_external_i;
  (* src = "rtl/cve2/cve2_core.sv:61.40" *)
  input [15:0] irq_fast_i;
  wire [15:0] irq_fast_i;
  (* src = "rtl/cve2/cve2_core.sv:62.40" *)
  input irq_nm_i;
  wire irq_nm_i;
  (* src = "rtl/cve2/cve2_core.sv:63.40" *)
  output irq_pending_o;
  wire irq_pending_o;
  (* src = "rtl/cve2/cve2_core.sv:58.40" *)
  input irq_software_i;
  wire irq_software_i;
  (* src = "rtl/cve2/cve2_core.sv:59.40" *)
  input irq_timer_i;
  wire irq_timer_i;
  (* src = "rtl/cve2/cve2_core.sv:225.16" *)
  wire [18:0] irqs;
  (* src = "rtl/cve2/cve2_core.sv:141.16" *)
  wire lsu_addr_incr_req;
  (* src = "rtl/cve2/cve2_core.sv:142.16" *)
  wire [31:0] lsu_addr_last;
  (* src = "rtl/cve2/cve2_core.sv:151.16" *)
  wire lsu_busy;
  (* src = "rtl/cve2/cve2_core.sv:137.16" *)
  wire lsu_load_err;
  (* src = "rtl/cve2/cve2_core.sv:206.16" *)
  wire lsu_req;
  (* src = "rtl/cve2/cve2_core.sv:214.16" *)
  wire lsu_resp_err;
  (* src = "rtl/cve2/cve2_core.sv:213.16" *)
  wire lsu_resp_valid;
  (* src = "rtl/cve2/cve2_core.sv:205.16" *)
  wire lsu_sign_ext;
  (* src = "rtl/cve2/cve2_core.sv:138.16" *)
  wire lsu_store_err;
  (* src = "rtl/cve2/cve2_core.sv:204.16" *)
  wire [1:0] lsu_type;
  (* src = "rtl/cve2/cve2_core.sv:207.16" *)
  wire [31:0] lsu_wdata;
  (* src = "rtl/cve2/cve2_core.sv:203.16" *)
  wire lsu_we;
  (* src = "rtl/cve2/cve2_core.sv:182.16" *)
  wire mult_en_ex;
  (* src = "rtl/cve2/cve2_core.sv:184.16" *)
  wire mult_sel_ex;
  (* src = "rtl/cve2/cve2_core.sv:188.16" *)
  wire [31:0] multdiv_operand_a_ex;
  (* src = "rtl/cve2/cve2_core.sv:189.16" *)
  wire [31:0] multdiv_operand_b_ex;
  (* src = "rtl/cve2/cve2_core.sv:186.16" *)
  wire [1:0] multdiv_operator_ex;
  (* src = "rtl/cve2/cve2_core.sv:187.16" *)
  wire [1:0] multdiv_signed_mode_ex;
  (* src = "rtl/cve2/cve2_core.sv:224.16" *)
  wire nmi_mode;
  (* src = "rtl/cve2/cve2_core.sv:125.16" *)
  wire [31:0] pc_id;
  (* src = "rtl/cve2/cve2_core.sv:124.16" *)
  wire [31:0] pc_if;
  (* src = "rtl/cve2/cve2_core.sv:133.16" *)
  wire [2:0] pc_mux_id;
  (* src = "rtl/cve2/cve2_core.sv:132.16" *)
  wire pc_set;
  (* src = "rtl/cve2/cve2_core.sv:268.16" *)
  wire perf_branch;
  (* src = "rtl/cve2/cve2_core.sv:266.16" *)
  wire perf_div_wait;
  (* src = "rtl/cve2/cve2_core.sv:264.16" *)
  wire perf_dside_wait;
  (* src = "rtl/cve2/cve2_core.sv:262.16" *)
  wire perf_instr_ret_compressed_wb;
  (* src = "rtl/cve2/cve2_core.sv:261.16" *)
  wire perf_instr_ret_wb;
  (* src = "rtl/cve2/cve2_core.sv:263.16" *)
  wire perf_iside_wait;
  (* src = "rtl/cve2/cve2_core.sv:267.16" *)
  wire perf_jump;
  (* src = "rtl/cve2/cve2_core.sv:270.16" *)
  wire perf_load;
  (* src = "rtl/cve2/cve2_core.sv:271.16" *)
  wire perf_store;
  (* src = "rtl/cve2/cve2_core.sv:269.16" *)
  wire perf_tbranch;
  (* src = "rtl/cve2/cve2_core.sv:265.16" *)
  wire perf_wfi_wait;
  (* src = "rtl/cve2/cve2_core.sv:245.16" *)
  wire [1:0] priv_mode_id;
  (* src = "rtl/cve2/cve2_core.sv:179.16" *)
  wire [31:0] result_ex;
  (* src = "rtl/cve2/cve2_core.sv:154.16" *)
  wire [4:0] rf_raddr_a;
  (* src = "rtl/cve2/cve2_core.sv:156.16" *)
  wire [4:0] rf_raddr_b;
  (* src = "rtl/cve2/cve2_core.sv:155.16" *)
  wire [31:0] rf_rdata_a;
  (* src = "rtl/cve2/cve2_core.sv:157.16" *)
  wire [31:0] rf_rdata_b;
  (* src = "rtl/cve2/cve2_core.sv:159.16" *)
  (* unused_bits = "0" *)
  wire rf_ren_a;
  (* src = "rtl/cve2/cve2_core.sv:160.16" *)
  (* unused_bits = "0" *)
  wire rf_ren_b;
  (* src = "rtl/cve2/cve2_core.sv:169.16" *)
  wire [4:0] rf_waddr_id;
  (* src = "rtl/cve2/cve2_core.sv:161.16" *)
  wire [4:0] rf_waddr_wb;
  (* src = "rtl/cve2/cve2_core.sv:170.16" *)
  wire [31:0] rf_wdata_id;
  (* src = "rtl/cve2/cve2_core.sv:165.16" *)
  wire [31:0] rf_wdata_lsu;
  (* src = "rtl/cve2/cve2_core.sv:162.16" *)
  wire [31:0] rf_wdata_wb;
  (* src = "rtl/cve2/cve2_core.sv:171.16" *)
  wire rf_we_id;
  (* src = "rtl/cve2/cve2_core.sv:167.16" *)
  wire rf_we_lsu;
  (* src = "rtl/cve2/cve2_core.sv:166.16" *)
  wire rf_we_wb;
  (* src = "rtl/cve2/cve2_core.sv:31.40" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_core.sv:33.40" *)
  input test_en_i;
  wire test_en_i;
  (* src = "rtl/cve2/cve2_core.sv:255.16" *)
  wire trigger_match;
  assign \$0y  = ctrl_busy | (* src = "rtl/cve2/cve2_core.sv:282.24-282.43" *) if_busy;
  assign core_busy_o = \$0y  | (* src = "rtl/cve2/cve2_core.sv:282.24-282.54" *) lsu_busy;
  assign \$2y  = ~ (* src = "rtl/cve2/cve2_core.sv:345.42-345.57" *) instr_valid_id;
  assign perf_iside_wait = id_in_ready & (* src = "rtl/cve2/cve2_core.sv:345.28-345.57" *) \$2y ;
  assign lsu_resp_err = lsu_load_err | (* src = "rtl/cve2/cve2_core.sv:532.25-532.53" *) lsu_store_err;
  assign csr_addr = csr_access ? (* src = "rtl/cve2/cve2_core.sv:669.34-669.77" *) alu_operand_b_ex[11:0] : 12'h000;
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/cve2/cve2_core.sv:682.5" *)
  \cve2_cs_registers$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i  cs_registers_i (
    .boot_addr_i(boot_addr_i),
    .branch_i(perf_branch),
    .branch_taken_i(perf_tbranch),
    .clk_i(clk_i),
    .csr_access_i(csr_access),
    .csr_addr_i(csr_addr),
    .csr_depc_o(csr_depc),
    .csr_mcause_i(exc_cause),
    .csr_mepc_o(csr_mepc),
    .csr_mstatus_mie_o(csr_mstatus_mie),
    .csr_mstatus_tw_o(csr_mstatus_tw),
    .csr_mtval_i(csr_mtval),
    .csr_mtvec_init_i(csr_mtvec_init),
    .csr_mtvec_o(csr_mtvec),
    .csr_op_en_i(csr_op_en),
    .csr_op_i(csr_op),
    .csr_pmp_addr_o(csr_pmp_addr),
    .csr_pmp_cfg_o(csr_pmp_cfg),
    .csr_pmp_mseccfg_o(csr_pmp_mseccfg),
    .csr_rdata_o(csr_rdata),
    .csr_restore_dret_i(csr_restore_dret_id),
    .csr_restore_mret_i(csr_restore_mret_id),
    .csr_save_cause_i(csr_save_cause),
    .csr_save_id_i(csr_save_id),
    .csr_save_if_i(csr_save_if),
    .csr_wdata_i(alu_operand_a_ex),
    .debug_cause_i(debug_cause),
    .debug_csr_save_i(debug_csr_save),
    .debug_ebreakm_o(debug_ebreakm),
    .debug_ebreaku_o(debug_ebreaku),
    .debug_mode_i(debug_mode),
    .debug_single_step_o(debug_single_step),
    .div_wait_i(perf_div_wait),
    .dside_wait_i(perf_dside_wait),
    .hart_id_i(hart_id_i),
    .illegal_csr_insn_o(illegal_csr_insn_id),
    .instr_ret_compressed_i(perf_instr_ret_compressed_wb),
    .instr_ret_i(perf_instr_ret_wb),
    .irq_external_i(irq_external_i),
    .irq_fast_i(irq_fast_i),
    .irq_pending_o(irq_pending_o),
    .irq_software_i(irq_software_i),
    .irq_timer_i(irq_timer_i),
    .irqs_o(irqs),
    .iside_wait_i(perf_iside_wait),
    .jump_i(perf_jump),
    .mem_load_i(perf_load),
    .mem_store_i(perf_store),
    .nmi_mode_i(nmi_mode),
    .pc_id_i(pc_id),
    .pc_if_i(pc_if),
    .priv_mode_id_o(priv_mode_id),
    .priv_mode_lsu_o(\g_no_pmp.unused_priv_lvl_ls ),
    .rst_ni(rst_ni),
    .trigger_match_o(trigger_match),
    .wfi_wait_i(perf_wfi_wait)
  );
  (* src = "rtl/cve2/cve2_core.sv:492.5" *)
  \cve2_ex_block$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.ex_block_i  ex_block_i (
    .alu_adder_result_ex_o(alu_adder_result_ex),
    .alu_instr_first_cycle_i(instr_first_cycle_id),
    .alu_operand_a_i(alu_operand_a_ex),
    .alu_operand_b_i(alu_operand_b_ex),
    .alu_operator_i(alu_operator_ex),
    .branch_decision_o(branch_decision),
    .branch_target_o(branch_target_ex),
    .clk_i(clk_i),
    .div_en_i(div_en_ex),
    .div_sel_i(div_sel_ex),
    .ex_valid_o(ex_valid),
    .imd_val_d_o(imd_val_d_ex),
    .imd_val_q_i(imd_val_q_ex),
    .imd_val_we_o(imd_val_we_ex),
    .mult_en_i(mult_en_ex),
    .mult_sel_i(mult_sel_ex),
    .multdiv_operand_a_i(multdiv_operand_a_ex),
    .multdiv_operand_b_i(multdiv_operand_b_ex),
    .multdiv_operator_i(multdiv_operator_ex),
    .multdiv_signed_mode_i(multdiv_signed_mode_ex),
    .result_ex_o(result_ex),
    .rst_ni(rst_ni)
  );
  (* src = "rtl/cve2/cve2_core.sv:358.5" *)
  \cve2_id_stage$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i  id_stage_i (
    .alu_operand_a_ex_o(alu_operand_a_ex),
    .alu_operand_b_ex_o(alu_operand_b_ex),
    .alu_operator_ex_o(alu_operator_ex),
    .branch_decision_i(branch_decision),
    .clk_i(clk_i),
    .csr_access_o(csr_access),
    .csr_mstatus_mie_i(csr_mstatus_mie),
    .csr_mstatus_tw_i(csr_mstatus_tw),
    .csr_mtval_o(csr_mtval),
    .csr_op_en_o(csr_op_en),
    .csr_op_o(csr_op),
    .csr_rdata_i(csr_rdata),
    .csr_restore_dret_id_o(csr_restore_dret_id),
    .csr_restore_mret_id_o(csr_restore_mret_id),
    .csr_save_cause_o(csr_save_cause),
    .csr_save_id_o(csr_save_id),
    .csr_save_if_o(csr_save_if),
    .ctrl_busy_o(ctrl_busy),
    .debug_cause_o(debug_cause),
    .debug_csr_save_o(debug_csr_save),
    .debug_ebreakm_i(debug_ebreakm),
    .debug_ebreaku_i(debug_ebreaku),
    .debug_mode_o(debug_mode),
    .debug_req_i(debug_req_i),
    .debug_single_step_i(debug_single_step),
    .div_en_ex_o(div_en_ex),
    .div_sel_ex_o(div_sel_ex),
    .en_wb_o(en_wb),
    .ex_valid_i(ex_valid),
    .exc_cause_o(exc_cause),
    .exc_pc_mux_o(exc_pc_mux_id),
    .fetch_enable_i(fetch_enable_i),
    .id_in_ready_o(id_in_ready),
    .illegal_c_insn_i(illegal_c_insn_id),
    .illegal_csr_insn_i(illegal_csr_insn_id),
    .illegal_insn_o(illegal_insn_id),
    .imd_val_d_ex_i(imd_val_d_ex),
    .imd_val_q_ex_o(imd_val_q_ex),
    .imd_val_we_ex_i(imd_val_we_ex),
    .instr_fetch_err_i(instr_fetch_err),
    .instr_fetch_err_plus2_i(instr_fetch_err_plus2),
    .instr_first_cycle_id_o(instr_first_cycle_id),
    .instr_id_done_o(instr_id_done),
    .instr_is_compressed_i(instr_is_compressed_id),
    .instr_perf_count_id_o(instr_perf_count_id),
    .instr_rdata_alu_i(instr_rdata_alu_id),
    .instr_rdata_c_i(instr_rdata_c_id),
    .instr_rdata_i(instr_rdata_id),
    .instr_req_o(instr_req_gated),
    .instr_valid_clear_o(instr_valid_clear),
    .instr_valid_i(instr_valid_id),
    .irq_nm_i(irq_nm_i),
    .irq_pending_i(irq_pending_o),
    .irqs_i(irqs),
    .lsu_addr_incr_req_i(lsu_addr_incr_req),
    .lsu_addr_last_i(lsu_addr_last),
    .lsu_load_err_i(lsu_load_err),
    .lsu_req_o(lsu_req),
    .lsu_resp_valid_i(lsu_resp_valid),
    .lsu_sign_ext_o(lsu_sign_ext),
    .lsu_store_err_i(lsu_store_err),
    .lsu_type_o(lsu_type),
    .lsu_wdata_o(lsu_wdata),
    .lsu_we_o(lsu_we),
    .mult_en_ex_o(mult_en_ex),
    .mult_sel_ex_o(mult_sel_ex),
    .multdiv_operand_a_ex_o(multdiv_operand_a_ex),
    .multdiv_operand_b_ex_o(multdiv_operand_b_ex),
    .multdiv_operator_ex_o(multdiv_operator_ex),
    .multdiv_signed_mode_ex_o(multdiv_signed_mode_ex),
    .nmi_mode_o(nmi_mode),
    .pc_id_i(pc_id),
    .pc_mux_o(pc_mux_id),
    .pc_set_o(pc_set),
    .perf_branch_o(perf_branch),
    .perf_div_wait_o(perf_div_wait),
    .perf_dside_wait_o(perf_dside_wait),
    .perf_jump_o(perf_jump),
    .perf_tbranch_o(perf_tbranch),
    .perf_wfi_wait_o(perf_wfi_wait),
    .priv_mode_i(priv_mode_id),
    .result_ex_i(result_ex),
    .rf_raddr_a_o(rf_raddr_a),
    .rf_raddr_b_o(rf_raddr_b),
    .rf_rdata_a_i(rf_rdata_a),
    .rf_rdata_b_i(rf_rdata_b),
    .rf_ren_a_o(rf_ren_a),
    .rf_ren_b_o(rf_ren_b),
    .rf_waddr_id_o(rf_waddr_id),
    .rf_wdata_id_o(rf_wdata_id),
    .rf_we_id_o(rf_we_id),
    .rst_ni(rst_ni),
    .trigger_match_i(trigger_match)
  );
  (* src = "rtl/cve2/cve2_core.sv:291.5" *)
  \cve2_if_stage$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i  if_stage_i (
    .boot_addr_i(boot_addr_i),
    .branch_target_ex_i(branch_target_ex),
    .clk_i(clk_i),
    .csr_depc_i(csr_depc),
    .csr_mepc_i(csr_mepc),
    .csr_mtvec_i(csr_mtvec),
    .csr_mtvec_init_o(csr_mtvec_init),
    .exc_cause(exc_cause),
    .exc_pc_mux_i(exc_pc_mux_id),
    .id_in_ready_i(id_in_ready),
    .if_busy_o(if_busy),
    .illegal_c_insn_id_o(illegal_c_insn_id),
    .instr_addr_o(instr_addr_o),
    .instr_err_i(instr_err_i),
    .instr_fetch_err_o(instr_fetch_err),
    .instr_fetch_err_plus2_o(instr_fetch_err_plus2),
    .instr_gnt_i(instr_gnt_i),
    .instr_is_compressed_id_o(instr_is_compressed_id),
    .instr_new_id_o(instr_new_id),
    .instr_rdata_alu_id_o(instr_rdata_alu_id),
    .instr_rdata_c_id_o(instr_rdata_c_id),
    .instr_rdata_i(instr_rdata_i),
    .instr_rdata_id_o(instr_rdata_id),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .instr_valid_clear_i(instr_valid_clear),
    .instr_valid_id_o(instr_valid_id),
    .pc_id_o(pc_id),
    .pc_if_o(pc_if),
    .pc_mux_i(pc_mux_id),
    .pc_set_i(pc_set),
    .pmp_err_if_i(1'h0),
    .pmp_err_if_plus2_i(1'h0),
    .req_i(instr_req_gated),
    .rst_ni(rst_ni)
  );
  (* src = "rtl/cve2/cve2_core.sv:534.24" *)
  \cve2_load_store_unit$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.load_store_unit_i  load_store_unit_i (
    .adder_result_ex_i(alu_adder_result_ex),
    .addr_incr_req_o(lsu_addr_incr_req),
    .addr_last_o(lsu_addr_last),
    .busy_o(lsu_busy),
    .clk_i(clk_i),
    .data_addr_o(data_addr_o),
    .data_be_o(data_be_o),
    .data_err_i(data_err_i),
    .data_gnt_i(data_gnt_i),
    .data_pmp_err_i(1'h0),
    .data_rdata_i(data_rdata_i),
    .data_req_o(data_req_o),
    .data_rvalid_i(data_rvalid_i),
    .data_wdata_o(data_wdata_o),
    .data_we_o(data_we_o),
    .load_err_o(lsu_load_err),
    .lsu_rdata_o(rf_wdata_lsu),
    .lsu_rdata_valid_o(rf_we_lsu),
    .lsu_req_i(lsu_req),
    .lsu_resp_valid_o(lsu_resp_valid),
    .lsu_sign_ext_i(lsu_sign_ext),
    .lsu_type_i(lsu_type),
    .lsu_wdata_i(lsu_wdata),
    .lsu_we_i(lsu_we),
    .perf_load_o(perf_load),
    .perf_store_o(perf_store),
    .rst_ni(rst_ni),
    .store_err_o(lsu_store_err)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/cve2/cve2_core.sv:648.5" *)
  \cve2_register_file_ff$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.register_file_i  register_file_i (
    .clk_i(clk_i),
    .raddr_a_i(rf_raddr_a),
    .raddr_b_i(rf_raddr_b),
    .rdata_a_o(rf_rdata_a),
    .rdata_b_o(rf_rdata_b),
    .rst_ni(rst_ni),
    .test_en_i(test_en_i),
    .waddr_a_i(rf_waddr_wb),
    .wdata_a_i(rf_wdata_wb),
    .we_a_i(rf_we_wb)
  );
  (* src = "rtl/cve2/cve2_core.sv:580.5" *)
  \cve2_wb$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.wb_i  wb_i (
    .clk_i(clk_i),
    .en_wb_i(en_wb),
    .instr_is_compressed_id_i(instr_is_compressed_id),
    .instr_perf_count_id_i(instr_perf_count_id),
    .lsu_resp_err_i(lsu_resp_err),
    .lsu_resp_valid_i(lsu_resp_valid),
    .perf_instr_ret_compressed_wb_o(perf_instr_ret_compressed_wb),
    .perf_instr_ret_wb_o(perf_instr_ret_wb),
    .rf_waddr_id_i(rf_waddr_id),
    .rf_waddr_wb_o(rf_waddr_wb),
    .rf_wdata_id_i(rf_wdata_id),
    .rf_wdata_lsu_i(rf_wdata_lsu),
    .rf_wdata_wb_o(rf_wdata_wb),
    .rf_we_id_i(rf_we_id),
    .rf_we_lsu_i(rf_we_lsu),
    .rf_we_wb_o(rf_we_wb),
    .rst_ni(rst_ni)
  );
  assign crash_dump_o = { pc_id, pc_if, lsu_addr_last, csr_mepc };
endmodule

(* src = "rtl/cve2/cve2_counter.sv:1.8" *)
module \cve2_counter$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.mcycle_counter_i (clk_i, rst_ni, counter_inc_i, counterh_we_i, counter_we_i, counter_val_i, counter_val_o, counter_val_upd_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14068 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14070 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14077 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14072 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14079 ;
  (* src = "rtl/cve2/cve2_counter.sv:8.23" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_counter.sv:23.28" *)
  wire [63:0] counter_d;
  (* src = "rtl/cve2/cve2_counter.sv:11.23" *)
  input counter_inc_i;
  wire counter_inc_i;
  (* src = "rtl/cve2/cve2_counter.sv:21.28" *)
  wire [63:0] counter_load;
  (* src = "rtl/cve2/cve2_counter.sv:20.28" *)
  wire [63:0] counter_upd;
  (* src = "rtl/cve2/cve2_counter.sv:14.23" *)
  input [31:0] counter_val_i;
  wire [31:0] counter_val_i;
  (* src = "rtl/cve2/cve2_counter.sv:15.23" *)
  output [63:0] counter_val_o;
  reg [63:0] counter_val_o;
  (* src = "rtl/cve2/cve2_counter.sv:16.23" *)
  output [63:0] counter_val_upd_o;
  wire [63:0] counter_val_upd_o;
  (* src = "rtl/cve2/cve2_counter.sv:13.23" *)
  input counter_we_i;
  wire counter_we_i;
  (* src = "rtl/cve2/cve2_counter.sv:12.23" *)
  input counterh_we_i;
  wire counterh_we_i;
  (* src = "rtl/cve2/cve2_counter.sv:9.23" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_counter.sv:22.28" *)
  wire we;
  assign counter_upd = counter_val_o + (* src = "rtl/cve2/cve2_counter.sv:26.24-26.84" *) 1'h1;
  assign we = counter_we_i | (* src = "rtl/cve2/cve2_counter.sv:31.10-31.38" *) counterh_we_i;
  (* src = "rtl/cve2/cve2_counter.sv:63.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_val_o[63:32] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14072 ) counter_val_o[63:32] <= counter_d[63:32];
  (* src = "rtl/cve2/cve2_counter.sv:63.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_val_o[31:0] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14079 ) counter_val_o[31:0] <= counter_d[31:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14068  = | { counter_inc_i, we };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14070  = { counterh_we_i, we } != 2'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14077  = { counterh_we_i, we } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14072  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14068 , \$auto$opt_dff.cc:194:make_patterns_logic$14070  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14079  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14068 , \$auto$opt_dff.cc:194:make_patterns_logic$14077  };
  assign counter_d = we ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_counter.sv:41.7-41.50|rtl/cve2/cve2_counter.sv:40.5-46.8" *) counter_load : counter_upd;
  assign counter_load = counterh_we_i ? (* src = "rtl/cve2/cve2_counter.sv:34.24-37.8|rtl/cve2/cve2_counter.sv:34.5-37.8" *) { counter_val_i, 32'hxxxxxxxx } : { 32'hxxxxxxxx, counter_val_i };
  assign counter_val_upd_o = 64'h0000000000000000;
endmodule

(* src = "rtl/cve2/cve2_counter.sv:1.8" *)
module \cve2_counter$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.minstret_counter_i (clk_i, rst_ni, counter_inc_i, counterh_we_i, counter_we_i, counter_val_i, counter_val_o, counter_val_upd_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14082 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14084 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14091 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14086 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14093 ;
  (* src = "rtl/cve2/cve2_counter.sv:8.23" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_counter.sv:23.28" *)
  wire [63:0] counter_d;
  (* src = "rtl/cve2/cve2_counter.sv:11.23" *)
  input counter_inc_i;
  wire counter_inc_i;
  (* src = "rtl/cve2/cve2_counter.sv:21.28" *)
  wire [63:0] counter_load;
  (* src = "rtl/cve2/cve2_counter.sv:14.23" *)
  input [31:0] counter_val_i;
  wire [31:0] counter_val_i;
  (* src = "rtl/cve2/cve2_counter.sv:15.23" *)
  output [63:0] counter_val_o;
  reg [63:0] counter_val_o;
  (* src = "rtl/cve2/cve2_counter.sv:16.23" *)
  output [63:0] counter_val_upd_o;
  wire [63:0] counter_val_upd_o;
  (* src = "rtl/cve2/cve2_counter.sv:13.23" *)
  input counter_we_i;
  wire counter_we_i;
  (* src = "rtl/cve2/cve2_counter.sv:12.23" *)
  input counterh_we_i;
  wire counterh_we_i;
  (* src = "rtl/cve2/cve2_counter.sv:9.23" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_counter.sv:22.28" *)
  wire we;
  assign counter_val_upd_o = counter_val_o + (* src = "rtl/cve2/cve2_counter.sv:26.24-26.84" *) 1'h1;
  assign we = counter_we_i | (* src = "rtl/cve2/cve2_counter.sv:31.10-31.38" *) counterh_we_i;
  (* src = "rtl/cve2/cve2_counter.sv:63.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_val_o[63:32] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14086 ) counter_val_o[63:32] <= counter_d[63:32];
  (* src = "rtl/cve2/cve2_counter.sv:63.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_val_o[31:0] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14093 ) counter_val_o[31:0] <= counter_d[31:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14082  = | { counter_inc_i, we };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14084  = { counterh_we_i, we } != 2'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14091  = { counterh_we_i, we } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14086  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14084 , \$auto$opt_dff.cc:194:make_patterns_logic$14082  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14093  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14091 , \$auto$opt_dff.cc:194:make_patterns_logic$14082  };
  assign counter_d = we ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_counter.sv:41.7-41.50|rtl/cve2/cve2_counter.sv:40.5-46.8" *) counter_load : counter_val_upd_o;
  assign counter_load = counterh_we_i ? (* src = "rtl/cve2/cve2_counter.sv:34.24-37.8|rtl/cve2/cve2_counter.sv:34.5-37.8" *) { counter_val_i, 32'hxxxxxxxx } : { 32'hxxxxxxxx, counter_val_i };
endmodule

(* src = "rtl/cve2/cve2_cs_registers.sv:15.8" *)
module \cve2_cs_registers$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i (clk_i, rst_ni, boot_addr_i, hart_id_i, irq_software_i, irq_timer_i, irq_external_i, irq_fast_i, irq_pending_o, pc_id_i, priv_mode_id_o, priv_mode_lsu_o, csr_mstatus_tw_o, csr_mtvec_o, csr_mtvec_init_i, csr_access_i, csr_addr_i, csr_wdata_i, csr_op_i, csr_op_en_i, csr_rdata_o
, nmi_mode_i, irqs_o, csr_mstatus_mie_o, csr_mepc_o, csr_pmp_cfg_o, csr_pmp_addr_o, csr_pmp_mseccfg_o, debug_mode_i, debug_cause_i, debug_csr_save_i, csr_depc_o, debug_single_step_o, debug_ebreakm_o, debug_ebreaku_o, trigger_match_o, pc_if_i, csr_save_if_i, csr_save_id_i, csr_restore_mret_i, csr_restore_dret_i, csr_save_cause_i
, csr_mcause_i, csr_mtval_i, illegal_csr_insn_o, instr_ret_i, instr_ret_compressed_i, iside_wait_i, jump_i, branch_i, branch_taken_i, mem_load_i, mem_store_i, dside_wait_i, wfi_wait_i, div_wait_i);
  wire \$10y ;
  wire \$134y ;
  wire [5:0] \$13y ;
  wire [31:0] \$15y ;
  wire [31:0] \$162y ;
  wire [31:0] \$163y ;
  wire [31:0] \$164y ;
  wire \$166y ;
  wire \$167y ;
  wire \$168y ;
  wire \$170y ;
  wire \$171y ;
  wire \$180y ;
  wire \$182y ;
  wire \$183y ;
  wire \$187y ;
  wire \$188y ;
  wire \$190y ;
  wire \$191y ;
  wire \$192y ;
  wire \$193y ;
  wire \$198y ;
  wire \$1y ;
  wire \$200y ;
  wire \$202y ;
  wire [63:0] \$20y ;
  wire \$30y ;
  wire \$31y ;
  wire \$32y ;
  wire \$33y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$37y ;
  wire \$38y ;
  wire \$39y ;
  wire \$3y ;
  wire \$40y ;
  wire \$41y ;
  wire \$42y ;
  wire \$43y ;
  wire \$44y ;
  wire \$45y ;
  wire \$46y ;
  wire \$47y ;
  wire \$48y ;
  wire \$49y ;
  wire \$4y ;
  wire \$50y ;
  wire \$55y ;
  wire \$56y ;
  wire \$57y ;
  wire \$59y ;
  wire \$60y ;
  wire \$61y ;
  (* unused_bits = "3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] \$67y ;
  wire [1023:0] \$auto$bmuxmap.cc:84:execute$15296 ;
  wire [511:0] \$auto$bmuxmap.cc:84:execute$15313 ;
  wire [255:0] \$auto$bmuxmap.cc:84:execute$15322 ;
  wire [127:0] \$auto$bmuxmap.cc:84:execute$15327 ;
  wire [63:0] \$auto$bmuxmap.cc:84:execute$15330 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14096 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13331 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13333 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13335 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire [31:0] \$auto$wreduce.cc:514:run$13480 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire [31:0] \$auto$wreduce.cc:514:run$13481 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire [31:0] \$dcsr_d$101 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire [31:0] \$dcsr_d$85 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire [1:0] \$dcsr_d[1:0]$128 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:560.11-562.14" *)
  wire [1:0] \$dcsr_d[1:0]$62 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire [2:0] \$dcsr_d[8:6]$129 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire \$dcsr_en$102 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire \$dcsr_en$130 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$dcsr_en$86 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire [31:0] \$depc_d$131 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire \$depc_en$103 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire \$depc_en$132 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$depc_en$87 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$dscratch0_en$88 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$dscratch1_en$89 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:626.9-634.16" *)
  wire [31:0] \$exception_pc$109 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *)
  wire \$illegal_csr$29 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire [6:0] \$mcause_d$115 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire [6:0] \$mcause_d$124 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *)
  wire [6:0] \$mcause_d$139 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire \$mcause_en$116 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire \$mcause_en$125 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *)
  wire \$mcause_en$140 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$mcause_en$82 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire \$mcause_en$98 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$mcountinhibit_we$90 ;
  wire [1:0] \$memory$auto$memory_bmux2rom.cc:63:execute$15077$rdmux[0][0][0]$b$15091 ;
  wire [1:0] \$memory$auto$memory_bmux2rom.cc:63:execute$15077$rdmux[0][1][1]$b$15097 ;
  wire [1:0] \$memory$auto$memory_bmux2rom.cc:63:execute$15077$rdmux[0][2][3]$b$15109 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire [31:0] \$mepc_d$113 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire [31:0] \$mepc_d$122 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *)
  wire [31:0] \$mepc_d$137 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire \$mepc_en$114 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire \$mepc_en$123 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *)
  wire \$mepc_en$138 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$mepc_en$81 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire \$mepc_en$97 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$mie_en$79 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$mscratch_en$80 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire \$mstack_en$133 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire [5:0] \$mstatus_d$77 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire [5:0] \$mstatus_d$93 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:676.9-678.12" *)
  wire \$mstatus_d[1]$135 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:534.11-536.14" *)
  wire [1:0] \$mstatus_d[3:2]$58 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *)
  wire [2:0] \$mstatus_d[4:2]$136 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire [3:0] \$mstatus_d[5:2]$111 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire [3:0] \$mstatus_d[5:2]$120 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire \$mstatus_en$112 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire \$mstatus_en$121 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$mstatus_en$78 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire \$mstatus_en$94 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire [31:0] \$mtval_d$117 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire [31:0] \$mtval_d$126 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire \$mtval_en$118 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire \$mtval_en$127 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$mtval_en$83 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire \$mtval_en$99 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$mtvec_en$84 ;
  wire \$procmux$9032_CMP ;
  wire [30:0] \$procmux$9465_CMP ;
  wire \$procmux$9465_CTRL ;
  wire [30:0] \$procmux$9471_CMP ;
  wire \$procmux$9471_CTRL ;
  wire \$procmux$9541_CMP ;
  wire \$procmux$9789_CMP ;
  wire \$procmux$9790_CMP ;
  wire \$procmux$9791_CMP ;
  wire \$procmux$9792_CMP ;
  wire [28:0] \$procmux$9798_CMP ;
  wire \$procmux$9798_CTRL ;
  wire \$procmux$9826_CMP ;
  wire \$procmux$9832_CMP ;
  wire \$procmux$9834_CMP ;
  wire [1:0] \$procmux$9835_CMP ;
  wire \$procmux$9836_CMP ;
  wire \$procmux$9838_CMP ;
  wire \$procmux$9839_CMP ;
  wire \$procmux$9840_CMP ;
  wire \$procmux$9841_CMP ;
  wire \$procmux$9842_CMP ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:43.32" *)
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:98.32" *)
  input branch_i;
  wire branch_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:99.32" *)
  input branch_taken_i;
  wire branch_taken_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:29.32" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:46.32" *)
  input csr_access_i;
  wire csr_access_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:47.32" *)
  input [11:0] csr_addr_i;
  wire [11:0] csr_addr_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:73.32" *)
  output [31:0] csr_depc_o;
  wire [31:0] csr_depc_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:88.32" *)
  input [6:0] csr_mcause_i;
  wire [6:0] csr_mcause_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:62.32" *)
  output [31:0] csr_mepc_o;
  wire [31:0] csr_mepc_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:61.32" *)
  output csr_mstatus_mie_o;
  wire csr_mstatus_mie_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:38.32" *)
  output csr_mstatus_tw_o;
  wire csr_mstatus_tw_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:89.32" *)
  input [31:0] csr_mtval_i;
  wire [31:0] csr_mtval_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:42.32" *)
  input csr_mtvec_init_i;
  wire csr_mtvec_init_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:41.32" *)
  output [31:0] csr_mtvec_o;
  wire [31:0] csr_mtvec_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:50.32" *)
  input csr_op_en_i;
  wire csr_op_en_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:49.32" *)
  input [1:0] csr_op_i;
  wire [1:0] csr_op_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:66.34" *)
  output [135:0] csr_pmp_addr_o;
  wire [135:0] csr_pmp_addr_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:65.34" *)
  output [23:0] csr_pmp_cfg_o;
  wire [23:0] csr_pmp_cfg_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:67.34" *)
  output [2:0] csr_pmp_mseccfg_o;
  wire [2:0] csr_pmp_mseccfg_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:51.32" *)
  output [31:0] csr_rdata_o;
  wire [31:0] csr_rdata_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:86.32" *)
  input csr_restore_dret_i;
  wire csr_restore_dret_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:85.32" *)
  input csr_restore_mret_i;
  wire csr_restore_mret_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:87.32" *)
  input csr_save_cause_i;
  wire csr_save_cause_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:84.32" *)
  input csr_save_id_i;
  wire csr_save_id_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:83.32" *)
  input csr_save_if_i;
  wire csr_save_if_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:48.32" *)
  input [31:0] csr_wdata_i;
  wire [31:0] csr_wdata_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:227.16" *)
  wire [31:0] csr_wdata_int;
  (* src = "rtl/cve2/cve2_cs_registers.sv:229.16" *)
  wire csr_we_int;
  (* src = "rtl/cve2/cve2_cs_registers.sv:230.16" *)
  wire csr_wr;
  (* src = "rtl/cve2/cve2_cs_registers.sv:180.24" *)
  wire [31:0] dcsr_d;
  (* src = "rtl/cve2/cve2_cs_registers.sv:181.16" *)
  wire dcsr_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:180.16" *)
  wire [31:0] dcsr_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:71.32" *)
  input [2:0] debug_cause_i;
  wire [2:0] debug_cause_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:72.32" *)
  input debug_csr_save_i;
  wire debug_csr_save_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:75.32" *)
  output debug_ebreakm_o;
  wire debug_ebreakm_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:76.32" *)
  output debug_ebreaku_o;
  wire debug_ebreaku_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:70.32" *)
  input debug_mode_i;
  wire debug_mode_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:74.32" *)
  output debug_single_step_o;
  wire debug_single_step_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:182.24" *)
  wire [31:0] depc_d;
  (* src = "rtl/cve2/cve2_cs_registers.sv:183.16" *)
  wire depc_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:104.32" *)
  input div_wait_i;
  wire div_wait_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:186.16" *)
  wire dscratch0_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:184.16" *)
  wire [31:0] dscratch0_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:186.30" *)
  wire dscratch1_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:185.16" *)
  wire [31:0] dscratch1_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:102.32" *)
  input dside_wait_i;
  wire dside_wait_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:1325.31" *)
  wire \gen_trigger_regs.selected_tmatch_control ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:1326.31" *)
  wire [31:0] \gen_trigger_regs.selected_tmatch_value ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:1330.31" *)
  wire \gen_trigger_regs.tmatch_control_we ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:1331.31" *)
  wire \gen_trigger_regs.tmatch_value_we ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:1320.31" *)
  wire \gen_trigger_regs.tselect_d ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:1320.42" *)
  wire \gen_trigger_regs.tselect_q ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:1329.31" *)
  wire \gen_trigger_regs.tselect_we ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:33.32" *)
  input [31:0] hart_id_i;
  wire [31:0] hart_id_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:233.16" *)
  wire illegal_csr;
  (* src = "rtl/cve2/cve2_cs_registers.sv:90.32" *)
  output illegal_csr_insn_o;
  wire illegal_csr_insn_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:234.16" *)
  wire illegal_csr_priv;
  (* src = "rtl/cve2/cve2_cs_registers.sv:235.16" *)
  wire illegal_csr_write;
  (* src = "rtl/cve2/cve2_cs_registers.sv:95.32" *)
  input instr_ret_compressed_i;
  wire instr_ret_compressed_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:94.32" *)
  input instr_ret_i;
  wire instr_ret_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:56.32" *)
  input irq_external_i;
  wire irq_external_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:57.32" *)
  input [15:0] irq_fast_i;
  wire [15:0] irq_fast_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:59.32" *)
  output irq_pending_o;
  wire irq_pending_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:54.32" *)
  input irq_software_i;
  wire irq_software_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:55.32" *)
  input irq_timer_i;
  wire irq_timer_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:60.32" *)
  output [18:0] irqs_o;
  wire [18:0] irqs_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:96.32" *)
  input iside_wait_i;
  wire iside_wait_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:97.32" *)
  input jump_i;
  wire jump_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:173.26" *)
  wire [6:0] mcause_d;
  (* src = "rtl/cve2/cve2_cs_registers.sv:174.16" *)
  wire mcause_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:173.16" *)
  wire [6:0] mcause_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:201.32" *)
  wire [31:0] mcountinhibit;
  (* src = "rtl/cve2/cve2_cs_registers.sv:204.32" *)
  wire mcountinhibit_we;
  (* src = "rtl/cve2/cve2_cs_registers.sv:100.32" *)
  input mem_load_i;
  wire mem_load_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:101.32" *)
  input mem_store_i;
  wire mem_store_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:171.24" *)
  wire [31:0] mepc_d;
  (* src = "rtl/cve2/cve2_cs_registers.sv:172.16" *)
  wire mepc_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:209.16" *)
  wire [2047:0] mhpmcounter;
  (* unused_bits = "1" *)
  wire [2:0] mhpmcounter_we;
  (* unused_bits = "1" *)
  wire [2:0] mhpmcounterh_we;
  (* src = "rtl/cve2/cve2_cs_registers.sv:168.16" *)
  wire mie_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:167.16" *)
  wire [18:0] mie_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:219.16" *)
  wire [63:0] minstret_raw;
  (* src = "rtl/cve2/cve2_cs_registers.sv:170.16" *)
  wire mscratch_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:169.16" *)
  wire [31:0] mscratch_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:193.16" *)
  wire [6:0] mstack_cause_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:191.16" *)
  wire mstack_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:192.16" *)
  wire [31:0] mstack_epc_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:190.16" *)
  wire [2:0] mstack_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:165.27" *)
  wire [5:0] mstatus_d;
  (* src = "rtl/cve2/cve2_cs_registers.sv:166.16" *)
  wire mstatus_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:165.16" *)
  wire [5:0] mstatus_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:175.25" *)
  wire [31:0] mtval_d;
  (* src = "rtl/cve2/cve2_cs_registers.sv:176.16" *)
  wire mtval_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:175.16" *)
  wire [31:0] mtval_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:177.25" *)
  wire [31:0] mtvec_d;
  (* src = "rtl/cve2/cve2_cs_registers.sv:178.16" *)
  wire mtvec_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:58.32" *)
  input nmi_mode_i;
  wire nmi_mode_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:80.32" *)
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:79.32" *)
  input [31:0] pc_if_i;
  wire [31:0] pc_if_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:164.28" *)
  wire [1:0] priv_lvl_d;
  (* src = "rtl/cve2/cve2_cs_registers.sv:36.32" *)
  output [1:0] priv_mode_id_o;
  reg [1:0] priv_mode_id_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:37.32" *)
  output [1:0] priv_mode_lsu_o;
  wire [1:0] priv_mode_lsu_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:30.32" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_cs_registers.sv:77.32" *)
  output trigger_match_o;
  wire trigger_match_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:103.32" *)
  input wfi_wait_i;
  wire wfi_wait_i;
  assign illegal_csr_priv = csr_addr_i[9:8] > (* src = "rtl/cve2/cve2_cs_registers.sv:252.32-252.60" *) priv_mode_id_o;
  assign \$1y  = csr_addr_i[11:10] == (* src = "rtl/cve2/cve2_cs_registers.sv:253.32-253.56" *) 2'h3;
  assign \$10y  = ~ (* src = "rtl/cve2/cve2_cs_registers.sv:387.23-387.36" *) debug_mode_i;
  assign \$134y  = mstatus_q[3:2] != (* src = "rtl/cve2/cve2_cs_registers.sv:676.13-676.40" *) 2'h3;
  assign priv_mode_lsu_o = mstatus_q[1] ? (* src = "rtl/cve2/cve2_cs_registers.sv:715.28-715.71" *) mstatus_q[3:2] : priv_mode_id_o;
  assign \$162y  = csr_wdata_i | (* src = "rtl/cve2/cve2_cs_registers.sv:721.38-721.63" *) csr_rdata_o;
  assign \$163y  = ~ (* src = "rtl/cve2/cve2_cs_registers.sv:722.37-722.49" *) csr_wdata_i;
  assign \$164y  = \$163y  & (* src = "rtl/cve2/cve2_cs_registers.sv:722.37-722.63" *) csr_rdata_o;
  assign \$166y  = csr_op_i == (* src = "rtl/cve2/cve2_cs_registers.sv:728.20-728.76" *) 1'h1;
  assign \$167y  = csr_op_i == (* src = "rtl/cve2/cve2_cs_registers.sv:728.20-728.76" *) 2'h2;
  assign \$168y  = csr_op_i == (* src = "rtl/cve2/cve2_cs_registers.sv:728.20-728.76" *) 2'h3;
  assign csr_wr = | (* src = "rtl/cve2/cve2_cs_registers.sv:728.20-728.76" *) { \$168y , \$167y , \$166y  };
  assign \$170y  = csr_wr & (* src = "rtl/cve2/cve2_cs_registers.sv:731.24-731.44" *) csr_op_en_i;
  assign \$171y  = ~ (* src = "rtl/cve2/cve2_cs_registers.sv:731.47-731.66" *) illegal_csr_insn_o;
  assign csr_we_int = \$170y  & (* src = "rtl/cve2/cve2_cs_registers.sv:731.24-731.66" *) \$171y ;
  assign irqs_o = { irq_software_i, irq_timer_i, irq_external_i, irq_fast_i } & (* src = "rtl/cve2/cve2_cs_registers.sv:748.26-748.37" *) mie_q;
  assign irq_pending_o = | (* src = "rtl/cve2/cve2_cs_registers.sv:749.26-749.33" *) irqs_o;
  assign \$180y  = ~ (* src = "rtl/cve2/cve2_cs_registers.sv:1213.42-1213.59" *) mcountinhibit[0];
  assign \$182y  = ~ (* src = "rtl/cve2/cve2_cs_registers.sv:1229.42-1229.59" *) mcountinhibit[2];
  assign \$183y  = instr_ret_i & (* src = "rtl/cve2/cve2_cs_registers.sv:1229.20-1229.59" *) \$182y ;
  assign \$187y  = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:1336.25-1336.50" *) debug_mode_i;
  assign \$188y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:1336.54-1336.79" *) 11'h7a0;
  assign \gen_trigger_regs.tselect_we  = \$187y  & (* src = "rtl/cve2/cve2_cs_registers.sv:1336.25-1336.80" *) \$188y ;
  assign \$190y  = ~ (* src = "rtl/cve2/cve2_cs_registers.sv:1338.38-1338.69" *) \gen_trigger_regs.tselect_q ;
  assign \$191y  = \$190y  & (* src = "rtl/cve2/cve2_cs_registers.sv:1338.37-1338.83" *) csr_we_int;
  assign \$192y  = \$191y  & (* src = "rtl/cve2/cve2_cs_registers.sv:1338.37-1338.98" *) debug_mode_i;
  assign \$193y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:1339.38-1339.62" *) 11'h7a1;
  assign \gen_trigger_regs.tmatch_control_we  = \$192y  & (* src = "rtl/cve2/cve2_cs_registers.sv:1338.37-1339.63" *) \$193y ;
  assign \$198y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:1341.38-1341.62" *) 11'h7a2;
  assign \gen_trigger_regs.tmatch_value_we  = \$192y  & (* src = "rtl/cve2/cve2_cs_registers.sv:1340.37-1341.63" *) \$198y ;
  assign illegal_csr_write = \$1y  && (* src = "rtl/cve2/cve2_cs_registers.sv:253.31-253.67" *) csr_wr;
  assign \gen_trigger_regs.tselect_d  = \$200y  & (* src = "rtl/cve2/cve2_cs_registers.sv:1346.24-1347.85" *) csr_wdata_int[0];
  assign \$202y  = pc_if_i == (* src = "rtl/cve2/cve2_cs_registers.sv:1433.56-1433.90" *) \gen_trigger_regs.selected_tmatch_value ;
  assign trigger_match_o = \gen_trigger_regs.selected_tmatch_control  & (* src = "rtl/cve2/cve2_cs_registers.sv:1433.33-1433.91" *) \$202y ;
  assign \$3y  = illegal_csr | (* src = "rtl/cve2/cve2_cs_registers.sv:254.47-254.78" *) illegal_csr_write;
  assign \$30y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" *) 10'h3a0;
  assign \$31y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" *) 10'h3a1;
  assign \$32y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" *) 10'h3a2;
  assign \$33y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" *) 10'h3a3;
  assign \$34y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" *) 10'h3b0;
  assign \$35y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" *) 10'h3b1;
  assign \$36y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" *) 10'h3b2;
  assign \$37y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" *) 10'h3b3;
  assign \$38y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" *) 10'h3b4;
  assign \$39y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" *) 10'h3b5;
  assign \$4y  = \$3y  | (* src = "rtl/cve2/cve2_cs_registers.sv:254.47-254.97" *) illegal_csr_priv;
  assign \$40y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" *) 10'h3b6;
  assign \$41y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" *) 10'h3b7;
  assign \$42y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" *) 10'h3b8;
  assign \$43y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" *) 10'h3b9;
  assign \$44y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" *) 10'h3ba;
  assign \$45y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" *) 10'h3bb;
  assign \$46y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" *) 10'h3bc;
  assign \$47y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" *) 10'h3bd;
  assign \$48y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" *) 10'h3be;
  assign \$49y  = csr_addr_i == (* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" *) 10'h3bf;
  assign illegal_csr_insn_o = csr_access_i & (* src = "rtl/cve2/cve2_cs_registers.sv:254.31-254.98" *) \$4y ;
  assign \$50y  = | (* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" *) { \$49y , \$48y , \$47y , \$46y , \$45y , \$44y , \$43y , \$42y , \$41y , \$40y , \$39y , \$38y , \$37y , \$36y , \$35y , \$34y , \$33y , \$32y , \$31y , \$30y  };
  assign mtvec_d[31:8] = csr_mtvec_init_i ? (* src = "rtl/cve2/cve2_cs_registers.sv:502.20-503.73" *) boot_addr_i[31:8] : csr_wdata_int[31:8];
  assign \$55y  = csr_wdata_int[12:11] != (* src = "rtl/cve2/cve2_cs_registers.sv:534.16-534.43" *) 2'h3;
  assign \$56y  = | (* src = "rtl/cve2/cve2_cs_registers.sv:534.49-534.76" *) csr_wdata_int[12:11];
  assign \$57y  = \$55y  && (* src = "rtl/cve2/cve2_cs_registers.sv:534.15-534.77" *) \$56y ;
  assign \$59y  = csr_wdata_int[1:0] != (* src = "rtl/cve2/cve2_cs_registers.sv:560.16-560.40" *) 2'h3;
  assign \$60y  = | (* src = "rtl/cve2/cve2_cs_registers.sv:560.46-560.70" *) csr_wdata_int[1:0];
  assign \$61y  = \$59y  && (* src = "rtl/cve2/cve2_cs_registers.sv:560.15-560.71" *) \$60y ;
  assign \$auto$bmuxmap.cc:84:execute$15296 [63:0] = \$13y [0] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$15296 [127:64] = \$13y [0] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$15296 [191:128] = \$13y [0] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$15296 [255:192] = \$13y [0] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$15296 [319:256] = \$13y [0] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$15296 [383:320] = \$13y [0] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$15296 [447:384] = \$13y [0] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$15296 [511:448] = \$13y [0] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$15296 [575:512] = \$13y [0] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$15296 [639:576] = \$13y [0] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$15296 [703:640] = \$13y [0] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$15296 [767:704] = \$13y [0] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$15296 [831:768] = \$13y [0] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$15296 [895:832] = \$13y [0] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$15296 [959:896] = \$13y [0] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) minstret_raw : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$15296 [1023:960] = \$13y [0] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) mhpmcounter[2047:1984] : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$15313 [63:0] = \$13y [1] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) \$auto$bmuxmap.cc:84:execute$15296 [127:64] : \$auto$bmuxmap.cc:84:execute$15296 [63:0];
  assign \$auto$bmuxmap.cc:84:execute$15313 [127:64] = \$13y [1] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) \$auto$bmuxmap.cc:84:execute$15296 [255:192] : \$auto$bmuxmap.cc:84:execute$15296 [191:128];
  assign \$auto$bmuxmap.cc:84:execute$15313 [191:128] = \$13y [1] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) \$auto$bmuxmap.cc:84:execute$15296 [383:320] : \$auto$bmuxmap.cc:84:execute$15296 [319:256];
  assign \$auto$bmuxmap.cc:84:execute$15313 [255:192] = \$13y [1] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) \$auto$bmuxmap.cc:84:execute$15296 [511:448] : \$auto$bmuxmap.cc:84:execute$15296 [447:384];
  assign \$auto$bmuxmap.cc:84:execute$15313 [319:256] = \$13y [1] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) \$auto$bmuxmap.cc:84:execute$15296 [639:576] : \$auto$bmuxmap.cc:84:execute$15296 [575:512];
  assign \$auto$bmuxmap.cc:84:execute$15313 [383:320] = \$13y [1] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) \$auto$bmuxmap.cc:84:execute$15296 [767:704] : \$auto$bmuxmap.cc:84:execute$15296 [703:640];
  assign \$auto$bmuxmap.cc:84:execute$15313 [447:384] = \$13y [1] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) \$auto$bmuxmap.cc:84:execute$15296 [895:832] : \$auto$bmuxmap.cc:84:execute$15296 [831:768];
  assign \$auto$bmuxmap.cc:84:execute$15313 [511:448] = \$13y [1] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) \$auto$bmuxmap.cc:84:execute$15296 [1023:960] : \$auto$bmuxmap.cc:84:execute$15296 [959:896];
  assign \$auto$bmuxmap.cc:84:execute$15322 [63:0] = \$13y [2] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) \$auto$bmuxmap.cc:84:execute$15313 [127:64] : \$auto$bmuxmap.cc:84:execute$15313 [63:0];
  assign \$auto$bmuxmap.cc:84:execute$15322 [127:64] = \$13y [2] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) \$auto$bmuxmap.cc:84:execute$15313 [255:192] : \$auto$bmuxmap.cc:84:execute$15313 [191:128];
  assign \$auto$bmuxmap.cc:84:execute$15322 [191:128] = \$13y [2] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) \$auto$bmuxmap.cc:84:execute$15313 [383:320] : \$auto$bmuxmap.cc:84:execute$15313 [319:256];
  assign \$auto$bmuxmap.cc:84:execute$15322 [255:192] = \$13y [2] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) \$auto$bmuxmap.cc:84:execute$15313 [511:448] : \$auto$bmuxmap.cc:84:execute$15313 [447:384];
  assign \$auto$bmuxmap.cc:84:execute$15327 [63:0] = \$13y [3] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) \$auto$bmuxmap.cc:84:execute$15322 [127:64] : \$auto$bmuxmap.cc:84:execute$15322 [63:0];
  assign \$auto$bmuxmap.cc:84:execute$15327 [127:64] = \$13y [3] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) \$auto$bmuxmap.cc:84:execute$15322 [255:192] : \$auto$bmuxmap.cc:84:execute$15322 [191:128];
  assign \$auto$bmuxmap.cc:84:execute$15330  = \$13y [4] ? (* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" *) \$auto$bmuxmap.cc:84:execute$15327 [127:64] : \$auto$bmuxmap.cc:84:execute$15327 [63:0];
  assign \$67y [0] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h00;
  assign \$67y [1] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h01;
  assign \$67y [2] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h02;
  assign \$67y [3] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h03;
  assign \$67y [4] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h04;
  assign \$67y [5] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h05;
  assign \$67y [6] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h06;
  assign \$67y [7] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h07;
  assign \$67y [8] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h08;
  assign \$67y [9] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h09;
  assign \$67y [10] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h0a;
  assign \$67y [11] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h0b;
  assign \$67y [12] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h0c;
  assign \$67y [13] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h0d;
  assign \$67y [14] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h0e;
  assign \$67y [15] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h0f;
  assign \$67y [16] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h10;
  assign \$67y [17] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h11;
  assign \$67y [18] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h12;
  assign \$67y [19] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h13;
  assign \$67y [20] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h14;
  assign \$67y [21] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h15;
  assign \$67y [22] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h16;
  assign \$67y [23] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h17;
  assign \$67y [24] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h18;
  assign \$67y [25] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h19;
  assign \$67y [26] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h1a;
  assign \$67y [27] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h1b;
  assign \$67y [28] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h1c;
  assign \$67y [29] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h1d;
  assign \$67y [30] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h1e;
  assign \$67y [31] = csr_addr_i[4:0] == (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" *) 5'h1f;
  (* src = "rtl/cve2/cve2_cs_registers.sv:704.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) priv_mode_id_o <= 2'h3;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14096 ) priv_mode_id_o <= priv_lvl_d;
  reg [1:0] \$auto$ff.cc:266:slice$14099 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:1303.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14099  <= 2'h0;
    else if (mcountinhibit_we) \$auto$ff.cc:266:slice$14099  <= { csr_wdata_int[2], csr_wdata_int[0] };
  assign { mcountinhibit[2], mcountinhibit[0] } = \$auto$ff.cc:266:slice$14099 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14096  = | { csr_save_cause_i, csr_restore_dret_i, csr_restore_mret_i };
  assign \$200y  = ! csr_wdata_int;
  assign \$13y [4:0] = ~ csr_addr_i[4:0];
  assign \$auto$opt_reduce.cc:137:opt_pmux$13331  = | { \$procmux$9842_CMP , \$procmux$9841_CMP , \$procmux$9840_CMP , \$procmux$9839_CMP , \$procmux$9838_CMP , \$procmux$9836_CMP , \$procmux$9835_CMP , \$procmux$9834_CMP , \$procmux$9832_CMP , \$procmux$9826_CMP , \$procmux$9798_CMP , \$procmux$9792_CMP , \$procmux$9791_CMP , \$procmux$9790_CMP , \$procmux$9789_CMP , \$procmux$9541_CMP , \$procmux$9471_CMP , \$procmux$9465_CMP , \$mcountinhibit_we$90 , \$mtval_en$83 , \$mcause_en$82 , \$mepc_en$81 , \$mscratch_en$80 , \$mie_en$79 , \$mstatus_en$78 , \$198y , \$193y , \$188y , \$45y , \$40y , \$35y , \$30y , \$48y , \$44y , \$43y , \$42y , \$41y , \$39y , \$38y , \$37y , \$36y , \$34y , \$33y , \$32y , \$31y , \$49y , \$47y , \$46y  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13333  = | { \$dscratch1_en$89 , \$dscratch0_en$88 , \$depc_en$87 , \$dcsr_en$86  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13335  = | { \$procmux$9032_CMP , \$166y  };
  assign { \$15y [2], \$15y [0] } = \$13y [4] ? \$memory$auto$memory_bmux2rom.cc:63:execute$15077$rdmux[0][0][0]$b$15091  : 2'h0;
  assign \$memory$auto$memory_bmux2rom.cc:63:execute$15077$rdmux[0][0][0]$b$15091  = \$13y [3] ? \$memory$auto$memory_bmux2rom.cc:63:execute$15077$rdmux[0][1][1]$b$15097  : 2'h0;
  assign \$memory$auto$memory_bmux2rom.cc:63:execute$15077$rdmux[0][1][1]$b$15097  = \$13y [2] ? \$memory$auto$memory_bmux2rom.cc:63:execute$15077$rdmux[0][2][3]$b$15109  : 2'h0;
  assign \$memory$auto$memory_bmux2rom.cc:63:execute$15077$rdmux[0][2][3]$b$15109  = \$13y [1] ? { 1'h0, \$13y [0] } : { \$13y [0], 1'h0 };
  function [31:0] \$procmux$9031 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_cs_registers.sv:723.21-723.49|rtl/cve2/cve2_cs_registers.sv:719.5-725.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$9031  = b[31:0];
      2'b1?:
        \$procmux$9031  = b[63:32];
      default:
        \$procmux$9031  = a;
    endcase
  endfunction
  assign csr_wdata_int = \$procmux$9031 (\$162y , { \$164y , csr_wdata_i }, { \$168y , \$auto$opt_reduce.cc:137:opt_pmux$13335  });
  assign \$procmux$9032_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:723.21-723.49|rtl/cve2/cve2_cs_registers.sv:719.5-725.12" *) csr_op_i;
  function [3:0] \$procmux$9042 ;
    input [3:0] a;
    input [7:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$9042  = b[3:0];
      2'b1?:
        \$procmux$9042  = b[7:4];
      default:
        \$procmux$9042  = a;
    endcase
  endfunction
  assign mstatus_d[5:2] = \$procmux$9042 (\$mstatus_d$93 [5:2], { \$mstatus_d[5:2]$120 , mstatus_q[4], \$mstatus_d[4:2]$136  }, { csr_save_cause_i, csr_restore_mret_i });
  assign \$mcause_en$140  = \$mcause_en$98  | (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *) nmi_mode_i;
  assign \$mcause_d$139  = nmi_mode_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *) mstack_cause_q : { csr_wdata_int[31], csr_wdata_int[5:0] };
  assign \$mepc_en$138  = \$mepc_en$97  | (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *) nmi_mode_i;
  assign \$mepc_d$137  = nmi_mode_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *) mstack_epc_q : { csr_wdata_int[31:1], 1'h0 };
  assign \$mstatus_d[1]$135  = \$134y  ? (* src = "rtl/cve2/cve2_cs_registers.sv:677.11-677.33|rtl/cve2/cve2_cs_registers.sv:676.9-678.12" *) 1'h0 : \$mstatus_d$93 [1];
  assign mstatus_d[1] = csr_restore_mret_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$mstatus_d[1]$135  : \$mstatus_d$93 [1];
  assign \$mstatus_d[4:2]$136  = nmi_mode_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *) mstack_q : 3'h4;
  assign \$mtval_en$118  = debug_mode_i ? (* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) \$mtval_en$99  : 1'h1;
  assign \$mtval_d$117  = debug_mode_i ? (* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) csr_wdata_int : csr_mtval_i;
  assign \$mcause_en$116  = debug_mode_i ? (* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) \$mcause_en$98  : 1'h1;
  assign \$mcause_d$115  = debug_mode_i ? (* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) { csr_wdata_int[31], csr_wdata_int[5:0] } : csr_mcause_i;
  assign \$mepc_en$114  = debug_mode_i ? (* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) \$mepc_en$97  : 1'h1;
  assign \$mepc_d$113  = debug_mode_i ? (* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) { csr_wdata_int[31:1], 1'h0 } : \$exception_pc$109 ;
  assign \$mstatus_en$112  = debug_mode_i ? (* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) \$mstatus_en$94  : 1'h1;
  assign \$mstatus_d[5:2]$111  = debug_mode_i ? (* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) \$mstatus_d$93 [5:2] : { 1'h0, mstatus_q[5], priv_mode_id_o };
  assign \$mstack_en$133  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) 1'h0 : \$10y ;
  assign \$depc_en$132  = \$depc_en$103  | (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) debug_csr_save_i;
  assign \$depc_d$131  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) \$exception_pc$109  : { csr_wdata_int[31:1], 1'h0 };
  assign \$dcsr_en$130  = \$dcsr_en$102  | (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) debug_csr_save_i;
  assign \$dcsr_d[8:6]$129  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) debug_cause_i : dcsr_q[8:6];
  assign \$dcsr_d[1:0]$128  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) priv_mode_id_o : \$dcsr_d$101 [1:0];
  assign \$mtval_en$127  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) \$mtval_en$99  : \$mtval_en$118 ;
  assign \$mtval_d$126  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) csr_wdata_int : \$mtval_d$117 ;
  assign \$mcause_en$125  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) \$mcause_en$98  : \$mcause_en$116 ;
  assign \$mcause_d$124  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) { csr_wdata_int[31], csr_wdata_int[5:0] } : \$mcause_d$115 ;
  assign \$mepc_en$123  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) \$mepc_en$97  : \$mepc_en$114 ;
  assign \$mepc_d$122  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) { csr_wdata_int[31:1], 1'h0 } : \$mepc_d$113 ;
  assign \$mstatus_en$121  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) \$mstatus_en$94  : \$mstatus_en$112 ;
  assign \$mstatus_d[5:2]$120  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) \$mstatus_d$93 [5:2] : \$mstatus_d[5:2]$111 ;
  assign \$exception_pc$109  = csr_save_if_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:628.13-628.36|rtl/cve2/cve2_cs_registers.sv:626.9-634.16" *) pc_if_i : pc_id_i;
  assign mstack_en = csr_save_cause_i & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$mstack_en$133 ;
  assign depc_en = csr_save_cause_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$depc_en$132  : \$depc_en$103 ;
  assign depc_d = csr_save_cause_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$depc_d$131  : { csr_wdata_int[31:1], 1'h0 };
  assign dcsr_en = csr_save_cause_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$dcsr_en$130  : \$dcsr_en$102 ;
  assign dcsr_d[8:6] = csr_save_cause_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$dcsr_d[8:6]$129  : dcsr_q[8:6];
  assign dcsr_d[1:0] = csr_save_cause_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$dcsr_d[1:0]$128  : \$dcsr_d$101 [1:0];
  assign mtval_en = csr_save_cause_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$mtval_en$127  : \$mtval_en$99 ;
  assign mtval_d = csr_save_cause_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$mtval_d$126  : csr_wdata_int;
  function [0:0] \$procmux$9373 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$9373  = b[0:0];
      2'b1?:
        \$procmux$9373  = b[1:1];
      default:
        \$procmux$9373  = a;
    endcase
  endfunction
  assign mcause_en = \$procmux$9373 (\$mcause_en$98 , { \$mcause_en$125 , \$mcause_en$140  }, { csr_save_cause_i, csr_restore_mret_i });
  function [6:0] \$procmux$9380 ;
    input [6:0] a;
    input [13:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$9380  = b[6:0];
      2'b1?:
        \$procmux$9380  = b[13:7];
      default:
        \$procmux$9380  = a;
    endcase
  endfunction
  assign mcause_d = \$procmux$9380 ({ csr_wdata_int[31], csr_wdata_int[5:0] }, { \$mcause_d$124 , \$mcause_d$139  }, { csr_save_cause_i, csr_restore_mret_i });
  function [0:0] \$procmux$9387 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$9387  = b[0:0];
      2'b1?:
        \$procmux$9387  = b[1:1];
      default:
        \$procmux$9387  = a;
    endcase
  endfunction
  assign mepc_en = \$procmux$9387 (\$mepc_en$97 , { \$mepc_en$123 , \$mepc_en$138  }, { csr_save_cause_i, csr_restore_mret_i });
  function [31:0] \$procmux$9394 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$9394  = b[31:0];
      2'b1?:
        \$procmux$9394  = b[63:32];
      default:
        \$procmux$9394  = a;
    endcase
  endfunction
  assign mepc_d = \$procmux$9394 ({ csr_wdata_int[31:1], 1'h0 }, { \$mepc_d$122 , \$mepc_d$137  }, { csr_save_cause_i, csr_restore_mret_i });
  function [0:0] \$procmux$9401 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$9401  = b[0:0];
      2'b1?:
        \$procmux$9401  = b[1:1];
      default:
        \$procmux$9401  = a;
    endcase
  endfunction
  assign mstatus_en = \$procmux$9401 (\$mstatus_en$94 , { \$mstatus_en$121 , 1'h1 }, { csr_save_cause_i, csr_restore_mret_i });
  function [1:0] \$procmux$9418 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$9418  = b[1:0];
      2'b1?:
        \$procmux$9418  = b[3:2];
      default:
        \$procmux$9418  = a;
    endcase
  endfunction
  assign priv_lvl_d = \$procmux$9418 (2'h3, { dcsr_q[1:0], mstatus_q[3:2] }, { csr_restore_dret_i, csr_restore_mret_i });
  assign \$dcsr_d[1:0]$62  = \$61y  ? (* src = "rtl/cve2/cve2_cs_registers.sv:561.13-561.37|rtl/cve2/cve2_cs_registers.sv:560.11-562.14" *) 2'h3 : csr_wdata_int[1:0];
  assign \$dcsr_en$86  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:556.19-581.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 11'h7b0;
  assign \$mstatus_d[3:2]$58  = \$57y  ? (* src = "rtl/cve2/cve2_cs_registers.sv:535.13-535.40|rtl/cve2/cve2_cs_registers.sv:534.11-536.14" *) 2'h3 : csr_wdata_int[12:11];
  assign \$mstatus_en$78  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:524.22-537.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h300;
  assign \$auto$wreduce.cc:514:run$13481 [2:0] = \$procmux$9465_CTRL  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) \$67y [2:0] : 3'h0;
  assign \$procmux$9465_CMP [0] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb80;
  assign \$procmux$9465_CMP [1] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb82;
  assign \$procmux$9465_CMP [10] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb8b;
  assign \$procmux$9465_CMP [11] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb8c;
  assign \$procmux$9465_CMP [12] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb8d;
  assign \$procmux$9465_CMP [13] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb8e;
  assign \$procmux$9465_CMP [14] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb8f;
  assign \$procmux$9465_CMP [15] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb90;
  assign \$procmux$9465_CMP [16] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb91;
  assign \$procmux$9465_CMP [17] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb92;
  assign \$procmux$9465_CMP [18] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb93;
  assign \$procmux$9465_CMP [19] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb94;
  assign \$procmux$9465_CMP [2] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb83;
  assign \$procmux$9465_CMP [20] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb95;
  assign \$procmux$9465_CMP [21] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb96;
  assign \$procmux$9465_CMP [22] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb97;
  assign \$procmux$9465_CMP [23] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb98;
  assign \$procmux$9465_CMP [24] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb99;
  assign \$procmux$9465_CMP [25] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb9a;
  assign \$procmux$9465_CMP [26] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb9b;
  assign \$procmux$9465_CMP [27] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb9c;
  assign \$procmux$9465_CMP [28] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb9d;
  assign \$procmux$9465_CMP [29] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb9e;
  assign \$procmux$9465_CMP [3] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb84;
  assign \$procmux$9465_CMP [30] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb9f;
  assign \$procmux$9465_CMP [4] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb85;
  assign \$procmux$9465_CMP [5] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb86;
  assign \$procmux$9465_CMP [6] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb87;
  assign \$procmux$9465_CMP [7] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb88;
  assign \$procmux$9465_CMP [8] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb89;
  assign \$procmux$9465_CMP [9] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb8a;
  assign \$auto$wreduce.cc:514:run$13480 [2:0] = \$procmux$9471_CTRL  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) \$67y [2:0] : 3'h0;
  assign \$procmux$9471_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) \$procmux$9471_CMP ;
  assign \$procmux$9471_CMP [0] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb00;
  assign \$procmux$9471_CMP [1] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb02;
  assign \$procmux$9471_CMP [10] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb0b;
  assign \$procmux$9471_CMP [11] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb0c;
  assign \$procmux$9471_CMP [12] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb0d;
  assign \$procmux$9471_CMP [13] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb0e;
  assign \$procmux$9471_CMP [14] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb0f;
  assign \$procmux$9471_CMP [15] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb10;
  assign \$procmux$9471_CMP [16] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb11;
  assign \$procmux$9471_CMP [17] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb12;
  assign \$procmux$9471_CMP [18] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb13;
  assign \$procmux$9471_CMP [19] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb14;
  assign \$procmux$9471_CMP [2] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb03;
  assign \$procmux$9471_CMP [20] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb15;
  assign \$procmux$9471_CMP [21] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb16;
  assign \$procmux$9471_CMP [22] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb17;
  assign \$procmux$9471_CMP [23] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb18;
  assign \$procmux$9471_CMP [24] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb19;
  assign \$procmux$9471_CMP [25] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb1a;
  assign \$procmux$9471_CMP [26] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb1b;
  assign \$procmux$9471_CMP [27] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb1c;
  assign \$procmux$9471_CMP [28] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb1d;
  assign \$procmux$9471_CMP [29] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb1e;
  assign \$procmux$9471_CMP [3] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb04;
  assign \$procmux$9471_CMP [30] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb1f;
  assign \$procmux$9471_CMP [4] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb05;
  assign \$procmux$9471_CMP [5] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb06;
  assign \$procmux$9471_CMP [6] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb07;
  assign \$procmux$9471_CMP [7] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb08;
  assign \$procmux$9471_CMP [8] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb09;
  assign \$procmux$9471_CMP [9] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb0a;
  assign \$mcountinhibit_we$90  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:590.28-590.52|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h320;
  assign \$dscratch1_en$89  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:587.24-587.44|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 11'h7b3;
  assign \$dscratch0_en$88  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:586.24-586.44|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 11'h7b2;
  assign \$depc_en$87  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:584.18-584.33|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 11'h7b1;
  assign { \$dcsr_d$85 [31:9], \$dcsr_d$85 [5:0] } = \$dcsr_en$86  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:556.19-581.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) { 16'h4000, csr_wdata_int[15], 1'h0, csr_wdata_int[13:12], 6'h00, csr_wdata_int[2], \$dcsr_d[1:0]$62  } : { dcsr_q[31:9], dcsr_q[5:0] };
  assign \$mtvec_en$84  = csr_mtvec_init_i | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:554.20-554.36|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) \$procmux$9541_CMP ;
  assign \$procmux$9541_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:554.20-554.36|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h305;
  assign \$mtval_en$83  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:551.20-551.36|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h343;
  assign \$mcause_en$82  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:548.21-548.38|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h342;
  assign \$mepc_en$81  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:545.19-545.34|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h341;
  assign \$mscratch_en$80  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:542.23-542.42|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h340;
  assign \$mie_en$79  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:540.18-540.32|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h304;
  assign \$mstatus_d$77  = \$mstatus_en$78  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:524.22-537.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) { csr_wdata_int[3], csr_wdata_int[7], \$mstatus_d[3:2]$58 , csr_wdata_int[17], csr_wdata_int[21] } : mstatus_q;
  assign mhpmcounterh_we = csr_we_int ? (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$auto$wreduce.cc:514:run$13481 [2:0] : 3'h0;
  assign mhpmcounter_we = csr_we_int ? (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$auto$wreduce.cc:514:run$13480 [2:0] : 3'h0;
  assign mcountinhibit_we = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$mcountinhibit_we$90 ;
  assign dscratch1_en = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$dscratch1_en$89 ;
  assign dscratch0_en = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$dscratch0_en$88 ;
  assign \$depc_en$103  = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$depc_en$87 ;
  assign \$dcsr_en$102  = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$dcsr_en$86 ;
  assign { dcsr_d[31:9], dcsr_d[5:2], \$dcsr_d$101 [1:0] } = csr_we_int ? (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) { \$dcsr_d$85 [31:9], \$dcsr_d$85 [5:0] } : { dcsr_q[31:9], dcsr_q[5:0] };
  assign mtvec_en = csr_we_int ? (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$mtvec_en$84  : csr_mtvec_init_i;
  assign \$mtval_en$99  = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$mtval_en$83 ;
  assign \$mcause_en$98  = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$mcause_en$82 ;
  assign \$mepc_en$97  = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$mepc_en$81 ;
  assign mscratch_en = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$mscratch_en$80 ;
  assign mie_en = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$mie_en$79 ;
  assign \$mstatus_en$94  = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$mstatus_en$78 ;
  assign { \$mstatus_d$93 [5:1], mstatus_d[0] } = csr_we_int ? (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$mstatus_d$77  : mstatus_q;
  assign illegal_csr = \$illegal_csr$29  | (* src = "rtl/cve2/cve2_cs_registers.sv:479.9-479.28|rtl/cve2/cve2_cs_registers.sv:474.7-480.10" *) \$50y ;
  function [0:0] \$procmux$9788 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_cs_registers.sv:465.9-465.28|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$9788  = b[0:0];
      2'b1?:
        \$procmux$9788  = b[1:1];
      default:
        \$procmux$9788  = a;
    endcase
  endfunction
  assign \$illegal_csr$29  = \$procmux$9788 (1'h1, { \$10y , 1'h0 }, { \$auto$opt_reduce.cc:137:opt_pmux$13333 , \$auto$opt_reduce.cc:137:opt_pmux$13331  });
  assign \$procmux$9789_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:465.9-465.28|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 11'h7c1;
  assign \$procmux$9790_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:458.21-461.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 11'h7aa;
  assign \$procmux$9791_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:454.21-457.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 11'h7a8;
  assign \$procmux$9792_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:450.19-453.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 11'h7a3;
  assign \$procmux$9465_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) \$procmux$9465_CMP ;
  assign \$procmux$9798_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) \$procmux$9798_CMP ;
  assign \$procmux$9798_CMP [0] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h323;
  assign \$procmux$9798_CMP [1] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h324;
  assign \$procmux$9798_CMP [10] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h32d;
  assign \$procmux$9798_CMP [11] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h32e;
  assign \$procmux$9798_CMP [12] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h32f;
  assign \$procmux$9798_CMP [13] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h330;
  assign \$procmux$9798_CMP [14] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h331;
  assign \$procmux$9798_CMP [15] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h332;
  assign \$procmux$9798_CMP [16] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h333;
  assign \$procmux$9798_CMP [17] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h334;
  assign \$procmux$9798_CMP [18] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h335;
  assign \$procmux$9798_CMP [19] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h336;
  assign \$procmux$9798_CMP [2] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h325;
  assign \$procmux$9798_CMP [20] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h337;
  assign \$procmux$9798_CMP [21] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h338;
  assign \$procmux$9798_CMP [22] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h339;
  assign \$procmux$9798_CMP [23] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h33a;
  assign \$procmux$9798_CMP [24] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h33b;
  assign \$procmux$9798_CMP [25] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h33c;
  assign \$procmux$9798_CMP [26] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h33d;
  assign \$procmux$9798_CMP [27] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h33e;
  assign \$procmux$9798_CMP [28] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h33f;
  assign \$procmux$9798_CMP [3] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h326;
  assign \$procmux$9798_CMP [4] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h327;
  assign \$procmux$9798_CMP [5] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h328;
  assign \$procmux$9798_CMP [6] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h329;
  assign \$procmux$9798_CMP [7] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h32a;
  assign \$procmux$9798_CMP [8] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h32b;
  assign \$procmux$9798_CMP [9] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h32c;
  assign \$procmux$9826_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:328.16-334.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h344;
  assign \$procmux$9832_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:310.9-310.28|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h306;
  assign \$procmux$9834_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:297.17-297.44|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h301;
  assign \$procmux$9835_CMP [0] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:294.34-294.53|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h30a;
  assign \$procmux$9835_CMP [1] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:294.34-294.53|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h31a;
  assign \$procmux$9836_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:290.21-290.40|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h310;
  assign \$procmux$9838_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:277.23-277.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 12'hf15;
  assign \$procmux$9839_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:275.20-275.46|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 12'hf14;
  assign \$procmux$9840_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:273.19-273.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 12'hf13;
  assign \$procmux$9841_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:271.20-271.54|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 12'hf12;
  assign \$procmux$9842_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:269.22-269.58|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 12'hf11;
  function [31:0] \$procmux$9848 ;
    input [31:0] a;
    input [735:0] b;
    input [22:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_cs_registers.sv:446.19-449.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *)
    (* parallel_case *)
    casez (s)
      23'b??????????????????????1:
        \$procmux$9848  = b[31:0];
      23'b?????????????????????1?:
        \$procmux$9848  = b[63:32];
      23'b????????????????????1??:
        \$procmux$9848  = b[95:64];
      23'b???????????????????1???:
        \$procmux$9848  = b[127:96];
      23'b??????????????????1????:
        \$procmux$9848  = b[159:128];
      23'b?????????????????1?????:
        \$procmux$9848  = b[191:160];
      23'b????????????????1??????:
        \$procmux$9848  = b[223:192];
      23'b???????????????1???????:
        \$procmux$9848  = b[255:224];
      23'b??????????????1????????:
        \$procmux$9848  = b[287:256];
      23'b?????????????1?????????:
        \$procmux$9848  = b[319:288];
      23'b????????????1??????????:
        \$procmux$9848  = b[351:320];
      23'b???????????1???????????:
        \$procmux$9848  = b[383:352];
      23'b??????????1????????????:
        \$procmux$9848  = b[415:384];
      23'b?????????1?????????????:
        \$procmux$9848  = b[447:416];
      23'b????????1??????????????:
        \$procmux$9848  = b[479:448];
      23'b???????1???????????????:
        \$procmux$9848  = b[511:480];
      23'b??????1????????????????:
        \$procmux$9848  = b[543:512];
      23'b?????1?????????????????:
        \$procmux$9848  = b[575:544];
      23'b????1??????????????????:
        \$procmux$9848  = b[607:576];
      23'b???1???????????????????:
        \$procmux$9848  = b[639:608];
      23'b??1????????????????????:
        \$procmux$9848  = b[671:640];
      23'b?1?????????????????????:
        \$procmux$9848  = b[703:672];
      23'b1??????????????????????:
        \$procmux$9848  = b[735:704];
      default:
        \$procmux$9848  = a;
    endcase
  endfunction
  assign csr_rdata_o = \$procmux$9848 (32'd0, { 64'h0000060200000023, hart_id_i, 10'h000, mstatus_q[0], 3'h0, mstatus_q[1], 4'h0, mstatus_q[3:2], 3'h0, mstatus_q[4], 3'h0, mstatus_q[5], 35'h040100104, mie_q[15:0], 4'h0, mie_q[16], 3'h0, mie_q[17], 3'h0, mie_q[18], 3'h0, mscratch_q, csr_mtvec_o, csr_mepc_o, mcause_q[6], 25'h0000000, mcause_q[5:0], mtval_q, irq_fast_i, 4'h0, irq_external_i, 3'h0, irq_timer_i, 3'h0, irq_software_i, 3'h0, dcsr_q, csr_depc_o, dscratch0_q, dscratch1_q, 29'h1fffffff, mcountinhibit[2], 1'h0, mcountinhibit[0], 29'h00000000, \$15y [2], 1'h0, \$15y [0], \$20y [31:0], \$20y [63:32], 31'h00000000, \gen_trigger_regs.tselect_q , 29'h05000209, \gen_trigger_regs.selected_tmatch_control , 2'h0, \gen_trigger_regs.selected_tmatch_value  }, { \$procmux$9842_CMP , \$procmux$9841_CMP , \$procmux$9839_CMP , \$mstatus_en$78 , \$procmux$9834_CMP , \$mie_en$79 , \$mscratch_en$80 , \$procmux$9541_CMP , \$mepc_en$81 , \$mcause_en$82 , \$mtval_en$83 , \$procmux$9826_CMP , \$dcsr_en$86 , \$depc_en$87 , \$dscratch0_en$88 , \$dscratch1_en$89 , \$mcountinhibit_we$90 , \$procmux$9798_CTRL , \$procmux$9471_CTRL , \$procmux$9465_CTRL , \$188y , \$193y , \$198y  });
  (* src = "rtl/cve2/cve2_cs_registers.sv:1372.9" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_control_csr  \gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_control_csr  (
    .clk_i(clk_i),
    .rd_data_o(\gen_trigger_regs.selected_tmatch_control ),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int[2]),
    .wr_en_i(\gen_trigger_regs.tmatch_control_we )
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:1385.9" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_value_csr  \gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_value_csr  (
    .clk_i(clk_i),
    .rd_data_o(\gen_trigger_regs.selected_tmatch_value ),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(\gen_trigger_regs.tmatch_value_we )
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:1358.7" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.u_tselect_csr  \gen_trigger_regs.u_tselect_csr  (
    .clk_i(clk_i),
    .rd_data_o(\gen_trigger_regs.tselect_q ),
    .rst_ni(rst_ni),
    .wr_data_i(\gen_trigger_regs.tselect_d ),
    .wr_en_i(\gen_trigger_regs.tselect_we )
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:1210.5" *)
  \cve2_counter$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.mcycle_counter_i  mcycle_counter_i (
    .clk_i(clk_i),
    .counter_inc_i(\$180y ),
    .counter_val_i(csr_wdata_int),
    .counter_val_o(mhpmcounter[2047:1984]),
    .counter_we_i(mhpmcounter_we[0]),
    .counterh_we_i(mhpmcounterh_we[0]),
    .rst_ni(rst_ni)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:1226.5" *)
  \cve2_counter$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.minstret_counter_i  minstret_counter_i (
    .clk_i(clk_i),
    .counter_inc_i(\$183y ),
    .counter_val_i(csr_wdata_int),
    .counter_val_o(minstret_raw),
    .counter_we_i(mhpmcounter_we[2]),
    .counterh_we_i(mhpmcounterh_we[2]),
    .rst_ni(rst_ni)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:871.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dcsr_csr  u_dcsr_csr (
    .clk_i(clk_i),
    .rd_data_o(dcsr_q),
    .rst_ni(rst_ni),
    .wr_data_i(dcsr_d),
    .wr_en_i(dcsr_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:885.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_depc_csr  u_depc_csr (
    .clk_i(clk_i),
    .rd_data_o(csr_depc_o),
    .rst_ni(rst_ni),
    .wr_data_i(depc_d),
    .wr_en_i(depc_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:899.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dscratch0_csr  u_dscratch0_csr (
    .clk_i(clk_i),
    .rd_data_o(dscratch0_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(dscratch0_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:913.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dscratch1_csr  u_dscratch1_csr (
    .clk_i(clk_i),
    .rd_data_o(dscratch1_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(dscratch1_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:824.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mcause_csr  u_mcause_csr (
    .clk_i(clk_i),
    .rd_data_o(mcause_q),
    .rst_ni(rst_ni),
    .wr_data_i(mcause_d),
    .wr_en_i(mcause_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:778.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mepc_csr  u_mepc_csr (
    .clk_i(clk_i),
    .rd_data_o(csr_mepc_o),
    .rst_ni(rst_ni),
    .wr_data_i(mepc_d),
    .wr_en_i(mepc_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:796.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mie_csr  u_mie_csr (
    .clk_i(clk_i),
    .rd_data_o(mie_q),
    .rst_ni(rst_ni),
    .wr_data_i({ csr_wdata_int[3], csr_wdata_int[7], csr_wdata_int[11], csr_wdata_int[31:16] }),
    .wr_en_i(mie_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:810.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mscratch_csr  u_mscratch_csr (
    .clk_i(clk_i),
    .rd_data_o(mscratch_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(mscratch_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:956.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_cause_csr  u_mstack_cause_csr (
    .clk_i(clk_i),
    .rd_data_o(mstack_cause_q),
    .rst_ni(rst_ni),
    .wr_data_i(mcause_q),
    .wr_en_i(mstack_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:928.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_csr  u_mstack_csr (
    .clk_i(clk_i),
    .rd_data_o(mstack_q),
    .rst_ni(rst_ni),
    .wr_data_i(mstatus_q[4:2]),
    .wr_en_i(mstack_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:942.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_epc_csr  u_mstack_epc_csr (
    .clk_i(clk_i),
    .rd_data_o(mstack_epc_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_mepc_o),
    .wr_en_i(mstack_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:764.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstatus_csr  u_mstatus_csr (
    .clk_i(clk_i),
    .rd_data_o(mstatus_q),
    .rst_ni(rst_ni),
    .wr_data_i(mstatus_d),
    .wr_en_i(mstatus_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:838.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mtval_csr  u_mtval_csr (
    .clk_i(clk_i),
    .rd_data_o(mtval_q),
    .rst_ni(rst_ni),
    .wr_data_i(mtval_d),
    .wr_en_i(mtval_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:851.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mtvec_csr  u_mtvec_csr (
    .clk_i(clk_i),
    .rd_data_o(csr_mtvec_o),
    .rst_ni(rst_ni),
    .wr_data_i({ mtvec_d[31:8], 8'h01 }),
    .wr_en_i(mtvec_en)
  );
  assign \$auto$wreduce.cc:514:run$13480 [31:3] = 29'hxxxxxxxx;
  assign \$auto$wreduce.cc:514:run$13481 [31:3] = 29'hxxxxxxxx;
  assign \$dcsr_d$101 [31:2] = { dcsr_d[31:9], dcsr_q[8:6], dcsr_d[5:2] };
  assign \$dcsr_d$85 [8:6] = dcsr_q[8:6];
  assign \$mstatus_d$93 [0] = mstatus_d[0];
  assign csr_mstatus_mie_o = mstatus_q[5];
  assign csr_mstatus_tw_o = mstatus_q[0];
  assign csr_pmp_addr_o = 136'h0000000000000000000000000000000000;
  assign csr_pmp_cfg_o = 24'h000000;
  assign csr_pmp_mseccfg_o = 3'h0;
  assign debug_ebreakm_o = dcsr_q[15];
  assign debug_ebreaku_o = dcsr_q[12];
  assign debug_single_step_o = dcsr_q[2];
  assign { mcountinhibit[31:3], mcountinhibit[1] } = 30'h3ffffffe;
  assign mhpmcounter[1983:0] = { 64'h0000000000000000, minstret_raw, 1856'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 };
  assign mtvec_d[7:0] = 8'h01;
  assign { \$15y [31:3], \$15y [1] } = 30'h00000000;
  assign \$13y [5] = 1'h1;
  assign \$20y  = \$auto$bmuxmap.cc:84:execute$15330 ;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_control_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output rd_data_o;
  reg rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input wr_data_i;
  wire wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 1'h0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_value_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.u_tselect_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output rd_data_o;
  reg rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input wr_data_i;
  wire wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 1'h0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dcsr_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd1073741827;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_depc_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dscratch0_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dscratch1_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mcause_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [6:0] rd_data_o;
  reg [6:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [6:0] wr_data_i;
  wire [6:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 7'h00;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mepc_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mie_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [18:0] rd_data_o;
  reg [18:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [18:0] wr_data_i;
  wire [18:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 19'h00000;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mscratch_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_cause_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [6:0] rd_data_o;
  reg [6:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [6:0] wr_data_i;
  wire [6:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 7'h00;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [2:0] rd_data_o;
  reg [2:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [2:0] wr_data_i;
  wire [2:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 3'h4;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_epc_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstatus_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [5:0] rd_data_o;
  reg [5:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [5:0] wr_data_i;
  wire [5:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 6'h0c;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mtval_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mtvec_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd1;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_decoder.sv:16.8" *)
module \cve2_decoder$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.decoder_i (clk_i, rst_ni, instr_rdata_i, data_req_o, data_we_o, illegal_insn_o, instr_rdata_alu_i, illegal_c_insn_i, csr_access_o, csr_op_o, rf_raddr_a_o, rf_raddr_b_o, rf_ren_a_o, rf_ren_b_o, ebrk_insn_o, mret_insn_o, dret_insn_o, ecall_insn_o, wfi_insn_o, jump_set_o, instr_first_cycle_i
, imm_a_mux_sel_o, imm_b_mux_sel_o, imm_i_type_o, imm_s_type_o, imm_b_type_o, imm_u_type_o, imm_j_type_o, zimm_rs1_type_o, rf_wdata_sel_o, rf_we_o, rf_waddr_o, mac_en_o, alu_operator_o, alu_op_a_mux_sel_o, alu_op_b_mux_sel_o, alu_multicycle_o, mult_en_o, div_en_o, mult_sel_o, div_sel_o, multdiv_operator_o
, multdiv_signed_mode_o, data_type_o, data_sign_extension_o, jump_in_dec_o, branch_in_dec_o);
  wire \$136y ;
  wire \$137y ;
  wire \$152y ;
  wire \$15y ;
  wire \$21y ;
  wire \$25y ;
  wire \$26y ;
  wire \$43y ;
  wire \$4y ;
  wire \$59y ;
  wire \$5y ;
  wire \$66y ;
  wire \$67y ;
  wire \$68y ;
  wire \$6y ;
  wire \$7y ;
  wire \$8y ;
  (* src = "rtl/cve2/cve2_decoder.sv:721.9-733.12" *)
  wire [1:0] \$alu_op_a_mux_sel_o$125 ;
  (* src = "rtl/cve2/cve2_decoder.sv:1135.9-1150.16" *)
  wire [1:0] \$alu_op_a_mux_sel_o$150 ;
  (* src = "rtl/cve2/cve2_decoder.sv:1154.9-1170.12" *)
  wire [1:0] \$alu_op_a_mux_sel_o$156 ;
  (* src = "rtl/cve2/cve2_decoder.sv:773.9-777.12" *)
  wire \$alu_op_b_mux_sel_o$134 ;
  wire [5:0] \$alu_operator_o$127 ;
  (* src = "rtl/cve2/cve2_decoder.sv:750.9-761.12" *)
  wire [6:0] \$alu_operator_o$129 ;
  wire [5:0] \$alu_operator_o$138 ;
  wire [5:0] \$alu_operator_o$139 ;
  (* src = "rtl/cve2/cve2_decoder.sv:813.9-933.16" *)
  wire [6:0] \$alu_operator_o$141 ;
  (* src = "rtl/cve2/cve2_decoder.sv:983.11-1126.18" *)
  wire [6:0] \$alu_operator_o$142 ;
  (* src = "rtl/cve2/cve2_decoder.sv:940.9-1127.12" *)
  wire [6:0] \$alu_operator_o$145 ;
  (* src = "rtl/cve2/cve2_decoder.sv:1135.9-1150.16" *)
  wire [6:0] \$alu_operator_o$149 ;
  (* src = "rtl/cve2/cve2_decoder.sv:455.11-569.18" *)
  wire [6:0] \$alu_operator_o$46 ;
  (* src = "rtl/cve2/cve2_decoder.sv:452.9-570.12" *)
  wire [6:0] \$alu_operator_o$51 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13337 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13339 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13341 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13343 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13345 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13347 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13349 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13351 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13353 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13355 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13357 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13359 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13361 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13363 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13365 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13369 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13371 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13373 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13375 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13377 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13407 ;
  (* src = "rtl/cve2/cve2_decoder.sv:236.5-654.12" *)
  wire \$branch_in_dec_o$109 ;
  (* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12" *)
  wire \$csr_access_o$85 ;
  (* src = "rtl/cve2/cve2_decoder.sv:640.11-645.18" *)
  wire \$csr_illegal$72 ;
  (* src = "rtl/cve2/cve2_decoder.sv:640.11-645.18" *)
  wire [1:0] \$csr_op$73 ;
  (* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12" *)
  wire [1:0] \$csr_op$77 ;
  (* src = "rtl/cve2/cve2_decoder.sv:305.9-310.16" *)
  wire [1:0] \$data_type_o$20 ;
  (* src = "rtl/cve2/cve2_decoder.sv:236.5-654.12" *)
  wire \$data_we_o$105 ;
  (* src = "rtl/cve2/cve2_decoder.sv:604.11-624.18" *)
  wire \$dret_insn_o$63 ;
  (* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12" *)
  wire \$dret_insn_o$80 ;
  (* src = "rtl/cve2/cve2_decoder.sv:604.11-624.18" *)
  wire \$ebrk_insn_o$61 ;
  (* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12" *)
  wire \$ebrk_insn_o$78 ;
  (* src = "rtl/cve2/cve2_decoder.sv:604.11-624.18" *)
  wire \$ecall_insn_o$64 ;
  (* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12" *)
  wire \$ecall_insn_o$81 ;
  (* src = "rtl/cve2/cve2_decoder.sv:276.9-284.16" *)
  wire \$illegal_insn$17 ;
  (* src = "rtl/cve2/cve2_decoder.sv:305.9-310.16" *)
  wire \$illegal_insn$19 ;
  (* src = "rtl/cve2/cve2_decoder.sv:322.9-334.16" *)
  wire \$illegal_insn$23 ;
  (* src = "rtl/cve2/cve2_decoder.sv:362.13-396.20" *)
  wire \$illegal_insn$30 ;
  (* src = "rtl/cve2/cve2_decoder.sv:403.15-440.22" *)
  wire \$illegal_insn$40 ;
  (* src = "rtl/cve2/cve2_decoder.sv:400.13-441.16" *)
  wire \$illegal_insn$41 ;
  (* src = "rtl/cve2/cve2_decoder.sv:353.9-445.16" *)
  wire \$illegal_insn$42 ;
  (* src = "rtl/cve2/cve2_decoder.sv:455.11-569.18" *)
  wire \$illegal_insn$44 ;
  (* src = "rtl/cve2/cve2_decoder.sv:452.9-570.12" *)
  wire \$illegal_insn$49 ;
  (* src = "rtl/cve2/cve2_decoder.sv:578.9-598.16" *)
  wire \$illegal_insn$55 ;
  (* src = "rtl/cve2/cve2_decoder.sv:604.11-624.18" *)
  wire \$illegal_insn$60 ;
  (* src = "rtl/cve2/cve2_decoder.sv:627.11-629.14" *)
  wire \$illegal_insn$69 ;
  (* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12" *)
  wire \$illegal_insn$74 ;
  (* src = "rtl/cve2/cve2_decoder.sv:236.5-654.12" *)
  wire \$illegal_insn$86 ;
  (* src = "rtl/cve2/cve2_decoder.sv:1135.9-1150.16" *)
  wire [2:0] \$imm_b_mux_sel_o$148 ;
  (* src = "rtl/cve2/cve2_decoder.sv:236.5-654.12" *)
  wire \$jump_in_dec_o$108 ;
  (* src = "rtl/cve2/cve2_decoder.sv:578.9-598.16" *)
  wire \$jump_in_dec_o$58 ;
  (* src = "rtl/cve2/cve2_decoder.sv:578.9-598.16" *)
  wire \$jump_set_o$57 ;
  (* src = "rtl/cve2/cve2_decoder.sv:236.5-654.12" *)
  wire \$jump_set_o$95 ;
  (* src = "rtl/cve2/cve2_decoder.sv:455.11-569.18" *)
  wire \$mac_en_o$45 ;
  (* src = "rtl/cve2/cve2_decoder.sv:452.9-570.12" *)
  wire \$mac_en_o$50 ;
  (* src = "rtl/cve2/cve2_decoder.sv:604.11-624.18" *)
  wire \$mret_insn_o$62 ;
  (* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12" *)
  wire \$mret_insn_o$79 ;
  (* src = "rtl/cve2/cve2_decoder.sv:455.11-569.18" *)
  wire [1:0] \$multdiv_operator_o$47 ;
  (* src = "rtl/cve2/cve2_decoder.sv:452.9-570.12" *)
  wire [1:0] \$multdiv_operator_o$52 ;
  (* src = "rtl/cve2/cve2_decoder.sv:455.11-569.18" *)
  wire [1:0] \$multdiv_signed_mode_o$48 ;
  (* src = "rtl/cve2/cve2_decoder.sv:452.9-570.12" *)
  wire [1:0] \$multdiv_signed_mode_o$53 ;
  wire \$procmux$3409_CMP ;
  wire \$procmux$3442_CMP ;
  wire \$procmux$3527_CMP ;
  wire \$procmux$3595_CMP ;
  wire \$procmux$3596_CMP ;
  wire \$procmux$3597_CMP ;
  wire \$procmux$3598_CMP ;
  wire \$procmux$3599_CMP ;
  wire \$procmux$3600_CMP ;
  wire \$procmux$3601_CMP ;
  wire \$procmux$3602_CMP ;
  wire \$procmux$3603_CMP ;
  wire \$procmux$3604_CMP ;
  wire \$procmux$3605_CMP ;
  wire \$procmux$3606_CMP ;
  wire \$procmux$3607_CMP ;
  wire \$procmux$3608_CMP ;
  wire \$procmux$3609_CMP ;
  wire \$procmux$3610_CMP ;
  wire \$procmux$3611_CMP ;
  wire \$procmux$3612_CMP ;
  wire \$procmux$3651_CMP ;
  wire \$procmux$3653_CMP ;
  wire \$procmux$3696_CMP ;
  wire \$procmux$3697_CMP ;
  wire \$procmux$3698_CMP ;
  wire \$procmux$3699_CMP ;
  wire \$procmux$3700_CMP ;
  wire \$procmux$3715_CMP ;
  wire \$procmux$3741_CMP ;
  wire \$procmux$3818_CMP ;
  wire \$procmux$3877_CMP ;
  wire \$procmux$3963_CMP ;
  wire \$procmux$3964_CMP ;
  wire \$procmux$3983_CMP ;
  wire \$procmux$4042_CMP ;
  wire \$procmux$4043_CMP ;
  wire \$procmux$4044_CMP ;
  wire \$procmux$4049_CMP ;
  wire \$procmux$4090_Y ;
  wire \$procmux$4165_Y ;
  wire \$procmux$4179_Y ;
  wire \$procmux$4240_CMP ;
  wire [9:0] \$procmux$4290_CMP ;
  wire \$procmux$4290_CTRL ;
  wire \$procmux$4295_CMP ;
  wire \$procmux$4302_CMP ;
  wire \$procmux$4303_CMP ;
  wire \$procmux$4304_CMP ;
  wire \$procmux$4305_CMP ;
  wire \$procmux$4316_CMP ;
  wire \$procmux$4318_CMP ;
  wire \$procmux$4320_CMP ;
  wire \$procmux$4430_CMP ;
  wire \$procmux$4432_CMP ;
  wire [1:0] \$procmux$4509_CMP ;
  wire \$procmux$4509_CTRL ;
  (* unused_bits = "1 2" *)
  wire [5:0] \$procmux$4584_CMP ;
  wire \$procmux$4600_CMP ;
  wire \$procmux$4613_CMP ;
  wire \$procmux$4686_CTRL ;
  wire \$procmux$4703_CMP ;
  wire \$procmux$4749_CMP ;
  wire \$procmux$4925_Y ;
  wire \$procmux$4933_CMP ;
  wire \$procmux$4934_CMP ;
  (* src = "rtl/cve2/cve2_decoder.sv:70.32" *)
  output alu_multicycle_o;
  wire alu_multicycle_o;
  (* src = "rtl/cve2/cve2_decoder.sv:66.32" *)
  output [1:0] alu_op_a_mux_sel_o;
  wire [1:0] alu_op_a_mux_sel_o;
  (* src = "rtl/cve2/cve2_decoder.sv:68.32" *)
  output alu_op_b_mux_sel_o;
  wire alu_op_b_mux_sel_o;
  (* src = "rtl/cve2/cve2_decoder.sv:65.32" *)
  output [6:0] alu_operator_o;
  wire [6:0] alu_operator_o;
  (* src = "rtl/cve2/cve2_decoder.sv:95.32" *)
  output branch_in_dec_o;
  wire branch_in_dec_o;
  (* src = "rtl/cve2/cve2_decoder.sv:21.32" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_decoder.sv:82.32" *)
  output csr_access_o;
  wire csr_access_o;
  (* src = "rtl/cve2/cve2_decoder.sv:117.16" *)
  wire [1:0] csr_op;
  (* src = "rtl/cve2/cve2_decoder.sv:83.32" *)
  output [1:0] csr_op_o;
  wire [1:0] csr_op_o;
  (* src = "rtl/cve2/cve2_decoder.sv:86.32" *)
  output data_req_o;
  wire data_req_o;
  (* src = "rtl/cve2/cve2_decoder.sv:90.32" *)
  output data_sign_extension_o;
  wire data_sign_extension_o;
  (* src = "rtl/cve2/cve2_decoder.sv:88.32" *)
  output [1:0] data_type_o;
  wire [1:0] data_type_o;
  (* src = "rtl/cve2/cve2_decoder.sv:87.32" *)
  output data_we_o;
  wire data_we_o;
  (* src = "rtl/cve2/cve2_decoder.sv:74.32" *)
  output div_en_o;
  wire div_en_o;
  (* src = "rtl/cve2/cve2_decoder.sv:76.32" *)
  output div_sel_o;
  wire div_sel_o;
  (* src = "rtl/cve2/cve2_decoder.sv:29.32" *)
  output dret_insn_o;
  wire dret_insn_o;
  (* src = "rtl/cve2/cve2_decoder.sv:26.32" *)
  output ebrk_insn_o;
  wire ebrk_insn_o;
  (* src = "rtl/cve2/cve2_decoder.sv:30.32" *)
  output ecall_insn_o;
  wire ecall_insn_o;
  (* src = "rtl/cve2/cve2_decoder.sv:40.32" *)
  input illegal_c_insn_i;
  wire illegal_c_insn_i;
  (* src = "rtl/cve2/cve2_decoder.sv:25.32" *)
  output illegal_insn_o;
  wire illegal_insn_o;
  (* src = "rtl/cve2/cve2_decoder.sv:43.33" *)
  output imm_a_mux_sel_o;
  wire imm_a_mux_sel_o;
  (* src = "rtl/cve2/cve2_decoder.sv:44.33" *)
  output [2:0] imm_b_mux_sel_o;
  wire [2:0] imm_b_mux_sel_o;
  (* src = "rtl/cve2/cve2_decoder.sv:47.33" *)
  output [31:0] imm_b_type_o;
  wire [31:0] imm_b_type_o;
  (* src = "rtl/cve2/cve2_decoder.sv:45.33" *)
  output [31:0] imm_i_type_o;
  wire [31:0] imm_i_type_o;
  (* src = "rtl/cve2/cve2_decoder.sv:49.33" *)
  output [31:0] imm_j_type_o;
  wire [31:0] imm_j_type_o;
  (* src = "rtl/cve2/cve2_decoder.sv:46.33" *)
  output [31:0] imm_s_type_o;
  wire [31:0] imm_s_type_o;
  (* src = "rtl/cve2/cve2_decoder.sv:48.33" *)
  output [31:0] imm_u_type_o;
  wire [31:0] imm_u_type_o;
  (* src = "rtl/cve2/cve2_decoder.sv:35.32" *)
  input instr_first_cycle_i;
  wire instr_first_cycle_i;
  (* src = "rtl/cve2/cve2_decoder.sv:37.32" *)
  input [31:0] instr_rdata_alu_i;
  wire [31:0] instr_rdata_alu_i;
  (* src = "rtl/cve2/cve2_decoder.sv:36.32" *)
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  (* src = "rtl/cve2/cve2_decoder.sv:94.32" *)
  output jump_in_dec_o;
  wire jump_in_dec_o;
  (* src = "rtl/cve2/cve2_decoder.sv:32.32" *)
  output jump_set_o;
  wire jump_set_o;
  (* src = "rtl/cve2/cve2_decoder.sv:61.32" *)
  output mac_en_o;
  wire mac_en_o;
  (* src = "rtl/cve2/cve2_decoder.sv:27.32" *)
  output mret_insn_o;
  wire mret_insn_o;
  (* src = "rtl/cve2/cve2_decoder.sv:73.32" *)
  output mult_en_o;
  wire mult_en_o;
  (* src = "rtl/cve2/cve2_decoder.sv:75.32" *)
  output mult_sel_o;
  wire mult_sel_o;
  (* src = "rtl/cve2/cve2_decoder.sv:78.32" *)
  output [1:0] multdiv_operator_o;
  wire [1:0] multdiv_operator_o;
  (* src = "rtl/cve2/cve2_decoder.sv:79.32" *)
  output [1:0] multdiv_signed_mode_o;
  wire [1:0] multdiv_signed_mode_o;
  (* src = "rtl/cve2/cve2_decoder.sv:55.32" *)
  output [4:0] rf_raddr_a_o;
  wire [4:0] rf_raddr_a_o;
  (* src = "rtl/cve2/cve2_decoder.sv:56.32" *)
  output [4:0] rf_raddr_b_o;
  wire [4:0] rf_raddr_b_o;
  (* src = "rtl/cve2/cve2_decoder.sv:58.32" *)
  output rf_ren_a_o;
  wire rf_ren_a_o;
  (* src = "rtl/cve2/cve2_decoder.sv:59.32" *)
  output rf_ren_b_o;
  wire rf_ren_b_o;
  (* src = "rtl/cve2/cve2_decoder.sv:57.32" *)
  output [4:0] rf_waddr_o;
  wire [4:0] rf_waddr_o;
  (* src = "rtl/cve2/cve2_decoder.sv:53.32" *)
  output rf_wdata_sel_o;
  wire rf_wdata_sel_o;
  (* src = "rtl/cve2/cve2_decoder.sv:54.32" *)
  output rf_we_o;
  wire rf_we_o;
  (* src = "rtl/cve2/cve2_decoder.sv:22.32" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_decoder.sv:31.32" *)
  output wfi_insn_o;
  wire wfi_insn_o;
  (* src = "rtl/cve2/cve2_decoder.sv:50.33" *)
  output [31:0] zimm_rs1_type_o;
  wire [31:0] zimm_rs1_type_o;
  assign \$136y  = ! (* src = "rtl/cve2/cve2_decoder.sv:924.19-924.48" *) instr_rdata_alu_i[31:27];
  assign \$137y  = instr_rdata_alu_i[31:27] == (* src = "rtl/cve2/cve2_decoder.sv:926.28-926.57" *) 4'h8;
  assign \$15y  = | (* src = "rtl/cve2/cve2_decoder.sv:266.13-266.33" *) instr_rdata_i[14:12];
  assign \$152y  = ! (* src = "rtl/cve2/cve2_decoder.sv:1154.13-1154.39" *) instr_rdata_alu_i[14:12];
  assign \$25y  = ! (* src = "rtl/cve2/cve2_decoder.sv:363.42-363.63" *) instr_rdata_i[26:25];
  assign \$26y  = ~ (* src = "rtl/cve2/cve2_decoder.sv:363.41-363.78" *) \$25y ;
  assign \$4y  = csr_op == (* src = "rtl/cve2/cve2_decoder.sv:193.10-193.30" *) 2'h2;
  assign \$43y  = { instr_rdata_i[26], instr_rdata_i[13:12] } == (* src = "rtl/cve2/cve2_decoder.sv:452.13-452.55" *) 3'h5;
  assign \$5y  = csr_op == (* src = "rtl/cve2/cve2_decoder.sv:193.34-193.56" *) 2'h3;
  assign \$59y  = ! (* src = "rtl/cve2/cve2_decoder.sv:602.13-602.35" *) instr_rdata_i[14:12];
  assign \$6y  = \$4y  || (* src = "rtl/cve2/cve2_decoder.sv:193.10-193.56" *) \$5y ;
  assign \$66y  = | (* src = "rtl/cve2/cve2_decoder.sv:627.15-627.32" *) instr_rdata_i[19:15];
  assign \$67y  = | (* src = "rtl/cve2/cve2_decoder.sv:627.36-627.52" *) instr_rdata_i[11:7];
  assign \$68y  = \$66y  || (* src = "rtl/cve2/cve2_decoder.sv:627.15-627.52" *) \$67y ;
  assign \$7y  = ! (* src = "rtl/cve2/cve2_decoder.sv:194.9-194.24" *) instr_rdata_i[19:15];
  assign \$8y  = \$6y  && (* src = "rtl/cve2/cve2_decoder.sv:193.9-194.24" *) \$7y ;
  assign \$auto$opt_reduce.cc:137:opt_pmux$13337  = | { \$procmux$4090_Y , \$ecall_insn_o$64 , \$dret_insn_o$63 , \$mret_insn_o$62 , \$ebrk_insn_o$61  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13339  = | { \$jump_in_dec_o$58 , \$59y  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13341  = | { \$procmux$4305_CMP , \$procmux$4303_CMP , \$procmux$4302_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13343  = | { \$procmux$4316_CMP , \$procmux$4302_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13345  = | { \$procmux$4318_CMP , \$procmux$4303_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13347  = | { \$procmux$4320_CMP , \$procmux$4305_CMP , \$procmux$4304_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13349  = | { \$procmux$4613_CMP , \$procmux$4044_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13351  = | { \$procmux$4613_CMP , \$procmux$4044_CMP , \$procmux$4043_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13353  = | { \$imm_b_mux_sel_o$148 [2], \$152y  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13355  = | { \$procmux$3964_CMP , \$procmux$3715_CMP , \$procmux$3653_CMP , \$procmux$3527_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13357  = | { \$procmux$3963_CMP , \$procmux$3877_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13363  = | { \$procmux$3983_CMP , \$procmux$3964_CMP , \$procmux$3963_CMP , \$procmux$3877_CMP , \$procmux$3818_CMP , \$procmux$3715_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13365  = | { \$procmux$3612_CMP , \$procmux$3602_CMP , \$procmux$3601_CMP , \$procmux$3600_CMP , \$procmux$3599_CMP , \$procmux$3598_CMP , \$procmux$3597_CMP , \$procmux$3596_CMP , \$procmux$3595_CMP  };
  assign rf_ren_b_o = | { \$procmux$4295_CMP , \$branch_in_dec_o$109 , \$data_we_o$105  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13369  = | { \$procmux$4703_CMP , \$procmux$4600_CMP , \$procmux$4432_CMP , \$procmux$4295_CMP , \$branch_in_dec_o$109 , \$data_we_o$105  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13371  = | { \$procmux$3983_CMP , \$procmux$3963_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13373  = | { \$procmux$4934_CMP , \$procmux$4933_CMP , \$procmux$4432_CMP , \$procmux$4295_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13375  = | { \$procmux$4934_CMP , \$procmux$4933_CMP , \$procmux$4749_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13377  = | { \$procmux$4044_CMP , \$procmux$4043_CMP , \$procmux$4042_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13407  = | { \$procmux$3818_CMP , \$procmux$3741_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13361  = | { \$procmux$4600_CMP , \$data_we_o$105  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13359  = | { \$procmux$4749_CMP , \$procmux$4703_CMP  };
  assign \$procmux$3409_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1154.9-1170.12|rtl/cve2/cve2_decoder.sv:696.5-1174.12" *) 7'h73;
  assign \$alu_op_a_mux_sel_o$156 [1] = \$152y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1154.41-1158.12|rtl/cve2/cve2_decoder.sv:1154.9-1170.12" *) 1'h0 : instr_rdata_alu_i[14];
  assign \$procmux$3442_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1135.9-1150.16|rtl/cve2/cve2_decoder.sv:696.5-1174.12" *) 4'hf;
  function [1:0] \$procmux$3446 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:1142.19-1148.14|rtl/cve2/cve2_decoder.sv:1135.9-1150.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$3446  = b[1:0];
      2'b1?:
        \$procmux$3446  = b[3:2];
      default:
        \$procmux$3446  = a;
    endcase
  endfunction
  assign \$alu_op_a_mux_sel_o$150  = \$procmux$3446 (2'h3, 4'h2, { \$152y , \$imm_b_mux_sel_o$148 [2] });
  assign \$imm_b_mux_sel_o$148 [2] = instr_rdata_alu_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1142.19-1148.14|rtl/cve2/cve2_decoder.sv:1135.9-1150.16" *) 1'h1;
  assign \$alu_operator_o$149 [5] = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1142.19-1148.14|rtl/cve2/cve2_decoder.sv:1135.9-1150.16" *) \$auto$opt_reduce.cc:137:opt_pmux$13353 ;
  assign \$procmux$3527_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:936.18-1128.10|rtl/cve2/cve2_decoder.sv:696.5-1174.12" *) 6'h33;
  function [5:0] \$procmux$3594 ;
    input [5:0] a;
    input [59:0] b;
    input [9:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:1120.36-1123.16|rtl/cve2/cve2_decoder.sv:983.11-1126.18" *)
    (* parallel_case *)
    casez (s)
      10'b?????????1:
        \$procmux$3594  = b[5:0];
      10'b????????1?:
        \$procmux$3594  = b[11:6];
      10'b???????1??:
        \$procmux$3594  = b[17:12];
      10'b??????1???:
        \$procmux$3594  = b[23:18];
      10'b?????1????:
        \$procmux$3594  = b[29:24];
      10'b????1?????:
        \$procmux$3594  = b[35:30];
      10'b???1??????:
        \$procmux$3594  = b[41:36];
      10'b??1???????:
        \$procmux$3594  = b[47:42];
      10'b?1????????:
        \$procmux$3594  = b[53:48];
      10'b1?????????:
        \$procmux$3594  = b[59:54];
      default:
        \$procmux$3594  = a;
    endcase
  endfunction
  assign { \$alu_operator_o$142 [6:5], \$alu_operator_o$142 [3:0] } = \$procmux$3594 (6'h1c, 60'h05b08310a248840, { \$procmux$3611_CMP , \$procmux$3610_CMP , \$procmux$3609_CMP , \$procmux$3608_CMP , \$procmux$3607_CMP , \$procmux$3606_CMP , \$procmux$3605_CMP , \$procmux$3604_CMP , \$procmux$3603_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13365  });
  assign \$procmux$3595_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1120.36-1123.16|rtl/cve2/cve2_decoder.sv:983.11-1126.18" *) 4'hf;
  assign \$procmux$3596_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1116.36-1119.16|rtl/cve2/cve2_decoder.sv:983.11-1126.18" *) 4'he;
  assign \$procmux$3597_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1112.36-1115.16|rtl/cve2/cve2_decoder.sv:983.11-1126.18" *) 4'hd;
  assign \$procmux$3598_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1108.36-1111.16|rtl/cve2/cve2_decoder.sv:983.11-1126.18" *) 4'hc;
  assign \$procmux$3599_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1104.36-1107.16|rtl/cve2/cve2_decoder.sv:983.11-1126.18" *) 4'hb;
  assign \$procmux$3600_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1100.36-1103.16|rtl/cve2/cve2_decoder.sv:983.11-1126.18" *) 4'ha;
  assign \$procmux$3601_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1096.36-1099.16|rtl/cve2/cve2_decoder.sv:983.11-1126.18" *) 4'h9;
  assign \$procmux$3602_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1092.36-1095.16|rtl/cve2/cve2_decoder.sv:983.11-1126.18" *) 4'h8;
  assign \$procmux$3603_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:997.36-997.61|rtl/cve2/cve2_decoder.sv:983.11-1126.18" *) 10'h200;
  assign \$procmux$3604_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:994.36-994.61|rtl/cve2/cve2_decoder.sv:983.11-1126.18" *) 9'h105;
  assign \$procmux$3605_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:993.36-993.61|rtl/cve2/cve2_decoder.sv:983.11-1126.18" *) 3'h5;
  assign \$procmux$3606_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:992.36-992.61|rtl/cve2/cve2_decoder.sv:983.11-1126.18" *) 1'h1;
  assign \$procmux$3607_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:991.36-991.61|rtl/cve2/cve2_decoder.sv:983.11-1126.18" *) 3'h7;
  assign \$procmux$3608_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:990.36-990.60|rtl/cve2/cve2_decoder.sv:983.11-1126.18" *) 3'h6;
  assign \$procmux$3609_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:989.36-989.61|rtl/cve2/cve2_decoder.sv:983.11-1126.18" *) 3'h4;
  assign \$procmux$3610_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:987.36-987.61|rtl/cve2/cve2_decoder.sv:983.11-1126.18" *) 2'h2;
  assign \$procmux$3611_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:986.36-986.61|rtl/cve2/cve2_decoder.sv:983.11-1126.18" *) 9'h100;
  assign \$procmux$3612_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:985.36-985.61|rtl/cve2/cve2_decoder.sv:983.11-1126.18" *) { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] };
  assign { \$alu_operator_o$145 [6:5], \$alu_operator_o$145 [3:0] } = instr_rdata_alu_i[26] ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:941.11-981.14|rtl/cve2/cve2_decoder.sv:940.9-1127.12" *) 6'h1c : { \$alu_operator_o$142 [6:5], \$alu_operator_o$142 [3:0] };
  assign \$procmux$3651_CMP  = instr_rdata_alu_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:889.13-929.16|rtl/cve2/cve2_decoder.sv:813.9-933.16" *) 3'h5;
  assign \$procmux$3653_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:808.22-934.10|rtl/cve2/cve2_decoder.sv:696.5-1174.12" *) 5'h13;
  assign \$alu_operator_o$138 [5] = ~ (* src = "rtl/cve2/cve2_decoder.sv:927.17-927.42|rtl/cve2/cve2_decoder.sv:926.24-928.18" *) \$137y ;
  assign { \$alu_operator_o$139 [5], \$alu_operator_o$139 [0] } = \$136y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:925.17-925.42|rtl/cve2/cve2_decoder.sv:924.15-928.18" *) 2'h1 : { \$alu_operator_o$138 [5], 1'h0 };
  function [4:0] \$procmux$3693 ;
    input [4:0] a;
    input [34:0] b;
    input [6:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:889.13-929.16|rtl/cve2/cve2_decoder.sv:813.9-933.16" *)
    (* parallel_case *)
    casez (s)
      7'b??????1:
        \$procmux$3693  = b[4:0];
      7'b?????1?:
        \$procmux$3693  = b[9:5];
      7'b????1??:
        \$procmux$3693  = b[14:10];
      7'b???1???:
        \$procmux$3693  = b[19:15];
      7'b??1????:
        \$procmux$3693  = b[24:20];
      7'b?1?????:
        \$procmux$3693  = b[29:25];
      7'b1??????:
        \$procmux$3693  = b[34:30];
      default:
        \$procmux$3693  = a;
    endcase
  endfunction
  assign { \$alu_operator_o$141 [5], \$alu_operator_o$141 [3:0] } = \$procmux$3693 (5'h00, { 30'h37c10c8a, \$alu_operator_o$139 [5], 1'h1, \$alu_operator_o$139 [5], 1'h0, \$alu_operator_o$139 [0] }, { \$procmux$3700_CMP , \$procmux$3699_CMP , \$procmux$3698_CMP , \$procmux$3697_CMP , \$procmux$3696_CMP , \$imm_b_mux_sel_o$148 [2], \$procmux$3651_CMP  });
  assign \$procmux$3696_CMP  = instr_rdata_alu_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:819.19-819.44|rtl/cve2/cve2_decoder.sv:813.9-933.16" *) 3'h7;
  assign \$procmux$3697_CMP  = instr_rdata_alu_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:818.19-818.43|rtl/cve2/cve2_decoder.sv:813.9-933.16" *) 3'h6;
  assign \$procmux$3698_CMP  = instr_rdata_alu_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:817.19-817.44|rtl/cve2/cve2_decoder.sv:813.9-933.16" *) 3'h4;
  assign \$procmux$3699_CMP  = instr_rdata_alu_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:816.19-816.45|rtl/cve2/cve2_decoder.sv:813.9-933.16" *) 2'h3;
  assign \$procmux$3700_CMP  = instr_rdata_alu_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:815.19-815.44|rtl/cve2/cve2_decoder.sv:813.9-933.16" *) 2'h2;
  assign \$alu_op_b_mux_sel_o$134  = ~ (* src = "rtl/cve2/cve2_decoder.sv:773.29-777.12|rtl/cve2/cve2_decoder.sv:773.9-777.12" *) instr_rdata_alu_i[14];
  assign \$procmux$3715_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:768.21-778.10|rtl/cve2/cve2_decoder.sv:696.5-1174.12" *) 6'h23;
  assign \$alu_op_a_mux_sel_o$125 [1] = ~ (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:750.34-754.12|rtl/cve2/cve2_decoder.sv:750.9-761.12" *) instr_first_cycle_i;
  assign \$procmux$3741_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:736.22-762.10|rtl/cve2/cve2_decoder.sv:696.5-1174.12" *) 7'h63;
  assign \$alu_operator_o$129 [5:0] = instr_first_cycle_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:750.34-754.12|rtl/cve2/cve2_decoder.sv:750.9-761.12" *) { \$alu_operator_o$127 [5:4], 1'h1, \$alu_operator_o$127 [2:0] } : 6'h00;
  function [4:0] \$procmux$3796 ;
    input [4:0] a;
    input [29:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:744.20-744.45|rtl/cve2/cve2_decoder.sv:738.9-746.16" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$3796  = b[4:0];
      6'b????1?:
        \$procmux$3796  = b[9:5];
      6'b???1??:
        \$procmux$3796  = b[14:10];
      6'b??1???:
        \$procmux$3796  = b[19:15];
      6'b?1????:
        \$procmux$3796  = b[24:20];
      6'b1?????:
        \$procmux$3796  = b[29:25];
      default:
        \$procmux$3796  = a;
    endcase
  endfunction
  assign { \$alu_operator_o$127 [5:4], \$alu_operator_o$127 [2:0] } = \$procmux$3796 (5'h14, 30'h1ae4ad4c, { \$152y , \$imm_b_mux_sel_o$148 [2], \$procmux$3698_CMP , \$procmux$3651_CMP , \$procmux$3697_CMP , \$procmux$3696_CMP  });
  assign \$procmux$3818_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:721.9-733.12|rtl/cve2/cve2_decoder.sv:696.5-1174.12" *) 7'h67;
  assign \$procmux$3877_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:704.9-716.12|rtl/cve2/cve2_decoder.sv:696.5-1174.12" *) 7'h6f;
  function [0:0] \$procmux$3938 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:1154.9-1170.12|rtl/cve2/cve2_decoder.sv:696.5-1174.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$3938  = b[0:0];
      3'b?1?:
        \$procmux$3938  = b[1:1];
      3'b1??:
        \$procmux$3938  = b[2:2];
      default:
        \$procmux$3938  = a;
    endcase
  endfunction
  assign alu_op_b_mux_sel_o = \$procmux$3938 (1'h1, { \$alu_op_a_mux_sel_o$125 [1], \$alu_op_b_mux_sel_o$134 , 1'h0 }, { \$procmux$3741_CMP , \$procmux$3715_CMP , \$procmux$3527_CMP  });
  function [1:0] \$procmux$3955 ;
    input [1:0] a;
    input [9:0] b;
    input [4:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:1154.9-1170.12|rtl/cve2/cve2_decoder.sv:696.5-1174.12" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        \$procmux$3955  = b[1:0];
      5'b???1?:
        \$procmux$3955  = b[3:2];
      5'b??1??:
        \$procmux$3955  = b[5:4];
      5'b?1???:
        \$procmux$3955  = b[7:6];
      5'b1????:
        \$procmux$3955  = b[9:8];
      default:
        \$procmux$3955  = a;
    endcase
  endfunction
  assign alu_op_a_mux_sel_o = \$procmux$3955 (2'h3, { \$alu_op_a_mux_sel_o$125 [1], 5'h08, \$alu_op_a_mux_sel_o$150 , \$alu_op_a_mux_sel_o$156 [1], \$alu_op_a_mux_sel_o$156 [1] }, { \$auto$opt_reduce.cc:137:opt_pmux$13407 , \$auto$opt_reduce.cc:137:opt_pmux$13357 , \$auto$opt_reduce.cc:137:opt_pmux$13355 , \$procmux$3442_CMP , \$procmux$3409_CMP  });
  assign \$procmux$3963_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:801.21-806.10|rtl/cve2/cve2_decoder.sv:696.5-1174.12" *) 5'h17;
  assign \$procmux$3964_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:780.20-787.10|rtl/cve2/cve2_decoder.sv:696.5-1174.12" *) 2'h3;
  function [6:0] \$procmux$3976 ;
    input [6:0] a;
    input [34:0] b;
    input [4:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:1135.9-1150.16|rtl/cve2/cve2_decoder.sv:696.5-1174.12" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        \$procmux$3976  = b[6:0];
      5'b???1?:
        \$procmux$3976  = b[13:7];
      5'b??1??:
        \$procmux$3976  = b[20:14];
      5'b?1???:
        \$procmux$3976  = b[27:21];
      5'b1????:
        \$procmux$3976  = b[34:28];
      default:
        \$procmux$3976  = a;
    endcase
  endfunction
  assign alu_operator_o = \$procmux$3976 (7'h2c, { 1'h0, \$alu_operator_o$129 [5:0], 8'h00, \$alu_operator_o$141 [5], 1'h0, \$alu_operator_o$141 [3:0], \$alu_operator_o$145 [6:5], 1'h0, \$alu_operator_o$145 [3:0], 1'h0, \$alu_operator_o$149 [5], 1'h0, \$alu_operator_o$149 [5], \$alu_operator_o$149 [5], 2'h0 }, { \$procmux$3741_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13363 , \$procmux$3653_CMP , \$procmux$3527_CMP , \$procmux$3442_CMP  });
  assign \$procmux$3983_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:793.19-799.10|rtl/cve2/cve2_decoder.sv:696.5-1174.12" *) 6'h37;
  function [2:0] \$procmux$3995 ;
    input [2:0] a;
    input [17:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:1154.9-1170.12|rtl/cve2/cve2_decoder.sv:696.5-1174.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$3995  = b[2:0];
      6'b????1?:
        \$procmux$3995  = b[5:3];
      6'b???1??:
        \$procmux$3995  = b[8:6];
      6'b??1???:
        \$procmux$3995  = b[11:9];
      6'b?1????:
        \$procmux$3995  = b[14:12];
      6'b1?????:
        \$procmux$3995  = b[17:15];
      default:
        \$procmux$3995  = a;
    endcase
  endfunction
  assign imm_b_mux_sel_o = \$procmux$3995 (3'h0, { 2'h2, \$alu_op_a_mux_sel_o$125 [1], \$alu_op_a_mux_sel_o$125 [1], 1'h0, \$alu_op_a_mux_sel_o$125 [1], 1'h0, \$alu_op_a_mux_sel_o$125 [1], 3'h0, \$alu_op_b_mux_sel_o$134 , 3'h3, \$imm_b_mux_sel_o$148 [2], 1'h0, \$imm_b_mux_sel_o$148 [2] }, { \$procmux$3877_CMP , \$procmux$3818_CMP , \$procmux$3741_CMP , \$procmux$3715_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13371 , \$procmux$3442_CMP  });
  assign imm_a_mux_sel_o = \$procmux$3409_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1154.9-1170.12|rtl/cve2/cve2_decoder.sv:696.5-1174.12" *) \$152y  : 1'h1;
  assign branch_in_dec_o = illegal_insn_o ? (* src = "rtl/cve2/cve2_decoder.sv:666.23-674.8|rtl/cve2/cve2_decoder.sv:666.5-674.8" *) 1'h0 : \$branch_in_dec_o$109 ;
  assign jump_in_dec_o = illegal_insn_o ? (* src = "rtl/cve2/cve2_decoder.sv:666.23-674.8|rtl/cve2/cve2_decoder.sv:666.5-674.8" *) 1'h0 : \$jump_in_dec_o$108 ;
  assign data_we_o = illegal_insn_o ? (* src = "rtl/cve2/cve2_decoder.sv:666.23-674.8|rtl/cve2/cve2_decoder.sv:666.5-674.8" *) 1'h0 : \$data_we_o$105 ;
  assign data_req_o = illegal_insn_o ? (* src = "rtl/cve2/cve2_decoder.sv:666.23-674.8|rtl/cve2/cve2_decoder.sv:666.5-674.8" *) 1'h0 : \$auto$opt_reduce.cc:137:opt_pmux$13361 ;
  assign csr_access_o = illegal_insn_o ? (* src = "rtl/cve2/cve2_decoder.sv:666.23-674.8|rtl/cve2/cve2_decoder.sv:666.5-674.8" *) 1'h0 : rf_wdata_sel_o;
  assign jump_set_o = illegal_insn_o ? (* src = "rtl/cve2/cve2_decoder.sv:666.23-674.8|rtl/cve2/cve2_decoder.sv:666.5-674.8" *) 1'h0 : \$jump_set_o$95 ;
  assign rf_we_o = illegal_insn_o ? (* src = "rtl/cve2/cve2_decoder.sv:666.23-674.8|rtl/cve2/cve2_decoder.sv:666.5-674.8" *) 1'h0 : \$procmux$4925_Y ;
  assign illegal_insn_o = \$illegal_insn$86  | (* src = "rtl/cve2/cve2_decoder.sv:658.7-658.27|rtl/cve2/cve2_decoder.sv:657.5-659.8" *) illegal_c_insn_i;
  function [1:0] \$procmux$4041 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:643.22-643.44|rtl/cve2/cve2_decoder.sv:640.11-645.18" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$4041  = b[1:0];
      3'b?1?:
        \$procmux$4041  = b[3:2];
      3'b1??:
        \$procmux$4041  = b[5:4];
      default:
        \$procmux$4041  = a;
    endcase
  endfunction
  assign \$csr_op$73  = \$procmux$4041 (2'h0, 6'h1b, { \$procmux$4044_CMP , \$procmux$4043_CMP , \$procmux$4042_CMP  });
  assign \$procmux$4042_CMP  = instr_rdata_i[13:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:643.22-643.44|rtl/cve2/cve2_decoder.sv:640.11-645.18" *) 2'h3;
  assign \$procmux$4043_CMP  = instr_rdata_i[13:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:642.22-642.42|rtl/cve2/cve2_decoder.sv:640.11-645.18" *) 2'h2;
  assign \$procmux$4044_CMP  = instr_rdata_i[13:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:641.22-641.44|rtl/cve2/cve2_decoder.sv:640.11-645.18" *) 1'h1;
  assign \$procmux$4049_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) 7'h73;
  assign \$csr_illegal$72  = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:643.22-643.44|rtl/cve2/cve2_decoder.sv:640.11-645.18" *) \$auto$opt_reduce.cc:137:opt_pmux$13377 ;
  assign \$21y  = ~ (* src = "rtl/cve2/cve2_decoder.sv:637.13-637.39|rtl/cve2/cve2_decoder.sv:636.11-638.14" *) instr_rdata_i[14];
  assign \$illegal_insn$74  = \$59y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:602.37-630.12|rtl/cve2/cve2_decoder.sv:602.9-648.12" *) \$illegal_insn$69  : \$csr_illegal$72 ;
  assign \$illegal_insn$69  = \$illegal_insn$60  | (* src = "rtl/cve2/cve2_decoder.sv:628.13-628.33|rtl/cve2/cve2_decoder.sv:627.11-629.14" *) \$68y ;
  assign \$procmux$4090_Y  = instr_rdata_i[31:20] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:620.15-620.33|rtl/cve2/cve2_decoder.sv:604.11-624.18" *) 9'h105;
  assign \$ecall_insn_o$64  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:607.15-607.35|rtl/cve2/cve2_decoder.sv:604.11-624.18" *) instr_rdata_i[31:20];
  assign \$dret_insn_o$63  = instr_rdata_i[31:20] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:617.15-617.34|rtl/cve2/cve2_decoder.sv:604.11-624.18" *) 11'h7b2;
  assign \$mret_insn_o$62  = instr_rdata_i[31:20] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:614.15-614.34|rtl/cve2/cve2_decoder.sv:604.11-624.18" *) 10'h302;
  assign \$ebrk_insn_o$61  = instr_rdata_i[31:20] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:611.15-611.34|rtl/cve2/cve2_decoder.sv:604.11-624.18" *) 1'h1;
  assign \$illegal_insn$60  = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:620.15-620.33|rtl/cve2/cve2_decoder.sv:604.11-624.18" *) \$auto$opt_reduce.cc:137:opt_pmux$13337 ;
  assign \$procmux$4165_Y  = \$59y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:602.37-630.12|rtl/cve2/cve2_decoder.sv:602.9-648.12" *) 1'h0 : \$21y ;
  assign \$procmux$4179_Y  = \$59y  & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:602.37-630.12|rtl/cve2/cve2_decoder.sv:602.9-648.12" *) \$procmux$4090_Y ;
  assign \$ecall_insn_o$81  = \$59y  & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:602.37-630.12|rtl/cve2/cve2_decoder.sv:602.9-648.12" *) \$ecall_insn_o$64 ;
  assign \$dret_insn_o$80  = \$59y  & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:602.37-630.12|rtl/cve2/cve2_decoder.sv:602.9-648.12" *) \$dret_insn_o$63 ;
  assign \$mret_insn_o$79  = \$59y  & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:602.37-630.12|rtl/cve2/cve2_decoder.sv:602.9-648.12" *) \$mret_insn_o$62 ;
  assign \$ebrk_insn_o$78  = \$59y  & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:602.37-630.12|rtl/cve2/cve2_decoder.sv:602.9-648.12" *) \$ebrk_insn_o$61 ;
  assign \$csr_op$77  = \$59y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:602.37-630.12|rtl/cve2/cve2_decoder.sv:602.9-648.12" *) 2'h0 : \$csr_op$73 ;
  assign \$csr_access_o$85  = ~ (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:602.37-630.12|rtl/cve2/cve2_decoder.sv:602.9-648.12" *) \$59y ;
  assign \$jump_in_dec_o$58  = instr_rdata_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:583.19-594.14|rtl/cve2/cve2_decoder.sv:578.9-598.16" *) 1'h1;
  assign \$procmux$4240_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:578.9-598.16|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) 4'hf;
  assign \$jump_set_o$57  = \$jump_in_dec_o$58  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:583.19-594.14|rtl/cve2/cve2_decoder.sv:578.9-598.16" *) instr_first_cycle_i;
  assign \$illegal_insn$55  = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:583.19-594.14|rtl/cve2/cve2_decoder.sv:578.9-598.16" *) \$auto$opt_reduce.cc:137:opt_pmux$13339 ;
  assign \$illegal_insn$44  = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" *) \$procmux$4290_CTRL ;
  assign \$procmux$4290_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" *) \$procmux$4290_CMP ;
  assign \$procmux$4290_CMP [0] = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" *) { instr_rdata_i[31:25], instr_rdata_i[14:12] };
  assign \$procmux$4290_CMP [1] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" *) 9'h100;
  assign \$procmux$4290_CMP [2] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" *) 2'h2;
  assign \$procmux$4290_CMP [3] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" *) 2'h3;
  assign \$procmux$4290_CMP [4] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" *) 3'h4;
  assign \$procmux$4290_CMP [5] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" *) 3'h6;
  assign \$procmux$4290_CMP [6] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" *) 3'h7;
  assign \$procmux$4290_CMP [7] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" *) 1'h1;
  assign \$procmux$4290_CMP [8] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" *) 3'h5;
  assign \$procmux$4290_CMP [9] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" *) 9'h105;
  assign \$procmux$4295_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:448.18-571.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) 6'h33;
  function [1:0] \$procmux$4301 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:556.36-560.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$4301  = b[1:0];
      2'b1?:
        \$procmux$4301  = b[3:2];
      default:
        \$procmux$4301  = a;
    endcase
  endfunction
  assign \$multdiv_signed_mode_o$48  = \$procmux$4301 (2'h0, 4'h7, { \$procmux$4304_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13341  });
  assign \$procmux$4302_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:556.36-560.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" *) 4'he;
  assign \$procmux$4303_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:546.36-550.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" *) 4'hc;
  assign \$procmux$4304_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:536.36-540.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" *) 4'ha;
  assign \$procmux$4305_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:531.36-535.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" *) 4'h9;
  function [1:0] \$procmux$4315 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:561.36-565.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$4315  = b[1:0];
      3'b?1?:
        \$procmux$4315  = b[3:2];
      3'b1??:
        \$procmux$4315  = b[5:4];
      default:
        \$procmux$4315  = a;
    endcase
  endfunction
  assign \$multdiv_operator_o$47  = \$procmux$4315 (2'h0, 6'h1b, { \$auto$opt_reduce.cc:137:opt_pmux$13347 , \$auto$opt_reduce.cc:137:opt_pmux$13345 , \$auto$opt_reduce.cc:137:opt_pmux$13343  });
  assign \$procmux$4316_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:561.36-565.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" *) 4'hf;
  assign \$procmux$4318_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:551.36-555.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" *) 4'hd;
  assign \$procmux$4320_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:541.36-545.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" *) 4'hb;
  assign \$alu_operator_o$46  = \$mac_en_o$45  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:469.36-478.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" *) 7'h41 : alu_operator_o;
  assign \$mac_en_o$45  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:469.36-478.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" *) 10'h200;
  assign \$illegal_insn$49  = \$illegal_insn$44  | (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:453.11-453.61|rtl/cve2/cve2_decoder.sv:452.9-570.12" *) \$43y ;
  assign \$multdiv_signed_mode_o$53  = \$43y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:453.11-453.61|rtl/cve2/cve2_decoder.sv:452.9-570.12" *) 2'h0 : \$multdiv_signed_mode_o$48 ;
  assign \$multdiv_operator_o$52  = \$43y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:453.11-453.61|rtl/cve2/cve2_decoder.sv:452.9-570.12" *) 2'h0 : \$multdiv_operator_o$47 ;
  assign \$alu_operator_o$51  = \$43y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:453.11-453.61|rtl/cve2/cve2_decoder.sv:452.9-570.12" *) alu_operator_o : \$alu_operator_o$46 ;
  assign \$mac_en_o$50  = \$43y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:453.11-453.61|rtl/cve2/cve2_decoder.sv:452.9-570.12" *) 1'h0 : \$mac_en_o$45 ;
  assign \$procmux$4430_CMP  = instr_rdata_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:400.13-441.16|rtl/cve2/cve2_decoder.sv:353.9-445.16" *) 3'h5;
  assign \$procmux$4432_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:349.22-446.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) 5'h13;
  assign \$illegal_insn$40  = \$procmux$4509_CTRL  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:432.19-436.22|rtl/cve2/cve2_decoder.sv:403.15-440.22" *) \$26y  : 1'h1;
  assign \$procmux$4509_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:405.28-405.81|rtl/cve2/cve2_decoder.sv:403.15-440.22" *) \$procmux$4509_CMP ;
  assign \$procmux$4509_CMP [0] = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:405.28-405.81|rtl/cve2/cve2_decoder.sv:403.15-440.22" *) instr_rdata_i[31:27];
  assign \$procmux$4509_CMP [1] = instr_rdata_i[31:27] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:405.28-405.81|rtl/cve2/cve2_decoder.sv:403.15-440.22" *) 4'h8;
  assign \$illegal_insn$41  = \$illegal_insn$40  | (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:401.15-401.65|rtl/cve2/cve2_decoder.sv:400.13-441.16" *) instr_rdata_i[26];
  assign \$illegal_insn$30  = \$procmux$4509_CMP [0] ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:378.17-393.24|rtl/cve2/cve2_decoder.sv:362.13-396.20" *) \$26y  : 1'h1;
  function [0:0] \$procmux$4580 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:400.13-441.16|rtl/cve2/cve2_decoder.sv:353.9-445.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$4580  = b[0:0];
      2'b1?:
        \$procmux$4580  = b[1:1];
      default:
        \$procmux$4580  = a;
    endcase
  endfunction
  assign \$illegal_insn$42  = \$procmux$4580 (1'h0, { \$illegal_insn$30 , \$illegal_insn$41  }, { \$jump_in_dec_o$58 , \$procmux$4430_CMP  });
  assign \$procmux$4584_CMP [3] = instr_rdata_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:359.19-359.39|rtl/cve2/cve2_decoder.sv:353.9-445.16" *) 3'h4;
  assign \$procmux$4584_CMP [4] = instr_rdata_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:359.19-359.39|rtl/cve2/cve2_decoder.sv:353.9-445.16" *) 3'h6;
  assign \$procmux$4584_CMP [5] = instr_rdata_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:359.19-359.39|rtl/cve2/cve2_decoder.sv:353.9-445.16" *) 3'h7;
  assign \$procmux$4600_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:313.20-335.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) 2'h3;
  function [1:0] \$procmux$4611 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:324.18-324.38|rtl/cve2/cve2_decoder.sv:322.9-334.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$4611  = b[1:0];
      2'b1?:
        \$procmux$4611  = b[3:2];
      default:
        \$procmux$4611  = a;
    endcase
  endfunction
  assign \$data_type_o$20  = \$procmux$4611 (2'h0, 4'h9, { \$procmux$4613_CMP , \$procmux$4044_CMP  });
  assign \$procmux$4613_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:323.18-323.38|rtl/cve2/cve2_decoder.sv:322.9-334.16" *) instr_rdata_i[13:12];
  function [0:0] \$procmux$4625 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:325.18-330.14|rtl/cve2/cve2_decoder.sv:322.9-334.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$4625  = b[0:0];
      2'b1?:
        \$procmux$4625  = b[1:1];
      default:
        \$procmux$4625  = a;
    endcase
  endfunction
  assign \$illegal_insn$23  = \$procmux$4625 (1'h1, { 1'h0, instr_rdata_i[14] }, { \$auto$opt_reduce.cc:137:opt_pmux$13349 , \$procmux$4043_CMP  });
  assign \$data_we_o$105  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:294.21-311.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) 6'h23;
  assign \$illegal_insn$19  = \$auto$opt_reduce.cc:137:opt_pmux$13351  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:308.20-308.41|rtl/cve2/cve2_decoder.sv:305.9-310.16" *) instr_rdata_i[14] : 1'h1;
  assign \$illegal_insn$17  = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:282.20-282.40|rtl/cve2/cve2_decoder.sv:276.9-284.16" *) \$procmux$4686_CTRL ;
  assign \$procmux$4686_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:282.20-282.40|rtl/cve2/cve2_decoder.sv:276.9-284.16" *) { \$procmux$4584_CMP [5:3], \$procmux$4430_CMP , \$jump_in_dec_o$58 , \$59y  };
  assign \$branch_in_dec_o$109  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:273.22-288.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) 7'h63;
  assign \$procmux$4703_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:255.20-271.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) 7'h67;
  assign \$procmux$4749_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:242.19-253.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) 7'h6f;
  function [0:0] \$procmux$4781 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:578.9-598.16|rtl/cve2/cve2_decoder.sv:236.5-654.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$4781  = b[0:0];
      2'b1?:
        \$procmux$4781  = b[1:1];
      default:
        \$procmux$4781  = a;
    endcase
  endfunction
  assign \$jump_in_dec_o$108  = \$procmux$4781 (1'h0, { 1'h1, \$jump_in_dec_o$58  }, { \$auto$opt_reduce.cc:137:opt_pmux$13359 , \$procmux$4240_CMP  });
  assign data_sign_extension_o = \$procmux$4600_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:313.20-335.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) \$21y ;
  assign data_type_o = \$auto$opt_reduce.cc:137:opt_pmux$13361  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:313.20-335.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) \$data_type_o$20  : 2'h0;
  assign rf_wdata_sel_o = \$procmux$4049_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) \$csr_access_o$85 ;
  assign multdiv_signed_mode_o = \$procmux$4295_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:448.18-571.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) \$multdiv_signed_mode_o$53  : 2'h0;
  assign multdiv_operator_o = \$procmux$4295_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:448.18-571.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) \$multdiv_operator_o$52  : 2'h0;
  assign alu_operator_o = \$procmux$4295_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:448.18-571.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) \$alu_operator_o$51  : alu_operator_o;
  assign mac_en_o = \$procmux$4295_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:448.18-571.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) \$mac_en_o$50 ;
  function [0:0] \$procmux$4872 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$4872  = b[0:0];
      2'b1?:
        \$procmux$4872  = b[1:1];
      default:
        \$procmux$4872  = a;
    endcase
  endfunction
  assign rf_ren_a_o = \$procmux$4872 (1'h0, { 1'h1, \$procmux$4165_Y  }, { \$auto$opt_reduce.cc:137:opt_pmux$13369 , \$procmux$4049_CMP  });
  function [0:0] \$procmux$4893 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:578.9-598.16|rtl/cve2/cve2_decoder.sv:236.5-654.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$4893  = b[0:0];
      2'b1?:
        \$procmux$4893  = b[1:1];
      default:
        \$procmux$4893  = a;
    endcase
  endfunction
  assign \$jump_set_o$95  = \$procmux$4893 (1'h0, { instr_first_cycle_i, \$jump_set_o$57  }, { \$auto$opt_reduce.cc:137:opt_pmux$13359 , \$procmux$4240_CMP  });
  assign wfi_insn_o = \$procmux$4049_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) \$procmux$4179_Y ;
  assign ecall_insn_o = \$procmux$4049_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) \$ecall_insn_o$81 ;
  assign dret_insn_o = \$procmux$4049_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) \$dret_insn_o$80 ;
  assign mret_insn_o = \$procmux$4049_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) \$mret_insn_o$79 ;
  assign ebrk_insn_o = \$procmux$4049_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) \$ebrk_insn_o$78 ;
  assign csr_op = \$procmux$4049_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) \$csr_op$77  : 2'h0;
  function [0:0] \$procmux$4925 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$4925  = b[0:0];
      3'b?1?:
        \$procmux$4925  = b[1:1];
      3'b1??:
        \$procmux$4925  = b[2:2];
      default:
        \$procmux$4925  = a;
    endcase
  endfunction
  assign \$procmux$4925_Y  = \$procmux$4925 (1'h0, { \$alu_op_a_mux_sel_o$125 [1], 1'h1, \$csr_access_o$85  }, { \$auto$opt_reduce.cc:137:opt_pmux$13359 , \$auto$opt_reduce.cc:137:opt_pmux$13373 , \$procmux$4049_CMP  });
  assign \$procmux$4933_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:346.9-346.33|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) 5'h17;
  assign \$procmux$4934_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:342.9-342.33|rtl/cve2/cve2_decoder.sv:236.5-654.12" *) 6'h37;
  function [0:0] \$procmux$4945 ;
    input [0:0] a;
    input [8:0] b;
    input [8:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" *)
    (* parallel_case *)
    casez (s)
      9'b????????1:
        \$procmux$4945  = b[0:0];
      9'b???????1?:
        \$procmux$4945  = b[1:1];
      9'b??????1??:
        \$procmux$4945  = b[2:2];
      9'b?????1???:
        \$procmux$4945  = b[3:3];
      9'b????1????:
        \$procmux$4945  = b[4:4];
      9'b???1?????:
        \$procmux$4945  = b[5:5];
      9'b??1??????:
        \$procmux$4945  = b[6:6];
      9'b?1???????:
        \$procmux$4945  = b[7:7];
      9'b1????????:
        \$procmux$4945  = b[8:8];
      default:
        \$procmux$4945  = a;
    endcase
  endfunction
  assign \$illegal_insn$86  = \$procmux$4945 (1'h1, { \$15y , \$illegal_insn$17 , \$illegal_insn$19 , \$illegal_insn$23 , 1'h0, \$illegal_insn$42 , \$illegal_insn$49 , \$illegal_insn$55 , \$illegal_insn$74  }, { \$procmux$4703_CMP , \$branch_in_dec_o$109 , \$data_we_o$105 , \$procmux$4600_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13375 , \$procmux$4432_CMP , \$procmux$4295_CMP , \$procmux$4240_CMP , \$procmux$4049_CMP  });
  assign csr_op_o = \$8y  ? (* src = "rtl/cve2/cve2_decoder.sv:195.7-195.30|rtl/cve2/cve2_decoder.sv:193.5-196.8" *) 2'h0 : csr_op;
  assign \$alu_op_a_mux_sel_o$125 [0] = 1'h0;
  assign \$alu_op_a_mux_sel_o$156 [0] = \$alu_op_a_mux_sel_o$156 [1];
  assign \$alu_operator_o$127 [3] = 1'h1;
  assign \$alu_operator_o$129 [6] = 1'h0;
  assign \$alu_operator_o$138 [4:0] = { 2'h1, \$alu_operator_o$138 [5], 2'h0 };
  assign \$alu_operator_o$139 [4:1] = { 2'h1, \$alu_operator_o$139 [5], 1'h0 };
  assign { \$alu_operator_o$141 [6], \$alu_operator_o$141 [4] } = 2'h0;
  assign \$alu_operator_o$142 [4] = 1'h0;
  assign \$alu_operator_o$145 [4] = 1'h0;
  assign { \$alu_operator_o$149 [6], \$alu_operator_o$149 [4:0] } = { 2'h0, \$alu_operator_o$149 [5], \$alu_operator_o$149 [5], 2'h0 };
  assign \$imm_b_mux_sel_o$148 [1:0] = { 1'h0, \$imm_b_mux_sel_o$148 [2] };
  assign \$procmux$4584_CMP [0] = \$59y ;
  assign alu_multicycle_o = 1'h0;
  assign div_en_o = 1'h0;
  assign div_sel_o = 1'h0;
  assign imm_b_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[7], instr_rdata_i[30:25], instr_rdata_i[11:8], 1'h0 };
  assign imm_i_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31:20] };
  assign imm_j_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[19:12], instr_rdata_i[20], instr_rdata_i[30:21], 1'h0 };
  assign imm_s_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31:25], instr_rdata_i[11:7] };
  assign imm_u_type_o = { instr_rdata_i[31:12], 12'h000 };
  assign mult_en_o = 1'h0;
  assign mult_sel_o = 1'h0;
  assign rf_raddr_a_o = instr_rdata_i[19:15];
  assign rf_raddr_b_o = instr_rdata_i[24:20];
  assign rf_waddr_o = instr_rdata_i[11:7];
  assign zimm_rs1_type_o = { 27'h0000000, instr_rdata_i[19:15] };
endmodule

(* src = "rtl/cve2/cve2_ex_block.sv:11.8" *)
module \cve2_ex_block$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.ex_block_i (clk_i, rst_ni, alu_operator_i, alu_operand_a_i, alu_operand_b_i, alu_instr_first_cycle_i, multdiv_operator_i, mult_en_i, div_en_i, mult_sel_i, div_sel_i, multdiv_signed_mode_i, multdiv_operand_a_i, multdiv_operand_b_i, imd_val_we_o, imd_val_d_o, imd_val_q_i, alu_adder_result_ex_o, result_ex_o, branch_target_o, branch_decision_o
, ex_valid_o);
  wire \$8y ;
  (* src = "rtl/cve2/cve2_ex_block.sv:40.33" *)
  output [31:0] alu_adder_result_ex_o;
  wire [31:0] alu_adder_result_ex_o;
  (* src = "rtl/cve2/cve2_ex_block.sv:53.16" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" *)
  wire [33:0] alu_adder_result_ext;
  (* src = "rtl/cve2/cve2_ex_block.sv:58.16" *)
  wire [63:0] alu_imd_val_d;
  (* src = "rtl/cve2/cve2_ex_block.sv:22.33" *)
  input alu_instr_first_cycle_i;
  wire alu_instr_first_cycle_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:54.32" *)
  (* unused_bits = "0" *)
  wire alu_is_equal_result;
  (* src = "rtl/cve2/cve2_ex_block.sv:20.33" *)
  input [31:0] alu_operand_a_i;
  wire [31:0] alu_operand_a_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:21.33" *)
  input [31:0] alu_operand_b_i;
  wire [31:0] alu_operand_b_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:19.33" *)
  input [6:0] alu_operator_i;
  wire [6:0] alu_operator_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:43.33" *)
  output branch_decision_o;
  wire branch_decision_o;
  (* src = "rtl/cve2/cve2_ex_block.sv:42.33" *)
  output [31:0] branch_target_o;
  wire [31:0] branch_target_o;
  (* src = "rtl/cve2/cve2_ex_block.sv:15.33" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:27.33" *)
  input div_en_i;
  wire div_en_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:29.33" *)
  input div_sel_i;
  wire div_sel_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:45.33" *)
  output ex_valid_o;
  wire ex_valid_o;
  (* src = "rtl/cve2/cve2_ex_block.sv:36.33" *)
  output [67:0] imd_val_d_o;
  wire [67:0] imd_val_d_o;
  (* src = "rtl/cve2/cve2_ex_block.sv:37.33" *)
  input [67:0] imd_val_q_i;
  wire [67:0] imd_val_q_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:35.33" *)
  output [1:0] imd_val_we_o;
  wire [1:0] imd_val_we_o;
  (* src = "rtl/cve2/cve2_ex_block.sv:26.33" *)
  input mult_en_i;
  wire mult_en_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:28.33" *)
  input mult_sel_i;
  wire mult_sel_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:31.33" *)
  input [31:0] multdiv_operand_a_i;
  wire [31:0] multdiv_operand_a_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:32.33" *)
  input [31:0] multdiv_operand_b_i;
  wire [31:0] multdiv_operand_b_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:25.33" *)
  input [1:0] multdiv_operator_i;
  wire [1:0] multdiv_operator_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:30.33" *)
  input [1:0] multdiv_signed_mode_i;
  wire [1:0] multdiv_signed_mode_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:41.33" *)
  output [31:0] result_ex_o;
  wire [31:0] result_ex_o;
  (* src = "rtl/cve2/cve2_ex_block.sv:16.33" *)
  input rst_ni;
  wire rst_ni;
  assign \$8y  = | (* src = "rtl/cve2/cve2_ex_block.sv:178.55-178.70" *) imd_val_we_o;
  assign ex_valid_o = ~ (* src = "rtl/cve2/cve2_ex_block.sv:178.53-178.71" *) \$8y ;
  (* src = "rtl/cve2/cve2_ex_block.sv:97.5" *)
  \cve2_alu$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.ex_block_i.alu_i  alu_i (
    .adder_result_ext_o(alu_adder_result_ext),
    .adder_result_o(alu_adder_result_ex_o),
    .comparison_result_o(branch_decision_o),
    .imd_val_d_o(alu_imd_val_d),
    .imd_val_q_i({ imd_val_q_i[65:34], imd_val_q_i[31:0] }),
    .imd_val_we_o(imd_val_we_o),
    .instr_first_cycle_i(alu_instr_first_cycle_i),
    .is_equal_result_o(alu_is_equal_result),
    .multdiv_operand_a_i(33'h000000000),
    .multdiv_operand_b_i(33'h000000000),
    .multdiv_sel_i(1'h0),
    .operand_a_i(alu_operand_a_i),
    .operand_b_i(alu_operand_b_i),
    .operator_i(alu_operator_i),
    .result_o(result_ex_o)
  );
  assign branch_target_o = alu_adder_result_ex_o;
  assign imd_val_d_o = { 2'h0, alu_imd_val_d[63:32], 2'h0, alu_imd_val_d[31:0] };
endmodule

(* src = "rtl/cve2/cve2_fetch_fifo.sv:15.8" *)
module \cve2_fetch_fifo$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.prefetch_buffer_i.fifo_i (clk_i, rst_ni, clear_i, busy_o, in_valid_i, in_addr_i, in_rdata_i, in_err_i, out_valid_o, out_ready_i, out_addr_o, out_rdata_o, out_err_o, out_err_plus2_o);
  wire \$10y ;
  wire \$11y ;
  wire \$12y ;
  wire \$14y ;
  wire \$15y ;
  wire \$20y ;
  wire \$22y ;
  wire \$23y ;
  wire \$25y ;
  wire \$34y ;
  wire \$37y ;
  wire \$45y ;
  wire \$46y ;
  wire \$49y ;
  wire \$4y ;
  wire \$52y ;
  wire \$54y ;
  wire \$56y ;
  wire \$57y ;
  wire \$61y ;
  wire \$63y ;
  wire \$68y ;
  wire \$71y ;
  wire \$75y ;
  wire \$7y ;
  wire \$8y ;
  wire \$9y ;
  wire \$auto$rtlil.cc:3092:Mux$13752 ;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:119.7-123.10" *)
  wire \$out_valid_o$29 ;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:57.29" *)
  wire addr_incr_two;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:55.29" *)
  wire aligned_is_compressed;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:23.31" *)
  output [1:0] busy_o;
  wire [1:0] busy_o;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:22.31" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:18.31" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:48.29" *)
  wire [2:0] entry_en;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:52.29" *)
  wire err;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:44.29" *)
  wire [2:0] err_d;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:52.51" *)
  wire err_plus2;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:44.40" *)
  reg [2:0] err_q;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:52.36" *)
  wire err_unaligned;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:27.31" *)
  input [31:0] in_addr_i;
  wire [31:0] in_addr_i;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:29.31" *)
  input in_err_i;
  wire in_err_i;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:28.31" *)
  input [31:0] in_rdata_i;
  wire [31:0] in_rdata_i;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:26.31" *)
  input in_valid_i;
  wire in_valid_i;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:59.29" *)
  wire [30:0] instr_addr_d;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:60.29" *)
  wire instr_addr_en;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:58.29" *)
  wire [30:0] instr_addr_next;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:59.43" *)
  reg [30:0] instr_addr_q;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:46.29" *)
  wire [2:0] lowest_free_entry;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:34.31" *)
  output [31:0] out_addr_o;
  wire [31:0] out_addr_o;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:36.31" *)
  output out_err_o;
  wire out_err_o;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:37.31" *)
  output out_err_plus2_o;
  wire out_err_plus2_o;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:35.31" *)
  output [31:0] out_rdata_o;
  wire [31:0] out_rdata_o;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:33.31" *)
  input out_ready_i;
  wire out_ready_i;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:32.31" *)
  output out_valid_o;
  wire out_valid_o;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:50.29" *)
  wire pop_fifo;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:51.29" *)
  wire [31:0] rdata;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:43.29" *)
  wire [95:0] rdata_d;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:43.40" *)
  reg [95:0] rdata_q;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:51.36" *)
  wire [31:0] rdata_unaligned;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:19.31" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:55.52" *)
  wire unaligned_is_compressed;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:53.29" *)
  wire valid;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:45.29" *)
  wire [2:0] valid_d;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:47.43" *)
  wire [2:0] valid_popped;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:47.29" *)
  wire [2:0] valid_pushed;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:45.40" *)
  reg [2:0] valid_q;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:53.36" *)
  wire valid_unaligned;
  assign rdata = valid_q[0] ? (* src = "rtl/cve2/cve2_fetch_fifo.sv:67.18-67.54" *) rdata_q[31:0] : in_rdata_i;
  assign err = valid_q[0] ? (* src = "rtl/cve2/cve2_fetch_fifo.sv:68.18-68.52" *) err_q[0] : in_err_i;
  assign \$10y  = ~ (* src = "rtl/cve2/cve2_fetch_fifo.sv:91.54-91.78" *) unaligned_is_compressed;
  assign \$11y  = err_q[1] & (* src = "rtl/cve2/cve2_fetch_fifo.sv:91.43-91.78" *) \$10y ;
  assign \$12y  = \$11y  | (* src = "rtl/cve2/cve2_fetch_fifo.sv:91.42-91.90" *) err_q[0];
  assign err_unaligned = valid_q[1] ? (* src = "rtl/cve2/cve2_fetch_fifo.sv:91.28-93.96" *) \$12y  : \$9y ;
  assign \$14y  = in_err_i & (* src = "rtl/cve2/cve2_fetch_fifo.sv:98.42-98.63" *) valid_q[0];
  assign \$15y  = ~ (* src = "rtl/cve2/cve2_fetch_fifo.sv:98.66-98.75" *) err_q[0];
  assign err_plus2 = \$auto$rtlil.cc:3092:Mux$13752  & (* src = "rtl/cve2/cve2_fetch_fifo.sv:97.42-97.62" *) \$15y ;
  assign valid = valid_q[0] | (* src = "rtl/cve2/cve2_fetch_fifo.sv:69.18-69.41" *) in_valid_i;
  assign \$20y  = valid_q[0] & (* src = "rtl/cve2/cve2_fetch_fifo.sv:102.42-102.65" *) in_valid_i;
  assign valid_unaligned = \$20y  | (* src = "rtl/cve2/cve2_fetch_fifo.sv:101.28-102.66" *) valid_q[1];
  assign \$22y  = rdata[17:16] != (* src = "rtl/cve2/cve2_fetch_fifo.sv:105.37-105.58" *) 2'h3;
  assign \$23y  = ~ (* src = "rtl/cve2/cve2_fetch_fifo.sv:105.62-105.66" *) err;
  assign unaligned_is_compressed = \$22y  & (* src = "rtl/cve2/cve2_fetch_fifo.sv:105.36-105.66" *) \$23y ;
  assign \$25y  = rdata[1:0] != (* src = "rtl/cve2/cve2_fetch_fifo.sv:106.37-106.58" *) 2'h3;
  assign aligned_is_compressed = \$25y  & (* src = "rtl/cve2/cve2_fetch_fifo.sv:106.36-106.66" *) \$23y ;
  assign rdata_unaligned[31:16] = valid_q[1] ? (* src = "rtl/cve2/cve2_fetch_fifo.sv:83.28-84.73" *) rdata_q[47:32] : in_rdata_i[15:0];
  assign \$34y  = out_ready_i & (* src = "rtl/cve2/cve2_fetch_fifo.sv:138.37-138.62" *) out_valid_o;
  assign instr_addr_en = clear_i | (* src = "rtl/cve2/cve2_fetch_fifo.sv:138.26-138.63" *) \$34y ;
  assign addr_incr_two = instr_addr_q[0] ? (* src = "rtl/cve2/cve2_fetch_fifo.sv:141.26-142.65" *) unaligned_is_compressed : aligned_is_compressed;
  assign \$37y  = ~ (* src = "rtl/cve2/cve2_fetch_fifo.sv:146.36-146.50" *) addr_incr_two;
  assign instr_addr_next = instr_addr_q + (* src = "rtl/cve2/cve2_fetch_fifo.sv:144.29-146.65" *) { \$37y , addr_incr_two };
  assign instr_addr_d = clear_i ? (* src = "rtl/cve2/cve2_fetch_fifo.sv:148.25-149.50" *) in_addr_i[31:1] : instr_addr_next;
  assign \$4y  = valid_q[0] & (* src = "rtl/cve2/cve2_fetch_fifo.sv:92.43-92.64" *) err_q[0];
  assign \$45y  = ~ (* src = "rtl/cve2/cve2_fetch_fifo.sv:179.50-179.72" *) aligned_is_compressed;
  assign \$46y  = \$45y  | (* src = "rtl/cve2/cve2_fetch_fifo.sv:179.50-179.88" *) instr_addr_q[0];
  assign pop_fifo = \$34y  & (* src = "rtl/cve2/cve2_fetch_fifo.sv:179.21-179.89" *) \$46y ;
  assign lowest_free_entry[0] = ~ (* src = "rtl/cve2/cve2_fetch_fifo.sv:184.37-184.48" *) valid_q[0];
  assign \$49y  = in_valid_i & (* src = "rtl/cve2/cve2_fetch_fifo.sv:190.31-190.64" *) lowest_free_entry[0];
  assign valid_pushed[0] = \$49y  | (* src = "rtl/cve2/cve2_fetch_fifo.sv:190.30-191.40" *) valid_q[0];
  assign valid_popped[0] = pop_fifo ? (* src = "rtl/cve2/cve2_fetch_fifo.sv:193.30-193.76" *) valid_pushed[1] : valid_pushed[0];
  assign \$52y  = ~ (* src = "rtl/cve2/cve2_fetch_fifo.sv:195.43-195.51" *) clear_i;
  assign valid_d[0] = valid_popped[0] & (* src = "rtl/cve2/cve2_fetch_fifo.sv:195.25-195.51" *) \$52y ;
  assign \$54y  = valid_pushed[1] & (* src = "rtl/cve2/cve2_fetch_fifo.sv:198.27-198.55" *) pop_fifo;
  assign \$56y  = ~ (* src = "rtl/cve2/cve2_fetch_fifo.sv:200.63-200.72" *) pop_fifo;
  assign \$57y  = \$49y  & (* src = "rtl/cve2/cve2_fetch_fifo.sv:200.27-200.72" *) \$56y ;
  assign entry_en[0] = \$54y  | (* src = "rtl/cve2/cve2_fetch_fifo.sv:198.26-200.73" *) \$57y ;
  assign rdata_d[31:0] = valid_q[1] ? (* src = "rtl/cve2/cve2_fetch_fifo.sv:203.26-203.66" *) rdata_q[63:32] : in_rdata_i;
  assign err_d[0] = valid_q[1] ? (* src = "rtl/cve2/cve2_fetch_fifo.sv:204.26-204.64" *) err_q[1] : in_err_i;
  assign \$61y  = ~ (* src = "rtl/cve2/cve2_fetch_fifo.sv:186.37-186.48" *) valid_q[1];
  assign lowest_free_entry[1] = \$61y  & (* src = "rtl/cve2/cve2_fetch_fifo.sv:186.37-186.63" *) valid_q[0];
  assign \$63y  = in_valid_i & (* src = "rtl/cve2/cve2_fetch_fifo.sv:190.31-190.64" *) lowest_free_entry[1];
  assign valid_pushed[1] = \$63y  | (* src = "rtl/cve2/cve2_fetch_fifo.sv:190.30-191.40" *) valid_q[1];
  assign valid_popped[1] = pop_fifo ? (* src = "rtl/cve2/cve2_fetch_fifo.sv:193.30-193.76" *) valid_pushed[2] : valid_pushed[1];
  assign valid_d[1] = valid_popped[1] & (* src = "rtl/cve2/cve2_fetch_fifo.sv:195.25-195.51" *) \$52y ;
  assign \$68y  = valid_pushed[2] & (* src = "rtl/cve2/cve2_fetch_fifo.sv:198.27-198.55" *) pop_fifo;
  assign \$7y  = lowest_free_entry[0] | (* src = "rtl/cve2/cve2_fetch_fifo.sv:93.55-93.93" *) \$10y ;
  assign \$71y  = \$63y  & (* src = "rtl/cve2/cve2_fetch_fifo.sv:200.27-200.72" *) \$56y ;
  assign entry_en[1] = \$68y  | (* src = "rtl/cve2/cve2_fetch_fifo.sv:198.26-200.73" *) \$71y ;
  assign rdata_d[63:32] = valid_q[2] ? (* src = "rtl/cve2/cve2_fetch_fifo.sv:203.26-203.66" *) rdata_q[95:64] : in_rdata_i;
  assign err_d[1] = valid_q[2] ? (* src = "rtl/cve2/cve2_fetch_fifo.sv:204.26-204.64" *) err_q[2] : in_err_i;
  assign \$75y  = ~ (* src = "rtl/cve2/cve2_fetch_fifo.sv:207.39-207.56" *) valid_q[2];
  assign lowest_free_entry[2] = \$75y  & (* src = "rtl/cve2/cve2_fetch_fifo.sv:207.39-207.75" *) valid_q[1];
  assign entry_en[2] = in_valid_i & (* src = "rtl/cve2/cve2_fetch_fifo.sv:208.59-208.98" *) lowest_free_entry[2];
  assign valid_pushed[2] = valid_q[2] | (* src = "rtl/cve2/cve2_fetch_fifo.sv:208.39-208.99" *) entry_en[2];
  assign valid_popped[2] = pop_fifo ? (* src = "rtl/cve2/cve2_fetch_fifo.sv:209.39-209.78" *) 1'h0 : valid_pushed[2];
  assign \$8y  = in_err_i & (* src = "rtl/cve2/cve2_fetch_fifo.sv:93.43-93.94" *) \$7y ;
  assign valid_d[2] = valid_popped[2] & (* src = "rtl/cve2/cve2_fetch_fifo.sv:210.39-210.71" *) \$52y ;
  assign \$9y  = \$4y  | (* src = "rtl/cve2/cve2_fetch_fifo.sv:92.42-93.95" *) \$8y ;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q[95:64] <= 32'd0;
    else if (entry_en[2]) rdata_q[95:64] <= in_rdata_i;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q[63:32] <= 32'd0;
    else if (entry_en[1]) rdata_q[63:32] <= rdata_d[63:32];
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q[31:0] <= 32'd0;
    else if (entry_en[0]) rdata_q[31:0] <= rdata_d[31:0];
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:151.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_addr_q <= 31'h00000000;
    else if (instr_addr_en) instr_addr_q <= instr_addr_d;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) err_q[2] <= 1'h0;
    else if (entry_en[2]) err_q[2] <= in_err_i;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) err_q[1] <= 1'h0;
    else if (entry_en[1]) err_q[1] <= err_d[1];
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) err_q[0] <= 1'h0;
    else if (entry_en[0]) err_q[0] <= err_d[0];
  assign \$auto$rtlil.cc:3092:Mux$13752  = valid_q[1] ? err_q[1] : \$14y ;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:219.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) valid_q <= 3'h0;
    else valid_q <= valid_d;
  assign out_err_plus2_o = instr_addr_q[0] & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" *) err_plus2;
  assign out_err_o = instr_addr_q[0] ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" *) err_unaligned : err;
  assign out_rdata_o = instr_addr_q[0] ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" *) { rdata_unaligned[31:16], rdata[31:16] } : rdata;
  assign out_valid_o = instr_addr_q[0] ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" *) \$out_valid_o$29  : valid;
  assign \$out_valid_o$29  = unaligned_is_compressed ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_fetch_fifo.sv:120.9-120.29|rtl/cve2/cve2_fetch_fifo.sv:119.7-123.10" *) valid : valid_unaligned;
  assign busy_o = valid_q[2:1];
  assign err_d[2] = in_err_i;
  assign out_addr_o = { instr_addr_q, 1'h0 };
  assign rdata_d[95:64] = in_rdata_i;
  assign rdata_unaligned[15:0] = rdata[31:16];
endmodule

(* src = "rtl/cve2/cve2_id_stage.sv:19.8" *)
module \cve2_id_stage$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i (clk_i, rst_ni, irqs_i, instr_req_o, instr_rdata_i, debug_req_i, fetch_enable_i, irq_nm_i, ctrl_busy_o, illegal_insn_o, instr_valid_i, instr_rdata_alu_i, instr_rdata_c_i, instr_is_compressed_i, instr_first_cycle_id_o, instr_valid_clear_o, id_in_ready_o, branch_decision_i, pc_set_o, pc_mux_o, exc_pc_mux_o
, exc_cause_o, illegal_c_insn_i, instr_fetch_err_i, instr_fetch_err_plus2_i, pc_id_i, ex_valid_i, lsu_resp_valid_i, alu_operator_ex_o, alu_operand_a_ex_o, alu_operand_b_ex_o, imd_val_we_ex_i, imd_val_d_ex_i, imd_val_q_ex_o, mult_en_ex_o, div_en_ex_o, mult_sel_ex_o, div_sel_ex_o, multdiv_operator_ex_o, multdiv_signed_mode_ex_o, multdiv_operand_a_ex_o, multdiv_operand_b_ex_o
, csr_access_o, csr_op_o, csr_op_en_o, csr_save_if_o, csr_save_id_o, csr_restore_mret_id_o, csr_restore_dret_id_o, csr_save_cause_o, csr_mtval_o, priv_mode_i, csr_mstatus_tw_i, illegal_csr_insn_i, lsu_req_o, lsu_we_o, lsu_type_o, lsu_sign_ext_o, lsu_wdata_o, lsu_addr_incr_req_i, lsu_addr_last_i, csr_mstatus_mie_i, irq_pending_i
, nmi_mode_o, lsu_load_err_i, lsu_store_err_i, debug_mode_o, debug_cause_o, debug_csr_save_o, debug_single_step_i, debug_ebreakm_i, debug_ebreaku_i, trigger_match_i, result_ex_i, csr_rdata_i, rf_raddr_a_o, rf_rdata_a_i, rf_raddr_b_o, rf_rdata_b_i, rf_ren_a_o, rf_ren_b_o, rf_waddr_id_o, rf_wdata_id_o, rf_we_id_o
, en_wb_o, instr_perf_count_id_o, perf_jump_o, perf_branch_o, perf_tbranch_o, perf_dside_wait_o, perf_wfi_wait_o, perf_div_wait_o, instr_id_done_o);
  wire \$0y ;
  wire \$111y ;
  wire \$135y ;
  wire \$136y ;
  wire \$137y ;
  wire \$139y ;
  wire \$140y ;
  wire \$141y ;
  wire \$143y ;
  wire \$146y ;
  wire \$147y ;
  wire \$148y ;
  wire \$151y ;
  wire \$153y ;
  wire \$156y ;
  wire \$157y ;
  wire \$158y ;
  wire \$159y ;
  wire \$160y ;
  wire \$161y ;
  wire \$162y ;
  wire \$163y ;
  wire \$164y ;
  wire \$165y ;
  wire \$166y ;
  wire [2:0] \$18y ;
  wire \$2y ;
  wire \$30y ;
  (* unused_bits = "1 2 3 4" *)
  wire [4:0] \$35 ;
  (* unused_bits = "1 2 3 4" *)
  wire [4:0] \$36 ;
  wire \$3y ;
  wire \$42y ;
  wire \$43y ;
  wire \$44y ;
  wire \$45y ;
  wire \$46y ;
  wire \$47y ;
  wire \$48y ;
  wire \$49y ;
  wire \$50y ;
  wire \$51y ;
  wire \$52y ;
  wire \$55y ;
  wire \$56y ;
  wire \$57y ;
  wire \$58y ;
  wire \$59y ;
  wire \$60y ;
  wire \$61y ;
  wire \$62y ;
  wire \$63y ;
  wire \$67y ;
  wire \$70y ;
  wire \$74y ;
  wire \$81y ;
  wire \$82y ;
  wire \$83y ;
  wire \$88y ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13379 ;
  (* src = "rtl/cve2/cve2_id_stage.sv:684.11-727.18" *)
  wire \$branch_set_raw_d$102 ;
  (* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14" *)
  wire \$branch_set_raw_d$117 ;
  (* src = "rtl/cve2/cve2_id_stage.sv:471.14-478.8" *)
  wire \$csr_pipe_flush$65 ;
  (* src = "rtl/cve2/cve2_id_stage.sv:693.15-699.18" *)
  wire \$id_fsm_d$100 ;
  (* src = "rtl/cve2/cve2_id_stage.sv:684.11-727.18" *)
  wire \$id_fsm_d$109 ;
  (* src = "rtl/cve2/cve2_id_stage.sv:735.11-741.14" *)
  wire \$id_fsm_d$116 ;
  (* src = "rtl/cve2/cve2_id_stage.sv:684.11-727.18" *)
  wire \$jump_set_raw$103 ;
  (* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14" *)
  wire \$jump_set_raw$118 ;
  (* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14" *)
  wire \$perf_branch_o$125 ;
  wire \$procmux$10520_Y ;
  wire \$procmux$10528_Y ;
  wire \$procmux$10536_Y ;
  wire \$procmux$10542_Y ;
  wire \$procmux$10556_Y ;
  wire \$procmux$10563_Y ;
  wire \$procmux$10570_Y ;
  wire \$procmux$10577_Y ;
  wire \$procmux$10655_Y ;
  wire \$procmux$10688_Y ;
  wire \$procmux$10721_Y ;
  wire \$procmux$10774_CMP ;
  wire \$procmux$10775_CMP ;
  wire \$procmux$10776_CMP ;
  wire \$procmux$10777_CMP ;
  wire \$procmux$10778_CMP ;
  wire \$procmux$10779_CMP ;
  wire \$procmux$10781_CMP ;
  wire \$procmux$10782_CMP ;
  wire \$procmux$10783_CMP ;
  (* src = "rtl/cve2/cve2_id_stage.sv:229.16" *)
  wire alu_multicycle_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:227.16" *)
  wire [1:0] alu_op_a_mux_sel;
  (* src = "rtl/cve2/cve2_id_stage.sv:227.34" *)
  wire [1:0] alu_op_a_mux_sel_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:228.16" *)
  wire alu_op_b_mux_sel;
  (* src = "rtl/cve2/cve2_id_stage.sv:228.34" *)
  wire alu_op_b_mux_sel_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:62.37" *)
  output [31:0] alu_operand_a_ex_o;
  wire [31:0] alu_operand_a_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:255.16" *)
  wire [31:0] alu_operand_b;
  (* src = "rtl/cve2/cve2_id_stage.sv:63.37" *)
  output [31:0] alu_operand_b_ex_o;
  wire [31:0] alu_operand_b_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:226.16" *)
  wire [6:0] alu_operator;
  (* src = "rtl/cve2/cve2_id_stage.sv:61.37" *)
  output [6:0] alu_operator_ex_o;
  wire [6:0] alu_operator_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:43.37" *)
  input branch_decision_i;
  wire branch_decision_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:177.16" *)
  wire branch_in_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:179.40" *)
  wire branch_jump_set_done_d;
  (* src = "rtl/cve2/cve2_id_stage.sv:179.16" *)
  reg branch_jump_set_done_q;
  (* src = "rtl/cve2/cve2_id_stage.sv:178.16" *)
  wire branch_set;
  (* src = "rtl/cve2/cve2_id_stage.sv:178.28" *)
  reg branch_set_raw;
  (* src = "rtl/cve2/cve2_id_stage.sv:178.44" *)
  wire branch_set_raw_d;
  (* src = "rtl/cve2/cve2_id_stage.sv:24.37" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:188.16" *)
  wire controller_run;
  (* src = "rtl/cve2/cve2_id_stage.sv:81.37" *)
  output csr_access_o;
  wire csr_access_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:105.37" *)
  input csr_mstatus_mie_i;
  wire csr_mstatus_mie_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:91.37" *)
  input csr_mstatus_tw_i;
  wire csr_mstatus_tw_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:89.37" *)
  output [31:0] csr_mtval_o;
  wire [31:0] csr_mtval_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:83.37" *)
  output csr_op_en_o;
  wire csr_op_en_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:82.37" *)
  output [1:0] csr_op_o;
  wire [1:0] csr_op_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:252.16" *)
  wire csr_pipe_flush;
  (* src = "rtl/cve2/cve2_id_stage.sv:127.37" *)
  input [31:0] csr_rdata_i;
  wire [31:0] csr_rdata_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:87.37" *)
  output csr_restore_dret_id_o;
  wire csr_restore_dret_id_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:86.37" *)
  output csr_restore_mret_id_o;
  wire csr_restore_mret_id_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:88.37" *)
  output csr_save_cause_o;
  wire csr_save_cause_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:85.37" *)
  output csr_save_id_o;
  wire csr_save_id_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:84.37" *)
  output csr_save_if_o;
  wire csr_save_if_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:28.37" *)
  output ctrl_busy_o;
  wire ctrl_busy_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:116.37" *)
  output [2:0] debug_cause_o;
  wire [2:0] debug_cause_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:117.37" *)
  output debug_csr_save_o;
  wire debug_csr_save_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:120.37" *)
  input debug_ebreakm_i;
  wire debug_ebreakm_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:121.37" *)
  input debug_ebreaku_i;
  wire debug_ebreaku_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:115.37" *)
  output debug_mode_o;
  wire debug_mode_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:118.37" *)
  input debug_req_i;
  wire debug_req_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:119.37" *)
  input debug_single_step_i;
  wire debug_single_step_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:239.27" *)
  wire div_en_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:72.37" *)
  output div_en_ex_o;
  wire div_en_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:74.37" *)
  output div_sel_ex_o;
  wire div_sel_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:173.16" *)
  wire dret_insn_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:171.16" *)
  wire ebrk_insn;
  (* src = "rtl/cve2/cve2_id_stage.sv:174.16" *)
  wire ecall_insn_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:142.37" *)
  output en_wb_o;
  wire en_wb_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:58.37" *)
  input ex_valid_i;
  wire ex_valid_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:49.37" *)
  output [6:0] exc_cause_o;
  wire [6:0] exc_cause_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:48.37" *)
  output [1:0] exc_pc_mux_o;
  wire [1:0] exc_pc_mux_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:27.37" *)
  input fetch_enable_i;
  wire fetch_enable_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:194.16" *)
  wire flush_id;
  (* src = "rtl/cve2/cve2_id_stage.sv:655.22" *)
  wire id_fsm_d;
  (* src = "rtl/cve2/cve2_id_stage.sv:655.12" *)
  reg id_fsm_q;
  (* src = "rtl/cve2/cve2_id_stage.sv:40.37" *)
  output id_in_ready_o;
  wire id_in_ready_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:51.37" *)
  input illegal_c_insn_i;
  wire illegal_c_insn_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:92.37" *)
  input illegal_csr_insn_i;
  wire illegal_csr_insn_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:170.16" *)
  wire illegal_insn_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:29.37" *)
  output illegal_insn_o;
  wire illegal_insn_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:67.37" *)
  input [67:0] imd_val_d_ex_i;
  wire [67:0] imd_val_d_ex_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:68.37" *)
  output [67:0] imd_val_q_ex_o;
  reg [67:0] imd_val_q_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:66.37" *)
  input [1:0] imd_val_we_ex_i;
  wire [1:0] imd_val_we_ex_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:205.16" *)
  wire [31:0] imm_a;
  (* src = "rtl/cve2/cve2_id_stage.sv:234.16" *)
  wire imm_a_mux_sel;
  (* src = "rtl/cve2/cve2_id_stage.sv:206.16" *)
  wire [31:0] imm_b;
  (* src = "rtl/cve2/cve2_id_stage.sv:235.16" *)
  wire [2:0] imm_b_mux_sel;
  (* src = "rtl/cve2/cve2_id_stage.sv:235.31" *)
  wire [2:0] imm_b_mux_sel_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:200.16" *)
  wire [31:0] imm_b_type;
  (* src = "rtl/cve2/cve2_id_stage.sv:198.16" *)
  wire [31:0] imm_i_type;
  (* src = "rtl/cve2/cve2_id_stage.sv:202.16" *)
  wire [31:0] imm_j_type;
  (* src = "rtl/cve2/cve2_id_stage.sv:199.16" *)
  wire [31:0] imm_s_type;
  (* src = "rtl/cve2/cve2_id_stage.sv:201.16" *)
  wire [31:0] imm_u_type;
  (* src = "rtl/cve2/cve2_id_stage.sv:186.16" *)
  wire instr_executing;
  (* src = "rtl/cve2/cve2_id_stage.sv:52.37" *)
  input instr_fetch_err_i;
  wire instr_fetch_err_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:53.37" *)
  input instr_fetch_err_plus2_i;
  wire instr_fetch_err_plus2_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:38.37" *)
  output instr_first_cycle_id_o;
  wire instr_first_cycle_id_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:153.37" *)
  output instr_id_done_o;
  wire instr_id_done_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:36.37" *)
  input instr_is_compressed_i;
  wire instr_is_compressed_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:143.37" *)
  output instr_perf_count_id_o;
  wire instr_perf_count_id_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:34.37" *)
  input [31:0] instr_rdata_alu_i;
  wire [31:0] instr_rdata_alu_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:35.37" *)
  input [15:0] instr_rdata_c_i;
  wire [15:0] instr_rdata_c_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:33.37" *)
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:37.37" *)
  output instr_req_o;
  wire instr_req_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:39.37" *)
  output instr_valid_clear_o;
  wire instr_valid_clear_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:32.37" *)
  input instr_valid_i;
  wire instr_valid_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:108.37" *)
  input irq_nm_i;
  wire irq_nm_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:106.37" *)
  input irq_pending_i;
  wire irq_pending_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:107.37" *)
  input [18:0] irqs_i;
  wire [18:0] irqs_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:180.16" *)
  wire jump_in_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:182.16" *)
  wire jump_set;
  (* src = "rtl/cve2/cve2_id_stage.sv:181.16" *)
  wire jump_set_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:182.26" *)
  wire jump_set_raw;
  (* src = "rtl/cve2/cve2_id_stage.sv:101.37" *)
  input lsu_addr_incr_req_i;
  wire lsu_addr_incr_req_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:102.37" *)
  input [31:0] lsu_addr_last_i;
  wire [31:0] lsu_addr_last_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:111.37" *)
  input lsu_load_err_i;
  wire lsu_load_err_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:248.25" *)
  wire lsu_req_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:95.37" *)
  output lsu_req_o;
  wire lsu_req_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:59.37" *)
  input lsu_resp_valid_i;
  wire lsu_resp_valid_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:98.37" *)
  output lsu_sign_ext_o;
  wire lsu_sign_ext_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:112.37" *)
  input lsu_store_err_i;
  wire lsu_store_err_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:97.37" *)
  output [1:0] lsu_type_o;
  wire [1:0] lsu_type_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:99.37" *)
  output [31:0] lsu_wdata_o;
  wire [31:0] lsu_wdata_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:96.37" *)
  output lsu_we_o;
  wire lsu_we_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:160.9" *)
  wire mac_en;
  (* src = "rtl/cve2/cve2_id_stage.sv:161.9" *)
  wire mac_en_2_cycles;
  (* src = "rtl/cve2/cve2_id_stage.sv:172.16" *)
  wire mret_insn_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:238.28" *)
  wire mult_en_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:71.37" *)
  output mult_en_ex_o;
  wire mult_en_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:73.37" *)
  output mult_sel_ex_o;
  wire mult_sel_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:240.16" *)
  wire multdiv_en_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:77.37" *)
  output [31:0] multdiv_operand_a_ex_o;
  wire [31:0] multdiv_operand_a_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:78.37" *)
  output [31:0] multdiv_operand_b_ex_o;
  wire [31:0] multdiv_operand_b_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:75.37" *)
  output [1:0] multdiv_operator_ex_o;
  wire [1:0] multdiv_operator_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:76.37" *)
  output [1:0] multdiv_signed_mode_ex_o;
  wire [1:0] multdiv_signed_mode_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:195.16" *)
  wire multicycle_done;
  (* src = "rtl/cve2/cve2_id_stage.sv:109.37" *)
  output nmi_mode_o;
  wire nmi_mode_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:55.37" *)
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:47.37" *)
  output [2:0] pc_mux_o;
  wire [2:0] pc_mux_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:46.37" *)
  output pc_set_o;
  wire pc_set_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:147.37" *)
  output perf_branch_o;
  wire perf_branch_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:152.37" *)
  output perf_div_wait_o;
  wire perf_div_wait_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:149.37" *)
  output perf_dside_wait_o;
  wire perf_dside_wait_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:146.37" *)
  output perf_jump_o;
  wire perf_jump_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:148.37" *)
  output perf_tbranch_o;
  wire perf_tbranch_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:151.37" *)
  output perf_wfi_wait_o;
  wire perf_wfi_wait_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:90.37" *)
  input [1:0] priv_mode_i;
  wire [1:0] priv_mode_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:126.37" *)
  input [31:0] result_ex_i;
  wire [31:0] result_ex_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:165.9" *)
  reg result_ex_i_q;
  (* src = "rtl/cve2/cve2_id_stage.sv:163.9" *)
  wire rf_raddr_a_MUX;
  (* src = "rtl/cve2/cve2_id_stage.sv:130.37" *)
  output [4:0] rf_raddr_a_o;
  wire [4:0] rf_raddr_a_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:132.37" *)
  output [4:0] rf_raddr_b_o;
  wire [4:0] rf_raddr_b_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:131.37" *)
  input [31:0] rf_rdata_a_i;
  wire [31:0] rf_rdata_a_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:133.37" *)
  input [31:0] rf_rdata_b_i;
  wire [31:0] rf_rdata_b_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:213.16" *)
  wire rf_ren_a_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:134.37" *)
  output rf_ren_a_o;
  wire rf_ren_a_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:213.30" *)
  wire rf_ren_b_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:135.37" *)
  output rf_ren_b_o;
  wire rf_ren_b_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:164.9" *)
  wire rf_waddr_id_MUX;
  (* src = "rtl/cve2/cve2_id_stage.sv:138.37" *)
  output [4:0] rf_waddr_id_o;
  wire [4:0] rf_waddr_id_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:139.37" *)
  output [31:0] rf_wdata_id_o;
  wire [31:0] rf_wdata_id_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:210.16" *)
  wire rf_wdata_sel;
  (* src = "rtl/cve2/cve2_id_stage.sv:211.16" *)
  wire rf_we_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:140.37" *)
  output rf_we_id_o;
  wire rf_we_id_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:211.27" *)
  wire rf_we_raw;
  (* src = "rtl/cve2/cve2_id_stage.sv:25.37" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_id_stage.sv:230.16" *)
  wire stall_alu;
  (* src = "rtl/cve2/cve2_id_stage.sv:191.16" *)
  wire stall_branch;
  (* src = "rtl/cve2/cve2_id_stage.sv:193.16" *)
  wire stall_id;
  (* src = "rtl/cve2/cve2_id_stage.sv:192.16" *)
  wire stall_jump;
  (* src = "rtl/cve2/cve2_id_stage.sv:189.16" *)
  wire stall_mem;
  (* src = "rtl/cve2/cve2_id_stage.sv:190.16" *)
  wire stall_multdiv;
  (* src = "rtl/cve2/cve2_id_stage.sv:122.37" *)
  input trigger_match_i;
  wire trigger_match_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:203.16" *)
  wire [31:0] zimm_rs1_type;
  assign \$0y  = ~ (* src = "rtl/cve2/cve2_id_stage.sv:216.37-216.55" *) instr_fetch_err_i;
  assign \$151y  = instr_valid_i & (* src = "rtl/cve2/cve2_id_stage.sv:216.21-216.55" *) \$0y ;
  assign alu_op_a_mux_sel = lsu_addr_incr_req_i ? (* src = "rtl/cve2/cve2_id_stage.sv:262.29-262.89" *) 2'h1 : alu_op_a_mux_sel_dec;
  assign alu_op_b_mux_sel = alu_op_b_mux_sel_dec | (* src = "rtl/cve2/cve2_id_stage.sv:263.29-263.89" *) lsu_addr_incr_req_i;
  assign imm_b_mux_sel = lsu_addr_incr_req_i ? (* src = "rtl/cve2/cve2_id_stage.sv:264.29-264.86" *) 3'h6 : imm_b_mux_sel_dec;
  assign \$135y  = stall_mem | (* src = "rtl/cve2/cve2_id_stage.sv:756.21-756.46" *) stall_multdiv;
  assign \$136y  = \$135y  | (* src = "rtl/cve2/cve2_id_stage.sv:756.21-756.59" *) stall_jump;
  assign \$137y  = \$136y  | (* src = "rtl/cve2/cve2_id_stage.sv:756.21-756.74" *) stall_branch;
  assign stall_id = \$137y  | (* src = "rtl/cve2/cve2_id_stage.sv:756.21-757.32" *) stall_alu;
  assign \$139y  = ~ (* src = "rtl/cve2/cve2_id_stage.sv:765.23-765.32" *) stall_id;
  assign imm_a = imm_a_mux_sel ? (* src = "rtl/cve2/cve2_id_stage.sv:271.18-271.65" *) 32'd0 : zimm_rs1_type;
  assign \$140y  = ~ (* src = "rtl/cve2/cve2_id_stage.sv:765.35-765.44" *) flush_id;
  assign \$141y  = \$139y  & (* src = "rtl/cve2/cve2_id_stage.sv:765.23-765.44" *) \$140y ;
  assign en_wb_o = \$141y  & (* src = "rtl/cve2/cve2_id_stage.sv:765.23-765.62" *) instr_executing;
  assign \$143y  = ~ (* src = "rtl/cve2/cve2_id_stage.sv:769.52-769.75" *) id_fsm_q;
  assign instr_first_cycle_id_o = instr_valid_i & (* src = "rtl/cve2/cve2_id_stage.sv:769.35-769.76" *) \$143y ;
  assign multicycle_done = lsu_req_dec ? (* src = "rtl/cve2/cve2_id_stage.sv:774.30-774.73" *) lsu_resp_valid_i : ex_valid_i;
  assign \$146y  = ~ (* src = "rtl/cve2/cve2_id_stage.sv:780.56-780.73" *) lsu_resp_valid_i;
  assign \$147y  = \$146y  | (* src = "rtl/cve2/cve2_id_stage.sv:780.56-780.93" *) instr_first_cycle_id_o;
  assign \$148y  = lsu_req_dec & (* src = "rtl/cve2/cve2_id_stage.sv:780.41-780.94" *) \$147y ;
  assign stall_mem = instr_valid_i & (* src = "rtl/cve2/cve2_id_stage.sv:780.24-780.95" *) \$148y ;
  assign instr_executing = \$151y  & (* src = "rtl/cve2/cve2_id_stage.sv:783.35-783.86" *) controller_run;
  assign \$153y  = instr_executing & (* src = "rtl/cve2/cve2_id_stage.sv:799.32-799.61" *) lsu_req_dec;
  assign perf_dside_wait_o = \$153y  & (* src = "rtl/cve2/cve2_id_stage.sv:799.32-799.81" *) \$146y ;
  assign \$156y  = ~ (* src = "rtl/cve2/cve2_id_stage.sv:805.34-805.44" *) ebrk_insn;
  assign \$157y  = ~ (* src = "rtl/cve2/cve2_id_stage.sv:805.47-805.62" *) ecall_insn_dec;
  assign \$158y  = \$156y  & (* src = "rtl/cve2/cve2_id_stage.sv:805.34-805.62" *) \$157y ;
  assign \$159y  = ~ (* src = "rtl/cve2/cve2_id_stage.sv:805.65-805.82" *) illegal_insn_dec;
  assign \$160y  = \$158y  & (* src = "rtl/cve2/cve2_id_stage.sv:805.34-805.82" *) \$159y ;
  assign \$161y  = ~ (* src = "rtl/cve2/cve2_id_stage.sv:806.25-806.38" *) debug_mode_o;
  assign \$162y  = dret_insn_dec & (* src = "rtl/cve2/cve2_id_stage.sv:806.9-806.38" *) \$161y ;
  assign \$163y  = ~ (* src = "rtl/cve2/cve2_id_stage.sv:806.7-806.39" *) \$162y ;
  assign \$164y  = \$160y  & (* src = "rtl/cve2/cve2_id_stage.sv:805.34-806.39" *) \$163y ;
  assign \$165y  = ~ (* src = "rtl/cve2/cve2_id_stage.sv:807.7-807.26" *) illegal_csr_insn_i;
  assign \$166y  = \$164y  & (* src = "rtl/cve2/cve2_id_stage.sv:805.34-807.26" *) \$165y ;
  assign instr_perf_count_id_o = \$166y  & (* src = "rtl/cve2/cve2_id_stage.sv:805.34-807.47" *) \$0y ;
  assign perf_div_wait_o = stall_multdiv & (* src = "rtl/cve2/cve2_id_stage.sv:813.28-813.54" *) div_en_dec;
  assign \$18y [2:1] = instr_is_compressed_i ? (* src = "rtl/cve2/cve2_id_stage.sv:295.32-295.69" *) 2'h1 : 2'h2;
  assign \$2y  = ~ (* src = "rtl/cve2/cve2_id_stage.sv:216.58-216.73" *) illegal_insn_o;
  assign alu_operand_b = alu_op_b_mux_sel ? (* src = "rtl/cve2/cve2_id_stage.sv:310.26-310.81" *) imm_b : rf_rdata_b_i;
  assign \$3y  = \$151y  & (* src = "rtl/cve2/cve2_id_stage.sv:216.21-216.73" *) \$2y ;
  assign \$30y  = rf_we_raw & (* src = "rtl/cve2/cve2_id_stage.sv:333.23-333.50" *) instr_executing;
  assign rf_we_id_o = \$30y  & (* src = "rtl/cve2/cve2_id_stage.sv:333.23-333.72" *) \$165y ;
  assign rf_ren_a_o = \$3y  & (* src = "rtl/cve2/cve2_id_stage.sv:216.21-216.88" *) rf_ren_a_dec;
  assign \$42y  = csr_op_o == (* src = "rtl/cve2/cve2_id_stage.sv:463.33-463.57" *) 1'h1;
  assign \$43y  = csr_op_o == (* src = "rtl/cve2/cve2_id_stage.sv:463.61-463.83" *) 2'h2;
  assign \$44y  = \$42y  || (* src = "rtl/cve2/cve2_id_stage.sv:463.33-463.83" *) \$43y ;
  assign \$45y  = csr_op_en_o && (* src = "rtl/cve2/cve2_id_stage.sv:463.9-463.84" *) \$44y ;
  assign \$46y  = instr_rdata_i[31:20] == (* src = "rtl/cve2/cve2_id_stage.sv:464.11-464.58" *) 10'h300;
  assign \$47y  = instr_rdata_i[31:20] == (* src = "rtl/cve2/cve2_id_stage.sv:465.11-465.54" *) 10'h304;
  assign \$48y  = \$46y  || (* src = "rtl/cve2/cve2_id_stage.sv:464.11-465.54" *) \$47y ;
  assign \$49y  = instr_rdata_i[31:20] == (* src = "rtl/cve2/cve2_id_stage.sv:466.11-466.58" *) 11'h747;
  assign \$50y  = \$48y  || (* src = "rtl/cve2/cve2_id_stage.sv:464.11-466.58" *) \$49y ;
  assign \$51y  = instr_rdata_i[31:25] == (* src = "rtl/cve2/cve2_id_stage.sv:468.11-468.40" *) 5'h1d;
  assign \$52y  = \$50y  || (* src = "rtl/cve2/cve2_id_stage.sv:464.11-468.40" *) \$51y ;
  assign \$55y  = | (* src = "rtl/cve2/cve2_id_stage.sv:471.41-471.64" *) csr_op_o;
  assign \$56y  = csr_op_en_o && (* src = "rtl/cve2/cve2_id_stage.sv:471.18-471.64" *) \$55y ;
  assign \$57y  = instr_rdata_i[31:20] == (* src = "rtl/cve2/cve2_id_stage.sv:472.11-472.55" *) 11'h7b0;
  assign \$58y  = instr_rdata_i[31:20] == (* src = "rtl/cve2/cve2_id_stage.sv:473.11-473.54" *) 11'h7b1;
  assign \$59y  = \$57y  || (* src = "rtl/cve2/cve2_id_stage.sv:472.11-473.54" *) \$58y ;
  assign \$60y  = instr_rdata_i[31:20] == (* src = "rtl/cve2/cve2_id_stage.sv:474.11-474.60" *) 11'h7b2;
  assign \$61y  = \$59y  || (* src = "rtl/cve2/cve2_id_stage.sv:472.11-474.60" *) \$60y ;
  assign \$62y  = instr_rdata_i[31:20] == (* src = "rtl/cve2/cve2_id_stage.sv:475.11-475.60" *) 11'h7b3;
  assign \$63y  = \$61y  || (* src = "rtl/cve2/cve2_id_stage.sv:472.11-475.60" *) \$62y ;
  assign \$67y  = illegal_insn_dec | (* src = "rtl/cve2/cve2_id_stage.sv:485.44-485.81" *) illegal_csr_insn_i;
  assign illegal_insn_o = instr_valid_i & (* src = "rtl/cve2/cve2_id_stage.sv:485.27-485.82" *) \$67y ;
  assign multdiv_en_dec = mult_en_dec | (* src = "rtl/cve2/cve2_id_stage.sv:568.29-568.53" *) div_en_dec;
  assign \$70y  = instr_first_cycle_id_o & (* src = "rtl/cve2/cve2_id_stage.sv:570.46-570.76" *) lsu_req_dec;
  assign lsu_req_o = instr_executing & (* src = "rtl/cve2/cve2_id_stage.sv:570.28-570.84" *) \$70y ;
  assign mult_en_ex_o = instr_executing & (* src = "rtl/cve2/cve2_id_stage.sv:571.28-571.84" *) mult_en_dec;
  assign div_en_ex_o = instr_executing & (* src = "rtl/cve2/cve2_id_stage.sv:572.28-572.84" *) div_en_dec;
  assign \$74y  = csr_access_o & (* src = "rtl/cve2/cve2_id_stage.sv:583.36-583.66" *) instr_executing;
  assign csr_op_en_o = \$74y  & (* src = "rtl/cve2/cve2_id_stage.sv:583.36-583.84" *) en_wb_o;
  assign alu_operand_b_ex_o = mac_en_2_cycles ? (* src = "rtl/cve2/cve2_id_stage.sv:587.31-587.78" *) { 31'h00000000, result_ex_i_q } : alu_operand_b;
  assign rf_raddr_a_o[0] = mac_en_2_cycles ? (* src = "rtl/cve2/cve2_id_stage.sv:588.25-588.75" *) rf_waddr_id_MUX : rf_raddr_a_MUX;
  assign \$81y  = branch_set_raw | (* src = "rtl/cve2/cve2_id_stage.sv:629.36-629.65" *) jump_set_raw;
  assign \$82y  = \$81y  | (* src = "rtl/cve2/cve2_id_stage.sv:629.36-629.90" *) branch_jump_set_done_q;
  assign \$83y  = ~ (* src = "rtl/cve2/cve2_id_stage.sv:630.5-630.25" *) instr_valid_clear_o;
  assign branch_jump_set_done_d = \$82y  & (* src = "rtl/cve2/cve2_id_stage.sv:629.35-630.25" *) \$83y ;
  assign \$88y  = ~ (* src = "rtl/cve2/cve2_id_stage.sv:647.50-647.73" *) branch_jump_set_done_q;
  assign jump_set = jump_set_raw & (* src = "rtl/cve2/cve2_id_stage.sv:647.28-647.73" *) \$88y ;
  assign rf_ren_b_o = \$3y  & (* src = "rtl/cve2/cve2_id_stage.sv:217.21-217.88" *) rf_ren_b_dec;
  assign branch_set = branch_set_raw & (* src = "rtl/cve2/cve2_id_stage.sv:648.28-648.73" *) \$88y ;
  (* src = "rtl/cve2/cve2_id_stage.sv:317.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) imd_val_q_ex_o[33:0] <= 34'h000000000;
    else if (imd_val_we_ex_i[1]) imd_val_q_ex_o[33:0] <= imd_val_d_ex_i[33:0];
  (* src = "rtl/cve2/cve2_id_stage.sv:317.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) imd_val_q_ex_o[67:34] <= 34'h000000000;
    else if (imd_val_we_ex_i[0]) imd_val_q_ex_o[67:34] <= imd_val_d_ex_i[67:34];
  (* src = "rtl/cve2/cve2_id_stage.sv:657.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) id_fsm_q <= 1'h0;
    else if (instr_executing) id_fsm_q <= id_fsm_d;
  assign \$auto$opt_reduce.cc:137:opt_pmux$13379  = | { lsu_req_dec, alu_multicycle_dec, jump_in_dec };
  (* src = "rtl/cve2/cve2_id_stage.sv:632.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) branch_jump_set_done_q <= 1'h0;
    else branch_jump_set_done_q <= branch_jump_set_done_d;
  (* src = "rtl/cve2/cve2_id_stage.sv:614.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) branch_set_raw <= 1'h0;
    else branch_set_raw <= branch_set_raw_d;
  (* src = "rtl/cve2/cve2_id_stage.sv:440.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) result_ex_i_q <= 1'h0;
    else result_ex_i_q <= result_ex_i[0];
  assign \$csr_pipe_flush$65  = \$56y  & (* src = "rtl/cve2/cve2_id_stage.sv:472.7-477.10|rtl/cve2/cve2_id_stage.sv:471.14-478.8" *) \$63y ;
  assign csr_pipe_flush = \$45y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:464.7-470.10|rtl/cve2/cve2_id_stage.sv:463.5-478.8" *) \$52y  : \$csr_pipe_flush$65 ;
  assign \$id_fsm_d$116  = ~ (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:736.13-736.43|rtl/cve2/cve2_id_stage.sv:735.11-741.14" *) multicycle_done;
  assign \$procmux$10520_Y  = multicycle_done ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:736.13-736.43|rtl/cve2/cve2_id_stage.sv:735.11-741.14" *) 1'h0 : jump_in_dec;
  assign \$procmux$10528_Y  = multicycle_done ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:736.13-736.43|rtl/cve2/cve2_id_stage.sv:735.11-741.14" *) 1'h0 : branch_in_dec;
  assign \$procmux$10536_Y  = multicycle_done ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:736.13-736.43|rtl/cve2/cve2_id_stage.sv:735.11-741.14" *) 1'h0 : multdiv_en_dec;
  assign \$procmux$10542_Y  = multdiv_en_dec ? (* src = "rtl/cve2/cve2_id_stage.sv:732.13-732.54|rtl/cve2/cve2_id_stage.sv:731.11-733.14" *) \$111y  : rf_we_dec;
  assign id_fsm_d = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:730.22-742.12|rtl/cve2/cve2_id_stage.sv:682.7-747.14" *) \$id_fsm_d$116  : \$id_fsm_d$109 ;
  assign \$procmux$10556_Y  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:730.22-742.12|rtl/cve2/cve2_id_stage.sv:682.7-747.14" *) \$procmux$10542_Y  : \$procmux$10655_Y ;
  assign \$procmux$10563_Y  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:730.22-742.12|rtl/cve2/cve2_id_stage.sv:682.7-747.14" *) \$procmux$10520_Y  : jump_in_dec;
  assign \$procmux$10570_Y  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:730.22-742.12|rtl/cve2/cve2_id_stage.sv:682.7-747.14" *) \$procmux$10528_Y  : \$branch_set_raw_d$102 ;
  assign \$procmux$10577_Y  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:730.22-742.12|rtl/cve2/cve2_id_stage.sv:682.7-747.14" *) \$procmux$10536_Y  : \$procmux$10688_Y ;
  assign \$id_fsm_d$100  = ~ (* src = "rtl/cve2/cve2_id_stage.sv:693.32-699.18|rtl/cve2/cve2_id_stage.sv:693.15-699.18" *) ex_valid_i;
  assign \$111y  = ex_valid_i & (* src = "rtl/cve2/cve2_id_stage.sv:693.32-699.18|rtl/cve2/cve2_id_stage.sv:693.15-699.18" *) rf_we_dec;
  function [0:0] \$procmux$10624 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_id_stage.sv:719.33-723.16|rtl/cve2/cve2_id_stage.sv:684.11-727.18" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10624  = b[0:0];
      3'b?1?:
        \$procmux$10624  = b[1:1];
      3'b1??:
        \$procmux$10624  = b[2:2];
      default:
        \$procmux$10624  = a;
    endcase
  endfunction
  assign \$id_fsm_d$109  = \$procmux$10624 (1'h0, { \$id_fsm_d$100 , branch_decision_i, 1'h1 }, { multdiv_en_dec, branch_in_dec, \$auto$opt_reduce.cc:137:opt_pmux$13379  });
  function [0:0] \$procmux$10655 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_id_stage.sv:719.33-723.16|rtl/cve2/cve2_id_stage.sv:684.11-727.18" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$10655  = b[0:0];
      2'b1?:
        \$procmux$10655  = b[1:1];
      default:
        \$procmux$10655  = a;
    endcase
  endfunction
  assign \$procmux$10655_Y  = \$procmux$10655 (rf_we_dec, { \$111y , 1'h0 }, { multdiv_en_dec, alu_multicycle_dec });
  assign \$branch_set_raw_d$102  = branch_in_dec & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:701.28-712.16|rtl/cve2/cve2_id_stage.sv:684.11-727.18" *) branch_decision_i;
  assign \$procmux$10688_Y  = multdiv_en_dec & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:693.15-699.18|rtl/cve2/cve2_id_stage.sv:684.11-727.18" *) \$id_fsm_d$100 ;
  assign \$jump_set_raw$103  = jump_in_dec & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:713.26-718.16|rtl/cve2/cve2_id_stage.sv:684.11-727.18" *) jump_set_dec;
  assign \$perf_branch_o$125  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:684.11-727.18|rtl/cve2/cve2_id_stage.sv:682.7-747.14" *) 1'h0 : branch_in_dec;
  assign \$procmux$10721_Y  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:684.11-727.18|rtl/cve2/cve2_id_stage.sv:682.7-747.14" *) 1'h0 : alu_multicycle_dec;
  assign \$jump_set_raw$118  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:684.11-727.18|rtl/cve2/cve2_id_stage.sv:682.7-747.14" *) 1'h0 : \$jump_set_raw$103 ;
  assign \$branch_set_raw_d$117  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:684.11-727.18|rtl/cve2/cve2_id_stage.sv:682.7-747.14" *) 1'h0 : \$branch_set_raw_d$102 ;
  assign perf_branch_o = instr_executing & (* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14|rtl/cve2/cve2_id_stage.sv:681.5-748.8" *) \$perf_branch_o$125 ;
  assign stall_alu = instr_executing & (* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14|rtl/cve2/cve2_id_stage.sv:681.5-748.8" *) \$procmux$10721_Y ;
  assign rf_we_raw = instr_executing ? (* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14|rtl/cve2/cve2_id_stage.sv:681.5-748.8" *) \$procmux$10556_Y  : rf_we_dec;
  assign stall_jump = instr_executing & (* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14|rtl/cve2/cve2_id_stage.sv:681.5-748.8" *) \$procmux$10563_Y ;
  assign stall_branch = instr_executing & (* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14|rtl/cve2/cve2_id_stage.sv:681.5-748.8" *) \$procmux$10570_Y ;
  assign stall_multdiv = instr_executing & (* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14|rtl/cve2/cve2_id_stage.sv:681.5-748.8" *) \$procmux$10577_Y ;
  assign jump_set_raw = instr_executing & (* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14|rtl/cve2/cve2_id_stage.sv:681.5-748.8" *) \$jump_set_raw$118 ;
  assign branch_set_raw_d = instr_executing & (* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14|rtl/cve2/cve2_id_stage.sv:681.5-748.8" *) \$branch_set_raw_d$117 ;
  assign rf_wdata_id_o = rf_wdata_sel ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:339.18-339.46|rtl/cve2/cve2_id_stage.sv:337.5-341.12" *) csr_rdata_i : result_ex_i;
  function [31:0] \$procmux$10773 ;
    input [31:0] a;
    input [191:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_id_stage.sv:295.24-295.70|rtl/cve2/cve2_id_stage.sv:289.5-298.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$10773  = b[31:0];
      6'b????1?:
        \$procmux$10773  = b[63:32];
      6'b???1??:
        \$procmux$10773  = b[95:64];
      6'b??1???:
        \$procmux$10773  = b[127:96];
      6'b?1????:
        \$procmux$10773  = b[159:128];
      6'b1?????:
        \$procmux$10773  = b[191:160];
      default:
        \$procmux$10773  = a;
    endcase
  endfunction
  assign imm_b = \$procmux$10773 (32'd4, { imm_i_type, imm_s_type, imm_b_type, imm_u_type, imm_j_type, 29'h00000000, \$18y [2:1], 1'h0 }, { \$procmux$10779_CMP , \$procmux$10778_CMP , \$procmux$10777_CMP , \$procmux$10776_CMP , \$procmux$10775_CMP , \$procmux$10774_CMP  });
  assign \$procmux$10774_CMP  = imm_b_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:295.24-295.70|rtl/cve2/cve2_id_stage.sv:289.5-298.12" *) 3'h5;
  assign \$procmux$10775_CMP  = imm_b_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:294.24-294.43|rtl/cve2/cve2_id_stage.sv:289.5-298.12" *) 3'h4;
  assign \$procmux$10776_CMP  = imm_b_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:293.24-293.43|rtl/cve2/cve2_id_stage.sv:289.5-298.12" *) 2'h3;
  assign \$procmux$10777_CMP  = imm_b_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:292.24-292.43|rtl/cve2/cve2_id_stage.sv:289.5-298.12" *) 2'h2;
  assign \$procmux$10778_CMP  = imm_b_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:291.24-291.43|rtl/cve2/cve2_id_stage.sv:289.5-298.12" *) 1'h1;
  assign \$procmux$10779_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:290.24-290.43|rtl/cve2/cve2_id_stage.sv:289.5-298.12" *) imm_b_mux_sel;
  function [31:0] \$procmux$10780 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_id_stage.sv:279.20-279.42|rtl/cve2/cve2_id_stage.sv:275.5-281.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10780  = b[31:0];
      3'b?1?:
        \$procmux$10780  = b[63:32];
      3'b1??:
        \$procmux$10780  = b[95:64];
      default:
        \$procmux$10780  = a;
    endcase
  endfunction
  assign alu_operand_a_ex_o = \$procmux$10780 (rf_rdata_a_i, { lsu_addr_last_i, pc_id_i, imm_a }, { \$procmux$10783_CMP , \$procmux$10782_CMP , \$procmux$10781_CMP  });
  assign \$procmux$10781_CMP  = alu_op_a_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:279.20-279.42|rtl/cve2/cve2_id_stage.sv:275.5-281.12" *) 2'h3;
  assign \$procmux$10782_CMP  = alu_op_a_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:278.20-278.44|rtl/cve2/cve2_id_stage.sv:275.5-281.12" *) 2'h2;
  assign \$procmux$10783_CMP  = alu_op_a_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:277.20-277.52|rtl/cve2/cve2_id_stage.sv:275.5-281.12" *) 1'h1;
  (* src = "rtl/cve2/cve2_id_stage.sv:488.5" *)
  \cve2_controller$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.controller_i  controller_i (
    .branch_set_i(branch_set),
    .clk_i(clk_i),
    .controller_run_o(controller_run),
    .csr_mstatus_mie_i(csr_mstatus_mie_i),
    .csr_mstatus_tw_i(csr_mstatus_tw_i),
    .csr_mtval_o(csr_mtval_o),
    .csr_pipe_flush_i(csr_pipe_flush),
    .csr_restore_dret_id_o(csr_restore_dret_id_o),
    .csr_restore_mret_id_o(csr_restore_mret_id_o),
    .csr_save_cause_o(csr_save_cause_o),
    .csr_save_id_o(csr_save_id_o),
    .csr_save_if_o(csr_save_if_o),
    .ctrl_busy_o(ctrl_busy_o),
    .debug_cause_o(debug_cause_o),
    .debug_csr_save_o(debug_csr_save_o),
    .debug_ebreakm_i(debug_ebreakm_i),
    .debug_ebreaku_i(debug_ebreaku_i),
    .debug_mode_o(debug_mode_o),
    .debug_req_i(debug_req_i),
    .debug_single_step_i(debug_single_step_i),
    .dret_insn_i(dret_insn_dec),
    .ebrk_insn_i(ebrk_insn),
    .ecall_insn_i(ecall_insn_dec),
    .exc_cause_o(exc_cause_o),
    .exc_pc_mux_o(exc_pc_mux_o),
    .fetch_enable_i(fetch_enable_i),
    .flush_id_o(flush_id),
    .id_in_ready_o(id_in_ready_o),
    .illegal_insn_i(illegal_insn_o),
    .instr_compressed_i(instr_rdata_c_i),
    .instr_fetch_err_i(instr_fetch_err_i),
    .instr_fetch_err_plus2_i(instr_fetch_err_plus2_i),
    .instr_i(instr_rdata_i),
    .instr_is_compressed_i(instr_is_compressed_i),
    .instr_req_o(instr_req_o),
    .instr_valid_clear_o(instr_valid_clear_o),
    .instr_valid_i(instr_valid_i),
    .irq_nm_i(irq_nm_i),
    .irq_pending_i(irq_pending_i),
    .irqs_i(irqs_i),
    .jump_set_i(jump_set),
    .load_err_i(lsu_load_err_i),
    .lsu_addr_last_i(lsu_addr_last_i),
    .mret_insn_i(mret_insn_dec),
    .nmi_mode_o(nmi_mode_o),
    .pc_id_i(pc_id_i),
    .pc_mux_o(pc_mux_o),
    .pc_set_o(pc_set_o),
    .perf_jump_o(perf_jump_o),
    .perf_tbranch_o(perf_tbranch_o),
    .priv_mode_i(priv_mode_i),
    .rst_ni(rst_ni),
    .stall_id_i(stall_id),
    .store_err_i(lsu_store_err_i),
    .trigger_match_i(trigger_match_i),
    .wfi_insn_i(perf_wfi_wait_o)
  );
  (* src = "rtl/cve2/cve2_id_stage.sv:352.5" *)
  \cve2_decoder$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.decoder_i  decoder_i (
    .alu_multicycle_o(alu_multicycle_dec),
    .alu_op_a_mux_sel_o(alu_op_a_mux_sel_dec),
    .alu_op_b_mux_sel_o(alu_op_b_mux_sel_dec),
    .alu_operator_o(alu_operator),
    .branch_in_dec_o(branch_in_dec),
    .clk_i(clk_i),
    .csr_access_o(csr_access_o),
    .csr_op_o(csr_op_o),
    .data_req_o(lsu_req_dec),
    .data_sign_extension_o(lsu_sign_ext_o),
    .data_type_o(lsu_type_o),
    .data_we_o(lsu_we_o),
    .div_en_o(div_en_dec),
    .div_sel_o(div_sel_ex_o),
    .dret_insn_o(dret_insn_dec),
    .ebrk_insn_o(ebrk_insn),
    .ecall_insn_o(ecall_insn_dec),
    .illegal_c_insn_i(illegal_c_insn_i),
    .illegal_insn_o(illegal_insn_dec),
    .imm_a_mux_sel_o(imm_a_mux_sel),
    .imm_b_mux_sel_o(imm_b_mux_sel_dec),
    .imm_b_type_o(imm_b_type),
    .imm_i_type_o(imm_i_type),
    .imm_j_type_o(imm_j_type),
    .imm_s_type_o(imm_s_type),
    .imm_u_type_o(imm_u_type),
    .instr_first_cycle_i(instr_first_cycle_id_o),
    .instr_rdata_alu_i(instr_rdata_alu_i),
    .instr_rdata_i(instr_rdata_i),
    .jump_in_dec_o(jump_in_dec),
    .jump_set_o(jump_set_dec),
    .mac_en_o(mac_en),
    .mret_insn_o(mret_insn_dec),
    .mult_en_o(mult_en_dec),
    .mult_sel_o(mult_sel_ex_o),
    .multdiv_operator_o(multdiv_operator_ex_o),
    .multdiv_signed_mode_o(multdiv_signed_mode_ex_o),
    .rf_raddr_a_o({ \$35 [4:1], rf_raddr_a_MUX }),
    .rf_raddr_b_o(rf_raddr_b_o),
    .rf_ren_a_o(rf_ren_a_dec),
    .rf_ren_b_o(rf_ren_b_dec),
    .rf_waddr_o({ \$36 [4:1], rf_waddr_id_MUX }),
    .rf_wdata_sel_o(rf_wdata_sel),
    .rf_we_o(rf_we_dec),
    .rst_ni(rst_ni),
    .wfi_insn_o(perf_wfi_wait_o),
    .zimm_rs1_type_o(zimm_rs1_type)
  );
  (* src = "rtl/cve2/cve2_id_stage.sv:430.23" *)
  \cve2_mac_controller$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.mac__controller_i  mac__controller_i (
    .alu_operator_i(alu_operator),
    .alu_operator_o(alu_operator_ex_o),
    .clk_i(clk_i),
    .mac_en_2_cycles_o(mac_en_2_cycles),
    .mac_en_i(mac_en),
    .rst_ni(rst_ni)
  );
  assign \$18y [0] = 1'h0;
  assign \$35 [0] = rf_raddr_a_MUX;
  assign \$36 [0] = rf_waddr_id_MUX;
  assign instr_id_done_o = en_wb_o;
  assign lsu_wdata_o = rf_rdata_b_i;
  assign multdiv_operand_a_ex_o = rf_rdata_a_i;
  assign multdiv_operand_b_ex_o = rf_rdata_b_i;
  assign rf_raddr_a_o[4:1] = 4'h0;
  assign rf_waddr_id_o = 5'hxx;
endmodule

(* src = "rtl/cve2/cve2_if_stage.sv:15.8" *)
module \cve2_if_stage$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i (clk_i, rst_ni, boot_addr_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, req_i, exc_cause, instr_valid_id_o, instr_new_id_o, instr_rdata_id_o, instr_rdata_alu_id_o, instr_rdata_c_id_o, instr_is_compressed_id_o, instr_fetch_err_o, instr_fetch_err_plus2_o, illegal_c_insn_id_o, pc_if_o
, pc_id_o, pmp_err_if_i, pmp_err_if_plus2_i, instr_valid_clear_i, pc_set_i, pc_mux_i, exc_pc_mux_i, branch_target_ex_i, csr_mepc_i, csr_depc_i, csr_mtvec_i, csr_mtvec_init_o, id_in_ready_i, if_busy_o);
  wire \$11y ;
  wire \$12y ;
  wire \$13y ;
  wire \$14y ;
  wire \$15y ;
  wire \$17y ;
  wire \$18y ;
  wire \$20y ;
  wire \$21y ;
  wire \$22y ;
  wire \$23y ;
  wire \$4y ;
  wire \$procmux$10803_CMP ;
  wire \$procmux$10804_CMP ;
  wire \$procmux$10805_CMP ;
  wire \$procmux$10806_CMP ;
  wire \$procmux$10808_CMP ;
  wire \$procmux$10809_CMP ;
  wire \$procmux$10810_CMP ;
  (* src = "rtl/cve2/cve2_if_stage.sv:22.40" *)
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:61.39" *)
  input [31:0] branch_target_ex_i;
  wire [31:0] branch_target_ex_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:19.40" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:66.39" *)
  input [31:0] csr_depc_i;
  wire [31:0] csr_depc_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:64.39" *)
  input [31:0] csr_mepc_i;
  wire [31:0] csr_mepc_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:68.39" *)
  input [31:0] csr_mtvec_i;
  wire [31:0] csr_mtvec_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:69.39" *)
  output csr_mtvec_init_o;
  wire csr_mtvec_init_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:58.39" *)
  input [6:0] exc_cause;
  wire [6:0] exc_cause;
  (* src = "rtl/cve2/cve2_if_stage.sv:102.22" *)
  wire [31:0] exc_pc;
  (* src = "rtl/cve2/cve2_if_stage.sv:57.39" *)
  input [1:0] exc_pc_mux_i;
  wire [1:0] exc_pc_mux_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:84.22" *)
  (* unused_bits = "0" *)
  wire [31:0] fetch_addr_n;
  (* src = "rtl/cve2/cve2_if_stage.sv:91.22" *)
  wire fetch_err;
  (* src = "rtl/cve2/cve2_if_stage.sv:92.22" *)
  wire fetch_err_plus2;
  (* src = "rtl/cve2/cve2_if_stage.sv:89.22" *)
  wire [31:0] fetch_rdata;
  (* src = "rtl/cve2/cve2_if_stage.sv:87.22" *)
  wire fetch_valid;
  (* src = "rtl/cve2/cve2_if_stage.sv:72.39" *)
  input id_in_ready_i;
  wire id_in_ready_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:75.39" *)
  output if_busy_o;
  wire if_busy_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:107.22" *)
  wire if_id_pipe_reg_we;
  (* src = "rtl/cve2/cve2_if_stage.sv:99.22" *)
  wire if_instr_err;
  (* src = "rtl/cve2/cve2_if_stage.sv:100.22" *)
  wire if_instr_err_plus2;
  (* src = "rtl/cve2/cve2_if_stage.sv:98.22" *)
  wire if_instr_pmp_err;
  (* src = "rtl/cve2/cve2_if_stage.sv:95.22" *)
  wire illegal_c_insn;
  (* src = "rtl/cve2/cve2_if_stage.sv:46.39" *)
  output illegal_c_insn_id_o;
  reg illegal_c_insn_id_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:27.39" *)
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:94.22" *)
  wire [31:0] instr_decompressed;
  (* src = "rtl/cve2/cve2_if_stage.sv:31.39" *)
  input instr_err_i;
  wire instr_err_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:44.39" *)
  output instr_fetch_err_o;
  reg instr_fetch_err_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:45.39" *)
  output instr_fetch_err_plus2_o;
  reg instr_fetch_err_plus2_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:28.39" *)
  input instr_gnt_i;
  wire instr_gnt_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:96.22" *)
  wire instr_is_compressed;
  (* src = "rtl/cve2/cve2_if_stage.sv:42.39" *)
  output instr_is_compressed_id_o;
  reg instr_is_compressed_id_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:35.39" *)
  output instr_new_id_o;
  reg instr_new_id_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:37.39" *)
  output [31:0] instr_rdata_alu_id_o;
  reg [31:0] instr_rdata_alu_id_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:39.39" *)
  output [15:0] instr_rdata_c_id_o;
  reg [15:0] instr_rdata_c_id_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:30.39" *)
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:36.39" *)
  output [31:0] instr_rdata_id_o;
  wire [31:0] instr_rdata_id_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:26.39" *)
  output instr_req_o;
  wire instr_req_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:29.39" *)
  input instr_rvalid_i;
  wire instr_rvalid_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:54.39" *)
  input instr_valid_clear_i;
  wire instr_valid_clear_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:78.22" *)
  wire instr_valid_id_d;
  (* src = "rtl/cve2/cve2_if_stage.sv:34.39" *)
  output instr_valid_id_o;
  reg instr_valid_id_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:49.39" *)
  output [31:0] pc_id_o;
  reg [31:0] pc_id_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:48.39" *)
  output [31:0] pc_if_o;
  wire [31:0] pc_if_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:56.39" *)
  input [2:0] pc_mux_i;
  wire [2:0] pc_mux_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:55.39" *)
  input pc_set_i;
  wire pc_set_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:50.39" *)
  input pmp_err_if_i;
  wire pmp_err_if_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:51.39" *)
  input pmp_err_if_plus2_i;
  wire pmp_err_if_plus2_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:23.40" *)
  input req_i;
  wire req_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:20.40" *)
  input rst_ni;
  wire rst_ni;
  assign if_instr_err = fetch_err | (* src = "rtl/cve2/cve2_if_stage.sv:192.25-192.53" *) if_instr_pmp_err;
  assign \$11y  = ~ (* src = "rtl/cve2/cve2_if_stage.sv:195.49-195.69" *) instr_is_compressed;
  assign \$12y  = pc_if_o[2] & (* src = "rtl/cve2/cve2_if_stage.sv:195.33-195.69" *) \$11y ;
  assign \$13y  = \$12y  & (* src = "rtl/cve2/cve2_if_stage.sv:195.33-195.90" *) pmp_err_if_plus2_i;
  assign \$14y  = \$13y  | (* src = "rtl/cve2/cve2_if_stage.sv:195.32-196.47" *) fetch_err_plus2;
  assign \$15y  = ~ (* src = "rtl/cve2/cve2_if_stage.sv:196.51-196.64" *) pmp_err_if_i;
  assign if_instr_err_plus2 = \$14y  & (* src = "rtl/cve2/cve2_if_stage.sv:195.31-196.64" *) \$15y ;
  assign \$17y  = ~ (* src = "rtl/cve2/cve2_if_stage.sv:206.36-206.46" *) fetch_err;
  assign \$18y  = fetch_valid & (* src = "rtl/cve2/cve2_if_stage.sv:206.22-206.46" *) \$17y ;
  assign if_id_pipe_reg_we = fetch_valid & (* src = "rtl/cve2/cve2_if_stage.sv:216.30-216.57" *) id_in_ready_i;
  assign \$20y  = ~ (* src = "rtl/cve2/cve2_if_stage.sv:216.60-216.69" *) pc_set_i;
  assign \$21y  = if_id_pipe_reg_we & (* src = "rtl/cve2/cve2_if_stage.sv:216.30-216.69" *) \$20y ;
  assign \$22y  = ~ (* src = "rtl/cve2/cve2_if_stage.sv:217.49-217.69" *) instr_valid_clear_i;
  assign \$23y  = instr_valid_id_o & (* src = "rtl/cve2/cve2_if_stage.sv:217.30-217.69" *) \$22y ;
  assign instr_valid_id_d = \$21y  | (* src = "rtl/cve2/cve2_if_stage.sv:216.29-217.70" *) \$23y ;
  assign \$4y  = ! (* src = "rtl/cve2/cve2_if_stage.sv:148.30-148.49" *) pc_mux_i;
  assign csr_mtvec_init_o = \$4y  & (* src = "rtl/cve2/cve2_if_stage.sv:148.29-148.61" *) pc_set_i;
  assign if_instr_pmp_err = pmp_err_if_i | (* src = "rtl/cve2/cve2_if_stage.sv:188.29-189.88" *) \$13y ;
  (* src = "rtl/cve2/cve2_if_stage.sv:237.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) pc_id_o <= 32'd0;
    else if (if_id_pipe_reg_we) pc_id_o <= pc_if_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:237.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_rdata_alu_id_o <= 32'd0;
    else if (if_id_pipe_reg_we) instr_rdata_alu_id_o <= instr_decompressed;
  (* src = "rtl/cve2/cve2_if_stage.sv:237.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_rdata_c_id_o <= 16'h0000;
    else if (if_id_pipe_reg_we) instr_rdata_c_id_o <= fetch_rdata[15:0];
  (* src = "rtl/cve2/cve2_if_stage.sv:237.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_is_compressed_id_o <= 1'h0;
    else if (if_id_pipe_reg_we) instr_is_compressed_id_o <= instr_is_compressed;
  (* src = "rtl/cve2/cve2_if_stage.sv:237.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_fetch_err_plus2_o <= 1'h0;
    else if (if_id_pipe_reg_we) instr_fetch_err_plus2_o <= if_instr_err_plus2;
  (* src = "rtl/cve2/cve2_if_stage.sv:237.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_fetch_err_o <= 1'h0;
    else if (if_id_pipe_reg_we) instr_fetch_err_o <= if_instr_err;
  (* src = "rtl/cve2/cve2_if_stage.sv:237.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) illegal_c_insn_id_o <= 1'h0;
    else if (if_id_pipe_reg_we) illegal_c_insn_id_o <= illegal_c_insn;
  (* src = "rtl/cve2/cve2_if_stage.sv:220.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_new_id_o <= 1'h0;
    else instr_new_id_o <= if_id_pipe_reg_we;
  (* src = "rtl/cve2/cve2_if_stage.sv:220.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_valid_id_o <= 1'h0;
    else instr_valid_id_o <= instr_valid_id_d;
  function [31:0] \$procmux$10802 ;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_if_stage.sv:142.16-142.42|rtl/cve2/cve2_if_stage.sv:137.5-144.12" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$10802  = b[31:0];
      4'b??1?:
        \$procmux$10802  = b[63:32];
      4'b?1??:
        \$procmux$10802  = b[95:64];
      4'b1???:
        \$procmux$10802  = b[127:96];
      default:
        \$procmux$10802  = a;
    endcase
  endfunction
  assign fetch_addr_n = \$procmux$10802 ({ boot_addr_i[31:8], 8'h00 }, { branch_target_ex_i, exc_pc[31:2], 2'h0, csr_mepc_i, csr_depc_i }, { \$procmux$10806_CMP , \$procmux$10805_CMP , \$procmux$10804_CMP , \$procmux$10803_CMP  });
  assign \$procmux$10803_CMP  = pc_mux_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_if_stage.sv:142.16-142.42|rtl/cve2/cve2_if_stage.sv:137.5-144.12" *) 3'h4;
  assign \$procmux$10804_CMP  = pc_mux_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_if_stage.sv:141.16-141.42|rtl/cve2/cve2_if_stage.sv:137.5-144.12" *) 2'h3;
  assign \$procmux$10805_CMP  = pc_mux_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_if_stage.sv:140.16-140.38|rtl/cve2/cve2_if_stage.sv:137.5-144.12" *) 2'h2;
  assign \$procmux$10806_CMP  = pc_mux_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_if_stage.sv:139.16-139.50|rtl/cve2/cve2_if_stage.sv:137.5-144.12" *) 1'h1;
  function [29:0] \$procmux$10807 ;
    input [29:0] a;
    input [89:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_if_stage.sv:127.23-127.48|rtl/cve2/cve2_if_stage.sv:123.5-129.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10807  = b[29:0];
      3'b?1?:
        \$procmux$10807  = b[59:30];
      3'b1??:
        \$procmux$10807  = b[89:60];
      default:
        \$procmux$10807  = a;
    endcase
  endfunction
  assign exc_pc[31:2] = \$procmux$10807 ({ csr_mtvec_i[31:8], 6'h00 }, { csr_mtvec_i[31:8], exc_cause[5:0], 60'h000008000000204 }, { \$procmux$10810_CMP , \$procmux$10809_CMP , \$procmux$10808_CMP  });
  assign \$procmux$10808_CMP  = exc_pc_mux_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_if_stage.sv:127.23-127.48|rtl/cve2/cve2_if_stage.sv:123.5-129.12" *) 2'h3;
  assign \$procmux$10809_CMP  = exc_pc_mux_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_if_stage.sv:126.23-126.43|rtl/cve2/cve2_if_stage.sv:123.5-129.12" *) 2'h2;
  assign \$procmux$10810_CMP  = exc_pc_mux_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_if_stage.sv:125.23-125.74|rtl/cve2/cve2_if_stage.sv:123.5-129.12" *) 1'h1;
  (* src = "rtl/cve2/cve2_if_stage.sv:203.27" *)
  \cve2_compressed_decoder$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.compressed_decoder_i  compressed_decoder_i (
    .clk_i(clk_i),
    .illegal_instr_o(illegal_c_insn),
    .instr_i(fetch_rdata),
    .instr_o(instr_decompressed),
    .is_compressed_o(instr_is_compressed),
    .rst_ni(rst_ni),
    .valid_i(\$18y )
  );
  (* src = "rtl/cve2/cve2_if_stage.sv:152.5" *)
  \cve2_prefetch_buffer$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.prefetch_buffer_i  prefetch_buffer_i (
    .addr_i({ fetch_addr_n[31:1], 1'h0 }),
    .addr_o(pc_if_o),
    .branch_i(pc_set_i),
    .busy_o(if_busy_o),
    .clk_i(clk_i),
    .err_o(fetch_err),
    .err_plus2_o(fetch_err_plus2),
    .instr_addr_o(instr_addr_o),
    .instr_err_i(instr_err_i),
    .instr_gnt_i(instr_gnt_i),
    .instr_rdata_i(instr_rdata_i),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .rdata_o(fetch_rdata),
    .ready_i(id_in_ready_i),
    .req_i(req_i),
    .rst_ni(rst_ni),
    .valid_o(fetch_valid)
  );
  assign exc_pc[1:0] = 2'h0;
  assign instr_rdata_id_o = instr_rdata_alu_id_o;
endmodule

(* src = "rtl/cve2/cve2_load_store_unit.sv:16.8" *)
module \cve2_load_store_unit$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.load_store_unit_i (clk_i, rst_ni, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_be_o, data_addr_o, data_wdata_o, data_rdata_i, data_err_i, busy_o, data_pmp_err_i, lsu_we_i, lsu_type_i, lsu_wdata_i, lsu_sign_ext_i, lsu_rdata_o, lsu_rdata_valid_o, lsu_req_i, adder_result_ex_i
, addr_incr_req_o, addr_last_o, lsu_resp_valid_o, load_err_o, store_err_o, perf_load_o, perf_store_o);
  wire \$103y ;
  wire \$104y ;
  wire \$124y ;
  wire \$126y ;
  wire \$127y ;
  wire \$130y ;
  wire \$131y ;
  wire \$132y ;
  wire \$136y ;
  wire \$138y ;
  wire \$52y ;
  wire \$53y ;
  wire \$54y ;
  wire \$55y ;
  wire \$56y ;
  wire \$57y ;
  wire \$60y ;
  wire [1:0] \$62y ;
  wire \$76y ;
  wire \$81y ;
  wire \$82y ;
  wire [1:0] \$84y ;
  wire \$86y ;
  wire \$87y ;
  wire \$98y ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" *)
  wire \$addr_update$105 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *)
  wire \$addr_update$67 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" *)
  wire \$addr_update$91 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:417.9-423.12" *)
  wire \$addr_update$99 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14138 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14140 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14142 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14153 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14158 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14162 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14164 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14173 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14177 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14144 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14155 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14168 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14181 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13381 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13383 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13415 ;
  wire \$auto$opt_share.cc:222:merge_operators$13753 ;
  wire \$auto$rtlil.cc:3094:Pmux$13755 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:358.11-365.14" *)
  wire [2:0] \$auto$wreduce.cc:514:run$13496 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:113.11-119.18" *)
  wire [3:0] \$data_be$2 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:121.11-127.18" *)
  wire [3:0] \$data_be$3 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:112.9-128.12" *)
  wire [3:0] \$data_be$4 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:133.11-139.18" *)
  wire [3:0] \$data_be$6 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:132.9-142.12" *)
  wire [3:0] \$data_be$7 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16" *)
  wire [3:0] \$data_be$8 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:375.9-380.12" *)
  wire \$handle_misaligned_d$79 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" *)
  wire \$handle_misaligned_d$93 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" *)
  wire [2:0] \$ls_fsm_ns$96 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *)
  wire \$perf_load_o$74 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *)
  wire \$perf_store_o$75 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *)
  wire \$pmp_err_d$70 ;
  wire \$procmux$10002_CMP ;
  wire \$procmux$10060_CMP ;
  wire \$procmux$10088_CMP ;
  wire \$procmux$10090_CMP ;
  wire [1:0] \$procmux$10325_CMP ;
  wire \$procmux$10325_CTRL ;
  wire \$procmux$10326_CMP ;
  wire [31:0] \$procmux$10329_Y ;
  wire \$procmux$10332_CMP ;
  wire [31:0] \$procmux$10335_Y ;
  wire \$procmux$10338_CMP ;
  wire [31:0] \$procmux$10342_Y ;
  wire \$procmux$10345_CMP ;
  wire [31:0] \$procmux$10359_Y ;
  wire \$procmux$10417_CMP ;
  wire \$procmux$10418_CMP ;
  wire [1:0] \$procmux$10426_CMP ;
  wire \$procmux$10426_CTRL ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:44.24" *)
  input [31:0] adder_result_ex_i;
  wire [31:0] adder_result_ex_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:46.24" *)
  output addr_incr_req_o;
  wire addr_incr_req_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:66.30" *)
  wire [31:0] addr_last_d;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:48.24" *)
  output [31:0] addr_last_o;
  reg [31:0] addr_last_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:68.17" *)
  wire addr_update;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:58.24" *)
  output busy_o;
  wire busy_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:18.24" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:69.17" *)
  wire ctrl_update;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:28.24" *)
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:30.24" *)
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:25.24" *)
  input data_err_i;
  wire data_err_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:23.24" *)
  input data_gnt_i;
  wire data_gnt_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:93.17" *)
  wire data_or_pmp_err;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:26.24" *)
  input data_pmp_err_i;
  wire data_pmp_err_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:32.24" *)
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:22.24" *)
  output data_req_o;
  wire data_req_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:24.24" *)
  input data_rvalid_i;
  wire data_rvalid_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:74.17" *)
  reg data_sign_ext_q;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:73.17" *)
  reg [1:0] data_type_q;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:31.24" *)
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:29.24" *)
  output data_we_o;
  wire data_we_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:75.17" *)
  reg data_we_q;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:89.38" *)
  wire handle_misaligned_d;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:89.17" *)
  reg handle_misaligned_q;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:55.24" *)
  output load_err_o;
  wire load_err_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:100.12" *)
  reg [2:0] ls_fsm_cs;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:100.23" *)
  wire [2:0] ls_fsm_ns;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:92.28" *)
  wire lsu_err_d;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:92.17" *)
  reg lsu_err_q;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:40.24" *)
  output [31:0] lsu_rdata_o;
  wire [31:0] lsu_rdata_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:41.24" *)
  output lsu_rdata_valid_o;
  wire lsu_rdata_valid_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:42.24" *)
  input lsu_req_i;
  wire lsu_req_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:52.24" *)
  output lsu_resp_valid_o;
  wire lsu_resp_valid_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:38.24" *)
  input lsu_sign_ext_i;
  wire lsu_sign_ext_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:36.24" *)
  input [1:0] lsu_type_i;
  wire [1:0] lsu_type_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:37.24" *)
  input [31:0] lsu_wdata_i;
  wire [31:0] lsu_wdata_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:35.24" *)
  input lsu_we_i;
  wire lsu_we_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:60.24" *)
  output perf_load_o;
  wire perf_load_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:61.24" *)
  output perf_store_o;
  wire perf_store_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:91.28" *)
  wire pmp_err_d;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:91.17" *)
  reg pmp_err_q;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:86.17" *)
  wire [31:0] rdata_b_ext;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:85.17" *)
  wire [31:0] rdata_h_ext;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:72.17" *)
  reg [1:0] rdata_offset_q;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:71.17" *)
  reg [23:0] rdata_q;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:70.17" *)
  wire rdata_update;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:84.17" *)
  wire [31:0] rdata_w_ext;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:19.24" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:88.17" *)
  wire split_misaligned_access;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:56.24" *)
  output store_err_o;
  wire store_err_o;
  assign \$103y  = ~ (* src = "rtl/cve2/cve2_load_store_unit.sv:437.25-437.36" *) data_err_i;
  assign \$104y  = ~ (* src = "rtl/cve2/cve2_load_store_unit.sv:439.26-439.36" *) data_we_q;
  assign \$124y  = lsu_err_q | (* src = "rtl/cve2/cve2_load_store_unit.sv:470.31-470.53" *) data_err_i;
  assign data_or_pmp_err = \$124y  | (* src = "rtl/cve2/cve2_load_store_unit.sv:470.31-470.65" *) pmp_err_q;
  assign \$126y  = data_rvalid_i | (* src = "rtl/cve2/cve2_load_store_unit.sv:471.32-471.57" *) pmp_err_q;
  assign \$127y  = ! (* src = "rtl/cve2/cve2_load_store_unit.sv:471.62-471.79" *) ls_fsm_cs;
  assign lsu_resp_valid_o = \$126y  & (* src = "rtl/cve2/cve2_load_store_unit.sv:471.31-471.80" *) \$127y ;
  assign \$130y  = \$127y  & (* src = "rtl/cve2/cve2_load_store_unit.sv:472.31-472.66" *) data_rvalid_i;
  assign \$131y  = ~ (* src = "rtl/cve2/cve2_load_store_unit.sv:472.69-472.85" *) data_or_pmp_err;
  assign \$132y  = \$130y  & (* src = "rtl/cve2/cve2_load_store_unit.sv:472.31-472.85" *) \$131y ;
  assign lsu_rdata_valid_o = \$132y  & (* src = "rtl/cve2/cve2_load_store_unit.sv:472.31-472.98" *) \$104y ;
  assign \$136y  = data_or_pmp_err & (* src = "rtl/cve2/cve2_load_store_unit.sv:490.26-490.54" *) \$104y ;
  assign load_err_o = \$136y  & (* src = "rtl/cve2/cve2_load_store_unit.sv:490.26-490.73" *) lsu_resp_valid_o;
  assign \$138y  = data_or_pmp_err & (* src = "rtl/cve2/cve2_load_store_unit.sv:491.26-491.54" *) data_we_q;
  assign store_err_o = \$138y  & (* src = "rtl/cve2/cve2_load_store_unit.sv:491.26-491.73" *) lsu_resp_valid_o;
  assign busy_o = | (* src = "rtl/cve2/cve2_load_store_unit.sv:493.20-493.37" *) ls_fsm_cs;
  assign addr_last_d[1:0] = addr_incr_req_o ? (* src = "rtl/cve2/cve2_load_store_unit.sv:208.24-208.73" *) 2'h0 : adder_result_ex_i[1:0];
  assign \$52y  = ! (* src = "rtl/cve2/cve2_load_store_unit.sv:327.9-327.28" *) lsu_type_i;
  assign \$53y  = | (* src = "rtl/cve2/cve2_load_store_unit.sv:327.34-327.54" *) adder_result_ex_i[1:0];
  assign \$54y  = \$52y  && (* src = "rtl/cve2/cve2_load_store_unit.sv:327.8-327.55" *) \$53y ;
  assign \$55y  = lsu_type_i == (* src = "rtl/cve2/cve2_load_store_unit.sv:328.9-328.28" *) 1'h1;
  assign \$56y  = adder_result_ex_i[1:0] == (* src = "rtl/cve2/cve2_load_store_unit.sv:328.34-328.54" *) 2'h3;
  assign \$57y  = \$55y  && (* src = "rtl/cve2/cve2_load_store_unit.sv:328.8-328.55" *) \$56y ;
  assign split_misaligned_access = \$54y  || (* src = "rtl/cve2/cve2_load_store_unit.sv:327.7-328.56" *) \$57y ;
  assign \$60y  = ~ (* src = "rtl/cve2/cve2_load_store_unit.sv:355.26-355.35" *) lsu_we_i;
  assign \$62y [1] = ~ (* src = "rtl/cve2/cve2_load_store_unit.sv:364.35-364.87" *) split_misaligned_access;
  assign \$76y  = data_gnt_i || (* src = "rtl/cve2/cve2_load_store_unit.sv:375.13-375.36" *) pmp_err_q;
  assign \$81y  = data_rvalid_i || (* src = "rtl/cve2/cve2_load_store_unit.sv:390.13-390.39" *) pmp_err_q;
  assign \$82y  = data_err_i | (* src = "rtl/cve2/cve2_load_store_unit.sv:394.23-394.45" *) pmp_err_q;
  assign \$84y [1] = ~ (* src = "rtl/cve2/cve2_load_store_unit.sv:398.23-398.51" *) data_gnt_i;
  assign \$86y  = ~ (* src = "rtl/cve2/cve2_load_store_unit.sv:400.38-400.63" *) \$82y ;
  assign \$87y  = data_gnt_i & (* src = "rtl/cve2/cve2_load_store_unit.sv:400.25-400.63" *) \$86y ;
  assign \$98y  = ~ (* src = "rtl/cve2/cve2_load_store_unit.sv:420.33-420.43" *) lsu_err_q;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q <= 24'h000000;
    else if (rdata_update) rdata_q <= data_rdata_i[31:8];
  (* src = "rtl/cve2/cve2_load_store_unit.sv:190.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_offset_q <= 2'h0;
    else if (ctrl_update) rdata_offset_q <= adder_result_ex_i[1:0];
  (* src = "rtl/cve2/cve2_load_store_unit.sv:452.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) pmp_err_q <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14144 ) pmp_err_q <= pmp_err_d;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:452.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) lsu_err_q <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14155 ) lsu_err_q <= lsu_err_d;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:452.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) ls_fsm_cs <= 3'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14168 ) ls_fsm_cs <= ls_fsm_ns;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:452.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) handle_misaligned_q <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14181 ) handle_misaligned_q <= handle_misaligned_d;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:190.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_we_q <= 1'h0;
    else if (ctrl_update) data_we_q <= lsu_we_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:190.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_type_q <= 2'h0;
    else if (ctrl_update) data_type_q <= lsu_type_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:190.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_sign_ext_q <= 1'h0;
    else if (ctrl_update) data_sign_ext_q <= lsu_sign_ext_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:210.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) addr_last_o <= 32'd0;
    else if (addr_update) addr_last_o <= { adder_result_ex_i[31:2], addr_last_d[1:0] };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14138  = { \$procmux$10088_CMP , data_rvalid_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14140  = { \$procmux$10002_CMP , \$81y  } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14142  = | { \$procmux$10088_CMP , \$procmux$10002_CMP , \$127y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14153  = { lsu_req_i, \$127y  } != 2'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14158  = { \$procmux$10002_CMP , \$81y , data_gnt_i } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14162  = { \$procmux$10060_CMP , \$76y  } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14164  = { \$procmux$10090_CMP , \$76y  } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14173  = { lsu_req_i, \$127y , data_gnt_i } != 3'h6;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14177  = | { \$procmux$10090_CMP , \$procmux$10060_CMP , \$procmux$10002_CMP , \$127y  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14144  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14142 , \$auto$opt_dff.cc:194:make_patterns_logic$14140 , \$auto$opt_dff.cc:194:make_patterns_logic$14138  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14155  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14153 , \$auto$opt_dff.cc:194:make_patterns_logic$14142 , \$auto$opt_dff.cc:194:make_patterns_logic$14140 , \$auto$opt_dff.cc:194:make_patterns_logic$14138  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14168  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14164 , \$auto$opt_dff.cc:194:make_patterns_logic$14162 , \$auto$opt_dff.cc:194:make_patterns_logic$14158 , \$auto$opt_dff.cc:194:make_patterns_logic$14153 , \$auto$opt_dff.cc:194:make_patterns_logic$14138  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14181  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14173 , \$auto$opt_dff.cc:194:make_patterns_logic$14164 , \$auto$opt_dff.cc:194:make_patterns_logic$14158 , \$auto$opt_dff.cc:194:make_patterns_logic$14153 , \$auto$opt_dff.cc:194:make_patterns_logic$14177  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13383  = | { \$procmux$10090_CMP , \$procmux$10060_CMP , \$procmux$10002_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13415  = | { \$procmux$10090_CMP , \$procmux$10060_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13381  = | { \$procmux$10088_CMP , \$procmux$10002_CMP  };
  assign \$auto$rtlil.cc:3094:Pmux$13755  = \$procmux$10088_CMP  ? data_rvalid_i : \$81y ;
  assign \$procmux$10002_CMP  = ls_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) 2'h2;
  assign \$ls_fsm_ns$96 [2:1] = \$81y  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" *) { 1'h0, \$84y [1] } : 2'h2;
  assign \$handle_misaligned_d$93  = \$81y  & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" *) \$84y [1];
  assign \$addr_update$91  = \$81y  & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" *) \$87y ;
  assign \$procmux$10060_CMP  = ls_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:369.21-381.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) 1'h1;
  assign \$handle_misaligned_d$79  = handle_misaligned_q | (* src = "rtl/cve2/cve2_load_store_unit.sv:375.38-380.12|rtl/cve2/cve2_load_store_unit.sv:375.9-380.12" *) \$76y ;
  function [2:0] \$procmux$10087 ;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10087  = b[2:0];
      3'b?1?:
        \$procmux$10087  = b[5:3];
      3'b1??:
        \$procmux$10087  = b[8:6];
      default:
        \$procmux$10087  = a;
    endcase
  endfunction
  assign ls_fsm_ns = \$procmux$10087 (3'h0, { 1'h0, \$auto$wreduce.cc:514:run$13496 [1:0], 3'h2, \$ls_fsm_ns$96 [2:1], \$ls_fsm_ns$96 [1] }, { \$127y , \$procmux$10060_CMP , \$procmux$10002_CMP  });
  assign \$procmux$10088_CMP  = ls_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) 3'h4;
  assign \$procmux$10090_CMP  = ls_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) 2'h3;
  assign \$auto$wreduce.cc:514:run$13496 [1:0] = data_gnt_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:358.27-363.14|rtl/cve2/cve2_load_store_unit.sv:358.11-365.14" *) { split_misaligned_access, 1'h0 } : { \$62y [1], 1'h1 };
  assign \$perf_store_o$75  = lsu_req_i & (* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *) lsu_we_i;
  assign \$perf_load_o$74  = lsu_req_i & (* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *) \$60y ;
  assign \$pmp_err_d$70  = lsu_req_i & (* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *) data_pmp_err_i;
  assign \$addr_update$67  = lsu_req_i & (* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *) data_gnt_i;
  assign perf_store_o = \$127y  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) \$perf_store_o$75 ;
  assign perf_load_o = \$127y  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) \$perf_load_o$74 ;
  function [0:0] \$procmux$10253 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$10253  = b[0:0];
      2'b1?:
        \$procmux$10253  = b[1:1];
      default:
        \$procmux$10253  = a;
    endcase
  endfunction
  assign addr_incr_req_o = \$procmux$10253 (1'h0, { handle_misaligned_q, 1'h1 }, { \$procmux$10090_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13381  });
  function [0:0] \$procmux$10262 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$10262  = b[0:0];
      2'b1?:
        \$procmux$10262  = b[1:1];
      default:
        \$procmux$10262  = a;
    endcase
  endfunction
  assign data_req_o = \$procmux$10262 (1'h0, { lsu_req_i, 1'h1 }, { \$127y , \$auto$opt_reduce.cc:137:opt_pmux$13383  });
  function [0:0] \$procmux$10272 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$10272  = b[0:0];
      2'b1?:
        \$procmux$10272  = b[1:1];
      default:
        \$procmux$10272  = a;
    endcase
  endfunction
  assign lsu_err_d = \$procmux$10272 (1'h0, { \$82y , data_err_i }, { \$procmux$10002_CMP , \$procmux$10088_CMP  });
  assign pmp_err_d = \$auto$opt_reduce.cc:137:opt_pmux$13381  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) data_pmp_err_i : \$pmp_err_d$70 ;
  function [0:0] \$procmux$10289 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10289  = b[0:0];
      3'b?1?:
        \$procmux$10289  = b[1:1];
      3'b1??:
        \$procmux$10289  = b[2:2];
      default:
        \$procmux$10289  = a;
    endcase
  endfunction
  assign handle_misaligned_d = \$procmux$10289 (split_misaligned_access, { \$handle_misaligned_d$79 , \$handle_misaligned_d$93 , 1'h0 }, { \$procmux$10060_CMP , \$procmux$10002_CMP , \$procmux$10090_CMP  });
  assign rdata_update = \$auto$opt_reduce.cc:137:opt_pmux$13381  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) \$auto$opt_share.cc:222:merge_operators$13753 ;
  function [0:0] \$procmux$10306 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$10306  = b[0:0];
      2'b1?:
        \$procmux$10306  = b[1:1];
      default:
        \$procmux$10306  = a;
    endcase
  endfunction
  assign ctrl_update = \$procmux$10306 (1'h0, { \$addr_update$67 , \$76y  }, { \$127y , \$auto$opt_reduce.cc:137:opt_pmux$13415  });
  function [0:0] \$procmux$10314 ;
    input [0:0] a;
    input [4:0] b;
    input [4:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        \$procmux$10314  = b[0:0];
      5'b???1?:
        \$procmux$10314  = b[1:1];
      5'b??1??:
        \$procmux$10314  = b[2:2];
      5'b?1???:
        \$procmux$10314  = b[3:3];
      5'b1????:
        \$procmux$10314  = b[4:4];
      default:
        \$procmux$10314  = a;
    endcase
  endfunction
  assign addr_update = \$procmux$10314 (1'h0, { \$addr_update$67 , \$76y , \$addr_update$91 , \$addr_update$99 , \$addr_update$105  }, { \$127y , \$procmux$10060_CMP , \$procmux$10002_CMP , \$procmux$10090_CMP , \$procmux$10088_CMP  });
  function [31:0] \$procmux$10324 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$10324  = b[31:0];
      2'b1?:
        \$procmux$10324  = b[63:32];
      default:
        \$procmux$10324  = a;
    endcase
  endfunction
  assign lsu_rdata_o = \$procmux$10324 (rdata_w_ext, { rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[15:0], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[7:0] }, { \$procmux$10326_CMP , \$procmux$10325_CTRL  });
  assign \$procmux$10325_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" *) \$procmux$10325_CMP ;
  assign \$procmux$10325_CMP [0] = data_type_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" *) 2'h2;
  assign \$procmux$10325_CMP [1] = data_type_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" *) 2'h3;
  assign \$procmux$10326_CMP  = data_type_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:315.20-315.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" *) 1'h1;
  assign \$procmux$10329_Y [31] = data_sign_ext_q & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:301.11-301.60|rtl/cve2/cve2_load_store_unit.sv:300.9-304.12" *) data_rdata_i[31];
  assign \$procmux$10332_CMP  = rdata_offset_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:300.9-304.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" *) 2'h3;
  assign \$procmux$10335_Y [31] = data_sign_ext_q & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:293.11-293.60|rtl/cve2/cve2_load_store_unit.sv:292.9-296.12" *) data_rdata_i[23];
  assign \$procmux$10338_CMP  = rdata_offset_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:292.9-296.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" *) 2'h2;
  assign \$procmux$10342_Y [31] = data_sign_ext_q & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:285.11-285.59|rtl/cve2/cve2_load_store_unit.sv:284.9-288.12" *) data_rdata_i[15];
  assign \$procmux$10345_CMP  = rdata_offset_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:284.9-288.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" *) 1'h1;
  function [8:0] \$procmux$10347 ;
    input [8:0] a;
    input [26:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:300.9-304.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10347  = b[8:0];
      3'b?1?:
        \$procmux$10347  = b[17:9];
      3'b1??:
        \$procmux$10347  = b[26:18];
      default:
        \$procmux$10347  = a;
    endcase
  endfunction
  assign { rdata_b_ext[31], rdata_b_ext[7:0] } = \$procmux$10347 ({ \$procmux$10359_Y [31], data_rdata_i[7:0] }, { \$procmux$10342_Y [31], data_rdata_i[15:8], \$procmux$10335_Y [31], data_rdata_i[23:16], \$procmux$10329_Y [31], data_rdata_i[31:24] }, { \$procmux$10345_CMP , \$procmux$10338_CMP , \$procmux$10332_CMP  });
  assign \$procmux$10359_Y [31] = data_sign_ext_q & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:277.11-277.58|rtl/cve2/cve2_load_store_unit.sv:276.9-280.12" *) data_rdata_i[7];
  function [16:0] \$procmux$10382 ;
    input [16:0] a;
    input [50:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:261.9-265.12|rtl/cve2/cve2_load_store_unit.sv:235.5-269.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10382  = b[16:0];
      3'b?1?:
        \$procmux$10382  = b[33:17];
      3'b1??:
        \$procmux$10382  = b[50:34];
      default:
        \$procmux$10382  = a;
    endcase
  endfunction
  assign { rdata_h_ext[31], rdata_h_ext[15:0] } = \$procmux$10382 ({ \$procmux$10342_Y [31], data_rdata_i[15:0] }, { \$procmux$10335_Y [31], data_rdata_i[23:8], \$procmux$10329_Y [31], data_rdata_i[31:16], \$procmux$10359_Y [31], data_rdata_i[7:0], rdata_q[23:16] }, { \$procmux$10345_CMP , \$procmux$10338_CMP , \$procmux$10332_CMP  });
  function [31:0] \$procmux$10398 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:224.16-224.67|rtl/cve2/cve2_load_store_unit.sv:220.5-226.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10398  = b[31:0];
      3'b?1?:
        \$procmux$10398  = b[63:32];
      3'b1??:
        \$procmux$10398  = b[95:64];
      default:
        \$procmux$10398  = a;
    endcase
  endfunction
  assign rdata_w_ext = \$procmux$10398 (data_rdata_i, { data_rdata_i[7:0], rdata_q, data_rdata_i[15:0], rdata_q[23:8], data_rdata_i[23:0], rdata_q[23:16] }, { \$procmux$10345_CMP , \$procmux$10338_CMP , \$procmux$10332_CMP  });
  function [31:0] \$procmux$10415 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:171.16-171.69|rtl/cve2/cve2_load_store_unit.sv:167.5-173.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10415  = b[31:0];
      3'b?1?:
        \$procmux$10415  = b[63:32];
      3'b1??:
        \$procmux$10415  = b[95:64];
      default:
        \$procmux$10415  = a;
    endcase
  endfunction
  assign data_wdata_o = \$procmux$10415 (lsu_wdata_i, { lsu_wdata_i[23:0], lsu_wdata_i[31:24], lsu_wdata_i[15:0], lsu_wdata_i[31:16], lsu_wdata_i[7:0], lsu_wdata_i[31:8] }, { \$procmux$10418_CMP , \$procmux$10417_CMP , \$56y  });
  assign \$procmux$10417_CMP  = adder_result_ex_i[1:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:170.16-170.69|rtl/cve2/cve2_load_store_unit.sv:167.5-173.12" *) 2'h2;
  assign \$procmux$10418_CMP  = adder_result_ex_i[1:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:169.16-169.69|rtl/cve2/cve2_load_store_unit.sv:167.5-173.12" *) 1'h1;
  function [3:0] \$procmux$10420 ;
    input [3:0] a;
    input [11:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:151.20-151.38|rtl/cve2/cve2_load_store_unit.sv:147.9-153.16" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10420  = b[3:0];
      3'b?1?:
        \$procmux$10420  = b[7:4];
      3'b1??:
        \$procmux$10420  = b[11:8];
      default:
        \$procmux$10420  = a;
    endcase
  endfunction
  assign \$data_be$8  = \$procmux$10420 (4'h1, 12'h248, { \$procmux$10418_CMP , \$procmux$10417_CMP , \$56y  });
  assign \$procmux$10426_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" *) \$procmux$10426_CMP ;
  assign \$procmux$10426_CMP [0] = lsu_type_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" *) 2'h2;
  assign \$procmux$10426_CMP [1] = lsu_type_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" *) 2'h3;
  assign \$data_be$7  = handle_misaligned_q ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:133.11-139.18|rtl/cve2/cve2_load_store_unit.sv:132.9-142.12" *) 4'h1 : \$data_be$6 ;
  function [3:0] \$procmux$10436 ;
    input [3:0] a;
    input [11:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:137.22-137.40|rtl/cve2/cve2_load_store_unit.sv:133.11-139.18" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10436  = b[3:0];
      3'b?1?:
        \$procmux$10436  = b[7:4];
      3'b1??:
        \$procmux$10436  = b[11:8];
      default:
        \$procmux$10436  = a;
    endcase
  endfunction
  assign \$data_be$6  = \$procmux$10436 (4'h3, 12'h6c8, { \$procmux$10418_CMP , \$procmux$10417_CMP , \$56y  });
  function [3:0] \$procmux$10446 ;
    input [3:0] a;
    input [7:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$10446  = b[3:0];
      2'b1?:
        \$procmux$10446  = b[7:4];
      default:
        \$procmux$10446  = a;
    endcase
  endfunction
  assign data_be_o = \$procmux$10446 (\$data_be$4 , { \$data_be$7 , \$data_be$8  }, { \$55y , \$procmux$10426_CTRL  });
  function [2:0] \$procmux$10454 ;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:125.22-125.40|rtl/cve2/cve2_load_store_unit.sv:121.11-127.18" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10454  = b[2:0];
      3'b?1?:
        \$procmux$10454  = b[5:3];
      3'b1??:
        \$procmux$10454  = b[8:6];
      default:
        \$procmux$10454  = a;
    endcase
  endfunction
  assign \$data_be$3 [2:0] = \$procmux$10454 (3'h0, 9'h05f, { \$procmux$10418_CMP , \$procmux$10417_CMP , \$56y  });
  assign \$data_be$4  = handle_misaligned_q ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:113.11-119.18|rtl/cve2/cve2_load_store_unit.sv:112.9-128.12" *) { 1'h0, \$data_be$3 [2:0] } : { 1'h1, \$data_be$2 [2:0] };
  function [2:0] \$procmux$10476 ;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:117.22-117.40|rtl/cve2/cve2_load_store_unit.sv:113.11-119.18" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10476  = b[2:0];
      3'b?1?:
        \$procmux$10476  = b[5:3];
      3'b1??:
        \$procmux$10476  = b[8:6];
      default:
        \$procmux$10476  = a;
    endcase
  endfunction
  assign \$data_be$2 [2:0] = \$procmux$10476 (3'h7, 9'h1a0, { \$procmux$10418_CMP , \$procmux$10417_CMP , \$56y  });
  assign \$auto$opt_share.cc:222:merge_operators$13753  = \$auto$rtlil.cc:3094:Pmux$13755  & (* src = "rtl/cve2/cve2_load_store_unit.sv:431.28-442.12|rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" *) \$104y ;
  assign \$addr_update$105  = data_rvalid_i & (* src = "rtl/cve2/cve2_load_store_unit.sv:431.28-442.12|rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" *) \$103y ;
  assign \$addr_update$99  = \$76y  & (* src = "rtl/cve2/cve2_load_store_unit.sv:417.38-423.12|rtl/cve2/cve2_load_store_unit.sv:417.9-423.12" *) \$98y ;
  assign \$62y [0] = 1'h1;
  assign \$84y [0] = \$84y [1];
  assign \$auto$wreduce.cc:514:run$13496 [2] = 1'h0;
  assign \$data_be$2 [3] = 1'h1;
  assign \$data_be$3 [3] = 1'h0;
  assign \$ls_fsm_ns$96 [0] = \$ls_fsm_ns$96 [1];
  assign \$procmux$10329_Y [30:0] = { \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], data_rdata_i[31:24] };
  assign \$procmux$10335_Y [30:0] = { \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], data_rdata_i[23:16] };
  assign \$procmux$10342_Y [30:0] = { \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], data_rdata_i[15:8] };
  assign \$procmux$10359_Y [30:0] = { \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], data_rdata_i[7:0] };
  assign addr_last_d[31:2] = adder_result_ex_i[31:2];
  assign data_addr_o = { adder_result_ex_i[31:2], 2'h0 };
  assign data_we_o = lsu_we_i;
  assign rdata_b_ext[30:8] = { rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31] };
  assign rdata_h_ext[30:16] = { rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31] };
endmodule

(* src = "rtl/cve2/cve2_mac_controller.sv:29.8" *)
module \cve2_mac_controller$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.mac__controller_i (clk_i, rst_ni, alu_operator_i, alu_operator_o, mac_en_i, mac_en_2_cycles_o);
  wire \$1y ;
  wire \$2y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14188 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14191 ;
  wire \$procmux$3373_CMP ;
  wire \$procmux$3375_CMP ;
  (* src = "rtl/cve2/cve2_mac_controller.sv:35.37" *)
  input [6:0] alu_operator_i;
  wire [6:0] alu_operator_i;
  (* src = "rtl/cve2/cve2_mac_controller.sv:39.37" *)
  output [6:0] alu_operator_o;
  reg [6:0] alu_operator_o;
  (* src = "rtl/cve2/cve2_mac_controller.sv:31.34" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_mac_controller.sv:48.11" *)
  wire mac_en_2_cycles_d;
  (* src = "rtl/cve2/cve2_mac_controller.sv:40.37" *)
  output mac_en_2_cycles_o;
  reg mac_en_2_cycles_o;
  (* src = "rtl/cve2/cve2_mac_controller.sv:36.37" *)
  input mac_en_i;
  wire mac_en_i;
  (* src = "rtl/cve2/cve2_mac_controller.sv:32.34" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_mac_controller.sv:44.26" *)
  wire [1:0] state_d;
  (* src = "rtl/cve2/cve2_mac_controller.sv:44.17" *)
  reg [1:0] state_q;
  assign \$1y  = alu_operator_i == (* src = "rtl/cve2/cve2_mac_controller.sv:58.21-58.56" *) 7'h41;
  assign \$2y  = \$1y  && (* src = "rtl/cve2/cve2_mac_controller.sv:58.21-58.68" *) mac_en_i;
  (* src = "rtl/cve2/cve2_mac_controller.sv:85.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14188 ) state_q <= state_d;
  (* src = "rtl/cve2/cve2_mac_controller.sv:85.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) alu_operator_o <= alu_operator_i;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14191 ) alu_operator_o <= alu_operator_i;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14188  = { \$procmux$3375_CMP , \$2y  } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14191  = { \$procmux$3375_CMP , \$2y  } != 2'h3;
  (* src = "rtl/cve2/cve2_mac_controller.sv:85.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mac_en_2_cycles_o <= 1'h0;
    else mac_en_2_cycles_o <= mac_en_2_cycles_d;
  assign mac_en_2_cycles_d = state_q == (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_mac_controller.sv:70.18-75.16|rtl/cve2/cve2_mac_controller.sv:56.9-81.16" *) 2'h2;
  assign \$procmux$3373_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_mac_controller.sv:64.18-69.16|rtl/cve2/cve2_mac_controller.sv:56.9-81.16" *) 1'h1;
  assign \$procmux$3375_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_mac_controller.sv:58.17-62.20|rtl/cve2/cve2_mac_controller.sv:56.9-81.16" *) state_q;
  function [1:0] \$procmux$3378 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_mac_controller.sv:64.18-69.16|rtl/cve2/cve2_mac_controller.sv:56.9-81.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$3378  = b[1:0];
      2'b1?:
        \$procmux$3378  = b[3:2];
      default:
        \$procmux$3378  = a;
    endcase
  endfunction
  assign state_d = \$procmux$3378 (2'h0, 4'h6, { \$procmux$3375_CMP , \$procmux$3373_CMP  });
endmodule

(* src = "rtl/cve2/cve2_prefetch_buffer.sv:12.8" *)
module \cve2_prefetch_buffer$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.prefetch_buffer_i (clk_i, rst_ni, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, addr_o, req_i, addr_i, rdata_o, busy_o, branch_i, ready_i, valid_o, err_o, err_plus2_o);
  wire \$0y ;
  wire \$10y ;
  wire \$12y ;
  wire \$14y ;
  wire \$15y ;
  wire [31:0] \$25y ;
  wire [1:0] \$2y ;
  wire [31:0] \$33y ;
  wire \$35y ;
  wire \$38y ;
  wire \$39y ;
  wire \$3y ;
  wire \$40y ;
  wire \$43y ;
  wire \$47y ;
  wire \$48y ;
  wire \$49y ;
  wire \$53y ;
  wire \$5y ;
  wire \$6y ;
  wire \$7y ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14196 ;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:20.23" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:26.23" *)
  output [31:0] addr_o;
  wire [31:0] addr_o;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:48.24" *)
  wire [1:0] branch_discard_n;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:48.60" *)
  reg [1:0] branch_discard_q;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:48.42" *)
  wire [1:0] branch_discard_s;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:19.23" *)
  input branch_i;
  wire branch_i;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:39.23" *)
  output busy_o;
  wire busy_o;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:14.23" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:46.24" *)
  wire discard_req_d;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:46.39" *)
  reg discard_req_q;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:27.23" *)
  output err_o;
  wire err_o;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:28.23" *)
  output err_plus2_o;
  wire err_plus2_o;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:53.24" *)
  wire [31:0] fetch_addr_d;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:54.24" *)
  wire fetch_addr_en;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:53.38" *)
  reg [31:0] fetch_addr_q;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:61.24" *)
  wire [1:0] fifo_busy;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:59.24" *)
  wire fifo_ready;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:57.24" *)
  wire fifo_valid;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:55.24" *)
  (* unused_bits = "0 1" *)
  wire [31:0] instr_addr;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:33.23" *)
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:35.23" *)
  input instr_err_i;
  wire instr_err_i;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:32.23" *)
  input instr_gnt_i;
  wire instr_gnt_i;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:34.23" *)
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:31.23" *)
  output instr_req_o;
  wire instr_req_o;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:36.23" *)
  input instr_rvalid_i;
  wire instr_rvalid_i;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:25.23" *)
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:47.24" *)
  wire [1:0] rdata_outstanding_n;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:47.66" *)
  reg [1:0] rdata_outstanding_q;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:47.45" *)
  wire [1:0] rdata_outstanding_s;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:23.23" *)
  input ready_i;
  wire ready_i;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:17.23" *)
  input req_i;
  wire req_i;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:15.23" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:52.24" *)
  wire stored_addr_en;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:51.39" *)
  reg [31:0] stored_addr_q;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:44.24" *)
  wire valid_new_req;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:24.23" *)
  output valid_o;
  wire valid_o;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:45.24" *)
  wire valid_req_d;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:45.37" *)
  reg valid_req_q;
  assign \$0y  = | (* src = "rtl/cve2/cve2_prefetch_buffer.sv:69.20-69.40" *) rdata_outstanding_q;
  assign busy_o = \$0y  | (* src = "rtl/cve2/cve2_prefetch_buffer.sv:69.19-69.55" *) instr_req_o;
  assign \$10y  = ~ (* src = "rtl/cve2/cve2_prefetch_buffer.sv:123.36-123.48" *) instr_gnt_i;
  assign valid_req_d = instr_req_o & (* src = "rtl/cve2/cve2_prefetch_buffer.sv:123.24-123.48" *) \$10y ;
  assign \$12y  = branch_i | (* src = "rtl/cve2/cve2_prefetch_buffer.sv:126.41-126.65" *) discard_req_q;
  assign discard_req_d = valid_req_q & (* src = "rtl/cve2/cve2_prefetch_buffer.sv:126.26-126.66" *) \$12y ;
  assign \$14y  = ~ (* src = "rtl/cve2/cve2_prefetch_buffer.sv:145.43-145.55" *) valid_req_q;
  assign \$15y  = valid_new_req & (* src = "rtl/cve2/cve2_prefetch_buffer.sv:145.27-145.55" *) \$14y ;
  assign stored_addr_en = \$15y  & (* src = "rtl/cve2/cve2_prefetch_buffer.sv:145.27-145.70" *) \$10y ;
  assign \$2y  = fifo_busy | (* src = "rtl/cve2/cve2_prefetch_buffer.sv:88.26-88.59" *) { rdata_outstanding_q[0], rdata_outstanding_q[1] };
  assign fetch_addr_en = branch_i | (* src = "rtl/cve2/cve2_prefetch_buffer.sv:161.26-161.67" *) \$15y ;
  assign { \$25y [31:2], fetch_addr_d[1:0] } = branch_i ? (* src = "rtl/cve2/cve2_prefetch_buffer.sv:163.26-164.75" *) addr_i : { fetch_addr_q[31:2], 2'h0 };
  assign fetch_addr_d[31:2] = \$25y [31:2] + (* src = "rtl/cve2/cve2_prefetch_buffer.sv:163.25-166.74" *) \$15y ;
  assign \$3y  = & (* src = "rtl/cve2/cve2_prefetch_buffer.sv:88.23-88.60" *) \$2y ;
  assign \$33y  = branch_i ? (* src = "rtl/cve2/cve2_prefetch_buffer.sv:178.23-179.57" *) addr_i : fetch_addr_q;
  assign instr_addr = valid_req_q ? (* src = "rtl/cve2/cve2_prefetch_buffer.sv:177.23-179.57" *) stored_addr_q : \$33y ;
  assign \$35y  = instr_req_o & (* src = "rtl/cve2/cve2_prefetch_buffer.sv:192.40-192.63" *) instr_gnt_i;
  assign rdata_outstanding_n[0] = \$35y  | (* src = "rtl/cve2/cve2_prefetch_buffer.sv:192.39-193.61" *) rdata_outstanding_q[0];
  assign \$38y  = \$35y  & (* src = "rtl/cve2/cve2_prefetch_buffer.sv:196.40-196.79" *) discard_req_d;
  assign \$39y  = branch_i & (* src = "rtl/cve2/cve2_prefetch_buffer.sv:197.40-197.73" *) rdata_outstanding_q[0];
  assign fifo_ready = ! (* src = "rtl/cve2/cve2_prefetch_buffer.sv:88.23-88.60" *) \$3y ;
  assign \$40y  = \$38y  | (* src = "rtl/cve2/cve2_prefetch_buffer.sv:196.39-197.74" *) \$39y ;
  assign branch_discard_n[0] = \$40y  | (* src = "rtl/cve2/cve2_prefetch_buffer.sv:196.39-198.58" *) branch_discard_q[0];
  assign \$43y  = \$35y  & (* src = "rtl/cve2/cve2_prefetch_buffer.sv:204.40-205.64" *) rdata_outstanding_q[0];
  assign rdata_outstanding_n[1] = \$43y  | (* src = "rtl/cve2/cve2_prefetch_buffer.sv:204.39-206.61" *) rdata_outstanding_q[1];
  assign \$47y  = \$38y  & (* src = "rtl/cve2/cve2_prefetch_buffer.sv:207.40-208.64" *) rdata_outstanding_q[0];
  assign \$48y  = branch_i & (* src = "rtl/cve2/cve2_prefetch_buffer.sv:209.40-209.73" *) rdata_outstanding_q[1];
  assign \$49y  = \$47y  | (* src = "rtl/cve2/cve2_prefetch_buffer.sv:207.39-209.74" *) \$48y ;
  assign \$5y  = fifo_ready | (* src = "rtl/cve2/cve2_prefetch_buffer.sv:117.35-117.56" *) branch_i;
  assign branch_discard_n[1] = \$49y  | (* src = "rtl/cve2/cve2_prefetch_buffer.sv:207.39-210.58" *) branch_discard_q[1];
  assign rdata_outstanding_s = instr_rvalid_i ? (* src = "rtl/cve2/cve2_prefetch_buffer.sv:215.32-216.68" *) { 1'h0, rdata_outstanding_n[1] } : rdata_outstanding_n;
  assign branch_discard_s = instr_rvalid_i ? (* src = "rtl/cve2/cve2_prefetch_buffer.sv:217.32-218.65" *) { 1'h0, branch_discard_n[1] } : branch_discard_n;
  assign \$53y  = ~ (* src = "rtl/cve2/cve2_prefetch_buffer.sv:221.40-221.60" *) branch_discard_q[0];
  assign fifo_valid = instr_rvalid_i & (* src = "rtl/cve2/cve2_prefetch_buffer.sv:221.23-221.60" *) \$53y ;
  assign \$6y  = req_i & (* src = "rtl/cve2/cve2_prefetch_buffer.sv:117.26-117.57" *) \$5y ;
  assign \$7y  = ~ (* src = "rtl/cve2/cve2_prefetch_buffer.sv:118.26-118.58" *) rdata_outstanding_q[1];
  assign valid_new_req = \$6y  & (* src = "rtl/cve2/cve2_prefetch_buffer.sv:117.26-118.58" *) \$7y ;
  assign instr_req_o = valid_req_q | (* src = "rtl/cve2/cve2_prefetch_buffer.sv:120.22-120.49" *) valid_new_req;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:151.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) stored_addr_q[1:0] <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14196 ) stored_addr_q[1:0] <= \$33y [1:0];
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:151.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) stored_addr_q[31:2] <= 30'h00000000;
    else if (stored_addr_en) stored_addr_q[31:2] <= instr_addr[31:2];
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:168.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) fetch_addr_q <= 32'd0;
    else if (fetch_addr_en) fetch_addr_q <= fetch_addr_d;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14196  = & { stored_addr_en, \$14y  };
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:229.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) branch_discard_q <= 2'h0;
    else branch_discard_q <= branch_discard_s;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:229.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) discard_req_q <= 1'h0;
    else discard_req_q <= discard_req_d;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:229.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_outstanding_q <= 2'h0;
    else rdata_outstanding_q <= rdata_outstanding_s;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:229.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) valid_req_q <= 1'h0;
    else valid_req_q <= valid_req_d;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:92.5" *)
  \cve2_fetch_fifo$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.prefetch_buffer_i.fifo_i  fifo_i (
    .busy_o(fifo_busy),
    .clear_i(branch_i),
    .clk_i(clk_i),
    .in_addr_i(addr_i),
    .in_err_i(instr_err_i),
    .in_rdata_i(instr_rdata_i),
    .in_valid_i(fifo_valid),
    .out_addr_o(addr_o),
    .out_err_o(err_o),
    .out_err_plus2_o(err_plus2_o),
    .out_rdata_o(rdata_o),
    .out_ready_i(ready_i),
    .out_valid_o(valid_o),
    .rst_ni(rst_ni)
  );
  assign \$25y [1:0] = fetch_addr_d[1:0];
  assign instr_addr_o = { instr_addr[31:2], 2'h0 };
endmodule

(* src = "rtl/cve2/cve2_register_file_ff.sv:13.8" *)
module \cve2_register_file_ff$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.register_file_i (clk_i, rst_ni, test_en_i, raddr_a_i, rdata_a_o, raddr_b_i, rdata_b_o, waddr_a_i, wdata_a_i, we_a_i);
  wire \$11y ;
  wire \$13y ;
  wire \$15y ;
  wire \$17y ;
  wire \$19y ;
  wire \$1y ;
  wire \$21y ;
  wire \$23y ;
  wire \$25y ;
  wire \$27y ;
  wire \$29y ;
  wire \$31y ;
  wire \$33y ;
  wire \$35y ;
  wire \$37y ;
  wire \$39y ;
  wire \$3y ;
  wire \$41y ;
  wire \$43y ;
  wire \$45y ;
  wire \$47y ;
  wire \$49y ;
  wire \$51y ;
  wire \$53y ;
  wire \$55y ;
  wire \$57y ;
  wire \$59y ;
  wire \$5y ;
  wire \$61y ;
  wire \$7y ;
  wire \$9y ;
  wire [511:0] \$auto$bmuxmap.cc:84:execute$15332 ;
  wire [255:0] \$auto$bmuxmap.cc:84:execute$15349 ;
  wire [127:0] \$auto$bmuxmap.cc:84:execute$15358 ;
  wire [63:0] \$auto$bmuxmap.cc:84:execute$15363 ;
  wire [31:0] \$auto$bmuxmap.cc:84:execute$15366 ;
  wire [511:0] \$auto$bmuxmap.cc:84:execute$15368 ;
  wire [255:0] \$auto$bmuxmap.cc:84:execute$15385 ;
  wire [127:0] \$auto$bmuxmap.cc:84:execute$15394 ;
  wire [63:0] \$auto$bmuxmap.cc:84:execute$15399 ;
  wire [31:0] \$auto$bmuxmap.cc:84:execute$15402 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:19.32" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:25.32" *)
  input [4:0] raddr_a_i;
  wire [4:0] raddr_a_i;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:29.32" *)
  input [4:0] raddr_b_i;
  wire [4:0] raddr_b_i;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:26.32" *)
  output [31:0] rdata_a_o;
  wire [31:0] rdata_a_o;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:30.32" *)
  output [31:0] rdata_b_o;
  wire [31:0] rdata_b_o;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:42.40" *)
  wire [1023:0] rf_reg;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:20.32" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:22.32" *)
  input test_en_i;
  wire test_en_i;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:33.32" *)
  input [4:0] waddr_a_i;
  wire [4:0] waddr_a_i;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:34.32" *)
  input [31:0] wdata_a_i;
  wire [31:0] wdata_a_i;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:44.40" *)
  wire [30:0] we_a_dec;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:35.32" *)
  input we_a_i;
  wire we_a_i;
  assign \$1y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 1'h1;
  assign we_a_dec[4] = \$9y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$11y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 3'h6;
  assign we_a_dec[5] = \$11y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$13y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 3'h7;
  assign we_a_dec[6] = \$13y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$15y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 4'h8;
  assign we_a_dec[7] = \$15y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$17y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 4'h9;
  assign we_a_dec[8] = \$17y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$19y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 4'ha;
  assign we_a_dec[0] = \$1y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign we_a_dec[9] = \$19y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$21y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 4'hb;
  assign we_a_dec[10] = \$21y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$23y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 4'hc;
  assign we_a_dec[11] = \$23y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$25y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 4'hd;
  assign we_a_dec[12] = \$25y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$27y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 4'he;
  assign we_a_dec[13] = \$27y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$29y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 4'hf;
  assign \$3y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 2'h2;
  assign we_a_dec[14] = \$29y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$31y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 5'h10;
  assign we_a_dec[15] = \$31y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$33y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 5'h11;
  assign we_a_dec[16] = \$33y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$35y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 5'h12;
  assign we_a_dec[17] = \$35y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$37y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 5'h13;
  assign we_a_dec[18] = \$37y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$39y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 5'h14;
  assign we_a_dec[1] = \$3y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign we_a_dec[19] = \$39y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$41y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 5'h15;
  assign we_a_dec[20] = \$41y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$43y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 5'h16;
  assign we_a_dec[21] = \$43y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$45y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 5'h17;
  assign we_a_dec[22] = \$45y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$47y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 5'h18;
  assign we_a_dec[23] = \$47y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$49y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 5'h19;
  assign \$5y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 2'h3;
  assign we_a_dec[24] = \$49y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$51y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 5'h1a;
  assign we_a_dec[25] = \$51y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$53y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 5'h1b;
  assign we_a_dec[26] = \$53y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$55y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 5'h1c;
  assign we_a_dec[27] = \$55y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$57y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 5'h1d;
  assign we_a_dec[28] = \$57y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$59y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 5'h1e;
  assign we_a_dec[2] = \$5y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign we_a_dec[29] = \$59y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$61y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 5'h1f;
  assign we_a_dec[30] = \$61y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$7y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 3'h4;
  assign we_a_dec[3] = \$7y  & (* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" *) we_a_i;
  assign \$9y  = waddr_a_i == (* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" *) 3'h5;
  assign \$auto$bmuxmap.cc:84:execute$15332 [31:0] = raddr_a_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) rf_reg[63:32] : 32'd0;
  assign \$auto$bmuxmap.cc:84:execute$15332 [63:32] = raddr_a_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) rf_reg[127:96] : rf_reg[95:64];
  assign \$auto$bmuxmap.cc:84:execute$15332 [95:64] = raddr_a_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) rf_reg[191:160] : rf_reg[159:128];
  assign \$auto$bmuxmap.cc:84:execute$15332 [127:96] = raddr_a_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) rf_reg[255:224] : rf_reg[223:192];
  assign \$auto$bmuxmap.cc:84:execute$15332 [159:128] = raddr_a_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) rf_reg[319:288] : rf_reg[287:256];
  assign \$auto$bmuxmap.cc:84:execute$15332 [191:160] = raddr_a_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) rf_reg[383:352] : rf_reg[351:320];
  assign \$auto$bmuxmap.cc:84:execute$15332 [223:192] = raddr_a_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) rf_reg[447:416] : rf_reg[415:384];
  assign \$auto$bmuxmap.cc:84:execute$15332 [255:224] = raddr_a_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) rf_reg[511:480] : rf_reg[479:448];
  assign \$auto$bmuxmap.cc:84:execute$15332 [287:256] = raddr_a_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) rf_reg[575:544] : rf_reg[543:512];
  assign \$auto$bmuxmap.cc:84:execute$15332 [319:288] = raddr_a_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) rf_reg[639:608] : rf_reg[607:576];
  assign \$auto$bmuxmap.cc:84:execute$15332 [351:320] = raddr_a_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) rf_reg[703:672] : rf_reg[671:640];
  assign \$auto$bmuxmap.cc:84:execute$15332 [383:352] = raddr_a_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) rf_reg[767:736] : rf_reg[735:704];
  assign \$auto$bmuxmap.cc:84:execute$15332 [415:384] = raddr_a_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) rf_reg[831:800] : rf_reg[799:768];
  assign \$auto$bmuxmap.cc:84:execute$15332 [447:416] = raddr_a_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) rf_reg[895:864] : rf_reg[863:832];
  assign \$auto$bmuxmap.cc:84:execute$15332 [479:448] = raddr_a_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) rf_reg[959:928] : rf_reg[927:896];
  assign \$auto$bmuxmap.cc:84:execute$15332 [511:480] = raddr_a_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) rf_reg[1023:992] : rf_reg[991:960];
  assign \$auto$bmuxmap.cc:84:execute$15349 [31:0] = raddr_a_i[1] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) \$auto$bmuxmap.cc:84:execute$15332 [63:32] : \$auto$bmuxmap.cc:84:execute$15332 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$15349 [63:32] = raddr_a_i[1] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) \$auto$bmuxmap.cc:84:execute$15332 [127:96] : \$auto$bmuxmap.cc:84:execute$15332 [95:64];
  assign \$auto$bmuxmap.cc:84:execute$15349 [95:64] = raddr_a_i[1] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) \$auto$bmuxmap.cc:84:execute$15332 [191:160] : \$auto$bmuxmap.cc:84:execute$15332 [159:128];
  assign \$auto$bmuxmap.cc:84:execute$15349 [127:96] = raddr_a_i[1] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) \$auto$bmuxmap.cc:84:execute$15332 [255:224] : \$auto$bmuxmap.cc:84:execute$15332 [223:192];
  assign \$auto$bmuxmap.cc:84:execute$15349 [159:128] = raddr_a_i[1] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) \$auto$bmuxmap.cc:84:execute$15332 [319:288] : \$auto$bmuxmap.cc:84:execute$15332 [287:256];
  assign \$auto$bmuxmap.cc:84:execute$15349 [191:160] = raddr_a_i[1] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) \$auto$bmuxmap.cc:84:execute$15332 [383:352] : \$auto$bmuxmap.cc:84:execute$15332 [351:320];
  assign \$auto$bmuxmap.cc:84:execute$15349 [223:192] = raddr_a_i[1] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) \$auto$bmuxmap.cc:84:execute$15332 [447:416] : \$auto$bmuxmap.cc:84:execute$15332 [415:384];
  assign \$auto$bmuxmap.cc:84:execute$15349 [255:224] = raddr_a_i[1] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) \$auto$bmuxmap.cc:84:execute$15332 [511:480] : \$auto$bmuxmap.cc:84:execute$15332 [479:448];
  assign \$auto$bmuxmap.cc:84:execute$15358 [31:0] = raddr_a_i[2] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) \$auto$bmuxmap.cc:84:execute$15349 [63:32] : \$auto$bmuxmap.cc:84:execute$15349 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$15358 [63:32] = raddr_a_i[2] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) \$auto$bmuxmap.cc:84:execute$15349 [127:96] : \$auto$bmuxmap.cc:84:execute$15349 [95:64];
  assign \$auto$bmuxmap.cc:84:execute$15358 [95:64] = raddr_a_i[2] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) \$auto$bmuxmap.cc:84:execute$15349 [191:160] : \$auto$bmuxmap.cc:84:execute$15349 [159:128];
  assign \$auto$bmuxmap.cc:84:execute$15358 [127:96] = raddr_a_i[2] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) \$auto$bmuxmap.cc:84:execute$15349 [255:224] : \$auto$bmuxmap.cc:84:execute$15349 [223:192];
  assign \$auto$bmuxmap.cc:84:execute$15363 [31:0] = raddr_a_i[3] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) \$auto$bmuxmap.cc:84:execute$15358 [63:32] : \$auto$bmuxmap.cc:84:execute$15358 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$15363 [63:32] = raddr_a_i[3] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) \$auto$bmuxmap.cc:84:execute$15358 [127:96] : \$auto$bmuxmap.cc:84:execute$15358 [95:64];
  assign \$auto$bmuxmap.cc:84:execute$15366  = raddr_a_i[4] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" *) \$auto$bmuxmap.cc:84:execute$15363 [63:32] : \$auto$bmuxmap.cc:84:execute$15363 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$15368 [31:0] = raddr_b_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) rf_reg[63:32] : 32'd0;
  assign \$auto$bmuxmap.cc:84:execute$15368 [63:32] = raddr_b_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) rf_reg[127:96] : rf_reg[95:64];
  assign \$auto$bmuxmap.cc:84:execute$15368 [95:64] = raddr_b_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) rf_reg[191:160] : rf_reg[159:128];
  assign \$auto$bmuxmap.cc:84:execute$15368 [127:96] = raddr_b_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) rf_reg[255:224] : rf_reg[223:192];
  assign \$auto$bmuxmap.cc:84:execute$15368 [159:128] = raddr_b_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) rf_reg[319:288] : rf_reg[287:256];
  assign \$auto$bmuxmap.cc:84:execute$15368 [191:160] = raddr_b_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) rf_reg[383:352] : rf_reg[351:320];
  assign \$auto$bmuxmap.cc:84:execute$15368 [223:192] = raddr_b_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) rf_reg[447:416] : rf_reg[415:384];
  assign \$auto$bmuxmap.cc:84:execute$15368 [255:224] = raddr_b_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) rf_reg[511:480] : rf_reg[479:448];
  assign \$auto$bmuxmap.cc:84:execute$15368 [287:256] = raddr_b_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) rf_reg[575:544] : rf_reg[543:512];
  assign \$auto$bmuxmap.cc:84:execute$15368 [319:288] = raddr_b_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) rf_reg[639:608] : rf_reg[607:576];
  assign \$auto$bmuxmap.cc:84:execute$15368 [351:320] = raddr_b_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) rf_reg[703:672] : rf_reg[671:640];
  assign \$auto$bmuxmap.cc:84:execute$15368 [383:352] = raddr_b_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) rf_reg[767:736] : rf_reg[735:704];
  assign \$auto$bmuxmap.cc:84:execute$15368 [415:384] = raddr_b_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) rf_reg[831:800] : rf_reg[799:768];
  assign \$auto$bmuxmap.cc:84:execute$15368 [447:416] = raddr_b_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) rf_reg[895:864] : rf_reg[863:832];
  assign \$auto$bmuxmap.cc:84:execute$15368 [479:448] = raddr_b_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) rf_reg[959:928] : rf_reg[927:896];
  assign \$auto$bmuxmap.cc:84:execute$15368 [511:480] = raddr_b_i[0] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) rf_reg[1023:992] : rf_reg[991:960];
  assign \$auto$bmuxmap.cc:84:execute$15385 [31:0] = raddr_b_i[1] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) \$auto$bmuxmap.cc:84:execute$15368 [63:32] : \$auto$bmuxmap.cc:84:execute$15368 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$15385 [63:32] = raddr_b_i[1] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) \$auto$bmuxmap.cc:84:execute$15368 [127:96] : \$auto$bmuxmap.cc:84:execute$15368 [95:64];
  assign \$auto$bmuxmap.cc:84:execute$15385 [95:64] = raddr_b_i[1] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) \$auto$bmuxmap.cc:84:execute$15368 [191:160] : \$auto$bmuxmap.cc:84:execute$15368 [159:128];
  assign \$auto$bmuxmap.cc:84:execute$15385 [127:96] = raddr_b_i[1] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) \$auto$bmuxmap.cc:84:execute$15368 [255:224] : \$auto$bmuxmap.cc:84:execute$15368 [223:192];
  assign \$auto$bmuxmap.cc:84:execute$15385 [159:128] = raddr_b_i[1] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) \$auto$bmuxmap.cc:84:execute$15368 [319:288] : \$auto$bmuxmap.cc:84:execute$15368 [287:256];
  assign \$auto$bmuxmap.cc:84:execute$15385 [191:160] = raddr_b_i[1] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) \$auto$bmuxmap.cc:84:execute$15368 [383:352] : \$auto$bmuxmap.cc:84:execute$15368 [351:320];
  assign \$auto$bmuxmap.cc:84:execute$15385 [223:192] = raddr_b_i[1] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) \$auto$bmuxmap.cc:84:execute$15368 [447:416] : \$auto$bmuxmap.cc:84:execute$15368 [415:384];
  assign \$auto$bmuxmap.cc:84:execute$15385 [255:224] = raddr_b_i[1] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) \$auto$bmuxmap.cc:84:execute$15368 [511:480] : \$auto$bmuxmap.cc:84:execute$15368 [479:448];
  assign \$auto$bmuxmap.cc:84:execute$15394 [31:0] = raddr_b_i[2] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) \$auto$bmuxmap.cc:84:execute$15385 [63:32] : \$auto$bmuxmap.cc:84:execute$15385 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$15394 [63:32] = raddr_b_i[2] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) \$auto$bmuxmap.cc:84:execute$15385 [127:96] : \$auto$bmuxmap.cc:84:execute$15385 [95:64];
  assign \$auto$bmuxmap.cc:84:execute$15394 [95:64] = raddr_b_i[2] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) \$auto$bmuxmap.cc:84:execute$15385 [191:160] : \$auto$bmuxmap.cc:84:execute$15385 [159:128];
  assign \$auto$bmuxmap.cc:84:execute$15394 [127:96] = raddr_b_i[2] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) \$auto$bmuxmap.cc:84:execute$15385 [255:224] : \$auto$bmuxmap.cc:84:execute$15385 [223:192];
  assign \$auto$bmuxmap.cc:84:execute$15399 [31:0] = raddr_b_i[3] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) \$auto$bmuxmap.cc:84:execute$15394 [63:32] : \$auto$bmuxmap.cc:84:execute$15394 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$15399 [63:32] = raddr_b_i[3] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) \$auto$bmuxmap.cc:84:execute$15394 [127:96] : \$auto$bmuxmap.cc:84:execute$15394 [95:64];
  assign \$auto$bmuxmap.cc:84:execute$15402  = raddr_b_i[4] ? (* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" *) \$auto$bmuxmap.cc:84:execute$15399 [63:32] : \$auto$bmuxmap.cc:84:execute$15399 [31:0];
  reg [31:0] \$auto$ff.cc:266:slice$14200 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14200  <= 32'd0;
    else if (we_a_dec[8]) \$auto$ff.cc:266:slice$14200  <= wdata_a_i;
  assign rf_reg[319:288] = \$auto$ff.cc:266:slice$14200 ;
  reg [31:0] \$auto$ff.cc:266:slice$14201 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14201  <= 32'd0;
    else if (we_a_dec[7]) \$auto$ff.cc:266:slice$14201  <= wdata_a_i;
  assign rf_reg[287:256] = \$auto$ff.cc:266:slice$14201 ;
  reg [31:0] \$auto$ff.cc:266:slice$14202 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14202  <= 32'd0;
    else if (we_a_dec[6]) \$auto$ff.cc:266:slice$14202  <= wdata_a_i;
  assign rf_reg[255:224] = \$auto$ff.cc:266:slice$14202 ;
  reg [31:0] \$auto$ff.cc:266:slice$14203 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14203  <= 32'd0;
    else if (we_a_dec[5]) \$auto$ff.cc:266:slice$14203  <= wdata_a_i;
  assign rf_reg[223:192] = \$auto$ff.cc:266:slice$14203 ;
  reg [31:0] \$auto$ff.cc:266:slice$14204 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14204  <= 32'd0;
    else if (we_a_dec[4]) \$auto$ff.cc:266:slice$14204  <= wdata_a_i;
  assign rf_reg[191:160] = \$auto$ff.cc:266:slice$14204 ;
  reg [31:0] \$auto$ff.cc:266:slice$14205 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14205  <= 32'd0;
    else if (we_a_dec[3]) \$auto$ff.cc:266:slice$14205  <= wdata_a_i;
  assign rf_reg[159:128] = \$auto$ff.cc:266:slice$14205 ;
  reg [31:0] \$auto$ff.cc:266:slice$14206 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14206  <= 32'd0;
    else if (we_a_dec[2]) \$auto$ff.cc:266:slice$14206  <= wdata_a_i;
  assign rf_reg[127:96] = \$auto$ff.cc:266:slice$14206 ;
  reg [31:0] \$auto$ff.cc:266:slice$14207 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14207  <= 32'd0;
    else if (we_a_dec[30]) \$auto$ff.cc:266:slice$14207  <= wdata_a_i;
  assign rf_reg[1023:992] = \$auto$ff.cc:266:slice$14207 ;
  reg [31:0] \$auto$ff.cc:266:slice$14208 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14208  <= 32'd0;
    else if (we_a_dec[29]) \$auto$ff.cc:266:slice$14208  <= wdata_a_i;
  assign rf_reg[991:960] = \$auto$ff.cc:266:slice$14208 ;
  reg [31:0] \$auto$ff.cc:266:slice$14209 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14209  <= 32'd0;
    else if (we_a_dec[1]) \$auto$ff.cc:266:slice$14209  <= wdata_a_i;
  assign rf_reg[95:64] = \$auto$ff.cc:266:slice$14209 ;
  reg [31:0] \$auto$ff.cc:266:slice$14210 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14210  <= 32'd0;
    else if (we_a_dec[28]) \$auto$ff.cc:266:slice$14210  <= wdata_a_i;
  assign rf_reg[959:928] = \$auto$ff.cc:266:slice$14210 ;
  reg [31:0] \$auto$ff.cc:266:slice$14211 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14211  <= 32'd0;
    else if (we_a_dec[27]) \$auto$ff.cc:266:slice$14211  <= wdata_a_i;
  assign rf_reg[927:896] = \$auto$ff.cc:266:slice$14211 ;
  reg [31:0] \$auto$ff.cc:266:slice$14212 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14212  <= 32'd0;
    else if (we_a_dec[26]) \$auto$ff.cc:266:slice$14212  <= wdata_a_i;
  assign rf_reg[895:864] = \$auto$ff.cc:266:slice$14212 ;
  reg [31:0] \$auto$ff.cc:266:slice$14213 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14213  <= 32'd0;
    else if (we_a_dec[25]) \$auto$ff.cc:266:slice$14213  <= wdata_a_i;
  assign rf_reg[863:832] = \$auto$ff.cc:266:slice$14213 ;
  reg [31:0] \$auto$ff.cc:266:slice$14214 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14214  <= 32'd0;
    else if (we_a_dec[24]) \$auto$ff.cc:266:slice$14214  <= wdata_a_i;
  assign rf_reg[831:800] = \$auto$ff.cc:266:slice$14214 ;
  reg [31:0] \$auto$ff.cc:266:slice$14215 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14215  <= 32'd0;
    else if (we_a_dec[23]) \$auto$ff.cc:266:slice$14215  <= wdata_a_i;
  assign rf_reg[799:768] = \$auto$ff.cc:266:slice$14215 ;
  reg [31:0] \$auto$ff.cc:266:slice$14216 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14216  <= 32'd0;
    else if (we_a_dec[22]) \$auto$ff.cc:266:slice$14216  <= wdata_a_i;
  assign rf_reg[767:736] = \$auto$ff.cc:266:slice$14216 ;
  reg [31:0] \$auto$ff.cc:266:slice$14217 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14217  <= 32'd0;
    else if (we_a_dec[21]) \$auto$ff.cc:266:slice$14217  <= wdata_a_i;
  assign rf_reg[735:704] = \$auto$ff.cc:266:slice$14217 ;
  reg [31:0] \$auto$ff.cc:266:slice$14218 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14218  <= 32'd0;
    else if (we_a_dec[20]) \$auto$ff.cc:266:slice$14218  <= wdata_a_i;
  assign rf_reg[703:672] = \$auto$ff.cc:266:slice$14218 ;
  reg [31:0] \$auto$ff.cc:266:slice$14219 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14219  <= 32'd0;
    else if (we_a_dec[19]) \$auto$ff.cc:266:slice$14219  <= wdata_a_i;
  assign rf_reg[671:640] = \$auto$ff.cc:266:slice$14219 ;
  reg [31:0] \$auto$ff.cc:266:slice$14220 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14220  <= 32'd0;
    else if (we_a_dec[0]) \$auto$ff.cc:266:slice$14220  <= wdata_a_i;
  assign rf_reg[63:32] = \$auto$ff.cc:266:slice$14220 ;
  reg [31:0] \$auto$ff.cc:266:slice$14221 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14221  <= 32'd0;
    else if (we_a_dec[18]) \$auto$ff.cc:266:slice$14221  <= wdata_a_i;
  assign rf_reg[639:608] = \$auto$ff.cc:266:slice$14221 ;
  reg [31:0] \$auto$ff.cc:266:slice$14222 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14222  <= 32'd0;
    else if (we_a_dec[17]) \$auto$ff.cc:266:slice$14222  <= wdata_a_i;
  assign rf_reg[607:576] = \$auto$ff.cc:266:slice$14222 ;
  reg [31:0] \$auto$ff.cc:266:slice$14223 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14223  <= 32'd0;
    else if (we_a_dec[16]) \$auto$ff.cc:266:slice$14223  <= wdata_a_i;
  assign rf_reg[575:544] = \$auto$ff.cc:266:slice$14223 ;
  reg [31:0] \$auto$ff.cc:266:slice$14224 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14224  <= 32'd0;
    else if (we_a_dec[15]) \$auto$ff.cc:266:slice$14224  <= wdata_a_i;
  assign rf_reg[543:512] = \$auto$ff.cc:266:slice$14224 ;
  reg [31:0] \$auto$ff.cc:266:slice$14225 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14225  <= 32'd0;
    else if (we_a_dec[14]) \$auto$ff.cc:266:slice$14225  <= wdata_a_i;
  assign rf_reg[511:480] = \$auto$ff.cc:266:slice$14225 ;
  reg [31:0] \$auto$ff.cc:266:slice$14226 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14226  <= 32'd0;
    else if (we_a_dec[13]) \$auto$ff.cc:266:slice$14226  <= wdata_a_i;
  assign rf_reg[479:448] = \$auto$ff.cc:266:slice$14226 ;
  reg [31:0] \$auto$ff.cc:266:slice$14227 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14227  <= 32'd0;
    else if (we_a_dec[12]) \$auto$ff.cc:266:slice$14227  <= wdata_a_i;
  assign rf_reg[447:416] = \$auto$ff.cc:266:slice$14227 ;
  reg [31:0] \$auto$ff.cc:266:slice$14228 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14228  <= 32'd0;
    else if (we_a_dec[11]) \$auto$ff.cc:266:slice$14228  <= wdata_a_i;
  assign rf_reg[415:384] = \$auto$ff.cc:266:slice$14228 ;
  reg [31:0] \$auto$ff.cc:266:slice$14229 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14229  <= 32'd0;
    else if (we_a_dec[10]) \$auto$ff.cc:266:slice$14229  <= wdata_a_i;
  assign rf_reg[383:352] = \$auto$ff.cc:266:slice$14229 ;
  reg [31:0] \$auto$ff.cc:266:slice$14230 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14230  <= 32'd0;
    else if (we_a_dec[9]) \$auto$ff.cc:266:slice$14230  <= wdata_a_i;
  assign rf_reg[351:320] = \$auto$ff.cc:266:slice$14230 ;
  assign rf_reg[31:0] = 32'd0;
  assign rdata_a_o = \$auto$bmuxmap.cc:84:execute$15366 ;
  assign rdata_b_o = \$auto$bmuxmap.cc:84:execute$15402 ;
endmodule

(* src = "rtl/cve2/cve2_wb.sv:14.8" *)
module \cve2_wb$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.wb_i (clk_i, rst_ni, lsu_resp_valid_i, en_wb_i, instr_is_compressed_id_i, instr_perf_count_id_i, perf_instr_ret_wb_o, perf_instr_ret_compressed_wb_o, rf_waddr_id_i, rf_wdata_id_i, rf_we_id_i, rf_wdata_lsu_i, rf_we_lsu_i, rf_waddr_wb_o, rf_wdata_wb_o, rf_we_wb_o, lsu_resp_err_i);
  wire \$0y ;
  wire \$1y ;
  wire \$2y ;
  wire [31:0] \$5y ;
  wire [31:0] \$6y ;
  (* src = "rtl/cve2/cve2_wb.sv:16.36" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_wb.sv:18.36" *)
  input en_wb_i;
  wire en_wb_i;
  (* src = "rtl/cve2/cve2_wb.sv:20.36" *)
  input instr_is_compressed_id_i;
  wire instr_is_compressed_id_i;
  (* src = "rtl/cve2/cve2_wb.sv:21.36" *)
  input instr_perf_count_id_i;
  wire instr_perf_count_id_i;
  (* src = "rtl/cve2/cve2_wb.sv:38.36" *)
  input lsu_resp_err_i;
  wire lsu_resp_err_i;
  (* src = "rtl/cve2/cve2_wb.sv:37.36" *)
  input lsu_resp_valid_i;
  wire lsu_resp_valid_i;
  (* src = "rtl/cve2/cve2_wb.sv:24.36" *)
  output perf_instr_ret_compressed_wb_o;
  wire perf_instr_ret_compressed_wb_o;
  (* src = "rtl/cve2/cve2_wb.sv:23.36" *)
  output perf_instr_ret_wb_o;
  wire perf_instr_ret_wb_o;
  (* src = "rtl/cve2/cve2_wb.sv:26.36" *)
  input [4:0] rf_waddr_id_i;
  wire [4:0] rf_waddr_id_i;
  (* src = "rtl/cve2/cve2_wb.sv:33.36" *)
  output [4:0] rf_waddr_wb_o;
  wire [4:0] rf_waddr_wb_o;
  (* src = "rtl/cve2/cve2_wb.sv:27.36" *)
  input [31:0] rf_wdata_id_i;
  wire [31:0] rf_wdata_id_i;
  (* src = "rtl/cve2/cve2_wb.sv:30.36" *)
  input [31:0] rf_wdata_lsu_i;
  wire [31:0] rf_wdata_lsu_i;
  (* src = "rtl/cve2/cve2_wb.sv:34.36" *)
  output [31:0] rf_wdata_wb_o;
  wire [31:0] rf_wdata_wb_o;
  (* src = "rtl/cve2/cve2_wb.sv:28.36" *)
  input rf_we_id_i;
  wire rf_we_id_i;
  (* src = "rtl/cve2/cve2_wb.sv:31.36" *)
  input rf_we_lsu_i;
  wire rf_we_lsu_i;
  (* src = "rtl/cve2/cve2_wb.sv:35.36" *)
  output rf_we_wb_o;
  wire rf_we_wb_o;
  (* src = "rtl/cve2/cve2_wb.sv:17.36" *)
  input rst_ni;
  wire rst_ni;
  assign \$0y  = instr_perf_count_id_i & (* src = "rtl/cve2/cve2_wb.sv:54.50-54.81" *) en_wb_i;
  assign \$1y  = lsu_resp_valid_i & (* src = "rtl/cve2/cve2_wb.sv:55.52-55.85" *) lsu_resp_err_i;
  assign \$2y  = ~ (* src = "rtl/cve2/cve2_wb.sv:55.50-55.86" *) \$1y ;
  assign perf_instr_ret_wb_o = \$0y  & (* src = "rtl/cve2/cve2_wb.sv:54.50-55.86" *) \$2y ;
  assign perf_instr_ret_compressed_wb_o = perf_instr_ret_wb_o & (* src = "rtl/cve2/cve2_wb.sv:56.50-56.96" *) instr_is_compressed_id_i;
  assign \$5y  = { rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i } & (* src = "rtl/cve2/cve2_wb.sv:63.27-63.75" *) rf_wdata_id_i;
  assign \$6y  = { rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i } & (* src = "rtl/cve2/cve2_wb.sv:64.27-64.75" *) rf_wdata_lsu_i;
  assign rf_wdata_wb_o = \$5y  | (* src = "rtl/cve2/cve2_wb.sv:63.26-64.76" *) \$6y ;
  assign rf_we_wb_o = | (* src = "rtl/cve2/cve2_wb.sv:65.26-65.45" *) { rf_we_lsu_i, rf_we_id_i };
  assign rf_waddr_wb_o = rf_waddr_id_i;
endmodule

(* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:17.8" *)
module \debug_rom$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_mem.gen_rom_snd_scratch.i_debug_rom (clk_i, rst_ni, req_i, addr_i, rdata_o);
  wire \$5y ;
  wire [63:0] \$7y ;
  wire [49:0] \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 ;
  wire [49:0] \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 ;
  wire [49:0] \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 ;
  wire [49:0] \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 ;
  wire [49:0] \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 ;
  wire [49:0] \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 ;
  wire [49:0] \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 ;
  wire [49:0] \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 ;
  (* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:21.24" *)
  input [63:0] addr_i;
  wire [63:0] addr_i;
  (* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:51.39" *)
  reg [4:0] addr_q;
  (* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:18.24" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:22.24" *)
  output [63:0] rdata_o;
  wire [63:0] rdata_o;
  (* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:20.24" *)
  input req_i;
  wire req_i;
  (* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:19.24" *)
  input rst_ni;
  wire rst_ni;
  assign \$5y  = addr_q < (* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:67.9-67.43" *) 5'h14;
  (* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:55.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) addr_q <= 5'h00;
    else if (req_i) addr_q <= addr_i[7:3];
  assign { \$7y [63:62], \$7y [60:59], \$7y [57], \$7y [61], \$7y [55:53], \$7y [50], \$7y [48], \$7y [46:42], \$7y [40], \$7y [38:36], \$7y [34], \$7y [31:20], \$7y [18], \$7y [16], \$7y [19], \$7y [14:12], \$7y [52], \$7y [10], \$7y [8], \$7y [58], \$7y [6:2] } = addr_q[4] ? { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [49], 2'h3, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [46], 2'h2, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [46], 3'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [37], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [37], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [33], 4'he, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [27:26], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [26], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [26], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [20], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [17], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [49], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [33], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [7], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [26], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [49] } : { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [49:45], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [43:26], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [26], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [24:15], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [13:11], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [9], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [7], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [5:1] };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [48:47], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [45], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [43:26], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [24:15], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [13:11], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [9], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [7], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [5:1] } = addr_q[3] ? { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [48:47], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [45], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [43:30], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [28:26], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [48], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [21:16], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [13:11], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [9], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [7], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [5], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [5], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [3], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [33] } : { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [48:46], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [43:42], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [40], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [38:36], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [34:33], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [30:29], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [37], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [24:18], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [22], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [34:33], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [42], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [37], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [33], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [9], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [42], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [5:2], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [2] };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [40], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [38], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [36], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [30:29], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [24:23], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [21:18], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [22], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [34], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [37], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [33], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [9], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [42], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [5:2] } = addr_q[2] ? { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [40], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [42], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [33], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [29], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [29], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [18], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [29], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [34], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [33], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [40], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [42], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [4], 2'h2 } : { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [48], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [48], 3'h4, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [24:23], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [21:20], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [24], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [48], 5'h00, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [5], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [5], 2'h1 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [45], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [43:34], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [32:30], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [28:26], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [21], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [19:16], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [13:11], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [9], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [7], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [5], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [3], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [33] } = addr_q[2] ? { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [40], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [40], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [35], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48:47], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [27], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [35], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [17], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [35], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [35], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [35], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [9], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [9], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [17], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [43] } : { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [45], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [41], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [38], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [38], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [36], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [45], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [34], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [32:31], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [41], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [28:27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [43], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [45], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [36], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [13:12], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [32], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [34], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [12], 1'h0 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [23], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [21:20], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [24], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [5] } = addr_q[1] ? { 2'h3, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [27] } : { 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [13], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [13], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [28], 2'h1 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [18], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [29], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [34], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [33], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [40], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [42], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [4] } = addr_q[1] ? { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [20], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [27], 4'h5 } : { 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [27], 3'h5, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [27] };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [38], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [31], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [41], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [45], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [36], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [32], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [34], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [12] } = addr_q[1] ? { 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [13], 4'h9, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [13], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [28], 1'h0 } : { 2'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [13], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [13], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [13], 3'h5 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [40], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [35], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [9], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [17], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [43] } = addr_q[1] ? { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [20], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [27], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [27], 2'h2 } : { 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [20], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [20], 2'h2, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [27] };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [37], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [17], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [33], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [7], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [26], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [49] } = addr_q[1] ? { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [13], 2'h2, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [13], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [13], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [28], 1'h0 } : { 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [13], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [28], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [13], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [13], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [28] };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [13], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [28] } = addr_q[0] ? 2'h1 : 2'h2;
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [27] } = addr_q[0] ? 2'h2 : 2'h1;
  assign { rdata_o[63:62], rdata_o[60:59], rdata_o[57], rdata_o[61], rdata_o[55:53], rdata_o[50], rdata_o[48], rdata_o[46:42], rdata_o[40], rdata_o[38:36], rdata_o[34], rdata_o[31:20], rdata_o[18], rdata_o[16], rdata_o[19], rdata_o[14:12], rdata_o[52], rdata_o[10], rdata_o[8], rdata_o[58], rdata_o[6:2], rdata_o[33] } = \$5y  ? (* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:68.7-68.29|rtl/riscv-dbg/debug_rom/debug_rom.sv:67.5-69.8" *) { \$7y [63:62], \$7y [60:59], \$7y [57], \$7y [61], \$7y [55:53], \$7y [50], \$7y [48], \$7y [46:42], \$7y [40], \$7y [38:36], \$7y [34], \$7y [31:20], \$7y [18], \$7y [16], \$7y [19], \$7y [14:12], \$7y [52], \$7y [10], \$7y [8], \$7y [58], \$7y [6:2], 1'h1 } : 49'h0000000000000;
  assign { \$7y [56], \$7y [51], \$7y [49], \$7y [47], \$7y [41], \$7y [39], \$7y [35], \$7y [33:32], \$7y [17], \$7y [15], \$7y [11], \$7y [9], \$7y [7], \$7y [1:0] } = { \$7y [61], \$7y [58], \$7y [58], \$7y [58], 2'h0, \$7y [58], 2'h3, \$7y [19], \$7y [19], \$7y [52], 1'h0, \$7y [58], 2'h3 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [44], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [25], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [14], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [10], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [8], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [6], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [0] } = { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [26], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [49], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$a$15183 [49], 1'h1 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [48:47], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [45:38], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [36:34], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [32:28], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [25:21], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [19:18], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [16:8], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [6:0] } = { 2'h3, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [46], 2'h2, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [46], 5'h00, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [37], 4'he, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [26], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [26], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [49], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [33], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [27], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [26], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][0][0]$b$15184 [49], 1'h1 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [45:44], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [41], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [39], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [35], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [32:31], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [26:25], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [17:10], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [8:6], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [1:0] } = { 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [43], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [37], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [22], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [34:33], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [42], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [37], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [33], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [42], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$a$15186 [2], 1'h1 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [44], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [29], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [25:22], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [15:14], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [10], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [8], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [6], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [4], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [2:0] } = { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [26], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [48], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [20], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [49], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [5], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][1][0]$b$15187 [33], 1'h1 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [47:25], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [22], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [19:6], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [4:0] } = { 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [48], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [48], 3'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [48], 3'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [48], 6'h20, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [24], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [48], 11'h000, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$a$15192 [5], 4'h7 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [46:44], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [41], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [39:35], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [32:30], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [26:21], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [19], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [17:5], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [3:0] } = { 5'h00, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [48:47], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [42], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [33], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [29], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [29], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [29], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [34:33], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [42], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [33], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [40], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [42], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [27], 4'h9 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [48:46], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [44], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [42], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [40:39], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [37], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [35], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [33], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [30:29], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [26:14], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [11:0] } = { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [49], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [38], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [45], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [41], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [49], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [43], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [43], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [45], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [36], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [32], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [34], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$a$15195 [12], 3'h1 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [46:44], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [42:41], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [39:36], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [34:18], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [16:10], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [8:0] } = { 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [40], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [43], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48:47], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][0]$b$15193 [27], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [35], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [35], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [35], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [35], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [35], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [9], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [17], \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [17], 2'h2, \$memory$auto$memory_bmux2rom.cc:63:execute$15080$rdmux[0][2][1]$b$15196 [43], 1'h1 };
  assign { rdata_o[56], rdata_o[51], rdata_o[49], rdata_o[47], rdata_o[41], rdata_o[39], rdata_o[35], rdata_o[32], rdata_o[17], rdata_o[15], rdata_o[11], rdata_o[9], rdata_o[7], rdata_o[1:0] } = { rdata_o[61], rdata_o[58], rdata_o[58], rdata_o[58], 2'h0, rdata_o[58], rdata_o[33], rdata_o[19], rdata_o[19], rdata_o[52], 1'h0, rdata_o[58], rdata_o[33], rdata_o[33] };
endmodule

(* src = "rtl/common_cells/delta_counter.sv:13.8" *)
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14233 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$13758 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$13757 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$13760 ;
  (* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" *)
  wire [1:0] \$counter_d$5 ;
  (* src = "rtl/common_cells/delta_counter.sv:19.30" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/delta_counter.sv:17.30" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/delta_counter.sv:28.32" *)
  wire [1:0] counter_d;
  (* src = "rtl/common_cells/delta_counter.sv:28.21" *)
  reg [1:0] counter_q;
  (* src = "rtl/common_cells/delta_counter.sv:24.30" *)
  input d_i;
  wire d_i;
  (* src = "rtl/common_cells/delta_counter.sv:23.30" *)
  input delta_i;
  wire delta_i;
  (* src = "rtl/common_cells/delta_counter.sv:22.30" *)
  input down_i;
  wire down_i;
  (* src = "rtl/common_cells/delta_counter.sv:20.30" *)
  input en_i;
  wire en_i;
  (* src = "rtl/common_cells/delta_counter.sv:21.30" *)
  input load_i;
  wire load_i;
  (* src = "rtl/common_cells/delta_counter.sv:26.30" *)
  output overflow_o;
  wire overflow_o;
  (* src = "rtl/common_cells/delta_counter.sv:25.30" *)
  output q_o;
  wire q_o;
  (* src = "rtl/common_cells/delta_counter.sv:18.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$opt_share.cc:222:merge_operators$13758  = counter_q - (* src = "rtl/common_cells/delta_counter.sv:69.29-69.48" *) \$auto$rtlil.cc:3092:Mux$13760 ;
  (* src = "rtl/common_cells/delta_counter.sv:76.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14233 ) counter_q <= counter_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14233  = | { load_i, en_i, clear_i };
  assign \$auto$rtlil.cc:2959:Neg$13757  = - { 1'h0, delta_i };
  assign \$auto$rtlil.cc:3092:Mux$13760  = down_i ? { 1'h0, delta_i } : \$auto$rtlil.cc:2959:Neg$13757 ;
  assign \$counter_d$5  = load_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" *) { 1'h0, d_i } : \$auto$opt_share.cc:222:merge_operators$13758 ;
  assign counter_d = clear_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" *) 2'h0 : \$counter_d$5 ;
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

(* src = "rtl/common_cells/delta_counter.sv:13.8" *)
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14236 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$13763 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$13762 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$13765 ;
  (* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" *)
  wire [1:0] \$counter_d$5 ;
  (* src = "rtl/common_cells/delta_counter.sv:19.30" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/delta_counter.sv:17.30" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/delta_counter.sv:28.32" *)
  wire [1:0] counter_d;
  (* src = "rtl/common_cells/delta_counter.sv:28.21" *)
  reg [1:0] counter_q;
  (* src = "rtl/common_cells/delta_counter.sv:24.30" *)
  input d_i;
  wire d_i;
  (* src = "rtl/common_cells/delta_counter.sv:23.30" *)
  input delta_i;
  wire delta_i;
  (* src = "rtl/common_cells/delta_counter.sv:22.30" *)
  input down_i;
  wire down_i;
  (* src = "rtl/common_cells/delta_counter.sv:20.30" *)
  input en_i;
  wire en_i;
  (* src = "rtl/common_cells/delta_counter.sv:21.30" *)
  input load_i;
  wire load_i;
  (* src = "rtl/common_cells/delta_counter.sv:26.30" *)
  output overflow_o;
  wire overflow_o;
  (* src = "rtl/common_cells/delta_counter.sv:25.30" *)
  output q_o;
  wire q_o;
  (* src = "rtl/common_cells/delta_counter.sv:18.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$opt_share.cc:222:merge_operators$13763  = counter_q - (* src = "rtl/common_cells/delta_counter.sv:69.29-69.48" *) \$auto$rtlil.cc:3092:Mux$13765 ;
  (* src = "rtl/common_cells/delta_counter.sv:76.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14236 ) counter_q <= counter_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14236  = | { load_i, en_i, clear_i };
  assign \$auto$rtlil.cc:2959:Neg$13762  = - { 1'h0, delta_i };
  assign \$auto$rtlil.cc:3092:Mux$13765  = down_i ? { 1'h0, delta_i } : \$auto$rtlil.cc:2959:Neg$13762 ;
  assign \$counter_d$5  = load_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" *) { 1'h0, d_i } : \$auto$opt_share.cc:222:merge_operators$13763 ;
  assign counter_d = clear_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" *) 2'h0 : \$counter_d$5 ;
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

(* src = "rtl/common_cells/delta_counter.sv:13.8" *)
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14239 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$13768 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$13767 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$13770 ;
  (* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" *)
  wire [1:0] \$counter_d$5 ;
  (* src = "rtl/common_cells/delta_counter.sv:19.30" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/delta_counter.sv:17.30" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/delta_counter.sv:28.32" *)
  wire [1:0] counter_d;
  (* src = "rtl/common_cells/delta_counter.sv:28.21" *)
  reg [1:0] counter_q;
  (* src = "rtl/common_cells/delta_counter.sv:24.30" *)
  input d_i;
  wire d_i;
  (* src = "rtl/common_cells/delta_counter.sv:23.30" *)
  input delta_i;
  wire delta_i;
  (* src = "rtl/common_cells/delta_counter.sv:22.30" *)
  input down_i;
  wire down_i;
  (* src = "rtl/common_cells/delta_counter.sv:20.30" *)
  input en_i;
  wire en_i;
  (* src = "rtl/common_cells/delta_counter.sv:21.30" *)
  input load_i;
  wire load_i;
  (* src = "rtl/common_cells/delta_counter.sv:26.30" *)
  output overflow_o;
  wire overflow_o;
  (* src = "rtl/common_cells/delta_counter.sv:25.30" *)
  output q_o;
  wire q_o;
  (* src = "rtl/common_cells/delta_counter.sv:18.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$opt_share.cc:222:merge_operators$13768  = counter_q - (* src = "rtl/common_cells/delta_counter.sv:69.29-69.48" *) \$auto$rtlil.cc:3092:Mux$13770 ;
  (* src = "rtl/common_cells/delta_counter.sv:76.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14239 ) counter_q <= counter_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14239  = | { load_i, en_i, clear_i };
  assign \$auto$rtlil.cc:2959:Neg$13767  = - { 1'h0, delta_i };
  assign \$auto$rtlil.cc:3092:Mux$13770  = down_i ? { 1'h0, delta_i } : \$auto$rtlil.cc:2959:Neg$13767 ;
  assign \$counter_d$5  = load_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" *) { 1'h0, d_i } : \$auto$opt_share.cc:222:merge_operators$13768 ;
  assign counter_d = clear_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" *) 2'h0 : \$counter_d$5 ;
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

(* src = "rtl/common_cells/delta_counter.sv:13.8" *)
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14242 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$13773 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$13772 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$13775 ;
  (* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" *)
  wire [1:0] \$counter_d$5 ;
  (* src = "rtl/common_cells/delta_counter.sv:19.30" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/delta_counter.sv:17.30" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/delta_counter.sv:28.32" *)
  wire [1:0] counter_d;
  (* src = "rtl/common_cells/delta_counter.sv:28.21" *)
  reg [1:0] counter_q;
  (* src = "rtl/common_cells/delta_counter.sv:24.30" *)
  input d_i;
  wire d_i;
  (* src = "rtl/common_cells/delta_counter.sv:23.30" *)
  input delta_i;
  wire delta_i;
  (* src = "rtl/common_cells/delta_counter.sv:22.30" *)
  input down_i;
  wire down_i;
  (* src = "rtl/common_cells/delta_counter.sv:20.30" *)
  input en_i;
  wire en_i;
  (* src = "rtl/common_cells/delta_counter.sv:21.30" *)
  input load_i;
  wire load_i;
  (* src = "rtl/common_cells/delta_counter.sv:26.30" *)
  output overflow_o;
  wire overflow_o;
  (* src = "rtl/common_cells/delta_counter.sv:25.30" *)
  output q_o;
  wire q_o;
  (* src = "rtl/common_cells/delta_counter.sv:18.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$opt_share.cc:222:merge_operators$13773  = counter_q - (* src = "rtl/common_cells/delta_counter.sv:69.29-69.48" *) \$auto$rtlil.cc:3092:Mux$13775 ;
  (* src = "rtl/common_cells/delta_counter.sv:76.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14242 ) counter_q <= counter_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14242  = | { load_i, en_i, clear_i };
  assign \$auto$rtlil.cc:2959:Neg$13772  = - { 1'h0, delta_i };
  assign \$auto$rtlil.cc:3092:Mux$13775  = down_i ? { 1'h0, delta_i } : \$auto$rtlil.cc:2959:Neg$13772 ;
  assign \$counter_d$5  = load_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" *) { 1'h0, d_i } : \$auto$opt_share.cc:222:merge_operators$13773 ;
  assign counter_d = clear_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" *) 2'h0 : \$counter_d$5 ;
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

(* src = "rtl/common_cells/delta_counter.sv:13.8" *)
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_obi_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14245 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$13778 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$13777 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$13780 ;
  (* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" *)
  wire [1:0] \$counter_d$5 ;
  (* src = "rtl/common_cells/delta_counter.sv:19.30" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/delta_counter.sv:17.30" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/delta_counter.sv:28.32" *)
  wire [1:0] counter_d;
  (* src = "rtl/common_cells/delta_counter.sv:28.21" *)
  reg [1:0] counter_q;
  (* src = "rtl/common_cells/delta_counter.sv:24.30" *)
  input d_i;
  wire d_i;
  (* src = "rtl/common_cells/delta_counter.sv:23.30" *)
  input delta_i;
  wire delta_i;
  (* src = "rtl/common_cells/delta_counter.sv:22.30" *)
  input down_i;
  wire down_i;
  (* src = "rtl/common_cells/delta_counter.sv:20.30" *)
  input en_i;
  wire en_i;
  (* src = "rtl/common_cells/delta_counter.sv:21.30" *)
  input load_i;
  wire load_i;
  (* src = "rtl/common_cells/delta_counter.sv:26.30" *)
  output overflow_o;
  wire overflow_o;
  (* src = "rtl/common_cells/delta_counter.sv:25.30" *)
  output q_o;
  wire q_o;
  (* src = "rtl/common_cells/delta_counter.sv:18.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$opt_share.cc:222:merge_operators$13778  = counter_q - (* src = "rtl/common_cells/delta_counter.sv:69.29-69.48" *) \$auto$rtlil.cc:3092:Mux$13780 ;
  (* src = "rtl/common_cells/delta_counter.sv:76.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14245 ) counter_q <= counter_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14245  = | { load_i, en_i, clear_i };
  assign \$auto$rtlil.cc:2959:Neg$13777  = - { 1'h0, delta_i };
  assign \$auto$rtlil.cc:3092:Mux$13780  = down_i ? { 1'h0, delta_i } : \$auto$rtlil.cc:2959:Neg$13777 ;
  assign \$counter_d$5  = load_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" *) { 1'h0, d_i } : \$auto$opt_share.cc:222:merge_operators$13778 ;
  assign counter_d = clear_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" *) 2'h0 : \$counter_d$5 ;
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

(* src = "rtl/common_cells/delta_counter.sv:13.8" *)
module \delta_counter$croc_chip.i_croc_soc.i_user.i_obi_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14248 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$13783 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$13782 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$13785 ;
  (* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" *)
  wire [1:0] \$counter_d$5 ;
  (* src = "rtl/common_cells/delta_counter.sv:19.30" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/delta_counter.sv:17.30" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/delta_counter.sv:28.32" *)
  wire [1:0] counter_d;
  (* src = "rtl/common_cells/delta_counter.sv:28.21" *)
  reg [1:0] counter_q;
  (* src = "rtl/common_cells/delta_counter.sv:24.30" *)
  input d_i;
  wire d_i;
  (* src = "rtl/common_cells/delta_counter.sv:23.30" *)
  input delta_i;
  wire delta_i;
  (* src = "rtl/common_cells/delta_counter.sv:22.30" *)
  input down_i;
  wire down_i;
  (* src = "rtl/common_cells/delta_counter.sv:20.30" *)
  input en_i;
  wire en_i;
  (* src = "rtl/common_cells/delta_counter.sv:21.30" *)
  input load_i;
  wire load_i;
  (* src = "rtl/common_cells/delta_counter.sv:26.30" *)
  output overflow_o;
  wire overflow_o;
  (* src = "rtl/common_cells/delta_counter.sv:25.30" *)
  output q_o;
  wire q_o;
  (* src = "rtl/common_cells/delta_counter.sv:18.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$opt_share.cc:222:merge_operators$13783  = counter_q - (* src = "rtl/common_cells/delta_counter.sv:69.29-69.48" *) \$auto$rtlil.cc:3092:Mux$13785 ;
  (* src = "rtl/common_cells/delta_counter.sv:76.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14248 ) counter_q <= counter_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14248  = | { load_i, en_i, clear_i };
  assign \$auto$rtlil.cc:2959:Neg$13782  = - { 1'h0, delta_i };
  assign \$auto$rtlil.cc:3092:Mux$13785  = down_i ? { 1'h0, delta_i } : \$auto$rtlil.cc:2959:Neg$13782 ;
  assign \$counter_d$5  = load_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" *) { 1'h0, d_i } : \$auto$opt_share.cc:222:merge_operators$13783 ;
  assign counter_d = clear_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" *) 2'h0 : \$counter_d$5 ;
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

(* src = "rtl/riscv-dbg/dm_csrs.sv:18.8" *)
module \dm_csrs$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_csrs (clk_i, rst_ni, testmode_i, unavailable_i, hartinfo_i, dmi_rst_ni, dmi_req_valid_i, dmi_req_ready_o, dmi_req_i, dmi_resp_valid_o, dmi_resp_ready_i, dmi_resp_o, ndmreset_o, dmactive_o, next_dm_addr_i, ndmreset_ack_i, data_i, data_o, halted_i, resumeack_i, hartsel_o
, haltreq_o, resumereq_o, clear_resumeack_o, cmd_valid_o, cmd_o, cmderror_valid_i, cmderror_i, cmdbusy_i, progbuf_o, data_valid_i, sbaddress_o, sbaddress_i, sbaddress_write_valid_o, sbreadonaddr_o, sbautoincrement_o, sbaccess_o, sbreadondata_o, sbdata_o, sbdata_read_valid_o, sbdata_write_valid_o, sbdata_i
, sbdata_valid_i, sbbusy_i, sberror_valid_i, sberror_i);
  wire \$103y ;
  wire \$104y ;
  wire \$105y ;
  wire \$106y ;
  wire \$107y ;
  wire \$108y ;
  wire \$109y ;
  wire [31:0] \$111y ;
  wire \$115y ;
  wire \$117y ;
  wire \$122y ;
  wire \$123y ;
  wire \$124y ;
  wire \$125y ;
  wire \$126y ;
  wire \$127y ;
  wire \$128y ;
  wire \$129y ;
  wire \$130y ;
  wire \$131y ;
  wire \$135y ;
  wire \$149y ;
  wire \$150y ;
  wire \$151y ;
  wire \$152y ;
  wire \$153y ;
  wire \$154y ;
  wire [63:0] \$160y ;
  wire [63:0] \$162y ;
  wire \$164y ;
  wire \$176y ;
  wire \$185y ;
  wire \$186y ;
  wire [2:0] \$189y ;
  wire [2:0] \$190y ;
  wire [255:0] \$219y ;
  wire \$232y ;
  wire \$233y ;
  wire \$234y ;
  wire \$300y ;
  wire \$303y ;
  wire \$322y ;
  wire \$51y ;
  wire \$64y ;
  wire \$80y ;
  wire \$81y ;
  wire [31:0] \$86y ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *)
  wire [31:0] \$abstractauto_q$332 ;
  wire [127:0] \$auto$bmuxmap.cc:84:execute$15404 ;
  wire [63:0] \$auto$bmuxmap.cc:84:execute$15409 ;
  wire [31:0] \$auto$bmuxmap.cc:84:execute$15412 ;
  wire [7:0] \$auto$bmuxmap.cc:84:execute$15414 ;
  wire [3:0] \$auto$bmuxmap.cc:84:execute$15423 ;
  wire [1:0] \$auto$bmuxmap.cc:84:execute$15428 ;
  wire \$auto$bmuxmap.cc:84:execute$15431 ;
  wire [7:0] \$auto$bmuxmap.cc:84:execute$15433 ;
  wire [3:0] \$auto$bmuxmap.cc:84:execute$15442 ;
  wire [1:0] \$auto$bmuxmap.cc:84:execute$15447 ;
  wire \$auto$bmuxmap.cc:84:execute$15450 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14251 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14253 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14255 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14262 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14264 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14269 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14271 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14273 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14296 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14298 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14300 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14302 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14325 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14327 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14399 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14411 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14413 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14415 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14431 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14433 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14447 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14449 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14257 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14266 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14275 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14304 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14331 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14401 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14417 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14435 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14453 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$15066 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13417 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13423 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13425 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13427 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$15070 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$15076 ;
  wire \$auto$opt_share.cc:222:merge_operators$14975 ;
  wire \$auto$rtlil.cc:3094:Pmux$14977 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:391.11-393.14" *)
  wire [1:0] \$auto$wreduce.cc:514:run$13499 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *)
  wire [1:0] \$auto$wreduce.cc:514:run$13500 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *)
  wire [1:0] \$auto$wreduce.cc:514:run$13501 ;
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 21" *)
  wire [31:0] \$auto$wreduce.cc:514:run$13504 ;
  wire [31:0] \$auto$wreduce.cc:514:run$13505 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:320.11-331.14" *)
  wire \$cmd_valid_d$120 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" *)
  wire \$cmd_valid_d$140 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" *)
  wire \$cmd_valid_d$145 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:375.13-385.16" *)
  wire \$cmd_valid_d$169 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:416.11-426.14" *)
  wire \$cmd_valid_d$201 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14" *)
  wire \$cmd_valid_d$228 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *)
  wire \$cmd_valid_d$266 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:300.11-309.14" *)
  wire \$cmd_valid_d$95 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *)
  wire \$cmd_valid_q$331 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:328.13-330.16" *)
  wire [2:0] \$cmderr_d$118 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:320.11-331.14" *)
  wire [2:0] \$cmderr_d$119 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" *)
  wire [2:0] \$cmderr_d$139 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" *)
  wire [2:0] \$cmderr_d$144 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:382.15-384.18" *)
  wire [2:0] \$cmderr_d$167 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:375.13-385.16" *)
  wire [2:0] \$cmderr_d$168 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:405.11-412.14" *)
  wire [2:0] \$cmderr_d$193 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *)
  wire [2:0] \$cmderr_d$264 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *)
  wire [2:0] \$cmderr_d$280 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *)
  wire [2:0] \$cmderr_q$329 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *)
  wire [31:0] \$command_q$330 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *)
  wire [63:0] \$data_q$337 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *)
  wire [31:0] \$dmcontrol_d$263 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *)
  (* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29" *)
  wire [31:0] \$dmcontrol_d$279 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *)
  (* unused_bits = "0" *)
  wire [31:0] \$dmcontrol_q$328 ;
  wire \$procmux$7687_Y ;
  wire [31:0] \$procmux$7747_Y ;
  wire [31:0] \$procmux$7767_Y ;
  wire [31:0] \$procmux$7776_Y ;
  wire \$procmux$7782_Y ;
  wire [21:0] \$procmux$7800_Y ;
  wire [31:0] \$procmux$7820_Y ;
  wire [21:0] \$procmux$7855_Y ;
  wire \$procmux$7891_Y ;
  wire \$procmux$8372_Y ;
  wire \$procmux$8381_Y ;
  wire [1:0] \$procmux$8430_Y ;
  wire \$procmux$8485_Y ;
  wire [31:0] \$procmux$8656_Y ;
  wire \$procmux$8689_Y ;
  wire [1:0] \$procmux$8697_Y ;
  wire [31:0] \$procmux$8736_Y ;
  wire [31:0] \$procmux$8798_Y ;
  wire \$procmux$8936_Y ;
  wire [33:0] \$procmux$8980_Y ;
  wire \$procmux$8983_Y ;
  wire [255:0] \$procmux$8995_Y ;
  wire [63:0] \$procmux$8998_Y ;
  wire [63:0] \$procmux$9001_Y ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:171.39" *)
  wire [31:0] abstractauto_q;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:219.15" *)
  wire [3:0] autoexecdata_idx;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:50.45" *)
  output clear_resumeack_o;
  wire clear_resumeack_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:23.45" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:53.45" *)
  output [31:0] cmd_o;
  reg [31:0] cmd_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:170.23" *)
  wire cmd_valid_d;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:52.45" *)
  output cmd_valid_o;
  reg cmd_valid_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:56.45" *)
  input cmdbusy_i;
  wire cmdbusy_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:168.23" *)
  wire [2:0] cmderr_d;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:168.33" *)
  reg [2:0] cmderr_q;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:55.45" *)
  input [2:0] cmderror_i;
  wire [2:0] cmderror_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:54.45" *)
  input cmderror_valid_i;
  wire cmderror_valid_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:179.35" *)
  wire [63:0] data_d;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:61.45" *)
  input [63:0] data_i;
  wire [63:0] data_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:59.45" *)
  output [63:0] data_o;
  reg [63:0] data_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:62.45" *)
  input data_valid_i;
  wire data_valid_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:39.45" *)
  output dmactive_o;
  reg dmactive_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:166.23" *)
  (* unused_bits = "0" *)
  wire [31:0] dmcontrol_d;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:31.45" *)
  input [40:0] dmi_req_i;
  wire [40:0] dmi_req_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:30.45" *)
  output dmi_req_ready_o;
  wire dmi_req_ready_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:29.45" *)
  input dmi_req_valid_i;
  wire dmi_req_valid_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:35.45" *)
  output [33:0] dmi_resp_o;
  wire [33:0] dmi_resp_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:34.45" *)
  input dmi_resp_ready_i;
  wire dmi_resp_ready_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:33.45" *)
  output dmi_resp_valid_o;
  wire dmi_resp_valid_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:27.45" *)
  input dmi_rst_ni;
  wire dmi_rst_ni;
  wire [19:0] dmstatus;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:43.45" *)
  input halted_i;
  wire halted_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:48.45" *)
  output haltreq_o;
  reg haltreq_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:42.45" *)
  input [31:0] hartinfo_i;
  wire [31:0] hartinfo_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:47.45" *)
  output [19:0] hartsel_o;
  wire [19:0] hartsel_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:176.23" *)
  wire havereset_d;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:176.36" *)
  reg havereset_q;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:38.45" *)
  input ndmreset_ack_i;
  wire ndmreset_ack_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:37.45" *)
  output ndmreset_o;
  reg ndmreset_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:25.45" *)
  input [31:0] next_dm_addr_i;
  wire [31:0] next_dm_addr_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:178.37" *)
  wire [255:0] progbuf_d;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:58.45" *)
  output [255:0] progbuf_o;
  reg [255:0] progbuf_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:92.16" *)
  wire resp_queue_empty;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:91.16" *)
  wire resp_queue_full;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:183.18" *)
  wire [33:0] resp_queue_inp;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:94.16" *)
  wire resp_queue_pop;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:93.16" *)
  wire resp_queue_push;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:45.45" *)
  input resumeack_i;
  wire resumeack_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:49.45" *)
  output resumereq_o;
  reg resumereq_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:24.45" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:70.45" *)
  output [2:0] sbaccess_o;
  reg [2:0] sbaccess_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:173.23" *)
  wire [63:0] sbaddr_d;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:173.33" *)
  reg [63:0] sbaddr_q;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:65.45" *)
  input [31:0] sbaddress_i;
  wire [31:0] sbaddress_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:64.45" *)
  output [31:0] sbaddress_o;
  wire [31:0] sbaddress_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:66.45" *)
  output sbaddress_write_valid_o;
  wire sbaddress_write_valid_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:69.45" *)
  output sbautoincrement_o;
  reg sbautoincrement_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:80.45" *)
  input sbbusy_i;
  wire sbbusy_i;
  wire [28:0] sbcs_d;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:172.31" *)
  wire [31:0] sbcs_q;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:174.23" *)
  wire [63:0] sbdata_d;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:77.45" *)
  input [31:0] sbdata_i;
  wire [31:0] sbdata_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:73.45" *)
  output [31:0] sbdata_o;
  reg [31:0] sbdata_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:174.33" *)
  wire [63:0] sbdata_q;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:74.45" *)
  output sbdata_read_valid_o;
  wire sbdata_read_valid_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:78.45" *)
  input sbdata_valid_i;
  wire sbdata_valid_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:75.45" *)
  output sbdata_write_valid_o;
  wire sbdata_write_valid_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:82.45" *)
  input [2:0] sberror_i;
  wire [2:0] sberror_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:81.45" *)
  input sberror_valid_i;
  wire sberror_valid_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:68.45" *)
  output sbreadonaddr_o;
  reg sbreadonaddr_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:72.45" *)
  output sbreadondata_o;
  reg sbreadondata_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:26.45" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:44.45" *)
  input unavailable_i;
  wire unavailable_i;
  assign \$103y  = dmi_req_i[40:34] == 5'h16;
  assign \$104y  = dmi_req_i[40:34] == 5'h18;
  assign \$105y  = dmi_req_i[40:34] == 5'h17;
  assign \$106y  = dmi_req_i[40:34] == 5'h1d;
  assign \$108y  = dmi_req_i[40:34] <= 6'h27;
  assign \$109y  = \$107y  && \$108y ;
  assign \$117y  = ! (* src = "rtl/riscv-dbg/dm_csrs.sv:328.17-328.43" *) cmderr_q;
  assign \$122y  = dmi_req_i[40:34] == 7'h40;
  assign \$123y  = dmi_req_i[40:34] == 5'h13;
  assign \$124y  = dmi_req_i[40:34] == 6'h34;
  assign \$125y  = dmi_req_i[40:34] == 6'h35;
  assign \$126y  = dmi_req_i[40:34] == 6'h38;
  assign \$127y  = dmi_req_i[40:34] == 6'h39;
  assign \$128y  = dmi_req_i[40:34] == 6'h3a;
  assign \$129y  = dmi_req_i[40:34] == 6'h3c;
  assign \$130y  = sbbusy_i || (* src = "rtl/riscv-dbg/dm_csrs.sv:348.15-348.45" *) sbcs_q[22];
  assign \$131y  = ! (* src = "rtl/riscv-dbg/dm_csrs.sv:352.36-352.56" *) sbcs_q[14:12];
  assign \$135y  = dmi_req_i[40:34] == 6'h3d;
  assign \$149y  = dmi_req_ready_o && (* src = "rtl/riscv-dbg/dm_csrs.sv:370.9-370.43" *) dmi_req_valid_i;
  assign \$150y  = dmi_req_i[33:32] == (* src = "rtl/riscv-dbg/dm_csrs.sv:370.47-370.70" *) 2'h2;
  assign \$151y  = \$149y  && (* src = "rtl/riscv-dbg/dm_csrs.sv:370.9-370.70" *) \$150y ;
  assign \$153y  = dmi_req_i[40:34] <= 3'h5;
  assign \$154y  = \$152y  && \$153y ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:376.15-376.81" *)
  \$bwmux  #(
    .WIDTH(32'd64)
  ) \$162  (
    .A(data_o),
    .B({ dmi_req_i[31:0], dmi_req_i[31:0] }),
    .S({ \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31] }),
    .Y(\$162y )
  );
  assign \$176y  = dmi_req_i[40:34] == 5'h10;
  assign \$185y  = dmi_req_i[40:34] == 5'h11;
  assign \$186y  = dmi_req_i[40:34] == 5'h12;
  assign \$189y  = ~ (* src = "rtl/riscv-dbg/dm_csrs.sv:406.38-406.58" *) dmi_req_i[10:8];
  assign dmi_resp_valid_o = ~ (* src = "rtl/riscv-dbg/dm_csrs.sv:185.33-185.50" *) resp_queue_empty;
  assign \$190y  = \$189y  & (* src = "rtl/riscv-dbg/dm_csrs.sv:406.38-406.69" *) cmderr_q;
  assign dmi_req_ready_o = ~ (* src = "rtl/riscv-dbg/dm_csrs.sv:186.33-186.49" *) resp_queue_full;
  assign resp_queue_push = dmi_req_valid_i & (* src = "rtl/riscv-dbg/dm_csrs.sv:187.33-187.66" *) dmi_req_ready_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:445.13-445.84" *)
  \$bwmux  #(
    .WIDTH(32'd256)
  ) \$221  (
    .A(progbuf_o),
    .B({ dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0] }),
    .S({ \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31] }),
    .Y(progbuf_d)
  );
  assign autoexecdata_idx[3:2] = dmi_req_i[37:36] - (* src = "rtl/riscv-dbg/dm_csrs.sv:225.32-225.59" *) 1'h1;
  assign \$232y  = ~ (* src = "rtl/riscv-dbg/dm_csrs.sv:468.56-468.73" *) dmi_req_i[22];
  assign \$233y  = sbcs_q[22] & (* src = "rtl/riscv-dbg/dm_csrs.sv:468.34-468.74" *) \$232y ;
  assign \$234y  = | (* src = "rtl/riscv-dbg/dm_csrs.sv:469.35-469.48" *) dmi_req_i[14:12];
  assign \$300y  = ! (* src = "rtl/riscv-dbg/dm_csrs.sv:550.9-550.31" *) resumereq_o;
  assign clear_resumeack_o = \$300y  && (* src = "rtl/riscv-dbg/dm_csrs.sv:550.9-550.56" *) \$dmcontrol_d$279 [30];
  assign \$303y  = resumereq_o && (* src = "rtl/riscv-dbg/dm_csrs.sv:553.9-553.45" *) resumeack_i;
  assign resp_queue_pop = dmi_resp_ready_i & (* src = "rtl/riscv-dbg/dm_csrs.sv:588.27-588.63" *) dmi_resp_valid_o;
  assign \$322y  = ~ (* src = "rtl/riscv-dbg/dm_csrs.sv:599.25-599.36" *) dmi_rst_ni;
  assign \$51y  = ~ (* src = "rtl/riscv-dbg/dm_csrs.sv:255.61-255.96" *) unavailable_i;
  assign dmstatus[9] = halted_i & (* src = "rtl/riscv-dbg/dm_csrs.sv:255.29-255.96" *) \$51y ;
  assign \$64y  = ~ (* src = "rtl/riscv-dbg/dm_csrs.sv:258.29-258.59" *) halted_i;
  assign dmstatus[11] = \$64y  & (* src = "rtl/riscv-dbg/dm_csrs.sv:258.29-258.97" *) \$51y ;
  assign \$80y  = dmi_req_i[33:32] == (* src = "rtl/riscv-dbg/dm_csrs.sv:296.47-296.69" *) 1'h1;
  assign \$81y  = \$149y  && (* src = "rtl/riscv-dbg/dm_csrs.sv:296.9-296.69" *) \$80y ;
  assign \$86y  = dmi_req_i[34] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:299.33-299.81" *) data_o[63:32] : data_o[31:0];
  assign \$auto$bmuxmap.cc:84:execute$15404 [31:0] = dmi_req_i[34] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:319.33-319.87" *) progbuf_o[63:32] : progbuf_o[31:0];
  assign \$auto$bmuxmap.cc:84:execute$15404 [63:32] = dmi_req_i[34] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:319.33-319.87" *) progbuf_o[127:96] : progbuf_o[95:64];
  assign \$auto$bmuxmap.cc:84:execute$15404 [95:64] = dmi_req_i[34] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:319.33-319.87" *) progbuf_o[191:160] : progbuf_o[159:128];
  assign \$auto$bmuxmap.cc:84:execute$15404 [127:96] = dmi_req_i[34] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:319.33-319.87" *) progbuf_o[255:224] : progbuf_o[223:192];
  assign \$auto$bmuxmap.cc:84:execute$15409 [31:0] = dmi_req_i[35] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:319.33-319.87" *) \$auto$bmuxmap.cc:84:execute$15404 [63:32] : \$auto$bmuxmap.cc:84:execute$15404 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$15409 [63:32] = dmi_req_i[35] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:319.33-319.87" *) \$auto$bmuxmap.cc:84:execute$15404 [127:96] : \$auto$bmuxmap.cc:84:execute$15404 [95:64];
  assign \$auto$bmuxmap.cc:84:execute$15412  = dmi_req_i[36] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:319.33-319.87" *) \$auto$bmuxmap.cc:84:execute$15409 [63:32] : \$auto$bmuxmap.cc:84:execute$15409 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$15414 [0] = dmi_req_i[34] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:323.27-323.86" *) abstractauto_q[17] : abstractauto_q[16];
  assign \$auto$bmuxmap.cc:84:execute$15414 [1] = dmi_req_i[34] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:323.27-323.86" *) abstractauto_q[19] : abstractauto_q[18];
  assign \$auto$bmuxmap.cc:84:execute$15414 [2] = dmi_req_i[34] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:323.27-323.86" *) abstractauto_q[21] : abstractauto_q[20];
  assign \$auto$bmuxmap.cc:84:execute$15414 [3] = dmi_req_i[34] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:323.27-323.86" *) abstractauto_q[23] : abstractauto_q[22];
  assign \$auto$bmuxmap.cc:84:execute$15414 [4] = dmi_req_i[34] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:323.27-323.86" *) 1'h0 : 1'h0;
  assign \$auto$bmuxmap.cc:84:execute$15414 [5] = dmi_req_i[34] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:323.27-323.86" *) 1'h0 : 1'h0;
  assign \$auto$bmuxmap.cc:84:execute$15414 [6] = dmi_req_i[34] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:323.27-323.86" *) 1'h0 : 1'h0;
  assign \$auto$bmuxmap.cc:84:execute$15414 [7] = dmi_req_i[34] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:323.27-323.86" *) 1'h0 : 1'h0;
  assign \$auto$bmuxmap.cc:84:execute$15423 [0] = dmi_req_i[35] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:323.27-323.86" *) \$auto$bmuxmap.cc:84:execute$15414 [1] : \$auto$bmuxmap.cc:84:execute$15414 [0];
  assign \$auto$bmuxmap.cc:84:execute$15423 [1] = dmi_req_i[35] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:323.27-323.86" *) \$auto$bmuxmap.cc:84:execute$15414 [3] : \$auto$bmuxmap.cc:84:execute$15414 [2];
  assign \$auto$bmuxmap.cc:84:execute$15423 [2] = dmi_req_i[35] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:323.27-323.86" *) \$auto$bmuxmap.cc:84:execute$15414 [5] : \$auto$bmuxmap.cc:84:execute$15414 [4];
  assign \$auto$bmuxmap.cc:84:execute$15423 [3] = dmi_req_i[35] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:323.27-323.86" *) \$auto$bmuxmap.cc:84:execute$15414 [7] : \$auto$bmuxmap.cc:84:execute$15414 [6];
  assign \$auto$bmuxmap.cc:84:execute$15428 [0] = dmi_req_i[36] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:323.27-323.86" *) \$auto$bmuxmap.cc:84:execute$15423 [1] : \$auto$bmuxmap.cc:84:execute$15423 [0];
  assign \$auto$bmuxmap.cc:84:execute$15428 [1] = dmi_req_i[36] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:323.27-323.86" *) \$auto$bmuxmap.cc:84:execute$15423 [3] : \$auto$bmuxmap.cc:84:execute$15423 [2];
  assign \$auto$bmuxmap.cc:84:execute$15431  = dmi_req_i[37] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:323.27-323.86" *) \$auto$bmuxmap.cc:84:execute$15428 [1] : \$auto$bmuxmap.cc:84:execute$15428 [0];
  assign \$auto$bmuxmap.cc:84:execute$15433 [0] = dmi_req_i[34] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:378.29-378.74" *) abstractauto_q[1] : abstractauto_q[0];
  assign \$auto$bmuxmap.cc:84:execute$15433 [1] = dmi_req_i[34] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:378.29-378.74" *) 1'h0 : 1'h0;
  assign \$auto$bmuxmap.cc:84:execute$15433 [2] = dmi_req_i[34] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:378.29-378.74" *) 1'h0 : 1'h0;
  assign \$auto$bmuxmap.cc:84:execute$15433 [3] = dmi_req_i[34] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:378.29-378.74" *) 1'h0 : 1'h0;
  assign \$auto$bmuxmap.cc:84:execute$15433 [4] = dmi_req_i[34] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:378.29-378.74" *) 1'h0 : 1'h0;
  assign \$auto$bmuxmap.cc:84:execute$15433 [5] = dmi_req_i[34] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:378.29-378.74" *) 1'h0 : 1'h0;
  assign \$auto$bmuxmap.cc:84:execute$15433 [6] = dmi_req_i[34] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:378.29-378.74" *) 1'hx : 1'hx;
  assign \$auto$bmuxmap.cc:84:execute$15433 [7] = dmi_req_i[34] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:378.29-378.74" *) 1'hx : 1'hx;
  assign \$auto$bmuxmap.cc:84:execute$15442 [0] = dmi_req_i[35] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:378.29-378.74" *) \$auto$bmuxmap.cc:84:execute$15433 [1] : \$auto$bmuxmap.cc:84:execute$15433 [0];
  assign \$auto$bmuxmap.cc:84:execute$15442 [1] = dmi_req_i[35] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:378.29-378.74" *) \$auto$bmuxmap.cc:84:execute$15433 [3] : \$auto$bmuxmap.cc:84:execute$15433 [2];
  assign \$auto$bmuxmap.cc:84:execute$15442 [2] = dmi_req_i[35] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:378.29-378.74" *) \$auto$bmuxmap.cc:84:execute$15433 [5] : \$auto$bmuxmap.cc:84:execute$15433 [4];
  assign \$auto$bmuxmap.cc:84:execute$15442 [3] = dmi_req_i[35] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:378.29-378.74" *) \$auto$bmuxmap.cc:84:execute$15433 [7] : \$auto$bmuxmap.cc:84:execute$15433 [6];
  assign \$auto$bmuxmap.cc:84:execute$15447 [0] = autoexecdata_idx[2] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:378.29-378.74" *) \$auto$bmuxmap.cc:84:execute$15442 [1] : \$auto$bmuxmap.cc:84:execute$15442 [0];
  assign \$auto$bmuxmap.cc:84:execute$15447 [1] = autoexecdata_idx[2] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:378.29-378.74" *) \$auto$bmuxmap.cc:84:execute$15442 [3] : \$auto$bmuxmap.cc:84:execute$15442 [2];
  assign \$auto$bmuxmap.cc:84:execute$15450  = autoexecdata_idx[3] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:378.29-378.74" *) \$auto$bmuxmap.cc:84:execute$15447 [1] : \$auto$bmuxmap.cc:84:execute$15447 [0];
  assign \$160y [31] = dmi_req_i[34] == (* src = "rtl/riscv-dbg/dm_csrs.sv:376.15-376.81" *) 1'h0;
  assign \$160y [63] = dmi_req_i[34] == (* src = "rtl/riscv-dbg/dm_csrs.sv:376.15-376.81" *) 1'h1;
  assign \$219y [31] = dmi_req_i[36:34] == (* src = "rtl/riscv-dbg/dm_csrs.sv:445.13-445.84" *) 3'h0;
  assign \$219y [63] = dmi_req_i[36:34] == (* src = "rtl/riscv-dbg/dm_csrs.sv:445.13-445.84" *) 3'h1;
  assign \$219y [95] = dmi_req_i[36:34] == (* src = "rtl/riscv-dbg/dm_csrs.sv:445.13-445.84" *) 3'h2;
  assign \$219y [127] = dmi_req_i[36:34] == (* src = "rtl/riscv-dbg/dm_csrs.sv:445.13-445.84" *) 3'h3;
  assign \$219y [159] = dmi_req_i[36:34] == (* src = "rtl/riscv-dbg/dm_csrs.sv:445.13-445.84" *) 3'h4;
  assign \$219y [191] = dmi_req_i[36:34] == (* src = "rtl/riscv-dbg/dm_csrs.sv:445.13-445.84" *) 3'h5;
  assign \$219y [223] = dmi_req_i[36:34] == (* src = "rtl/riscv-dbg/dm_csrs.sv:445.13-445.84" *) 3'h6;
  assign \$219y [255] = dmi_req_i[36:34] == (* src = "rtl/riscv-dbg/dm_csrs.sv:445.13-445.84" *) 3'h7;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) sbdata_o <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14257 ) sbdata_o <= \$procmux$8998_Y [31:0];
  reg [31:0] \$auto$ff.cc:266:slice$14259 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14259  <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14266 ) \$auto$ff.cc:266:slice$14259  <= \$procmux$8998_Y [63:32];
  assign sbdata_q[63:32] = \$auto$ff.cc:266:slice$14259 ;
  reg [5:0] \$auto$ff.cc:266:slice$14268 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14268  <= 6'h00;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14275 ) \$auto$ff.cc:266:slice$14268  <= \$auto$wreduce.cc:514:run$13505 [28:23];
  assign sbcs_q[28:23] = \$auto$ff.cc:266:slice$14268 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) sbreadondata_o <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14275 ) sbreadondata_o <= \$auto$wreduce.cc:514:run$13505 [15];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) sbreadonaddr_o <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14275 ) sbreadonaddr_o <= \$auto$wreduce.cc:514:run$13505 [20];
  reg [2:0] \$auto$ff.cc:266:slice$14295 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14295  <= 3'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14304 ) \$auto$ff.cc:266:slice$14295  <= \$auto$wreduce.cc:514:run$13505 [14:12];
  assign sbcs_q[14:12] = \$auto$ff.cc:266:slice$14295 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) sbautoincrement_o <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14275 ) sbautoincrement_o <= \$auto$wreduce.cc:514:run$13505 [16];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) sbaccess_o <= 3'h2;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14275 ) sbaccess_o <= \$auto$wreduce.cc:514:run$13505 [19:17];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) progbuf_o[255:224] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14331 ) progbuf_o[255:224] <= \$procmux$8995_Y [255:224];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) progbuf_o[223:192] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14331 ) progbuf_o[223:192] <= \$procmux$8995_Y [223:192];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) progbuf_o[191:160] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14331 ) progbuf_o[191:160] <= \$procmux$8995_Y [191:160];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) progbuf_o[159:128] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14331 ) progbuf_o[159:128] <= \$procmux$8995_Y [159:128];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) progbuf_o[127:96] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14331 ) progbuf_o[127:96] <= \$procmux$8995_Y [127:96];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) progbuf_o[95:64] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14331 ) progbuf_o[95:64] <= \$procmux$8995_Y [95:64];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) progbuf_o[63:32] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14331 ) progbuf_o[63:32] <= \$procmux$8995_Y [63:32];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) progbuf_o[31:0] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14331 ) progbuf_o[31:0] <= \$procmux$8995_Y [31:0];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) ndmreset_o <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14401 ) ndmreset_o <= \$dmcontrol_q$328 [1];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) haltreq_o <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14401 ) haltreq_o <= \$dmcontrol_q$328 [31];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_o[63:32] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14417 ) data_o[63:32] <= \$data_q$337 [63:32];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_o[31:0] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14417 ) data_o[31:0] <= \$data_q$337 [31:0];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) cmd_o[23:0] <= 24'h000000;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14435 ) cmd_o[23:0] <= \$command_q$330 [23:0];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) cmd_o[31:24] <= 8'h00;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14435 ) cmd_o[31:24] <= \$command_q$330 [31:24];
  reg \$auto$ff.cc:266:slice$14464 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14464  <= 1'h0;
    else \$auto$ff.cc:266:slice$14464  <= \$auto$wreduce.cc:514:run$13505 [29];
  assign sbcs_q[29] = \$auto$ff.cc:266:slice$14464 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) dmactive_o <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$15066 ) dmactive_o <= dmi_req_i[0];
  reg [7:0] \$auto$ff.cc:266:slice$15073 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$15073  <= 8'h00;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14453 ) \$auto$ff.cc:266:slice$15073  <= \$abstractauto_q$332 [23:16];
  assign abstractauto_q[23:16] = \$auto$ff.cc:266:slice$15073 ;
  reg [1:0] \$auto$ff.cc:266:slice$15074 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$15074  <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14453 ) \$auto$ff.cc:266:slice$15074  <= \$abstractauto_q$332 [1:0];
  assign abstractauto_q[1:0] = \$auto$ff.cc:266:slice$15074 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14251  = { dmactive_o, sbdata_valid_i, \$151y , \$129y  } != 4'ha;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14253  = { dmactive_o, sbdata_valid_i, \$130y , \$151y , \$129y  } != 5'h17;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14255  = { dmactive_o, sbdata_valid_i, \$151y  } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14262  = { dmactive_o, sbdata_valid_i, \$135y , \$151y  } != 4'h9;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14264  = { dmactive_o, sbdata_valid_i, \$130y , \$135y , \$151y  } != 5'h17;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14269  = { dmactive_o, \$151y , \$126y  } != 3'h6;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14271  = { dmactive_o, sbbusy_i, \$151y , \$126y  } != 4'hf;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14273  = { dmactive_o, \$151y  } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14296  = { dmactive_o, sberror_valid_i, \$151y , \$126y  } != 4'ha;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14298  = { dmactive_o, sberror_valid_i, sbbusy_i, \$234y , \$151y , \$126y  } != 6'h23;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14300  = { dmactive_o, sberror_valid_i, sbbusy_i, \$151y , \$126y  } != 5'h17;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14302  = { dmactive_o, sberror_valid_i, \$151y  } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14325  = { dmactive_o, \$151y , \$109y  } != 3'h6;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14327  = { dmactive_o, cmdbusy_i, \$151y , \$109y  } != 4'hf;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14399  = { dmactive_o, \$176y , \$151y  } != 3'h5;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14411  = { dmactive_o, data_valid_i, \$151y  } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14413  = { dmactive_o, data_valid_i, \$154y , \$151y  } != 4'h9;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14415  = { dmactive_o, data_valid_i, cmdbusy_i, \$154y , \$151y  } != 5'h17;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14431  = { dmactive_o, \$105y , \$151y  } != 3'h5;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14433  = { dmactive_o, cmdbusy_i, \$105y , \$151y  } != 4'hf;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14447  = { dmactive_o, \$151y , \$104y  } != 3'h6;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14449  = { dmactive_o, cmdbusy_i, \$151y , \$104y  } != 4'hf;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14257  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14253 , \$auto$opt_dff.cc:194:make_patterns_logic$14251 , \$auto$opt_dff.cc:194:make_patterns_logic$14255  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14266  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14264 , \$auto$opt_dff.cc:194:make_patterns_logic$14262 , \$auto$opt_dff.cc:194:make_patterns_logic$14255  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14275  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14273 , \$auto$opt_dff.cc:194:make_patterns_logic$14271 , \$auto$opt_dff.cc:194:make_patterns_logic$14269  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14304  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14302 , \$auto$opt_dff.cc:194:make_patterns_logic$14300 , \$auto$opt_dff.cc:194:make_patterns_logic$14298 , \$auto$opt_dff.cc:194:make_patterns_logic$14296  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14331  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14327 , \$auto$opt_dff.cc:194:make_patterns_logic$14325 , \$auto$opt_dff.cc:194:make_patterns_logic$14273  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14401  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14399 , \$auto$opt_dff.cc:194:make_patterns_logic$14273  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14417  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14415 , \$auto$opt_dff.cc:194:make_patterns_logic$14413 , \$auto$opt_dff.cc:194:make_patterns_logic$14411  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14435  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14433 , \$auto$opt_dff.cc:194:make_patterns_logic$14431 , \$auto$opt_dff.cc:194:make_patterns_logic$14273  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14453  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14449 , \$auto$opt_dff.cc:194:make_patterns_logic$14447 , \$auto$opt_dff.cc:194:make_patterns_logic$14273  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$15066  = & { \$176y , \$151y  };
  assign \$107y  = | dmi_req_i[40:39];
  assign \$152y  = | dmi_req_i[40:36];
  assign \$auto$opt_reduce.cc:137:opt_pmux$13417  = | { \$135y , \$129y , \$128y , \$127y  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13423  = | { \$105y , \$154y , \$109y , \$104y  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13425  = | { \$135y , \$129y  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13427  = | { \$154y , \$109y  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$15070  = | { \$135y , \$105y , \$154y , \$129y , \$128y , \$127y , \$126y , \$109y , \$104y , \$103y  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$15076  = | { \$125y , \$124y , \$123y , \$122y  };
  function [0:0] \$auto$opt_share.cc:246:merge_operators$14976 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$auto$opt_share.cc:246:merge_operators$14976  = b[0:0];
      2'b1?:
        \$auto$opt_share.cc:246:merge_operators$14976  = b[1:1];
      default:
        \$auto$opt_share.cc:246:merge_operators$14976  = a;
    endcase
  endfunction
  assign \$auto$rtlil.cc:3094:Pmux$14977  = \$auto$opt_share.cc:246:merge_operators$14976 (cmdbusy_i, { sbbusy_i, \$130y  }, { \$126y , \$auto$opt_reduce.cc:137:opt_pmux$13417  });
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) cmd_valid_o <= 1'h0;
    else cmd_valid_o <= \$cmd_valid_q$331 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) cmderr_q <= 3'h0;
    else cmderr_q <= \$cmderr_q$329 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) resumereq_o <= 1'h0;
    else resumereq_o <= \$dmcontrol_q$328 [30];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) havereset_q <= 1'h1;
    else havereset_q <= havereset_d;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) sbaddr_q <= 64'h0000000000000000;
    else sbaddr_q <= \$procmux$9001_Y ;
  reg \$driver$sbcs_q.sbbusy ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$driver$sbcs_q.sbbusy  <= 1'h0;
    else \$driver$sbcs_q.sbbusy  <= \$auto$wreduce.cc:514:run$13505 [21];
  assign sbcs_q[21] = \$driver$sbcs_q.sbbusy ;
  reg \$driver$sbcs_q.sbbusyerror ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$driver$sbcs_q.sbbusyerror  <= 1'h0;
    else \$driver$sbcs_q.sbbusyerror  <= \$auto$wreduce.cc:514:run$13505 [22];
  assign sbcs_q[22] = \$driver$sbcs_q.sbbusyerror ;
  assign dmcontrol_d[30] = \$303y  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:554.7-554.36|rtl/riscv-dbg/dm_csrs.sv:553.5-555.8" *) 1'h0 : \$dmcontrol_d$279 [30];
  assign sbdata_d = sbdata_valid_i ? (* src = "rtl/riscv-dbg/dm_csrs.sv:536.7-536.32|rtl/riscv-dbg/dm_csrs.sv:535.5-537.8" *) { 32'h00000000, sbdata_i } : { dmi_req_i[31:0], dmi_req_i[31:0] };
  assign sbcs_d[14:12] = sberror_valid_i ? (* src = "rtl/riscv-dbg/dm_csrs.sv:532.7-532.34|rtl/riscv-dbg/dm_csrs.sv:531.5-533.8" *) sberror_i : { \$auto$wreduce.cc:514:run$13504 [14], \$auto$wreduce.cc:514:run$13504 [14], \$auto$wreduce.cc:514:run$13504 [14] };
  assign havereset_d = \$auto$wreduce.cc:514:run$13501 [0] | (* src = "rtl/riscv-dbg/dm_csrs.sv:525.7-525.45|rtl/riscv-dbg/dm_csrs.sv:524.5-526.8" *) ndmreset_ack_i;
  assign data_d = data_valid_i ? (* src = "rtl/riscv-dbg/dm_csrs.sv:520.7-520.23|rtl/riscv-dbg/dm_csrs.sv:519.5-521.8" *) data_i : \$162y ;
  assign cmderr_d = cmderror_valid_i ? (* src = "rtl/riscv-dbg/dm_csrs.sv:515.7-515.29|rtl/riscv-dbg/dm_csrs.sv:514.5-516.8" *) cmderror_i : \$cmderr_d$280 ;
  assign \$auto$opt_share.cc:222:merge_operators$14975  = \$procmux$8980_Y [1] | (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:503.47-506.14|rtl/riscv-dbg/dm_csrs.sv:503.11-508.14" *) \$auto$rtlil.cc:3094:Pmux$14977 ;
  assign \$procmux$7687_Y  = \$procmux$8983_Y  | (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:503.47-506.14|rtl/riscv-dbg/dm_csrs.sv:503.11-508.14" *) \$130y ;
  assign \$procmux$7747_Y  = \$130y  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:484.47-487.14|rtl/riscv-dbg/dm_csrs.sv:484.11-489.14" *) 32'd0 : dmi_req_i[31:0];
  assign \$procmux$7767_Y  = \$128y  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:484.11-489.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *) \$procmux$7747_Y  : 32'd0;
  assign \$procmux$7776_Y  = \$127y  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:474.11-480.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *) \$procmux$7820_Y  : sbaddress_i;
  function [0:0] \$procmux$7782 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dm_csrs.sv:503.11-508.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$7782  = b[0:0];
      2'b1?:
        \$procmux$7782  = b[1:1];
      default:
        \$procmux$7782  = a;
    endcase
  endfunction
  assign \$procmux$7782_Y  = \$procmux$7782 (\$procmux$8983_Y , { \$procmux$7891_Y , \$procmux$7687_Y  }, { \$126y , \$auto$opt_reduce.cc:137:opt_pmux$13417  });
  assign { \$procmux$7800_Y [21:14], \$procmux$7800_Y [11:0] } = \$126y  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:461.11-470.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *) { \$procmux$7855_Y [21:14], \$procmux$7855_Y [11:0] } : { sbcs_q[21], 8'bxxxxxxx0, sbcs_q[29], 7'h00, sbcs_q[29], sbcs_q[29], sbcs_q[29] };
  assign \$procmux$7820_Y  = \$130y  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:474.47-477.14|rtl/riscv-dbg/dm_csrs.sv:474.11-480.14" *) sbaddress_i : dmi_req_i[31:0];
  assign { \$procmux$7855_Y [21:14], \$procmux$7855_Y [11:0] } = sbbusy_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:461.25-464.14|rtl/riscv-dbg/dm_csrs.sv:461.11-470.14" *) { sbcs_q[21], 8'bxxxxxxx0, sbcs_q[29], 7'h00, sbcs_q[29], sbcs_q[29], sbcs_q[29] } : { dmi_req_i[21:15], 1'h0, dmi_req_i[11:0] };
  assign \$procmux$7891_Y  = \$233y  | (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:461.25-464.14|rtl/riscv-dbg/dm_csrs.sv:461.11-470.14" *) sbbusy_i;
  assign \$cmderr_d$167  = \$117y  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:455.15-455.41|rtl/riscv-dbg/dm_csrs.sv:454.13-456.16" *) 3'h1 : \$cmderr_d$144 ;
  assign \$cmd_valid_d$228  = cmdbusy_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:444.27-452.14|rtl/riscv-dbg/dm_csrs.sv:444.11-457.14" *) \$cmd_valid_d$145  : \$115y ;
  assign \$cmderr_d$168  = cmdbusy_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:444.27-452.14|rtl/riscv-dbg/dm_csrs.sv:444.11-457.14" *) \$cmderr_d$167  : \$cmderr_d$144 ;
  assign \$cmd_valid_d$201  = cmdbusy_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:416.27-421.14|rtl/riscv-dbg/dm_csrs.sv:416.11-426.14" *) \$cmd_valid_d$145  : 1'h1;
  assign \$cmderr_d$193  = cmdbusy_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:406.13-406.71|rtl/riscv-dbg/dm_csrs.sv:405.11-412.14" *) \$cmderr_d$167  : \$190y ;
  assign \$auto$wreduce.cc:514:run$13499 [0] = dmi_req_i[28] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:392.13-392.55|rtl/riscv-dbg/dm_csrs.sv:391.11-393.14" *) 1'h0 : havereset_q;
  assign \$cmd_valid_d$169  = cmdbusy_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:375.29-380.16|rtl/riscv-dbg/dm_csrs.sv:375.13-385.16" *) \$cmd_valid_d$145  : \$164y ;
  assign \$procmux$8372_Y  = \$129y  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:493.11-499.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *) \$procmux$8485_Y ;
  assign \$procmux$8381_Y  = \$127y  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:474.11-480.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *) \$procmux$8485_Y ;
  assign \$auto$wreduce.cc:514:run$13500 [0] = \$176y  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:388.24-394.12|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *) \$auto$wreduce.cc:514:run$13499 [0] : havereset_q;
  assign \$procmux$8430_Y [1] = \$auto$opt_reduce.cc:137:opt_pmux$15070  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:503.11-508.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *) \$auto$opt_share.cc:222:merge_operators$14975  : \$procmux$8980_Y [1];
  assign \$procmux$8485_Y  = \$130y  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:493.47-496.14|rtl/riscv-dbg/dm_csrs.sv:493.11-499.14" *) 1'h0 : \$131y ;
  function [0:0] \$procmux$8531 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$8531  = b[0:0];
      3'b?1?:
        \$procmux$8531  = b[1:1];
      3'b1??:
        \$procmux$8531  = b[2:2];
      default:
        \$procmux$8531  = a;
    endcase
  endfunction
  assign \$cmd_valid_d$266  = \$procmux$8531 (\$cmd_valid_d$145 , { \$cmd_valid_d$169 , \$cmd_valid_d$201 , \$cmd_valid_d$228  }, { \$154y , \$105y , \$109y  });
  function [2:0] \$procmux$8560 ;
    input [2:0] a;
    input [5:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$8560  = b[2:0];
      2'b1?:
        \$procmux$8560  = b[5:3];
      default:
        \$procmux$8560  = a;
    endcase
  endfunction
  assign \$cmderr_d$264  = \$procmux$8560 (\$cmderr_d$144 , { \$cmderr_d$193 , \$cmderr_d$168  }, { \$103y , \$auto$opt_reduce.cc:137:opt_pmux$13423  });
  assign \$dmcontrol_d$263  = \$176y  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:388.24-394.12|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *) dmi_req_i[31:0] : { 1'hx, resumereq_o, 29'b0000000000000000000000000000x, dmactive_o };
  assign sbdata_write_valid_o = \$151y  & (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *) \$procmux$8372_Y ;
  assign sbaddress_write_valid_o = \$151y  & (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *) \$procmux$8381_Y ;
  assign \$auto$wreduce.cc:514:run$13501 [0] = \$151y  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *) \$auto$wreduce.cc:514:run$13500 [0] : havereset_q;
  assign resp_queue_inp[1] = \$151y  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *) \$procmux$8430_Y [1] : \$procmux$8980_Y [1];
  assign sbaddr_d = \$151y  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *) { \$procmux$7767_Y , \$procmux$7776_Y  } : { 32'h00000000, sbaddress_i };
  assign { sbcs_d[28:22], \$auto$wreduce.cc:514:run$13504 [21], sbcs_d[20:15], \$auto$wreduce.cc:514:run$13504 [14], \$auto$wreduce.cc:514:run$13504 [11:0] } = \$151y  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *) { dmi_req_i[28:23], \$procmux$7782_Y , \$procmux$7800_Y [21:14], \$procmux$7800_Y [11:0] } : { 6'hxx, \$procmux$8983_Y , sbcs_q[21], 8'bxxxxxxx0, sbcs_q[29], 7'h00, sbcs_q[29], sbcs_q[29], sbcs_q[29] };
  assign cmd_valid_d = \$151y  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *) \$cmd_valid_d$266  : \$cmd_valid_d$145 ;
  assign \$cmderr_d$280  = \$151y  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *) \$cmderr_d$264  : \$cmderr_d$144 ;
  assign { dmcontrol_d[31], \$dmcontrol_d$279 [30:2], dmcontrol_d[1:0] } = \$151y  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *) \$dmcontrol_d$263  : { 1'hx, resumereq_o, 29'b0000000000000000000000000000x, dmactive_o };
  function [31:0] \$procmux$8656 ;
    input [31:0] a;
    input [447:0] b;
    input [13:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dm_csrs.sv:358.11-363.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" *)
    (* parallel_case *)
    casez (s)
      14'b?????????????1:
        \$procmux$8656  = b[31:0];
      14'b????????????1?:
        \$procmux$8656  = b[63:32];
      14'b???????????1??:
        \$procmux$8656  = b[95:64];
      14'b??????????1???:
        \$procmux$8656  = b[127:96];
      14'b?????????1????:
        \$procmux$8656  = b[159:128];
      14'b????????1?????:
        \$procmux$8656  = b[191:160];
      14'b???????1??????:
        \$procmux$8656  = b[223:192];
      14'b??????1???????:
        \$procmux$8656  = b[255:224];
      14'b?????1????????:
        \$procmux$8656  = b[287:256];
      14'b????1?????????:
        \$procmux$8656  = b[319:288];
      14'b???1??????????:
        \$procmux$8656  = b[351:320];
      14'b??1???????????:
        \$procmux$8656  = b[383:352];
      14'b?1????????????:
        \$procmux$8656  = b[415:384];
      14'b1?????????????:
        \$procmux$8656  = b[447:416];
      default:
        \$procmux$8656  = a;
    endcase
  endfunction
  assign \$procmux$8656_Y  = \$procmux$8656 (32'd0, { \$86y , haltreq_o, resumereq_o, 28'h0000000, ndmreset_o, dmactive_o, 12'h000, havereset_q, havereset_q, resumeack_i, resumeack_i, 2'h0, unavailable_i, unavailable_i, dmstatus[11], dmstatus[11], dmstatus[9], dmstatus[9], 8'h82, hartinfo_i, 19'h04000, cmdbusy_i, 1'h0, cmderr_q, 16'h0200, abstractauto_q[23:16], 14'h0000, abstractauto_q[1:0], next_dm_addr_i, \$111y , 31'h00000000, halted_i, 2'h0, sbcs_q[29:21], sbreadonaddr_o, sbaccess_o, sbautoincrement_o, sbreadondata_o, sbcs_q[14:12], 1'h0, sbcs_q[29], 7'h00, sbcs_q[29], sbcs_q[29], sbcs_q[29], sbaddr_q[31:0], sbaddr_q[63:32], \$procmux$8798_Y , \$procmux$8736_Y  }, { \$154y , \$176y , \$185y , \$186y , \$103y , \$104y , \$106y , \$109y , \$auto$opt_reduce.cc:137:opt_pmux$15076 , \$126y , \$127y , \$128y , \$129y , \$135y  });
  assign \$procmux$8689_Y  = sbcs_q[22] | (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:358.47-361.14|rtl/riscv-dbg/dm_csrs.sv:358.11-363.14" *) \$130y ;
  function [0:0] \$procmux$8697 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dm_csrs.sv:358.11-363.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$8697  = b[0:0];
      2'b1?:
        \$procmux$8697  = b[1:1];
      default:
        \$procmux$8697  = a;
    endcase
  endfunction
  assign \$procmux$8697_Y [1] = \$procmux$8697 (1'h0, { cmdbusy_i, \$130y  }, { \$auto$opt_reduce.cc:137:opt_pmux$13427 , \$auto$opt_reduce.cc:137:opt_pmux$13425  });
  assign \$procmux$8736_Y  = \$130y  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:358.47-361.14|rtl/riscv-dbg/dm_csrs.sv:358.11-363.14" *) 32'd0 : sbdata_q[63:32];
  assign \$cmd_valid_d$120  = cmdbusy_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:323.13-323.87|rtl/riscv-dbg/dm_csrs.sv:320.11-331.14" *) 1'h0 : \$115y ;
  assign \$cmderr_d$119  = cmdbusy_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:323.13-323.87|rtl/riscv-dbg/dm_csrs.sv:320.11-331.14" *) \$cmderr_d$118  : cmderr_q;
  assign \$procmux$8798_Y  = \$130y  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:348.47-351.14|rtl/riscv-dbg/dm_csrs.sv:348.11-354.14" *) 32'd0 : sbdata_o;
  assign \$cmderr_d$118  = \$117y  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:329.15-329.41|rtl/riscv-dbg/dm_csrs.sv:328.13-330.16" *) 3'h1 : cmderr_q;
  assign \$cmd_valid_d$95  = cmdbusy_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:302.13-302.73|rtl/riscv-dbg/dm_csrs.sv:300.11-309.14" *) 1'h0 : \$164y ;
  assign \$procmux$8936_Y  = \$auto$opt_reduce.cc:137:opt_pmux$13425  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:358.11-363.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" *) \$procmux$8689_Y  : sbcs_q[22];
  function [0:0] \$procmux$8953 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dm_csrs.sv:318.38-332.12|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$8953  = b[0:0];
      2'b1?:
        \$procmux$8953  = b[1:1];
      default:
        \$procmux$8953  = a;
    endcase
  endfunction
  assign \$cmd_valid_d$140  = \$procmux$8953 (1'h0, { \$cmd_valid_d$95 , \$cmd_valid_d$120  }, { \$154y , \$109y  });
  assign \$cmderr_d$139  = \$auto$opt_reduce.cc:137:opt_pmux$13427  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:318.38-332.12|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" *) \$cmderr_d$119  : cmderr_q;
  assign sbdata_read_valid_o = \$81y  & (* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" *) \$procmux$8372_Y ;
  assign { resp_queue_inp[33:2], \$procmux$8980_Y [1] } = \$81y  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" *) { \$procmux$8656_Y , \$procmux$8697_Y [1] } : 33'h000000000;
  assign \$procmux$8983_Y  = \$81y  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" *) \$procmux$8936_Y  : sbcs_q[22];
  assign \$cmd_valid_d$145  = \$81y  & (* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" *) \$cmd_valid_d$140 ;
  assign \$cmderr_d$144  = \$81y  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" *) \$cmderr_d$139  : cmderr_q;
  assign \$data_q$337  = dmactive_o ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *) data_d : 64'h0000000000000000;
  assign \$procmux$8995_Y  = dmactive_o ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *) progbuf_d : 256'h0000000000000000000000000000000000000000000000000000000000000000;
  assign \$procmux$8998_Y  = dmactive_o ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *) sbdata_d : 64'h0000000000000000;
  assign \$procmux$9001_Y  = dmactive_o ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *) sbaddr_d : 64'h0000000000000000;
  assign { \$auto$wreduce.cc:514:run$13505 [28:12], \$auto$wreduce.cc:514:run$13505 [29] } = dmactive_o ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *) { sbcs_d[28:22], sbbusy_i, sbcs_d[20:12], 1'h1 } : 18'h00080;
  assign { \$abstractauto_q$332 [23:16], \$abstractauto_q$332 [1:0] } = dmactive_o ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *) { dmi_req_i[23:16], dmi_req_i[1:0] } : 10'h000;
  assign \$cmd_valid_q$331  = dmactive_o & (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *) cmd_valid_d;
  assign \$command_q$330  = dmactive_o ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *) dmi_req_i[31:0] : 32'd0;
  assign \$cmderr_q$329  = dmactive_o ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *) cmderr_d : 3'h0;
  assign { \$dmcontrol_q$328 [31:30], \$dmcontrol_q$328 [1] } = dmactive_o ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *) { dmcontrol_d[31:30], dmcontrol_d[1] } : 3'h0;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:596.5" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_csrs.i_fifo  i_fifo (
    .clk_i(clk_i),
    .data_i({ resp_queue_inp[33:1], resp_queue_inp[1] }),
    .data_o(dmi_resp_o),
    .empty_o(resp_queue_empty),
    .flush_i(\$322y ),
    .full_o(resp_queue_full),
    .pop_i(resp_queue_pop),
    .push_i(resp_queue_push),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { \$219y [254:224], \$219y [222:192], \$219y [190:160], \$219y [158:128], \$219y [126:96], \$219y [94:64], \$219y [62:32], \$219y [30:0] } = { \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31] };
  assign { \$abstractauto_q$332 [31:24], \$abstractauto_q$332 [15:2] } = 22'h000000;
  assign \$auto$wreduce.cc:514:run$13499 [1] = 1'hx;
  assign \$auto$wreduce.cc:514:run$13500 [1] = 1'hx;
  assign \$auto$wreduce.cc:514:run$13501 [1] = 1'hx;
  assign { \$auto$wreduce.cc:514:run$13504 [31:22], \$auto$wreduce.cc:514:run$13504 [20:15], \$auto$wreduce.cc:514:run$13504 [13:12] } = { 3'hx, sbcs_d[28:22], sbcs_d[20:15], \$auto$wreduce.cc:514:run$13504 [14], \$auto$wreduce.cc:514:run$13504 [14] };
  assign { \$auto$wreduce.cc:514:run$13505 [31:30], \$auto$wreduce.cc:514:run$13505 [11:0] } = { 3'h0, \$auto$wreduce.cc:514:run$13505 [29], 7'h00, \$auto$wreduce.cc:514:run$13505 [29], \$auto$wreduce.cc:514:run$13505 [29], \$auto$wreduce.cc:514:run$13505 [29] };
  assign { \$dmcontrol_d$279 [31], \$dmcontrol_d$279 [1:0] } = { dmcontrol_d[31], dmcontrol_d[1:0] };
  assign { \$dmcontrol_q$328 [29:2], \$dmcontrol_q$328 [0] } = { 28'h0000000, dmcontrol_d[0] };
  assign \$procmux$7800_Y [13:12] = { \$procmux$7800_Y [14], \$procmux$7800_Y [14] };
  assign \$procmux$7855_Y [13:12] = { \$procmux$7855_Y [14], \$procmux$7855_Y [14] };
  assign \$procmux$8430_Y [0] = \$procmux$8430_Y [1];
  assign \$procmux$8697_Y [0] = \$procmux$8697_Y [1];
  assign { \$procmux$8980_Y [33:2], \$procmux$8980_Y [0] } = { resp_queue_inp[33:2], \$procmux$8980_Y [1] };
  assign { abstractauto_q[31:24], abstractauto_q[15:2] } = 22'h000000;
  assign autoexecdata_idx[1:0] = dmi_req_i[35:34];
  assign { \$160y [62:32], \$160y [30:0] } = { \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31] };
  assign dmcontrol_d[29:2] = 28'h0000000;
  assign { dmstatus[19:12], dmstatus[10], dmstatus[8:0] } = { havereset_q, havereset_q, resumeack_i, resumeack_i, 2'h0, unavailable_i, unavailable_i, dmstatus[11], dmstatus[9], 8'h82 };
  assign hartsel_o = 20'h00000;
  assign resp_queue_inp[0] = resp_queue_inp[1];
  assign sbaddress_o = sbaddr_q[31:0];
  assign { sbcs_d[21], sbcs_d[11:0] } = { sbbusy_i, 12'h407 };
  assign { sbcs_q[31:30], sbcs_q[20:15], sbcs_q[11:0] } = { 2'h0, sbreadonaddr_o, sbaccess_o, sbautoincrement_o, sbreadondata_o, 1'h0, sbcs_q[29], 7'h00, sbcs_q[29], sbcs_q[29], sbcs_q[29] };
  assign sbdata_q[31:0] = sbdata_o;
  assign \$111y  = \$auto$bmuxmap.cc:84:execute$15412 ;
  assign \$115y  = \$auto$bmuxmap.cc:84:execute$15431 ;
  assign \$164y  = \$auto$bmuxmap.cc:84:execute$15450 ;
endmodule

(* src = "rtl/riscv-dbg/dm_mem.sv:19.8" *)
module \dm_mem$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_mem (clk_i, rst_ni, debug_req_o, req_i, we_i, addr_i, wdata_i, be_i, rdata_o, data_i, data_o, ndmreset_i, hartsel_i, haltreq_i, resumereq_i, clear_resumeack_i, halted_o, resuming_o, progbuf_i, data_valid_o, cmd_valid_i
, cmd_i, cmderror_valid_o, cmderror_o, cmdbusy_o);
  wire \$100y ;
  wire [31:0] \$110y ;
  wire \$111y ;
  wire \$128y ;
  wire \$130y ;
  wire \$133y ;
  wire \$134y ;
  wire \$135y ;
  wire \$136y ;
  wire \$139y ;
  wire \$13y ;
  wire \$140y ;
  wire \$141y ;
  wire \$153y ;
  wire \$154y ;
  wire \$155y ;
  wire [63:0] \$158y ;
  wire \$160y ;
  wire \$161y ;
  wire \$162y ;
  wire [2:0] \$163y ;
  wire [63:0] \$165y ;
  wire \$167y ;
  wire \$168y ;
  wire \$169y ;
  wire \$16y ;
  wire [11:0] \$170y ;
  wire \$172y ;
  wire [15:0] \$178y ;
  wire [57:0] \$180y ;
  wire \$18y ;
  wire \$19y ;
  wire \$205y ;
  wire \$206y ;
  wire \$207y ;
  wire \$208y ;
  wire \$210y ;
  wire \$211y ;
  wire \$212y ;
  wire \$213y ;
  wire \$21y ;
  wire \$222y ;
  wire \$223y ;
  wire \$236y ;
  wire \$238y ;
  wire \$23y ;
  wire \$247y ;
  wire \$248y ;
  wire \$24y ;
  wire \$26y ;
  wire \$28y ;
  wire \$36y ;
  wire \$45y ;
  wire \$4y ;
  wire \$5y ;
  wire \$62y ;
  wire \$64y ;
  wire [1:0] \$69y ;
  wire \$6y ;
  wire \$78y ;
  wire \$79y ;
  wire \$80y ;
  wire \$87y ;
  (* unused_bits = "1" *)
  wire [1:0] \$94y ;
  wire \$95y ;
  wire [126:0] \$abstract_cmd[255:128]$215 ;
  wire [126:0] \$abstract_cmd[255:128]$216 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:381.11-417.14" *)
  wire [127:0] \$abstract_cmd[255:128]$218 ;
  wire [126:0] \$abstract_cmd[255:128]$231 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:429.20-460.14" *)
  wire [127:0] \$abstract_cmd[255:128]$232 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:424.11-460.14" *)
  wire [127:0] \$abstract_cmd[255:128]$234 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:418.18-467.12" *)
  wire [127:0] \$abstract_cmd[255:128]$242 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:377.9-467.12" *)
  wire [127:0] \$abstract_cmd[255:128]$245 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:473.9-476.12" *)
  wire [31:0] \$abstract_cmd[319:288]$249 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:381.11-417.14" *)
  wire [31:0] \$abstract_cmd[31:0]$217 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:418.18-467.12" *)
  wire [31:0] \$abstract_cmd[31:0]$241 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:377.9-467.12" *)
  wire [31:0] \$abstract_cmd[31:0]$244 ;
  wire [127:0] \$auto$bmuxmap.cc:84:execute$15452 ;
  wire [63:0] \$auto$bmuxmap.cc:84:execute$15455 ;
  wire [195:0] \$auto$bmuxmap.cc:84:execute$15457 ;
  wire [97:0] \$auto$bmuxmap.cc:84:execute$15462 ;
  wire [48:0] \$auto$bmuxmap.cc:84:execute$15465 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14466 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14468 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14470 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14472 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14477 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14479 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14486 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14488 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14490 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14474 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14483 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14492 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$14969 ;
  wire \$auto$rtlil.cc:2957:Not$13170 ;
  (* unused_bits = "1" *)
  wire [1:0] \$auto$rtlil.cc:2957:Not$13176 ;
  wire \$auto$rtlil.cc:2957:Not$14482 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16" *)
  wire [1:0] \$auto$wreduce.cc:514:run$13524 ;
  wire [63:0] \$auto$wreduce.cc:514:run$13527 ;
  wire [63:0] \$auto$wreduce.cc:514:run$13528 ;
  wire [1:0] \$auto$wreduce.cc:514:run$13529 ;
  wire [1:0] \$auto$wreduce.cc:514:run$13530 ;
  wire [1:0] \$auto$wreduce.cc:514:run$13531 ;
  wire [1:0] \$auto$wreduce.cc:514:run$13532 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:148.9-155.12" *)
  wire [2:0] \$cmderror_o$11 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:145.5-192.12" *)
  wire [2:0] \$cmderror_o$43 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:196.5-199.8" *)
  wire [2:0] \$cmderror_o$47 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:196.5-199.8" *)
  wire \$cmderror_valid_o$46 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16" *)
  wire [63:0] \$data_bits$126 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *)
  wire [63:0] \$data_bits$190 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *)
  wire [7:0] \$data_bits[15:8]$104 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *)
  wire [7:0] \$data_bits[23:16]$106 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:269.15-281.18" *)
  wire [31:0] \$data_bits[31:0]$109 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *)
  wire [7:0] \$data_bits[31:24]$108 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *)
  wire [7:0] \$data_bits[39:32]$113 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *)
  wire [7:0] \$data_bits[47:40]$115 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *)
  wire [7:0] \$data_bits[55:48]$117 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:269.15-281.18" *)
  wire [31:0] \$data_bits[63:32]$120 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *)
  wire [7:0] \$data_bits[63:56]$119 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *)
  wire [7:0] \$data_bits[7:0]$102 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *)
  wire \$data_valid_o$192 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *)
  wire \$exception$185 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:145.5-192.12" *)
  wire \$go$40 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *)
  wire \$going$184 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16" *)
  wire [1:0] \$halted_aligned$124 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *)
  wire [1:0] \$halted_aligned$188 ;
  wire \$procmux$6519_Y ;
  wire \$procmux$6662_Y ;
  wire [63:0] \$procmux$6820_Y ;
  wire [63:0] \$procmux$6854_Y ;
  wire \$procmux$7274_CMP ;
  wire \$procmux$7279_CMP ;
  wire \$procmux$7294_CMP ;
  wire [1:0] \$procmux$7296_Y ;
  wire [1:0] \$procmux$7308_Y ;
  wire [308:0] abstract_cmd;
  (* src = "rtl/riscv-dbg/dm_mem.sv:56.44" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:58.44" *)
  input [3:0] be_i;
  wire [3:0] be_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:34.44" *)
  input clear_resumeack_i;
  wire clear_resumeack_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:25.44" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:47.44" *)
  input [31:0] cmd_i;
  wire [31:0] cmd_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:46.44" *)
  input cmd_valid_i;
  wire cmd_valid_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:50.44" *)
  output cmdbusy_o;
  wire cmdbusy_o;
  (* src = "rtl/riscv-dbg/dm_mem.sv:49.44" *)
  output [2:0] cmderror_o;
  wire [2:0] cmderror_o;
  (* src = "rtl/riscv-dbg/dm_mem.sv:48.44" *)
  output cmderror_valid_o;
  wire cmderror_valid_o;
  (* src = "rtl/riscv-dbg/dm_mem.sv:42.44" *)
  input [63:0] data_i;
  wire [63:0] data_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:43.44" *)
  output [63:0] data_o;
  wire [63:0] data_o;
  (* src = "rtl/riscv-dbg/dm_mem.sv:44.44" *)
  output data_valid_o;
  wire data_valid_o;
  (* src = "rtl/riscv-dbg/dm_mem.sv:28.44" *)
  output debug_req_o;
  wire debug_req_o;
  (* src = "rtl/riscv-dbg/dm_mem.sv:91.9" *)
  wire exception;
  (* src = "rtl/riscv-dbg/dm_mem.sv:121.20" *)
  reg fwd_rom_q;
  (* src = "rtl/riscv-dbg/dm_mem.sv:89.31" *)
  wire go;
  (* src = "rtl/riscv-dbg/dm_mem.sv:89.35" *)
  wire going;
  (* src = "rtl/riscv-dbg/dm_mem.sv:107.30" *)
  wire [1:0] halted_aligned;
  (* src = "rtl/riscv-dbg/dm_mem.sv:87.23" *)
  wire halted_d;
  (* src = "rtl/riscv-dbg/dm_mem.sv:37.44" *)
  output halted_o;
  reg halted_o;
  (* src = "rtl/riscv-dbg/dm_mem.sv:32.44" *)
  input haltreq_i;
  wire haltreq_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:30.44" *)
  input [19:0] hartsel_i;
  wire [19:0] hartsel_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:29.44" *)
  input ndmreset_i;
  wire ndmreset_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:40.44" *)
  input [255:0] progbuf_i;
  wire [255:0] progbuf_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:59.44" *)
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  (* src = "rtl/riscv-dbg/dm_mem.sv:95.25" *)
  reg [63:0] rdata_q;
  (* src = "rtl/riscv-dbg/dm_mem.sv:54.44" *)
  input req_i;
  wire req_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:89.23" *)
  wire resume;
  (* src = "rtl/riscv-dbg/dm_mem.sv:33.44" *)
  input resumereq_i;
  wire resumereq_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:88.23" *)
  wire resuming_d;
  (* src = "rtl/riscv-dbg/dm_mem.sv:38.44" *)
  output resuming_o;
  reg resuming_o;
  (* src = "rtl/riscv-dbg/dm_mem.sv:94.16" *)
  wire [63:0] rom_rdata;
  (* src = "rtl/riscv-dbg/dm_mem.sv:26.44" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/riscv-dbg/dm_mem.sv:134.11" *)
  wire [1:0] state_d;
  (* src = "rtl/riscv-dbg/dm_mem.sv:134.20" *)
  reg [1:0] state_q;
  (* src = "rtl/riscv-dbg/dm_mem.sv:92.9" *)
  wire unsupported_command;
  (* src = "rtl/riscv-dbg/dm_mem.sv:57.44" *)
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:55.44" *)
  input we_i;
  wire we_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:96.16" *)
  reg word_enable32_q;
  (* src = "rtl/riscv-dbg/dm_mem.sv:215.16" *)
  wire [63:0] word_mux;
  assign \$100y  = ! (* src = "rtl/riscv-dbg/dm_mem.sv:269.19-269.88" *) { \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [9:5], addr_i[6:2] };
  assign { \$110y [31], \$110y [9:5] } = addr_i[11:7] - (* src = "rtl/riscv-dbg/dm_mem.sv:269.20-269.81" *) 3'h7;
  assign \$111y  = { \$110y [31], \$110y [9:5], addr_i[6:2] } == (* src = "rtl/riscv-dbg/dm_mem.sv:269.19-269.88" *) 1'h1;
  assign \$128y  = addr_i[11:0] == 10'h300;
  assign \$13y  = hartsel_i[0] ? (* src = "rtl/riscv-dbg/dm_mem.sv:158.13-158.39" *) 1'h0 : resumereq_i;
  assign \$130y  = wdata_i[0] ? (* src = "rtl/riscv-dbg/dm_mem.sv:293.17-293.55" *) 1'h0 : resumereq_i;
  assign \$133y  = ! (* src = "rtl/riscv-dbg/dm_mem.sv:301.19-301.54" *) cmd_i[31:24];
  assign \$134y  = ! (* src = "rtl/riscv-dbg/dm_mem.sv:302.19-302.34" *) cmd_i[17];
  assign \$135y  = \$133y  && (* src = "rtl/riscv-dbg/dm_mem.sv:301.19-302.34" *) \$134y ;
  assign \$136y  = \$135y  && (* src = "rtl/riscv-dbg/dm_mem.sv:301.19-302.52" *) cmd_i[18];
  assign \$139y  = addr_i[11:0] >= 10'h380;
  assign \$140y  = addr_i[11:0] <= 10'h387;
  assign \$141y  = \$139y  && \$140y ;
  assign \$153y  = addr_i[11:0] >= 10'h360;
  assign \$154y  = addr_i[11:0] <= 10'h37f;
  assign \$155y  = \$153y  && \$154y ;
  assign \$16y  = hartsel_i[0] ? (* src = "rtl/riscv-dbg/dm_mem.sv:158.44-158.71" *) 1'h0 : resuming_o;
  assign \$160y  = addr_i[11:0] >= 10'h338;
  assign \$161y  = addr_i[11:0] <= 10'h35f;
  assign \$162y  = \$160y  && \$161y ;
  assign \$163y  = addr_i[5:3] - (* src = "rtl/riscv-dbg/dm_mem.sv:326.39-327.67" *) 3'h7;
  assign \$168y  = addr_i[11:0] <= 11'h7ff;
  assign \$169y  = \$167y  && \$168y ;
  assign \$170y [11:10] = addr_i[11:10] - (* src = "rtl/riscv-dbg/dm_mem.sv:332.18-332.88" *) 1'h1;
  assign \$172y  = ! (* src = "rtl/riscv-dbg/dm_mem.sv:332.17-333.78" *) { \$170y [11:10], addr_i[9:3] };
  assign \$18y  = ! (* src = "rtl/riscv-dbg/dm_mem.sv:158.43-158.71" *) \$16y ;
  assign \$19y  = \$13y  && (* src = "rtl/riscv-dbg/dm_mem.sv:158.13-158.71" *) \$18y ;
  assign \$26y  = hartsel_i[0] ? (* src = "rtl/riscv-dbg/dm_mem.sv:148.28-148.53" *) 1'h0 : halted_o;
  assign \$205y  = cmd_i[22:20] < (* src = "rtl/riscv-dbg/dm_mem.sv:377.13-377.40" *) 2'h3;
  assign \$206y  = \$205y  && (* src = "rtl/riscv-dbg/dm_mem.sv:377.13-377.58" *) cmd_i[17];
  assign \$207y  = \$206y  && (* src = "rtl/riscv-dbg/dm_mem.sv:377.13-377.73" *) cmd_i[16];
  assign \$208y  = | (* src = "rtl/riscv-dbg/dm_mem.sv:381.15-381.39" *) cmd_i[15:14];
  assign \$21y  = hartsel_i[0] ? (* src = "rtl/riscv-dbg/dm_mem.sv:159.14-159.38" *) 1'h0 : haltreq_i;
  assign \$210y  = ! (* src = "rtl/riscv-dbg/dm_mem.sv:386.61-386.76" *) cmd_i[5];
  assign \$211y  = cmd_i[12] && (* src = "rtl/riscv-dbg/dm_mem.sv:386.24-386.77" *) \$210y ;
  assign \$212y  = cmd_i[4:0] == (* src = "rtl/riscv-dbg/dm_mem.sv:387.24-387.49" *) 4'ha;
  assign \$213y  = \$211y  && (* src = "rtl/riscv-dbg/dm_mem.sv:386.24-387.50" *) \$212y ;
  assign \$222y  = ! (* src = "rtl/riscv-dbg/dm_mem.sv:418.71-418.83" *) cmd_i[16];
  assign \$223y  = \$206y  && (* src = "rtl/riscv-dbg/dm_mem.sv:418.22-418.83" *) \$222y ;
  assign \$23y  = ! (* src = "rtl/riscv-dbg/dm_mem.sv:159.13-159.38" *) \$21y ;
  assign \$236y  = cmd_i[22:20] >= (* src = "rtl/riscv-dbg/dm_mem.sv:461.22-461.50" *) 2'h3;
  assign \$238y  = \$236y  || (* src = "rtl/riscv-dbg/dm_mem.sv:461.22-461.84" *) cmd_i[19];
  assign \$24y  = \$19y  && (* src = "rtl/riscv-dbg/dm_mem.sv:158.13-159.38" *) \$23y ;
  assign \$247y  = ! (* src = "rtl/riscv-dbg/dm_mem.sv:473.31-473.51" *) \$procmux$6662_Y ;
  assign \$248y  = cmd_i[18] && (* src = "rtl/riscv-dbg/dm_mem.sv:473.13-473.51" *) \$247y ;
  assign \$28y  = \$24y  && (* src = "rtl/riscv-dbg/dm_mem.sv:158.13-159.67" *) \$26y ;
  assign \$36y  = hartsel_i[0] ? (* src = "rtl/riscv-dbg/dm_mem.sv:186.13-186.36" *) halted_aligned[1] : halted_aligned[0];
  assign \$4y  = cmd_valid_i && (* src = "rtl/riscv-dbg/dm_mem.sv:148.13-148.53" *) \$26y ;
  assign \$45y  = unsupported_command && (* src = "rtl/riscv-dbg/dm_mem.sv:196.9-196.43" *) cmd_valid_i;
  assign \$5y  = ! (* src = "rtl/riscv-dbg/dm_mem.sv:148.57-148.77" *) unsupported_command;
  assign word_mux = fwd_rom_q ? (* src = "rtl/riscv-dbg/dm_mem.sv:216.21-216.54" *) rom_rdata : rdata_q;
  assign rdata_o = word_enable32_q ? (* src = "rtl/riscv-dbg/dm_mem.sv:221.22-221.80" *) word_mux[63:32] : word_mux[31:0];
  assign \$6y  = \$4y  && (* src = "rtl/riscv-dbg/dm_mem.sv:148.13-148.77" *) \$5y ;
  assign \$64y  = addr_i[11:0] == 9'h100;
  assign \$79y  = addr_i[11:0] == 9'h108;
  assign \$80y  = addr_i[11:0] == 9'h110;
  assign \$95y  = addr_i[11:0] == 9'h118;
  assign \$auto$bmuxmap.cc:84:execute$15452 [63:0] = addr_i[3] ? (* src = "rtl/riscv-dbg/dm_mem.sv:319.23-320.64" *) progbuf_i[127:64] : progbuf_i[63:0];
  assign \$auto$bmuxmap.cc:84:execute$15452 [127:64] = addr_i[3] ? (* src = "rtl/riscv-dbg/dm_mem.sv:319.23-320.64" *) progbuf_i[255:192] : progbuf_i[191:128];
  assign \$auto$bmuxmap.cc:84:execute$15455  = addr_i[4] ? (* src = "rtl/riscv-dbg/dm_mem.sv:319.23-320.64" *) \$auto$bmuxmap.cc:84:execute$15452 [127:64] : \$auto$bmuxmap.cc:84:execute$15452 [63:0];
  assign \$auto$bmuxmap.cc:84:execute$15457 [48:0] = \$163y [0] ? (* src = "rtl/riscv-dbg/dm_mem.sv:326.23-327.69" *) 49'h00193a8067545 : { 23'h00006e, abstract_cmd[30], abstract_cmd[30], abstract_cmd[30], abstract_cmd[30], 1'h0, abstract_cmd[30], abstract_cmd[30], 2'h0, abstract_cmd[30], abstract_cmd[20], abstract_cmd[30], abstract_cmd[30], 2'h0, abstract_cmd[30], 5'h00, abstract_cmd[20], abstract_cmd[20], abstract_cmd[20], 1'h0, abstract_cmd[20] };
  assign \$auto$bmuxmap.cc:84:execute$15457 [97:49] = \$163y [0] ? (* src = "rtl/riscv-dbg/dm_mem.sv:326.23-327.69" *) { 1'h0, abstract_cmd[254], abstract_cmd[254], abstract_cmd[254], abstract_cmd[254], 1'h0, abstract_cmd[254], abstract_cmd[254], 2'h0, abstract_cmd[254], 3'h0, abstract_cmd[254], 1'h0, abstract_cmd[254], 1'h0, abstract_cmd[254], 3'h5, abstract_cmd[223:212], abstract_cmd[254], abstract_cmd[208], abstract_cmd[206:204], 5'h00, abstract_cmd[198], abstract_cmd[254], abstract_cmd[196], 2'h1 } : { abstract_cmd[191:180], abstract_cmd[198], abstract_cmd[174:172], abstract_cmd[254], 1'h0, abstract_cmd[208], abstract_cmd[164], 3'h2, abstract_cmd[158:157], abstract_cmd[157], abstract_cmd[157], 1'h0, abstract_cmd[158], abstract_cmd[152:148], abstract_cmd[157], abstract_cmd[144], abstract_cmd[142:135], abstract_cmd[158], abstract_cmd[133:132], abstract_cmd[130], 1'h1 };
  assign \$auto$bmuxmap.cc:84:execute$15457 [146:98] = \$163y [0] ? (* src = "rtl/riscv-dbg/dm_mem.sv:326.23-327.69" *) 49'h0000000000000 : { 11'h000, abstract_cmd[308], 6'h00, abstract_cmd[308], 30'h2bd9895d };
  assign \$auto$bmuxmap.cc:84:execute$15457 [195:147] = \$163y [0] ? (* src = "rtl/riscv-dbg/dm_mem.sv:326.23-327.69" *) 49'h0000000000000 : 49'h0000000000000;
  assign \$auto$bmuxmap.cc:84:execute$15462 [48:0] = \$163y [1] ? (* src = "rtl/riscv-dbg/dm_mem.sv:326.23-327.69" *) \$auto$bmuxmap.cc:84:execute$15457 [97:49] : \$auto$bmuxmap.cc:84:execute$15457 [48:0];
  assign \$auto$bmuxmap.cc:84:execute$15462 [97:49] = \$163y [1] ? (* src = "rtl/riscv-dbg/dm_mem.sv:326.23-327.69" *) \$auto$bmuxmap.cc:84:execute$15457 [195:147] : \$auto$bmuxmap.cc:84:execute$15457 [146:98];
  assign \$auto$bmuxmap.cc:84:execute$15465  = \$163y [2] ? (* src = "rtl/riscv-dbg/dm_mem.sv:326.23-327.69" *) \$auto$bmuxmap.cc:84:execute$15462 [97:49] : \$auto$bmuxmap.cc:84:execute$15462 [48:0];
  assign \$178y [7] = hartsel_i[0] == (* src = "rtl/riscv-dbg/dm_mem.sv:334.15-334.93" *) 1'h0;
  assign \$178y [15] = hartsel_i[0] == (* src = "rtl/riscv-dbg/dm_mem.sv:334.15-334.93" *) 1'h1;
  assign \$69y [0] = wdata_i[0] == (* src = "rtl/riscv-dbg/dm_mem.sv:251.13-251.49" *) 1'h0;
  assign \$69y [1] = wdata_i[0] == (* src = "rtl/riscv-dbg/dm_mem.sv:251.13-251.49" *) 1'h1;
  (* src = "rtl/riscv-dbg/dm_mem.sv:522.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14474 ) state_q <= state_d;
  (* src = "rtl/riscv-dbg/dm_mem.sv:522.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q <= 64'h0000000000000000;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14483 ) rdata_q <= \$procmux$6854_Y ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:536.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) halted_o <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14492 ) halted_o <= halted_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14466  = | { \$go$40 , \$procmux$7279_CMP , \$procmux$7274_CMP , ndmreset_i, \$28y , \$6y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14468  = { \$procmux$7279_CMP , ndmreset_i, \$16y  } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14470  = { \$procmux$7274_CMP , ndmreset_i, \$36y  } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14472  = { \$go$40 , going, ndmreset_i } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14477  = | { \$169y , \$155y , \$162y , \$141y , \$128y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14479  = { cmdbusy_o, \$130y , \$128y  } != 3'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14486  = | { ndmreset_i, req_i };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14488  = { ndmreset_i, we_i, req_i } != 3'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14490  = { ndmreset_i, \$80y , \$64y , we_i, req_i } != 5'h03;
  assign \$auto$rtlil.cc:2957:Not$14482  = ~ we_i;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14474  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14472 , \$auto$opt_dff.cc:194:make_patterns_logic$14470 , \$auto$opt_dff.cc:194:make_patterns_logic$14468 , \$auto$opt_dff.cc:194:make_patterns_logic$14466  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14483  = & { \$auto$rtlil.cc:2957:Not$14482 , \$auto$opt_dff.cc:194:make_patterns_logic$14479 , \$auto$opt_dff.cc:194:make_patterns_logic$14477 , req_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14492  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14490 , \$auto$opt_dff.cc:194:make_patterns_logic$14488 , \$auto$opt_dff.cc:194:make_patterns_logic$14486  };
  assign \$167y  = | addr_i[11:10];
  assign { \$180y [8], \$180y [0], \$180y [9], \$180y [1] } = { go, go, resume, resume } & { \$178y [15], \$178y [7], \$178y [15], \$178y [7] };
  assign \$62y  = resuming_o & \$auto$rtlil.cc:2957:Not$13170 ;
  assign \$auto$rtlil.cc:2957:Not$13170  = ~ \$178y [7];
  assign \$87y  = halted_o & \$auto$rtlil.cc:2957:Not$13176 [0];
  assign \$auto$rtlil.cc:2957:Not$13176 [0] = ~ \$69y [0];
  assign \$78y  = halted_o | \$69y [0];
  assign \$94y [0] = \$auto$wreduce.cc:514:run$13532 [0] | \$69y [0];
  assign cmdbusy_o = | { \$procmux$7279_CMP , \$procmux$7274_CMP , \$go$40  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$14969  = | { \$procmux$7279_CMP , \$procmux$7274_CMP  };
  (* src = "rtl/riscv-dbg/dm_mem.sv:522.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) fwd_rom_q <= 1'h0;
    else fwd_rom_q <= addr_i[11];
  (* src = "rtl/riscv-dbg/dm_mem.sv:536.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) resuming_o <= 1'h0;
    else resuming_o <= resuming_d;
  (* src = "rtl/riscv-dbg/dm_mem.sv:522.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) word_enable32_q <= 1'h0;
    else word_enable32_q <= addr_i[2];
  assign unsupported_command = \$133y  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" *) \$procmux$6662_Y  : 1'h1;
  assign { abstract_cmd[30], abstract_cmd[20] } = \$133y  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" *) { \$abstract_cmd[31:0]$244 [30], \$abstract_cmd[31:0]$244 [20] } : 2'h1;
  assign \$abstract_cmd[319:288]$249 [20] = ~ (* src = "rtl/riscv-dbg/dm_mem.sv:475.11-475.46|rtl/riscv-dbg/dm_mem.sv:473.9-476.12" *) \$248y ;
  assign \$procmux$6519_Y  = \$223y  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" *) \$208y  : \$238y ;
  assign { \$abstract_cmd[31:0]$241 [30], \$abstract_cmd[31:0]$241 [20] } = \$223y  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" *) { \$abstract_cmd[31:0]$217 [30], 1'h1 } : { 1'h0, \$238y  };
  assign { \$abstract_cmd[255:128]$231 [78:76], \$abstract_cmd[255:128]$231 [68], \$abstract_cmd[255:128]$231 [63:52], \$abstract_cmd[255:128]$231 [126] } = cmd_i[12] ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:442.13-448.16|rtl/riscv-dbg/dm_mem.sv:440.20-460.14" *) 17'h02000 : { cmd_i[22:20], 1'h0, cmd_i[11:0], 1'h1 };
  assign { \$abstract_cmd[255:128]$231 [24:20], \$abstract_cmd[255:128]$231 [16], \$abstract_cmd[255:128]$231 [14:12], \$abstract_cmd[255:128]$231 [30], \$abstract_cmd[255:128]$231 [2] } = cmd_i[12] ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:442.13-448.16|rtl/riscv-dbg/dm_mem.sv:440.20-460.14" *) { cmd_i[4:0], 1'h1, cmd_i[22:20], 1'h0, cmd_i[5] } : 11'h486;
  assign { \$abstract_cmd[255:128]$232 [78:76], \$abstract_cmd[255:128]$232 [68], \$abstract_cmd[255:128]$232 [63:52], \$abstract_cmd[255:128]$232 [126], \$abstract_cmd[255:128]$232 [24:20], \$abstract_cmd[255:128]$232 [16], \$abstract_cmd[255:128]$232 [14:12], \$abstract_cmd[255:128]$232 [30], \$abstract_cmd[255:128]$232 [2] } = \$213y  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:430.52-440.14|rtl/riscv-dbg/dm_mem.sv:429.20-460.14" *) { cmd_i[22:20], 25'h07b3c86 } : { \$abstract_cmd[255:128]$231 [78:76], \$abstract_cmd[255:128]$231 [68], \$abstract_cmd[255:128]$231 [63:52], \$abstract_cmd[255:128]$231 [126], \$abstract_cmd[255:128]$231 [24:20], \$abstract_cmd[255:128]$231 [16], \$abstract_cmd[255:128]$231 [14:12], \$abstract_cmd[255:128]$231 [30], \$abstract_cmd[255:128]$231 [2] };
  assign { \$abstract_cmd[255:128]$234 [78:76], \$abstract_cmd[255:128]$234 [68], \$abstract_cmd[255:128]$234 [63:52], \$abstract_cmd[255:128]$234 [126], \$abstract_cmd[255:128]$234 [24:20], \$abstract_cmd[255:128]$234 [16], \$abstract_cmd[255:128]$234 [14:12], \$abstract_cmd[255:128]$234 [30:29], \$abstract_cmd[255:128]$234 [4], \$abstract_cmd[255:128]$234 [2] } = \$208y  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:424.41-429.14|rtl/riscv-dbg/dm_mem.sv:424.11-460.14" *) 30'h04000002 : { \$abstract_cmd[255:128]$232 [78:76], \$abstract_cmd[255:128]$232 [68], \$abstract_cmd[255:128]$232 [63:52], \$abstract_cmd[255:128]$232 [126], \$abstract_cmd[255:128]$232 [24:20], \$abstract_cmd[255:128]$232 [16], \$abstract_cmd[255:128]$232 [14:12], \$abstract_cmd[255:128]$232 [30], 1'h1, \$abstract_cmd[255:128]$232 [30], \$abstract_cmd[255:128]$232 [2] };
  assign \$abstract_cmd[31:0]$217 [30] = ~ (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:424.41-429.14|rtl/riscv-dbg/dm_mem.sv:424.11-460.14" *) \$208y ;
  assign { \$abstract_cmd[255:128]$242 [78:76], \$abstract_cmd[255:128]$242 [68], \$abstract_cmd[255:128]$242 [63:52], \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [24:20], \$abstract_cmd[255:128]$242 [16], \$abstract_cmd[255:128]$242 [14:12], \$abstract_cmd[255:128]$242 [30:29], \$abstract_cmd[255:128]$242 [4], \$abstract_cmd[255:128]$242 [2] } = \$223y  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" *) { \$abstract_cmd[255:128]$234 [78:76], \$abstract_cmd[255:128]$234 [68], \$abstract_cmd[255:128]$234 [63:52], \$abstract_cmd[255:128]$234 [126], \$abstract_cmd[255:128]$234 [24:20], \$abstract_cmd[255:128]$234 [16], \$abstract_cmd[255:128]$234 [14:12], \$abstract_cmd[255:128]$234 [30:29], \$abstract_cmd[255:128]$234 [4], \$abstract_cmd[255:128]$234 [2] } : 30'h04000002;
  assign \$procmux$6662_Y  = \$207y  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" *) \$208y  : \$procmux$6519_Y ;
  assign { \$abstract_cmd[255:128]$245 [95:84], \$abstract_cmd[255:128]$245 [78:76], \$abstract_cmd[255:128]$245 [68], \$abstract_cmd[255:128]$245 [63:52], \$abstract_cmd[255:128]$245 [70], \$abstract_cmd[255:128]$245 [46:44], \$abstract_cmd[255:128]$245 [126], \$abstract_cmd[255:128]$245 [80], \$abstract_cmd[255:128]$245 [36], \$abstract_cmd[255:128]$245 [24:20], \$abstract_cmd[255:128]$245 [29], \$abstract_cmd[255:128]$245 [16], \$abstract_cmd[255:128]$245 [14:7], \$abstract_cmd[255:128]$245 [30], \$abstract_cmd[255:128]$245 [5:4], \$abstract_cmd[255:128]$245 [2] } = \$207y  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" *) { \$abstract_cmd[255:128]$218 [95:84], 2'h0, \$abstract_cmd[255:128]$218 [126], 3'h4, \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [126], 7'h00, \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [46:44], \$abstract_cmd[255:128]$218 [126], 1'h0, \$abstract_cmd[255:128]$218 [36], \$abstract_cmd[255:128]$218 [30], 2'h0, \$abstract_cmd[255:128]$218 [30], 1'h0, \$abstract_cmd[255:128]$218 [29], \$abstract_cmd[255:128]$218 [16], \$abstract_cmd[255:128]$218 [14:7], \$abstract_cmd[255:128]$218 [30], \$abstract_cmd[255:128]$218 [30], \$abstract_cmd[255:128]$218 [4], \$abstract_cmd[255:128]$218 [2] } : { 2'h0, \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [126], 3'h0, \$abstract_cmd[255:128]$242 [126], 3'h0, \$abstract_cmd[255:128]$242 [78:76], \$abstract_cmd[255:128]$242 [68], \$abstract_cmd[255:128]$242 [63:52], 2'h0, \$abstract_cmd[255:128]$242 [126], 1'h0, \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [126], 1'h1, \$abstract_cmd[255:128]$242 [24:20], \$abstract_cmd[255:128]$242 [29], \$abstract_cmd[255:128]$242 [16], \$abstract_cmd[255:128]$242 [14:12], 5'h00, \$abstract_cmd[255:128]$242 [30:29], \$abstract_cmd[255:128]$242 [4], \$abstract_cmd[255:128]$242 [2] };
  assign { \$abstract_cmd[31:0]$244 [30], \$abstract_cmd[31:0]$244 [20] } = \$207y  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" *) { \$abstract_cmd[31:0]$217 [30], 1'h1 } : { \$abstract_cmd[31:0]$241 [30], \$abstract_cmd[31:0]$241 [20] };
  assign { \$abstract_cmd[255:128]$215 [95:84], \$abstract_cmd[255:128]$215 [46:44], \$abstract_cmd[255:128]$215 [126], \$abstract_cmd[255:128]$215 [36] } = cmd_i[12] ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:399.13-405.16|rtl/riscv-dbg/dm_mem.sv:397.20-417.14" *) 17'h00001 : { cmd_i[11:0], cmd_i[22:20], 2'h2 };
  assign { \$abstract_cmd[255:128]$215 [16], \$abstract_cmd[255:128]$215 [14:7], \$abstract_cmd[255:128]$215 [30], \$abstract_cmd[255:128]$215 [2] } = cmd_i[12] ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:399.13-405.16|rtl/riscv-dbg/dm_mem.sv:397.20-417.14" *) { 1'h1, cmd_i[22:20], cmd_i[4:0], 1'h0, cmd_i[5] } : 11'h082;
  assign { \$abstract_cmd[255:128]$216 [95:84], \$abstract_cmd[255:128]$216 [46:44], \$abstract_cmd[255:128]$216 [126], \$abstract_cmd[255:128]$216 [36], \$abstract_cmd[255:128]$216 [16], \$abstract_cmd[255:128]$216 [14:7], \$abstract_cmd[255:128]$216 [30], \$abstract_cmd[255:128]$216 [2] } = \$213y  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:387.52-397.14|rtl/riscv-dbg/dm_mem.sv:386.20-417.14" *) { 12'h7b3, cmd_i[22:20], 13'h1082 } : { \$abstract_cmd[255:128]$215 [95:84], \$abstract_cmd[255:128]$215 [46:44], \$abstract_cmd[255:128]$215 [126], \$abstract_cmd[255:128]$215 [36], \$abstract_cmd[255:128]$215 [16], \$abstract_cmd[255:128]$215 [14:7], \$abstract_cmd[255:128]$215 [30], \$abstract_cmd[255:128]$215 [2] };
  assign { \$abstract_cmd[255:128]$218 [95:84], \$abstract_cmd[255:128]$218 [46:44], \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [36], \$abstract_cmd[255:128]$218 [29], \$abstract_cmd[255:128]$218 [16], \$abstract_cmd[255:128]$218 [14:7], \$abstract_cmd[255:128]$218 [30], \$abstract_cmd[255:128]$218 [4], \$abstract_cmd[255:128]$218 [2] } = \$208y  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:381.41-386.14|rtl/riscv-dbg/dm_mem.sv:381.11-417.14" *) 30'h00002002 : { \$abstract_cmd[255:128]$216 [95:84], \$abstract_cmd[255:128]$216 [46:44], \$abstract_cmd[255:128]$216 [126], \$abstract_cmd[255:128]$216 [36], 1'h1, \$abstract_cmd[255:128]$216 [16], \$abstract_cmd[255:128]$216 [14:7], \$abstract_cmd[255:128]$216 [30], \$abstract_cmd[255:128]$216 [30], \$abstract_cmd[255:128]$216 [2] };
  assign abstract_cmd[308] = \$133y  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" *) \$abstract_cmd[319:288]$249 [20] : 1'h1;
  assign { abstract_cmd[223:212], abstract_cmd[206:204], abstract_cmd[196], abstract_cmd[191:180], abstract_cmd[198], abstract_cmd[174:172], abstract_cmd[254], abstract_cmd[208], abstract_cmd[164], abstract_cmd[152:148], abstract_cmd[157], abstract_cmd[144], abstract_cmd[142:135], abstract_cmd[158], abstract_cmd[133:132], abstract_cmd[130] } = \$133y  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" *) { \$abstract_cmd[255:128]$245 [95:84], \$abstract_cmd[255:128]$245 [78:76], \$abstract_cmd[255:128]$245 [68], \$abstract_cmd[255:128]$245 [63:52], \$abstract_cmd[255:128]$245 [70], \$abstract_cmd[255:128]$245 [46:44], \$abstract_cmd[255:128]$245 [126], \$abstract_cmd[255:128]$245 [80], \$abstract_cmd[255:128]$245 [36], \$abstract_cmd[255:128]$245 [24:20], \$abstract_cmd[255:128]$245 [29], \$abstract_cmd[255:128]$245 [16], \$abstract_cmd[255:128]$245 [14:7], \$abstract_cmd[255:128]$245 [30], \$abstract_cmd[255:128]$245 [5:4], \$abstract_cmd[255:128]$245 [2] } : 54'h00004000080002;
  assign resuming_d = ndmreset_i ? (* src = "rtl/riscv-dbg/dm_mem.sv:343.21-347.8|rtl/riscv-dbg/dm_mem.sv:343.5-347.8" *) 1'h0 : \$auto$wreduce.cc:514:run$13531 [0];
  assign halted_d = ndmreset_i ? (* src = "rtl/riscv-dbg/dm_mem.sv:343.21-347.8|rtl/riscv-dbg/dm_mem.sv:343.5-347.8" *) 1'h0 : \$auto$wreduce.cc:514:run$13524 [0];
  assign { \$auto$wreduce.cc:514:run$13527 [9:8], \$auto$wreduce.cc:514:run$13527 [1:0] } = \$172y  ? (* src = "rtl/riscv-dbg/dm_mem.sv:334.15-334.94|rtl/riscv-dbg/dm_mem.sv:332.13-335.16" *) { \$180y [9:8], \$180y [1:0] } : 4'h0;
  assign { \$auto$wreduce.cc:514:run$13528 [26], \$auto$wreduce.cc:514:run$13528 [24] } = \$136y  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:303.17-303.87|rtl/riscv-dbg/dm_mem.sv:301.15-307.18" *) 2'h2 : 2'h1;
  assign { \$procmux$6820_Y [30], \$procmux$6820_Y [26:23] } = cmdbusy_o ? (* src = "rtl/riscv-dbg/dm_mem.sv:301.15-307.18|rtl/riscv-dbg/dm_mem.sv:298.13-308.16" *) { 1'h0, \$auto$wreduce.cc:514:run$13528 [26], 1'h1, \$auto$wreduce.cc:514:run$13528 [24], \$auto$wreduce.cc:514:run$13528 [24] } : 5'h11;
  function [63:0] \$procmux$6854 ;
    input [63:0] a;
    input [255:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dm_mem.sv:330.41-337.14|rtl/riscv-dbg/dm_mem.sv:289.9-339.16" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$6854  = b[63:0];
      4'b??1?:
        \$procmux$6854  = b[127:64];
      4'b?1??:
        \$procmux$6854  = b[191:128];
      4'b1???:
        \$procmux$6854  = b[255:192];
      default:
        \$procmux$6854  = a;
    endcase
  endfunction
  assign \$procmux$6854_Y  = \$procmux$6854 ({ 33'h000000000, \$procmux$6820_Y [30], 1'h0, \$procmux$6820_Y [30], 1'h0, \$procmux$6820_Y [26:23], 23'h00006f }, { data_i, \$158y , \$165y [63:52], 1'h0, \$165y [50], 1'h0, \$165y [50], 1'h0, \$165y [46:44], 1'h0, \$165y [42], 1'h0, \$165y [40], 1'h0, \$165y [38], \$165y [38], \$165y [36], 1'h0, \$165y [34:33], \$165y [33], \$165y [31:20], 1'h0, \$165y [18], 1'h0, \$165y [16], 1'h0, \$165y [14:4], 1'h0, \$165y [2:1], \$165y [1], 54'h00000000000000, \$auto$wreduce.cc:514:run$13527 [9:8], 6'h00, \$auto$wreduce.cc:514:run$13527 [1:0] }, { \$141y , \$155y , \$162y , \$169y  });
  assign \$data_bits[63:56]$119  = be_i[3] ? (* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *) wdata_i[31:24] : data_i[63:56];
  assign \$data_bits[55:48]$117  = be_i[2] ? (* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *) wdata_i[23:16] : data_i[55:48];
  assign \$data_bits[47:40]$115  = be_i[1] ? (* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *) wdata_i[15:8] : data_i[47:40];
  assign \$data_bits[39:32]$113  = be_i[0] ? (* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *) wdata_i[7:0] : data_i[39:32];
  assign \$data_bits[63:32]$120  = \$111y  ? (* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" *) { \$data_bits[63:56]$119 , \$data_bits[55:48]$117 , \$data_bits[47:40]$115 , \$data_bits[39:32]$113  } : data_i[63:32];
  assign \$data_bits[31:24]$108  = be_i[3] ? (* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *) wdata_i[31:24] : data_i[31:24];
  assign \$data_bits[23:16]$106  = be_i[2] ? (* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *) wdata_i[23:16] : data_i[23:16];
  assign \$data_bits[15:8]$104  = be_i[1] ? (* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *) wdata_i[15:8] : data_i[15:8];
  assign \$data_bits[7:0]$102  = be_i[0] ? (* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *) wdata_i[7:0] : data_i[7:0];
  assign \$data_bits[31:0]$109  = \$100y  ? (* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" *) { \$data_bits[31:24]$108 , \$data_bits[23:16]$106 , \$data_bits[15:8]$104 , \$data_bits[7:0]$102  } : data_i[31:0];
  assign \$data_bits$126  = \$141y  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" *) { \$data_bits[63:32]$120 , \$data_bits[31:0]$109  } : data_i;
  assign \$auto$wreduce.cc:514:run$13529 [0] = \$80y  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:257.25-262.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" *) \$94y [0] : \$auto$wreduce.cc:514:run$13532 [0];
  assign \$halted_aligned$124  = \$64y  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:250.23-253.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" *) \$69y  : 2'h0;
  assign \$auto$wreduce.cc:514:run$13524 [0] = \$80y  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:257.25-262.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" *) \$87y  : \$78y ;
  assign \$data_valid_o$192  = we_i & (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *) \$141y ;
  assign \$data_bits$190  = we_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *) \$data_bits$126  : data_i;
  assign \$auto$wreduce.cc:514:run$13530 [0] = we_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *) \$auto$wreduce.cc:514:run$13529 [0] : \$auto$wreduce.cc:514:run$13532 [0];
  assign \$halted_aligned$188  = we_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *) \$halted_aligned$124  : 2'h0;
  assign \$exception$185  = we_i & (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *) \$95y ;
  assign \$going$184  = we_i & (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *) \$79y ;
  assign data_valid_o = req_i & (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" *) \$data_valid_o$192 ;
  assign data_o = req_i ? (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" *) \$data_bits$190  : data_i;
  assign \$auto$wreduce.cc:514:run$13531 [0] = req_i ? (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" *) \$auto$wreduce.cc:514:run$13530 [0] : \$auto$wreduce.cc:514:run$13532 [0];
  assign halted_aligned = req_i ? (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" *) \$halted_aligned$188  : 2'h0;
  assign exception = req_i & (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" *) \$exception$185 ;
  assign going = req_i & (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" *) \$going$184 ;
  assign \$auto$wreduce.cc:514:run$13532 [0] = clear_resumeack_i ? (* src = "rtl/riscv-dbg/dm_mem.sv:243.7-243.42|rtl/riscv-dbg/dm_mem.sv:242.5-244.8" *) \$62y  : resuming_o;
  assign state_d = ndmreset_i ? (* src = "rtl/riscv-dbg/dm_mem.sv:206.21-211.8|rtl/riscv-dbg/dm_mem.sv:206.5-211.8" *) 2'h0 : \$procmux$7296_Y ;
  assign go = ndmreset_i ? (* src = "rtl/riscv-dbg/dm_mem.sv:206.21-211.8|rtl/riscv-dbg/dm_mem.sv:206.5-211.8" *) 1'h0 : \$go$40 ;
  assign resume = ndmreset_i ? (* src = "rtl/riscv-dbg/dm_mem.sv:206.21-211.8|rtl/riscv-dbg/dm_mem.sv:206.5-211.8" *) 1'h0 : \$procmux$7279_CMP ;
  assign cmderror_o = exception ? (* src = "rtl/riscv-dbg/dm_mem.sv:201.20-204.8|rtl/riscv-dbg/dm_mem.sv:201.5-204.8" *) 3'h3 : { \$cmderror_o$47 [2:1], 1'h0 };
  assign cmderror_valid_o = \$cmderror_valid_o$46  | (* src = "rtl/riscv-dbg/dm_mem.sv:201.20-204.8|rtl/riscv-dbg/dm_mem.sv:201.5-204.8" *) exception;
  assign \$cmderror_o$47 [2:1] = \$45y  ? (* src = "rtl/riscv-dbg/dm_mem.sv:196.45-199.8|rtl/riscv-dbg/dm_mem.sv:196.5-199.8" *) 2'h1 : { \$cmderror_o$43 [2], 1'h0 };
  assign \$cmderror_valid_o$46  = \$cmderror_o$43 [2] | (* src = "rtl/riscv-dbg/dm_mem.sv:196.45-199.8|rtl/riscv-dbg/dm_mem.sv:196.5-199.8" *) \$45y ;
  assign \$procmux$7274_CMP  = state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:182.21-189.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" *) 2'h3;
  assign \$procmux$7279_CMP  = state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:174.15-180.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" *) 2'h2;
  assign \$go$40  = state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:164.11-172.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" *) 1'h1;
  assign \$procmux$7294_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" *) state_q;
  function [1:0] \$procmux$7296 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dm_mem.sv:182.21-189.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$7296  = b[1:0];
      2'b1?:
        \$procmux$7296  = b[3:2];
      default:
        \$procmux$7296  = a;
    endcase
  endfunction
  assign \$procmux$7296_Y  = \$procmux$7296 (\$procmux$7308_Y , 4'hc, { \$go$40 , \$auto$opt_reduce.cc:137:opt_pmux$14969  });
  assign \$procmux$7308_Y  = \$28y  ? (* src = "rtl/riscv-dbg/dm_mem.sv:160.11-160.28|rtl/riscv-dbg/dm_mem.sv:158.9-161.12" *) 2'h2 : 2'h1;
  assign \$cmderror_o$11 [2] = \$6y  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:150.11-150.24|rtl/riscv-dbg/dm_mem.sv:148.9-155.12" *) 1'h0 : cmd_valid_i;
  assign \$cmderror_o$43 [2] = \$procmux$7294_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" *) \$cmderror_o$11 [2];
  (* src = "rtl/riscv-dbg/dm_mem.sv:498.15" *)
  \debug_rom$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_mem.gen_rom_snd_scratch.i_debug_rom  \gen_rom_snd_scratch.i_debug_rom  (
    .addr_i({ 32'h00000000, addr_i }),
    .clk_i(clk_i),
    .rdata_o(rom_rdata),
    .req_i(req_i),
    .rst_ni(rst_ni)
  );
  assign { \$165y [51], \$165y [49:47], \$165y [43], \$165y [41], \$165y [39], \$165y [37], \$165y [35], \$165y [32], \$165y [19], \$165y [17], \$165y [15], \$165y [3], \$165y [0] } = { 2'h0, \$165y [50], 4'h0, \$165y [38], 1'h0, \$165y [33], 4'h0, \$165y [1] };
  assign \$170y [9:0] = { addr_i[9:3], 3'h0 };
  assign { \$178y [14:8], \$178y [6:0] } = { \$178y [15], \$178y [15], \$178y [15], \$178y [15], \$178y [15], \$178y [15], \$178y [15], \$178y [7], \$178y [7], \$178y [7], \$178y [7], \$178y [7], \$178y [7], \$178y [7] };
  assign { \$180y [57:10], \$180y [7:2] } = 54'h00000000000000;
  assign { \$abstract_cmd[255:128]$215 [125:96], \$abstract_cmd[255:128]$215 [83:47], \$abstract_cmd[255:128]$215 [43:37], \$abstract_cmd[255:128]$215 [35:31], \$abstract_cmd[255:128]$215 [29:17], \$abstract_cmd[255:128]$215 [15], \$abstract_cmd[255:128]$215 [6:3], \$abstract_cmd[255:128]$215 [1:0] } = { \$abstract_cmd[255:128]$215 [126], \$abstract_cmd[255:128]$215 [126], \$abstract_cmd[255:128]$215 [126], 1'h0, \$abstract_cmd[255:128]$215 [126], \$abstract_cmd[255:128]$215 [126], 2'h0, \$abstract_cmd[255:128]$215 [126], 7'h00, \$abstract_cmd[255:128]$215 [126], 2'h0, \$abstract_cmd[255:128]$215 [126], 3'h0, \$abstract_cmd[255:128]$215 [126], \$abstract_cmd[255:128]$215 [126], 6'h26, \$abstract_cmd[255:128]$215 [126], 5'h00, \$abstract_cmd[255:128]$215 [126], 5'h00, \$abstract_cmd[255:128]$215 [126], \$abstract_cmd[255:128]$215 [126], 7'h4c, \$abstract_cmd[255:128]$215 [126], \$abstract_cmd[255:128]$215 [126], \$abstract_cmd[255:128]$215 [126], 8'h00, \$abstract_cmd[255:128]$215 [126], 1'h0, \$abstract_cmd[255:128]$215 [126], 2'h0, \$abstract_cmd[255:128]$215 [126], 14'h006e, \$abstract_cmd[255:128]$215 [30], \$abstract_cmd[255:128]$215 [30], 2'h0, \$abstract_cmd[255:128]$215 [30], 5'h04, \$abstract_cmd[255:128]$215 [30], \$abstract_cmd[255:128]$215 [30], \$abstract_cmd[255:128]$215 [30], 3'h3 };
  assign { \$abstract_cmd[255:128]$216 [125:96], \$abstract_cmd[255:128]$216 [83:47], \$abstract_cmd[255:128]$216 [43:37], \$abstract_cmd[255:128]$216 [35:31], \$abstract_cmd[255:128]$216 [29:17], \$abstract_cmd[255:128]$216 [15], \$abstract_cmd[255:128]$216 [6:3], \$abstract_cmd[255:128]$216 [1:0] } = { \$abstract_cmd[255:128]$216 [126], \$abstract_cmd[255:128]$216 [126], \$abstract_cmd[255:128]$216 [126], 1'h0, \$abstract_cmd[255:128]$216 [126], \$abstract_cmd[255:128]$216 [126], 2'h0, \$abstract_cmd[255:128]$216 [126], 7'h00, \$abstract_cmd[255:128]$216 [126], 2'h0, \$abstract_cmd[255:128]$216 [126], 3'h0, \$abstract_cmd[255:128]$216 [126], \$abstract_cmd[255:128]$216 [126], 6'h26, \$abstract_cmd[255:128]$216 [126], 5'h00, \$abstract_cmd[255:128]$216 [126], 5'h00, \$abstract_cmd[255:128]$216 [126], \$abstract_cmd[255:128]$216 [126], 7'h4c, \$abstract_cmd[255:128]$216 [126], \$abstract_cmd[255:128]$216 [126], \$abstract_cmd[255:128]$216 [126], 8'h00, \$abstract_cmd[255:128]$216 [126], 1'h0, \$abstract_cmd[255:128]$216 [126], 2'h0, \$abstract_cmd[255:128]$216 [126], 14'h006e, \$abstract_cmd[255:128]$216 [30], \$abstract_cmd[255:128]$216 [30], 2'h0, \$abstract_cmd[255:128]$216 [30], 5'h04, \$abstract_cmd[255:128]$216 [30], \$abstract_cmd[255:128]$216 [30], \$abstract_cmd[255:128]$216 [30], 3'h3 };
  assign { \$abstract_cmd[255:128]$218 [127], \$abstract_cmd[255:128]$218 [125:96], \$abstract_cmd[255:128]$218 [83:47], \$abstract_cmd[255:128]$218 [43:37], \$abstract_cmd[255:128]$218 [35:31], \$abstract_cmd[255:128]$218 [28:17], \$abstract_cmd[255:128]$218 [15], \$abstract_cmd[255:128]$218 [6:5], \$abstract_cmd[255:128]$218 [3], \$abstract_cmd[255:128]$218 [1:0] } = { 1'h0, \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [126], 1'h0, \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [126], 2'h0, \$abstract_cmd[255:128]$218 [126], 7'h00, \$abstract_cmd[255:128]$218 [126], 2'h0, \$abstract_cmd[255:128]$218 [126], 3'h0, \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [126], 6'h26, \$abstract_cmd[255:128]$218 [126], 5'h00, \$abstract_cmd[255:128]$218 [126], 5'h00, \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [126], 7'h4c, \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [126], 8'h00, \$abstract_cmd[255:128]$218 [126], 1'h0, \$abstract_cmd[255:128]$218 [126], 2'h0, \$abstract_cmd[255:128]$218 [126], 10'h006, \$abstract_cmd[255:128]$218 [29], \$abstract_cmd[255:128]$218 [29], 1'h0, \$abstract_cmd[255:128]$218 [30], \$abstract_cmd[255:128]$218 [30], 2'h0, \$abstract_cmd[255:128]$218 [30], 2'h0, \$abstract_cmd[255:128]$218 [29], 2'h0, \$abstract_cmd[255:128]$218 [30], \$abstract_cmd[255:128]$218 [30], 3'h3 };
  assign { \$abstract_cmd[255:128]$231 [125:79], \$abstract_cmd[255:128]$231 [75:69], \$abstract_cmd[255:128]$231 [67:64], \$abstract_cmd[255:128]$231 [51:31], \$abstract_cmd[255:128]$231 [29:25], \$abstract_cmd[255:128]$231 [19:17], \$abstract_cmd[255:128]$231 [15], \$abstract_cmd[255:128]$231 [11:3], \$abstract_cmd[255:128]$231 [1:0] } = { \$abstract_cmd[255:128]$231 [126], \$abstract_cmd[255:128]$231 [126], \$abstract_cmd[255:128]$231 [126], 1'h0, \$abstract_cmd[255:128]$231 [126], \$abstract_cmd[255:128]$231 [126], 2'h0, \$abstract_cmd[255:128]$231 [126], 7'h00, \$abstract_cmd[255:128]$231 [126], 2'h0, \$abstract_cmd[255:128]$231 [126], 3'h0, \$abstract_cmd[255:128]$231 [126], \$abstract_cmd[255:128]$231 [126], 7'h4c, \$abstract_cmd[255:128]$231 [126], \$abstract_cmd[255:128]$231 [126], \$abstract_cmd[255:128]$231 [126], 3'h0, \$abstract_cmd[255:128]$231 [126], 4'h0, \$abstract_cmd[255:128]$231 [126], 1'h0, \$abstract_cmd[255:128]$231 [126], 7'h00, \$abstract_cmd[255:128]$231 [126], 10'h0c0, \$abstract_cmd[255:128]$231 [126], 2'h0, \$abstract_cmd[255:128]$231 [126], 3'h0, \$abstract_cmd[255:128]$231 [126], \$abstract_cmd[255:128]$231 [126], 10'h26e, \$abstract_cmd[255:128]$231 [30], 9'h080, \$abstract_cmd[255:128]$231 [30], 1'h1, \$abstract_cmd[255:128]$231 [30], 3'h3 };
  assign { \$abstract_cmd[255:128]$232 [127], \$abstract_cmd[255:128]$232 [125:79], \$abstract_cmd[255:128]$232 [75:69], \$abstract_cmd[255:128]$232 [67:64], \$abstract_cmd[255:128]$232 [51:31], \$abstract_cmd[255:128]$232 [29:25], \$abstract_cmd[255:128]$232 [19:17], \$abstract_cmd[255:128]$232 [15], \$abstract_cmd[255:128]$232 [11:3], \$abstract_cmd[255:128]$232 [1:0] } = { 1'h0, \$abstract_cmd[255:128]$232 [126], \$abstract_cmd[255:128]$232 [126], \$abstract_cmd[255:128]$232 [126], 1'h0, \$abstract_cmd[255:128]$232 [126], \$abstract_cmd[255:128]$232 [126], 2'h0, \$abstract_cmd[255:128]$232 [126], 7'h00, \$abstract_cmd[255:128]$232 [126], 2'h0, \$abstract_cmd[255:128]$232 [126], 3'h0, \$abstract_cmd[255:128]$232 [126], \$abstract_cmd[255:128]$232 [126], 7'h4c, \$abstract_cmd[255:128]$232 [126], \$abstract_cmd[255:128]$232 [126], \$abstract_cmd[255:128]$232 [126], 3'h0, \$abstract_cmd[255:128]$232 [126], 4'h0, \$abstract_cmd[255:128]$232 [126], 1'h0, \$abstract_cmd[255:128]$232 [126], 7'h00, \$abstract_cmd[255:128]$232 [126], 10'h0c0, \$abstract_cmd[255:128]$232 [126], 2'h0, \$abstract_cmd[255:128]$232 [126], 3'h0, \$abstract_cmd[255:128]$232 [126], \$abstract_cmd[255:128]$232 [126], 10'h26e, \$abstract_cmd[255:128]$232 [30], 9'h080, \$abstract_cmd[255:128]$232 [30], 1'h1, \$abstract_cmd[255:128]$232 [30], 3'h3 };
  assign { \$abstract_cmd[255:128]$234 [127], \$abstract_cmd[255:128]$234 [125:79], \$abstract_cmd[255:128]$234 [75:69], \$abstract_cmd[255:128]$234 [67:64], \$abstract_cmd[255:128]$234 [51:31], \$abstract_cmd[255:128]$234 [28:25], \$abstract_cmd[255:128]$234 [19:17], \$abstract_cmd[255:128]$234 [15], \$abstract_cmd[255:128]$234 [11:5], \$abstract_cmd[255:128]$234 [3], \$abstract_cmd[255:128]$234 [1:0] } = { 1'h0, \$abstract_cmd[255:128]$234 [126], \$abstract_cmd[255:128]$234 [126], \$abstract_cmd[255:128]$234 [126], 1'h0, \$abstract_cmd[255:128]$234 [126], \$abstract_cmd[255:128]$234 [126], 2'h0, \$abstract_cmd[255:128]$234 [126], 7'h00, \$abstract_cmd[255:128]$234 [126], 2'h0, \$abstract_cmd[255:128]$234 [126], 3'h0, \$abstract_cmd[255:128]$234 [126], \$abstract_cmd[255:128]$234 [126], 7'h4c, \$abstract_cmd[255:128]$234 [126], \$abstract_cmd[255:128]$234 [126], \$abstract_cmd[255:128]$234 [126], 3'h0, \$abstract_cmd[255:128]$234 [126], 4'h0, \$abstract_cmd[255:128]$234 [126], 1'h0, \$abstract_cmd[255:128]$234 [126], 7'h00, \$abstract_cmd[255:128]$234 [126], 10'h0c0, \$abstract_cmd[255:128]$234 [126], 2'h0, \$abstract_cmd[255:128]$234 [126], 3'h0, \$abstract_cmd[255:128]$234 [126], \$abstract_cmd[255:128]$234 [126], 6'h26, \$abstract_cmd[255:128]$234 [29], \$abstract_cmd[255:128]$234 [29], 1'h0, \$abstract_cmd[255:128]$234 [30], 1'h0, \$abstract_cmd[255:128]$234 [29], 7'h00, \$abstract_cmd[255:128]$234 [30:29], 3'h3 };
  assign { \$abstract_cmd[255:128]$242 [127], \$abstract_cmd[255:128]$242 [125:79], \$abstract_cmd[255:128]$242 [75:69], \$abstract_cmd[255:128]$242 [67:64], \$abstract_cmd[255:128]$242 [51:31], \$abstract_cmd[255:128]$242 [28:25], \$abstract_cmd[255:128]$242 [19:17], \$abstract_cmd[255:128]$242 [15], \$abstract_cmd[255:128]$242 [11:5], \$abstract_cmd[255:128]$242 [3], \$abstract_cmd[255:128]$242 [1:0] } = { 1'h0, \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [126], 1'h0, \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [126], 2'h0, \$abstract_cmd[255:128]$242 [126], 7'h00, \$abstract_cmd[255:128]$242 [126], 2'h0, \$abstract_cmd[255:128]$242 [126], 3'h0, \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [126], 7'h4c, \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [126], 3'h0, \$abstract_cmd[255:128]$242 [126], 4'h0, \$abstract_cmd[255:128]$242 [126], 1'h0, \$abstract_cmd[255:128]$242 [126], 7'h00, \$abstract_cmd[255:128]$242 [126], 10'h0c0, \$abstract_cmd[255:128]$242 [126], 2'h0, \$abstract_cmd[255:128]$242 [126], 3'h0, \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [126], 6'h26, \$abstract_cmd[255:128]$242 [29], \$abstract_cmd[255:128]$242 [29], 1'h0, \$abstract_cmd[255:128]$242 [30], 1'h0, \$abstract_cmd[255:128]$242 [29], 7'h00, \$abstract_cmd[255:128]$242 [30:29], 3'h3 };
  assign { \$abstract_cmd[255:128]$245 [127], \$abstract_cmd[255:128]$245 [125:96], \$abstract_cmd[255:128]$245 [83:81], \$abstract_cmd[255:128]$245 [79], \$abstract_cmd[255:128]$245 [75:71], \$abstract_cmd[255:128]$245 [69], \$abstract_cmd[255:128]$245 [67:64], \$abstract_cmd[255:128]$245 [51:47], \$abstract_cmd[255:128]$245 [43:37], \$abstract_cmd[255:128]$245 [35:31], \$abstract_cmd[255:128]$245 [28:25], \$abstract_cmd[255:128]$245 [19:17], \$abstract_cmd[255:128]$245 [15], \$abstract_cmd[255:128]$245 [6], \$abstract_cmd[255:128]$245 [3], \$abstract_cmd[255:128]$245 [1:0] } = { 1'h0, \$abstract_cmd[255:128]$245 [126], \$abstract_cmd[255:128]$245 [126], \$abstract_cmd[255:128]$245 [126], 1'h0, \$abstract_cmd[255:128]$245 [126], \$abstract_cmd[255:128]$245 [126], 2'h0, \$abstract_cmd[255:128]$245 [126], 7'h00, \$abstract_cmd[255:128]$245 [126], 2'h0, \$abstract_cmd[255:128]$245 [126], 3'h0, \$abstract_cmd[255:128]$245 [126], \$abstract_cmd[255:128]$245 [126], 6'h26, \$abstract_cmd[255:128]$245 [126], 7'h00, \$abstract_cmd[255:128]$245 [126], 5'h06, \$abstract_cmd[255:128]$245 [70], 1'h0, \$abstract_cmd[255:128]$245 [70], 2'h0, \$abstract_cmd[255:128]$245 [126], 3'h0, \$abstract_cmd[255:128]$245 [80], \$abstract_cmd[255:128]$245 [80], 5'h06, \$abstract_cmd[255:128]$245 [29], \$abstract_cmd[255:128]$245 [29], 1'h0, \$abstract_cmd[255:128]$245 [30], 1'h0, \$abstract_cmd[255:128]$245 [29], 2'h0, \$abstract_cmd[255:128]$245 [30], 3'h3 };
  assign { \$abstract_cmd[319:288]$249 [31:21], \$abstract_cmd[319:288]$249 [19:0] } = { 24'h000000, \$abstract_cmd[319:288]$249 [20], \$abstract_cmd[319:288]$249 [20], 5'h13 };
  assign { \$abstract_cmd[31:0]$217 [31], \$abstract_cmd[31:0]$217 [29:0] } = { 1'h0, \$abstract_cmd[31:0]$217 [30], \$abstract_cmd[31:0]$217 [30], \$abstract_cmd[31:0]$217 [30], 1'h0, \$abstract_cmd[31:0]$217 [30], \$abstract_cmd[31:0]$217 [30], 2'h0, \$abstract_cmd[31:0]$217 [30], 2'h2, \$abstract_cmd[31:0]$217 [30], 1'h0, \$abstract_cmd[31:0]$217 [30], 3'h0, \$abstract_cmd[31:0]$217 [30], 12'h073 };
  assign { \$abstract_cmd[31:0]$241 [31], \$abstract_cmd[31:0]$241 [29:21], \$abstract_cmd[31:0]$241 [19:0] } = { 1'h0, \$abstract_cmd[31:0]$241 [30], \$abstract_cmd[31:0]$241 [30], \$abstract_cmd[31:0]$241 [30], 1'h0, \$abstract_cmd[31:0]$241 [30], \$abstract_cmd[31:0]$241 [30], 2'h0, \$abstract_cmd[31:0]$241 [30], 1'h0, \$abstract_cmd[31:0]$241 [30], 1'h0, \$abstract_cmd[31:0]$241 [30], 3'h0, \$abstract_cmd[31:0]$241 [30], 5'h00, \$abstract_cmd[31:0]$241 [20], \$abstract_cmd[31:0]$241 [20], \$abstract_cmd[31:0]$241 [20], 2'h0, \$abstract_cmd[31:0]$241 [20], \$abstract_cmd[31:0]$241 [20] };
  assign { \$abstract_cmd[31:0]$244 [31], \$abstract_cmd[31:0]$244 [29:21], \$abstract_cmd[31:0]$244 [19:0] } = { 1'h0, \$abstract_cmd[31:0]$244 [30], \$abstract_cmd[31:0]$244 [30], \$abstract_cmd[31:0]$244 [30], 1'h0, \$abstract_cmd[31:0]$244 [30], \$abstract_cmd[31:0]$244 [30], 2'h0, \$abstract_cmd[31:0]$244 [30], 1'h0, \$abstract_cmd[31:0]$244 [30], 1'h0, \$abstract_cmd[31:0]$244 [30], 3'h0, \$abstract_cmd[31:0]$244 [30], 5'h00, \$abstract_cmd[31:0]$244 [20], \$abstract_cmd[31:0]$244 [20], \$abstract_cmd[31:0]$244 [20], 2'h0, \$abstract_cmd[31:0]$244 [20], \$abstract_cmd[31:0]$244 [20] };
  assign \$auto$wreduce.cc:514:run$13524 [1] = 1'hx;
  assign { \$auto$wreduce.cc:514:run$13527 [63:10], \$auto$wreduce.cc:514:run$13527 [7:2] } = 60'h000000000000000;
  assign { \$auto$wreduce.cc:514:run$13528 [63:27], \$auto$wreduce.cc:514:run$13528 [25], \$auto$wreduce.cc:514:run$13528 [23:0] } = { 38'h0000000001, \$auto$wreduce.cc:514:run$13528 [24], 23'h00006f };
  assign \$auto$wreduce.cc:514:run$13529 [1] = 1'hx;
  assign \$auto$wreduce.cc:514:run$13530 [1] = 1'hx;
  assign \$auto$wreduce.cc:514:run$13531 [1] = 1'hx;
  assign \$auto$wreduce.cc:514:run$13532 [1] = 1'hx;
  assign \$cmderror_o$11 [1:0] = 2'h0;
  assign \$cmderror_o$43 [1:0] = 2'h0;
  assign \$cmderror_o$47 [0] = 1'h0;
  assign { \$procmux$6820_Y [63:31], \$procmux$6820_Y [29:27], \$procmux$6820_Y [22:0] } = { 34'h000000000, \$procmux$6820_Y [30], 24'h00006f };
  assign { abstract_cmd[307:255], abstract_cmd[253:224], abstract_cmd[211:209], abstract_cmd[207], abstract_cmd[203:199], abstract_cmd[197], abstract_cmd[195:192], abstract_cmd[179:175], abstract_cmd[171:165], abstract_cmd[163:159], abstract_cmd[156:153], abstract_cmd[147:145], abstract_cmd[143], abstract_cmd[134], abstract_cmd[131], abstract_cmd[129:31], abstract_cmd[29:21], abstract_cmd[19:0] } = { 13'h0000, abstract_cmd[308], abstract_cmd[308], 38'h26f6604ae6, abstract_cmd[254], abstract_cmd[254], abstract_cmd[254], 1'h0, abstract_cmd[254], abstract_cmd[254], 2'h0, abstract_cmd[254], 7'h00, abstract_cmd[254], 2'h0, abstract_cmd[254], 3'h0, abstract_cmd[254], abstract_cmd[254], 6'h26, abstract_cmd[254], 7'h00, abstract_cmd[254], 5'h06, abstract_cmd[198], 1'h0, abstract_cmd[198], 2'h0, abstract_cmd[254], 3'h0, abstract_cmd[208], abstract_cmd[208], 5'h06, abstract_cmd[157], abstract_cmd[157], 1'h0, abstract_cmd[158], 1'h0, abstract_cmd[157], 2'h0, abstract_cmd[158], 100'h6018a2a26018aaa2600000a2e, abstract_cmd[30], abstract_cmd[30], abstract_cmd[30], 1'h0, abstract_cmd[30], abstract_cmd[30], 2'h0, abstract_cmd[30], 1'h0, abstract_cmd[30], 1'h0, abstract_cmd[30], 3'h0, abstract_cmd[30], 5'h00, abstract_cmd[20], abstract_cmd[20], abstract_cmd[20], 2'h0, abstract_cmd[20], abstract_cmd[20] };
  assign debug_req_o = haltreq_i;
  assign { \$110y [30:10], \$110y [4:0] } = { \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], addr_i[6:2] };
  assign \$158y  = \$auto$bmuxmap.cc:84:execute$15455 ;
  assign { \$165y [63:52], \$165y [50], \$165y [46:44], \$165y [42], \$165y [40], \$165y [38], \$165y [36], \$165y [34:33], \$165y [31:20], \$165y [18], \$165y [16], \$165y [14:4], \$165y [2:1] } = \$auto$bmuxmap.cc:84:execute$15465 ;
endmodule

(* src = "rtl/riscv-dbg/dm_obi_top.sv:63.8" *)
module \dm_obi_top$croc_chip.i_croc_soc.i_croc.i_dm_top (clk_i, rst_ni, testmode_i, debug_req_o, unavailable_i, hartinfo_i, slave_req_i, slave_gnt_o, slave_we_i, slave_addr_i, slave_be_i, slave_wdata_i, slave_aid_i, slave_rvalid_o, slave_rdata_o, slave_rid_o, master_req_o, master_addr_o, master_we_o, master_wdata_o, master_be_o
, master_gnt_i, master_rvalid_i, master_err_i, master_other_err_i, master_rdata_i, dmi_rst_ni, dmi_req_valid_i, dmi_req_ready_o, dmi_req_i, dmi_resp_valid_o, dmi_resp_ready_i, dmi_resp_o, ndmreset_o, dmactive_o);
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:72.33" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:78.33" *)
  output debug_req_o;
  wire debug_req_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:77.33" *)
  output dmactive_o;
  wire dmactive_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:113.33" *)
  input [40:0] dmi_req_i;
  wire [40:0] dmi_req_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:112.33" *)
  output dmi_req_ready_o;
  wire dmi_req_ready_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:111.33" *)
  input dmi_req_valid_i;
  wire dmi_req_valid_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:117.33" *)
  output [33:0] dmi_resp_o;
  wire [33:0] dmi_resp_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:116.33" *)
  input dmi_resp_ready_i;
  wire dmi_resp_ready_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:115.33" *)
  output dmi_resp_valid_o;
  wire dmi_resp_valid_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:110.33" *)
  input dmi_rst_ni;
  wire dmi_rst_ni;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:81.40" *)
  input [31:0] hartinfo_i;
  wire [31:0] hartinfo_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:99.33" *)
  output [31:0] master_addr_o;
  wire [31:0] master_addr_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:102.33" *)
  output [3:0] master_be_o;
  wire [3:0] master_be_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:105.33" *)
  input master_err_i;
  wire master_err_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:103.33" *)
  input master_gnt_i;
  wire master_gnt_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:106.33" *)
  input master_other_err_i;
  wire master_other_err_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:107.33" *)
  input [31:0] master_rdata_i;
  wire [31:0] master_rdata_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:98.33" *)
  output master_req_o;
  wire master_req_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:104.33" *)
  input master_rvalid_i;
  wire master_rvalid_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:101.33" *)
  output [31:0] master_wdata_o;
  wire [31:0] master_wdata_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:100.33" *)
  output master_we_o;
  wire master_we_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:76.33" *)
  output ndmreset_o;
  wire ndmreset_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:74.33" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:87.33" *)
  input [31:0] slave_addr_i;
  wire [31:0] slave_addr_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:91.33" *)
  input [2:0] slave_aid_i;
  wire [2:0] slave_aid_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:88.33" *)
  input [3:0] slave_be_i;
  wire [3:0] slave_be_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:85.33" *)
  output slave_gnt_o;
  wire slave_gnt_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:94.33" *)
  output [31:0] slave_rdata_o;
  wire [31:0] slave_rdata_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:83.33" *)
  input slave_req_i;
  wire slave_req_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:96.33" *)
  output [2:0] slave_rid_o;
  reg [2:0] slave_rid_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:93.33" *)
  output slave_rvalid_o;
  reg slave_rvalid_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:89.33" *)
  input [31:0] slave_wdata_i;
  wire [31:0] slave_wdata_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:86.33" *)
  input slave_we_i;
  wire slave_we_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:75.33" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:80.33" *)
  input unavailable_i;
  wire unavailable_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:175.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) slave_rid_o <= 3'h0;
    else if (slave_req_i) slave_rid_o <= slave_aid_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:175.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) slave_rvalid_o <= 1'h0;
    else slave_rvalid_o <= slave_req_i;
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:130.5" *)
  \dm_top$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top  i_dm_top (
    .clk_i(clk_i),
    .debug_req_o(debug_req_o),
    .dmactive_o(dmactive_o),
    .dmi_req_i(dmi_req_i),
    .dmi_req_ready_o(dmi_req_ready_o),
    .dmi_req_valid_i(dmi_req_valid_i),
    .dmi_resp_o(dmi_resp_o),
    .dmi_resp_ready_i(dmi_resp_ready_i),
    .dmi_resp_valid_o(dmi_resp_valid_o),
    .dmi_rst_ni(dmi_rst_ni),
    .hartinfo_i(hartinfo_i),
    .master_add_o(master_addr_o),
    .master_be_o(master_be_o),
    .master_gnt_i(master_gnt_i),
    .master_r_err_i(master_err_i),
    .master_r_other_err_i(master_other_err_i),
    .master_r_rdata_i(master_rdata_i),
    .master_r_valid_i(master_rvalid_i),
    .master_req_o(master_req_o),
    .master_wdata_o(master_wdata_o),
    .master_we_o(master_we_o),
    .ndmreset_ack_i(ndmreset_o),
    .ndmreset_o(ndmreset_o),
    .next_dm_addr_i(32'd0),
    .rst_ni(rst_ni),
    .slave_addr_i(slave_addr_i),
    .slave_be_i(slave_be_i),
    .slave_rdata_o(slave_rdata_o),
    .slave_req_i(slave_req_i),
    .slave_wdata_i(slave_wdata_i),
    .slave_we_i(slave_we_i),
    .testmode_i(testmode_i),
    .unavailable_i(unavailable_i)
  );
  assign slave_gnt_o = 1'h1;
endmodule

(* src = "rtl/riscv-dbg/dm_sba.sv:18.8" *)
module \dm_sba$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_sba (clk_i, rst_ni, master_req_o, master_we_o, master_wdata_o, master_be_o, master_gnt_i, master_add_o, master_r_valid_i, master_r_err_i, master_r_other_err_i, master_r_rdata_i, sbaddress_o, sbaddress_i, sbdata_o, sbdata_i, dmactive_i, sbaddress_write_valid_i, sbreadonaddr_i, sbautoincrement_i, sbaccess_i
, sbreadondata_i, sbdata_read_valid_i, sbdata_write_valid_i, sbdata_valid_o, sbbusy_o, sberror_valid_o, sberror_o);
  wire [3:0] \$10y ;
  wire [32:0] \$11y ;
  wire [3:0] \$12y ;
  wire [3:0] \$13y ;
  wire [31:0] \$17y ;
  wire \$21y ;
  wire \$24y ;
  wire \$52y ;
  wire \$54y ;
  wire [31:0] \$59y ;
  wire [31:0] \$60y ;
  wire \$61y ;
  wire \$63y ;
  wire [3:0] \$6y ;
  (* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12" *)
  wire \$addr_incr_en$34 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14496 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14498 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14500 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14502 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14504 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13389 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13393 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13433 ;
  wire [2:0] \$procmux$7393_Y ;
  wire \$procmux$7396_Y ;
  wire \$procmux$7399_Y ;
  wire [2:0] \$procmux$7402_Y ;
  wire \$procmux$7413_CMP ;
  wire [2:0] \$procmux$7427_Y ;
  wire \$procmux$7436_Y ;
  wire [2:0] \$procmux$7444_Y ;
  wire \$procmux$7450_Y ;
  wire \$procmux$7476_CMP ;
  wire \$procmux$7550_CMP ;
  wire [2:0] \$procmux$7559_Y ;
  wire \$procmux$7568_CMP ;
  wire [2:0] \$procmux$7575_Y ;
  wire [2:0] \$procmux$7585_Y ;
  wire [2:0] \$procmux$7600_Y ;
  wire \$procmux$7606_Y ;
  wire \$procmux$7641_CMP ;
  wire \$procmux$7644_CMP ;
  wire \$procmux$7646_CMP ;
  wire \$procmux$7647_CMP ;
  (* src = "rtl/riscv-dbg/dm_sba.sv:95.24" *)
  wire [31:0] addr_incr;
  (* src = "rtl/riscv-dbg/dm_sba.sv:94.9" *)
  wire addr_incr_en;
  (* src = "rtl/riscv-dbg/dm_sba.sv:200.26" *)
  wire [1:0] be_idx_masked;
  (* src = "rtl/riscv-dbg/dm_sba.sv:66.34" *)
  wire [3:0] be_mask;
  (* src = "rtl/riscv-dbg/dm_sba.sv:22.34" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:24.34" *)
  input dmactive_i;
  wire dmactive_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:27.34" *)
  output [31:0] master_add_o;
  wire [31:0] master_add_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:30.34" *)
  output [3:0] master_be_o;
  wire [3:0] master_be_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:31.34" *)
  input master_gnt_i;
  wire master_gnt_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:33.34" *)
  input master_r_err_i;
  wire master_r_err_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:34.34" *)
  input master_r_other_err_i;
  wire master_r_other_err_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:35.34" *)
  input [31:0] master_r_rdata_i;
  wire [31:0] master_r_rdata_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:32.34" *)
  input master_r_valid_i;
  wire master_r_valid_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:26.34" *)
  output master_req_o;
  wire master_req_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:29.34" *)
  output [31:0] master_wdata_o;
  wire [31:0] master_wdata_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:28.34" *)
  output master_we_o;
  wire master_we_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:23.34" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/riscv-dbg/dm_sba.sv:43.34" *)
  input [2:0] sbaccess_i;
  wire [2:0] sbaccess_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:91.24" *)
  wire [31:0] sbaccess_mask;
  (* src = "rtl/riscv-dbg/dm_sba.sv:37.34" *)
  input [31:0] sbaddress_i;
  wire [31:0] sbaddress_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:41.34" *)
  output [31:0] sbaddress_o;
  wire [31:0] sbaddress_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:38.34" *)
  input sbaddress_write_valid_i;
  wire sbaddress_write_valid_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:42.34" *)
  input sbautoincrement_i;
  wire sbautoincrement_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:53.34" *)
  output sbbusy_o;
  wire sbbusy_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:46.34" *)
  input [31:0] sbdata_i;
  wire [31:0] sbdata_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:50.34" *)
  output [31:0] sbdata_o;
  wire [31:0] sbdata_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:47.34" *)
  input sbdata_read_valid_i;
  wire sbdata_read_valid_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:51.34" *)
  output sbdata_valid_o;
  wire sbdata_valid_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:48.34" *)
  input sbdata_write_valid_i;
  wire sbdata_write_valid_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:55.34" *)
  output [2:0] sberror_o;
  wire [2:0] sberror_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:54.34" *)
  output sberror_valid_o;
  wire sberror_valid_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:40.34" *)
  input sbreadonaddr_i;
  wire sbreadonaddr_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:45.34" *)
  input sbreadondata_i;
  wire sbreadondata_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:59.19" *)
  wire [2:0] state_d;
  (* src = "rtl/riscv-dbg/dm_sba.sv:59.28" *)
  reg [2:0] state_q;
  assign \$10y  = $signed(\$11y ) < 0 ? 2'h3 << - \$11y  : 2'h3 >> \$11y ;
  assign \$11y  = - (* src = "rtl/riscv-dbg/dm_sba.sv:80.9-80.65" *) { sbaddress_i[1], 1'h0 };
  wire [1:0] _0_ = 2'h3;
  assign \$12y  = _0_[$signed(\$11y ) +: 4];
  assign sbaccess_mask = 32'd4294967295 << (* src = "rtl/riscv-dbg/dm_sba.sv:92.26-92.56" *) sbaccess_i;
  assign \$17y  = 1'h1 << (* src = "rtl/riscv-dbg/dm_sba.sv:96.40-96.69" *) sbaccess_i;
  assign addr_incr = addr_incr_en ? (* src = "rtl/riscv-dbg/dm_sba.sv:96.22-96.75" *) \$17y  : 32'd0;
  assign sbaddress_o = sbaddress_i + (* src = "rtl/riscv-dbg/dm_sba.sv:97.24-97.47" *) addr_incr;
  assign \$21y  = sbaddress_write_valid_i && (* src = "rtl/riscv-dbg/dm_sba.sv:117.13-117.54" *) sbreadonaddr_i;
  assign \$24y  = sbdata_read_valid_i && (* src = "rtl/riscv-dbg/dm_sba.sv:121.13-121.50" *) sbreadondata_i;
  assign \$52y  = sbaccess_i > (* src = "rtl/riscv-dbg/dm_sba.sv:175.9-175.37" *) 2'h2;
  assign sbbusy_o = | (* src = "rtl/riscv-dbg/dm_sba.sv:175.41-175.60" *) state_q;
  assign \$54y  = \$52y  && (* src = "rtl/riscv-dbg/dm_sba.sv:175.9-175.60" *) sbbusy_o;
  assign \$59y  = ~ (* src = "rtl/riscv-dbg/dm_sba.sv:183.25-183.39" *) sbaccess_mask;
  assign \$60y  = sbaddress_i & (* src = "rtl/riscv-dbg/dm_sba.sv:183.11-183.39" *) \$59y ;
  assign \$61y  = | (* src = "rtl/riscv-dbg/dm_sba.sv:183.9-183.40" *) \$60y ;
  assign \$63y  = \$61y  && (* src = "rtl/riscv-dbg/dm_sba.sv:183.9-183.63" *) sbbusy_o;
  assign be_idx_masked = sbaddress_i[1:0] & (* src = "rtl/riscv-dbg/dm_sba.sv:201.28-201.63" *) sbaccess_mask[1:0];
  assign master_wdata_o = sbdata_i << (* src = "rtl/riscv-dbg/dm_sba.sv:205.28-205.73" *) { be_idx_masked, 3'h0 };
  assign sbdata_o = master_r_rdata_i >> (* src = "rtl/riscv-dbg/dm_sba.sv:209.28-209.81" *) { be_idx_masked, 3'h0 };
  assign \$6y [0] = sbaddress_i[1:0] == (* src = "rtl/riscv-dbg/dm_sba.sv:77.9-77.29" *) 2'h0;
  assign \$6y [1] = sbaddress_i[1:0] == (* src = "rtl/riscv-dbg/dm_sba.sv:77.9-77.29" *) 2'h1;
  assign \$6y [2] = sbaddress_i[1:0] == (* src = "rtl/riscv-dbg/dm_sba.sv:77.9-77.29" *) 2'h2;
  assign \$6y [3] = sbaddress_i[1:0] == (* src = "rtl/riscv-dbg/dm_sba.sv:77.9-77.29" *) 2'h3;
  (* src = "rtl/riscv-dbg/dm_sba.sv:192.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 3'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14504 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14496  = { master_we_o, \$63y , \$54y , master_gnt_i } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14498  = { \$procmux$7550_CMP , \$63y , \$54y , master_gnt_i } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14500  = { \$auto$opt_reduce.cc:137:opt_pmux$13433 , \$63y , master_r_valid_i, \$54y  } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14502  = { \$procmux$7568_CMP , sbdata_write_valid_i, \$63y , \$24y , \$21y , \$54y  } != 6'h20;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14504  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14502 , \$auto$opt_dff.cc:194:make_patterns_logic$14500 , \$auto$opt_dff.cc:194:make_patterns_logic$14498 , \$auto$opt_dff.cc:194:make_patterns_logic$14496  };
  assign \$13y  = \$12y  & \$10y ;
  assign \$auto$opt_reduce.cc:137:opt_pmux$13389  = | { \$procmux$7550_CMP , master_we_o };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13393  = | { \$procmux$7644_CMP , \$procmux$7641_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13433  = | { \$procmux$7476_CMP , \$procmux$7413_CMP  };
  assign sberror_o = \$63y  ? (* src = "rtl/riscv-dbg/dm_sba.sv:183.65-188.8|rtl/riscv-dbg/dm_sba.sv:183.5-188.8" *) 3'h3 : \$procmux$7393_Y ;
  assign sberror_valid_o = \$procmux$7396_Y  | (* src = "rtl/riscv-dbg/dm_sba.sv:183.65-188.8|rtl/riscv-dbg/dm_sba.sv:183.5-188.8" *) \$63y ;
  assign master_req_o = \$63y  ? (* src = "rtl/riscv-dbg/dm_sba.sv:183.65-188.8|rtl/riscv-dbg/dm_sba.sv:183.5-188.8" *) 1'h0 : \$procmux$7399_Y ;
  assign state_d = \$63y  ? (* src = "rtl/riscv-dbg/dm_sba.sv:183.65-188.8|rtl/riscv-dbg/dm_sba.sv:183.5-188.8" *) 3'h0 : \$procmux$7402_Y ;
  assign \$procmux$7393_Y  = \$54y  ? (* src = "rtl/riscv-dbg/dm_sba.sv:175.62-180.8|rtl/riscv-dbg/dm_sba.sv:175.5-180.8" *) 3'h4 : { \$procmux$7600_Y [2:1], \$procmux$7600_Y [2] };
  assign \$procmux$7396_Y  = \$procmux$7606_Y  | (* src = "rtl/riscv-dbg/dm_sba.sv:175.62-180.8|rtl/riscv-dbg/dm_sba.sv:175.5-180.8" *) \$54y ;
  assign \$procmux$7399_Y  = \$54y  ? (* src = "rtl/riscv-dbg/dm_sba.sv:175.62-180.8|rtl/riscv-dbg/dm_sba.sv:175.5-180.8" *) 1'h0 : \$auto$opt_reduce.cc:137:opt_pmux$13389 ;
  assign \$procmux$7402_Y  = \$54y  ? (* src = "rtl/riscv-dbg/dm_sba.sv:175.62-180.8|rtl/riscv-dbg/dm_sba.sv:175.5-180.8" *) 3'h0 : \$procmux$7559_Y ;
  assign \$procmux$7413_CMP  = state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" *) 3'h4;
  assign \$procmux$7450_Y  = master_r_valid_i & (* src = "rtl/riscv-dbg/dm_sba.sv:155.29-168.12|rtl/riscv-dbg/dm_sba.sv:155.9-168.12" *) \$procmux$7436_Y ;
  assign \$addr_incr_en$34  = master_r_valid_i & (* src = "rtl/riscv-dbg/dm_sba.sv:155.29-168.12|rtl/riscv-dbg/dm_sba.sv:155.9-168.12" *) sbautoincrement_i;
  assign \$procmux$7476_CMP  = state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" *) 2'h3;
  assign { \$procmux$7427_Y [1], \$procmux$7427_Y [2] } = master_r_other_err_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:143.37-147.14|rtl/riscv-dbg/dm_sba.sv:143.11-150.14" *) 2'h3 : { master_r_err_i, 1'h0 };
  assign \$procmux$7436_Y  = master_r_err_i | (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:143.37-147.14|rtl/riscv-dbg/dm_sba.sv:143.11-150.14" *) master_r_other_err_i;
  assign { \$procmux$7444_Y [1], \$procmux$7444_Y [2] } = master_r_valid_i ? (* src = "rtl/riscv-dbg/dm_sba.sv:138.29-151.12|rtl/riscv-dbg/dm_sba.sv:138.9-151.12" *) { \$procmux$7427_Y [1], \$procmux$7427_Y [2] } : 2'h0;
  assign master_we_o = state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:130.18-135.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" *) 2'h2;
  assign \$procmux$7550_CMP  = state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:124.17-128.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" *) 1'h1;
  function [2:0] \$procmux$7559 ;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$7559  = b[2:0];
      3'b?1?:
        \$procmux$7559  = b[5:3];
      3'b1??:
        \$procmux$7559  = b[8:6];
      default:
        \$procmux$7559  = a;
    endcase
  endfunction
  assign \$procmux$7559_Y  = \$procmux$7559 (3'h0, { 1'h0, \$procmux$7575_Y [1:0], 6'h1c }, { \$procmux$7568_CMP , \$procmux$7550_CMP , master_we_o });
  assign \$procmux$7568_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:115.17-122.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" *) state_q;
  assign \$procmux$7575_Y [1:0] = \$24y  ? (* src = "rtl/riscv-dbg/dm_sba.sv:121.52-121.71|rtl/riscv-dbg/dm_sba.sv:121.9-121.71" *) 2'h1 : \$procmux$7585_Y [1:0];
  assign \$procmux$7585_Y [1:0] = sbdata_write_valid_i ? (* src = "rtl/riscv-dbg/dm_sba.sv:119.35-119.55|rtl/riscv-dbg/dm_sba.sv:119.9-119.55" *) 2'h2 : 2'h1;
  assign { \$procmux$7600_Y [1], \$procmux$7600_Y [2] } = \$auto$opt_reduce.cc:137:opt_pmux$13433  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" *) { \$procmux$7444_Y [1], \$procmux$7444_Y [2] } : 2'h0;
  assign \$procmux$7606_Y  = \$auto$opt_reduce.cc:137:opt_pmux$13433  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" *) \$procmux$7450_Y ;
  assign addr_incr_en = \$auto$opt_reduce.cc:137:opt_pmux$13433  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" *) \$addr_incr_en$34 ;
  assign master_be_o = \$auto$opt_reduce.cc:137:opt_pmux$13389  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:130.18-135.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" *) be_mask : 4'h0;
  assign \$procmux$7641_CMP  = sbaccess_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:83.9-84.46|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" *) 2'h2;
  function [3:0] \$procmux$7643 ;
    input [3:0] a;
    input [11:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dm_sba.sv:86.15-86.28|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$7643  = b[3:0];
      3'b?1?:
        \$procmux$7643  = b[7:4];
      3'b1??:
        \$procmux$7643  = b[11:8];
      default:
        \$procmux$7643  = a;
    endcase
  endfunction
  assign be_mask = \$procmux$7643 (4'h0, { \$6y , \$13y , 4'hf }, { \$procmux$7647_CMP , \$procmux$7646_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13393  });
  assign \$procmux$7644_CMP  = sbaccess_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:86.15-86.28|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" *) 2'h3;
  assign \$procmux$7646_CMP  = sbaccess_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:80.9-80.66|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" *) 1'h1;
  assign \$procmux$7647_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:77.9-77.30|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" *) sbaccess_i;
  assign \$procmux$7427_Y [0] = \$procmux$7427_Y [2];
  assign \$procmux$7444_Y [0] = \$procmux$7444_Y [2];
  assign \$procmux$7575_Y [2] = 1'h0;
  assign \$procmux$7585_Y [2] = 1'h0;
  assign \$procmux$7600_Y [0] = \$procmux$7600_Y [2];
  assign master_add_o = sbaddress_i;
  assign sbdata_valid_o = master_r_valid_i;
endmodule

(* src = "rtl/riscv-dbg/dm_top.sv:20.8" *)
module \dm_top$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top (clk_i, rst_ni, testmode_i, debug_req_o, unavailable_i, hartinfo_i, slave_req_i, slave_we_i, slave_addr_i, slave_be_i, slave_wdata_i, slave_rdata_o, master_req_o, master_we_o, master_wdata_o, master_be_o, master_gnt_i, dmi_rst_ni, dmi_req_valid_i, dmi_req_ready_o, dmi_req_i
, dmi_resp_valid_o, dmi_resp_ready_i, dmi_resp_o, ndmreset_o, dmactive_o, next_dm_addr_i, ndmreset_ack_i, master_add_o, master_r_valid_i, master_r_err_i, master_r_other_err_i, master_r_rdata_i);
  (* src = "rtl/riscv-dbg/dm_top.sv:85.37" *)
  wire clear_resumeack;
  (* src = "rtl/riscv-dbg/dm_top.sv:30.33" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:87.37" *)
  wire [31:0] cmd;
  (* src = "rtl/riscv-dbg/dm_top.sv:86.37" *)
  wire cmd_valid;
  (* src = "rtl/riscv-dbg/dm_top.sv:91.37" *)
  wire cmdbusy;
  (* src = "rtl/riscv-dbg/dm_top.sv:90.37" *)
  wire [2:0] cmderror;
  (* src = "rtl/riscv-dbg/dm_top.sv:89.37" *)
  wire cmderror_valid;
  (* src = "rtl/riscv-dbg/dm_top.sv:93.37" *)
  wire [63:0] data_csrs_mem;
  (* src = "rtl/riscv-dbg/dm_top.sv:94.37" *)
  wire [63:0] data_mem_csrs;
  (* src = "rtl/riscv-dbg/dm_top.sv:95.37" *)
  wire data_valid;
  (* src = "rtl/riscv-dbg/dm_top.sv:43.33" *)
  output debug_req_o;
  wire debug_req_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:42.33" *)
  output dmactive_o;
  wire dmactive_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:72.33" *)
  input [40:0] dmi_req_i;
  wire [40:0] dmi_req_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:71.33" *)
  output dmi_req_ready_o;
  wire dmi_req_ready_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:70.33" *)
  input dmi_req_valid_i;
  wire dmi_req_valid_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:76.33" *)
  output [33:0] dmi_resp_o;
  wire [33:0] dmi_resp_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:75.33" *)
  input dmi_resp_ready_i;
  wire dmi_resp_ready_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:74.33" *)
  output dmi_resp_valid_o;
  wire dmi_resp_valid_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:67.33" *)
  input dmi_rst_ni;
  wire dmi_rst_ni;
  (* src = "rtl/riscv-dbg/dm_top.sv:80.37" *)
  wire halted;
  (* src = "rtl/riscv-dbg/dm_top.sv:83.37" *)
  wire haltreq;
  (* src = "rtl/riscv-dbg/dm_top.sv:46.39" *)
  input [31:0] hartinfo_i;
  wire [31:0] hartinfo_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:97.37" *)
  wire [19:0] hartsel;
  (* src = "rtl/riscv-dbg/dm_top.sv:56.33" *)
  output [31:0] master_add_o;
  wire [31:0] master_add_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:59.33" *)
  output [3:0] master_be_o;
  wire [3:0] master_be_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:60.33" *)
  input master_gnt_i;
  wire master_gnt_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:62.33" *)
  input master_r_err_i;
  wire master_r_err_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:63.33" *)
  input master_r_other_err_i;
  wire master_r_other_err_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:64.33" *)
  input [31:0] master_r_rdata_i;
  wire [31:0] master_r_rdata_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:61.33" *)
  input master_r_valid_i;
  wire master_r_valid_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:55.33" *)
  output master_req_o;
  wire master_req_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:58.33" *)
  output [31:0] master_wdata_o;
  wire [31:0] master_wdata_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:57.33" *)
  output master_we_o;
  wire master_we_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:41.33" *)
  input ndmreset_ack_i;
  wire ndmreset_ack_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:40.33" *)
  output ndmreset_o;
  wire ndmreset_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:38.33" *)
  input [31:0] next_dm_addr_i;
  wire [31:0] next_dm_addr_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:92.37" *)
  wire [255:0] progbuf;
  (* src = "rtl/riscv-dbg/dm_top.sv:82.37" *)
  wire resumeack;
  (* src = "rtl/riscv-dbg/dm_top.sv:84.37" *)
  wire resumereq;
  (* src = "rtl/riscv-dbg/dm_top.sv:32.33" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/riscv-dbg/dm_top.sv:104.37" *)
  wire [2:0] sbaccess;
  (* src = "rtl/riscv-dbg/dm_top.sv:99.37" *)
  wire [31:0] sbaddress_csrs_sba;
  (* src = "rtl/riscv-dbg/dm_top.sv:100.37" *)
  wire [31:0] sbaddress_sba_csrs;
  (* src = "rtl/riscv-dbg/dm_top.sv:101.37" *)
  wire sbaddress_write_valid;
  (* src = "rtl/riscv-dbg/dm_top.sv:103.37" *)
  wire sbautoincrement;
  (* src = "rtl/riscv-dbg/dm_top.sv:111.37" *)
  wire sbbusy;
  (* src = "rtl/riscv-dbg/dm_top.sv:109.37" *)
  wire [31:0] sbdata_read;
  (* src = "rtl/riscv-dbg/dm_top.sv:107.37" *)
  wire sbdata_read_valid;
  (* src = "rtl/riscv-dbg/dm_top.sv:110.37" *)
  wire sbdata_valid;
  (* src = "rtl/riscv-dbg/dm_top.sv:106.37" *)
  wire [31:0] sbdata_write;
  (* src = "rtl/riscv-dbg/dm_top.sv:108.37" *)
  wire sbdata_write_valid;
  (* src = "rtl/riscv-dbg/dm_top.sv:113.37" *)
  wire [2:0] sberror;
  (* src = "rtl/riscv-dbg/dm_top.sv:112.37" *)
  wire sberror_valid;
  (* src = "rtl/riscv-dbg/dm_top.sv:102.37" *)
  wire sbreadonaddr;
  (* src = "rtl/riscv-dbg/dm_top.sv:105.37" *)
  wire sbreadondata;
  (* src = "rtl/riscv-dbg/dm_top.sv:50.33" *)
  input [31:0] slave_addr_i;
  wire [31:0] slave_addr_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:51.33" *)
  input [3:0] slave_be_i;
  wire [3:0] slave_be_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:53.33" *)
  output [31:0] slave_rdata_o;
  wire [31:0] slave_rdata_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:48.33" *)
  input slave_req_i;
  wire slave_req_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:52.33" *)
  input [31:0] slave_wdata_i;
  wire [31:0] slave_wdata_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:49.33" *)
  input slave_we_i;
  wire slave_we_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:39.33" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:45.33" *)
  input unavailable_i;
  wire unavailable_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:121.5" *)
  \dm_csrs$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_csrs  i_dm_csrs (
    .clear_resumeack_o(clear_resumeack),
    .clk_i(clk_i),
    .cmd_o(cmd),
    .cmd_valid_o(cmd_valid),
    .cmdbusy_i(cmdbusy),
    .cmderror_i(cmderror),
    .cmderror_valid_i(cmderror_valid),
    .data_i(data_mem_csrs),
    .data_o(data_csrs_mem),
    .data_valid_i(data_valid),
    .dmactive_o(dmactive_o),
    .dmi_req_i(dmi_req_i),
    .dmi_req_ready_o(dmi_req_ready_o),
    .dmi_req_valid_i(dmi_req_valid_i),
    .dmi_resp_o(dmi_resp_o),
    .dmi_resp_ready_i(dmi_resp_ready_i),
    .dmi_resp_valid_o(dmi_resp_valid_o),
    .dmi_rst_ni(dmi_rst_ni),
    .halted_i(halted),
    .haltreq_o(haltreq),
    .hartinfo_i(hartinfo_i),
    .hartsel_o(hartsel),
    .ndmreset_ack_i(ndmreset_ack_i),
    .ndmreset_o(ndmreset_o),
    .next_dm_addr_i(next_dm_addr_i),
    .progbuf_o(progbuf),
    .resumeack_i(resumeack),
    .resumereq_o(resumereq),
    .rst_ni(rst_ni),
    .sbaccess_o(sbaccess),
    .sbaddress_i(sbaddress_sba_csrs),
    .sbaddress_o(sbaddress_csrs_sba),
    .sbaddress_write_valid_o(sbaddress_write_valid),
    .sbautoincrement_o(sbautoincrement),
    .sbbusy_i(sbbusy),
    .sbdata_i(sbdata_read),
    .sbdata_o(sbdata_write),
    .sbdata_read_valid_o(sbdata_read_valid),
    .sbdata_valid_i(sbdata_valid),
    .sbdata_write_valid_o(sbdata_write_valid),
    .sberror_i(sberror),
    .sberror_valid_i(sberror_valid),
    .sbreadonaddr_o(sbreadonaddr),
    .sbreadondata_o(sbreadondata),
    .testmode_i(testmode_i),
    .unavailable_i(unavailable_i)
  );
  (* src = "rtl/riscv-dbg/dm_top.sv:211.5" *)
  \dm_mem$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_mem  i_dm_mem (
    .addr_i(slave_addr_i),
    .be_i(slave_be_i),
    .clear_resumeack_i(clear_resumeack),
    .clk_i(clk_i),
    .cmd_i(cmd),
    .cmd_valid_i(cmd_valid),
    .cmdbusy_o(cmdbusy),
    .cmderror_o(cmderror),
    .cmderror_valid_o(cmderror_valid),
    .data_i(data_csrs_mem),
    .data_o(data_mem_csrs),
    .data_valid_o(data_valid),
    .debug_req_o(debug_req_o),
    .halted_o(halted),
    .haltreq_i(haltreq),
    .hartsel_i(hartsel),
    .ndmreset_i(ndmreset_o),
    .progbuf_i(progbuf),
    .rdata_o(slave_rdata_o),
    .req_i(slave_req_i),
    .resumereq_i(resumereq),
    .resuming_o(resumeack),
    .rst_ni(rst_ni),
    .wdata_i(slave_wdata_i),
    .we_i(slave_we_i)
  );
  (* src = "rtl/riscv-dbg/dm_top.sv:173.5" *)
  \dm_sba$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_sba  i_dm_sba (
    .clk_i(clk_i),
    .dmactive_i(dmactive_o),
    .master_add_o(master_add_o),
    .master_be_o(master_be_o),
    .master_gnt_i(master_gnt_i),
    .master_r_err_i(master_r_err_i),
    .master_r_other_err_i(master_r_other_err_i),
    .master_r_rdata_i(master_r_rdata_i),
    .master_r_valid_i(master_r_valid_i),
    .master_req_o(master_req_o),
    .master_wdata_o(master_wdata_o),
    .master_we_o(master_we_o),
    .rst_ni(rst_ni),
    .sbaccess_i(sbaccess),
    .sbaddress_i(sbaddress_csrs_sba),
    .sbaddress_o(sbaddress_sba_csrs),
    .sbaddress_write_valid_i(sbaddress_write_valid),
    .sbautoincrement_i(sbautoincrement),
    .sbbusy_o(sbbusy),
    .sbdata_i(sbdata_write),
    .sbdata_o(sbdata_read),
    .sbdata_read_valid_i(sbdata_read_valid),
    .sbdata_valid_o(sbdata_valid),
    .sbdata_write_valid_i(sbdata_write_valid),
    .sberror_o(sberror),
    .sberror_valid_o(sberror_valid),
    .sbreadonaddr_i(sbreadonaddr),
    .sbreadondata_i(sbreadondata)
  );
endmodule

(* src = "rtl/riscv-dbg/dmi_cdc.sv:19.8" *)
module \dmi_cdc$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc (clk_i, rst_ni, tck_i, trst_ni, jtag_dmi_req_i, jtag_dmi_ready_o, jtag_dmi_valid_i, jtag_dmi_cdc_clear_i, jtag_dmi_resp_o, jtag_dmi_valid_o, jtag_dmi_ready_i, core_dmi_rst_no, core_dmi_req_o, core_dmi_valid_o, core_dmi_ready_i, core_dmi_resp_i, core_dmi_ready_o, core_dmi_valid_i);
  wire \$0y ;
  wire \$5y ;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:98.28" *)
  wire clear_pending_rise_edge_detect;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:35.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:48.28" *)
  wire core_clear_pending;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:96.28" *)
  reg core_clear_pending_q;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:41.28" *)
  input core_dmi_ready_i;
  wire core_dmi_ready_i;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:44.28" *)
  output core_dmi_ready_o;
  wire core_dmi_ready_o;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:39.28" *)
  output [40:0] core_dmi_req_o;
  wire [40:0] core_dmi_req_o;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:43.28" *)
  input [33:0] core_dmi_resp_i;
  wire [33:0] core_dmi_resp_i;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:38.28" *)
  output core_dmi_rst_no;
  reg core_dmi_rst_no;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:45.28" *)
  input core_dmi_valid_i;
  wire core_dmi_valid_i;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:40.28" *)
  output core_dmi_valid_o;
  wire core_dmi_valid_o;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:26.28" *)
  input jtag_dmi_cdc_clear_i;
  wire jtag_dmi_cdc_clear_i;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:32.28" *)
  input jtag_dmi_ready_i;
  wire jtag_dmi_ready_i;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:24.28" *)
  output jtag_dmi_ready_o;
  wire jtag_dmi_ready_o;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:23.28" *)
  input [40:0] jtag_dmi_req_i;
  wire [40:0] jtag_dmi_req_i;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:30.28" *)
  output [33:0] jtag_dmi_resp_o;
  wire [33:0] jtag_dmi_resp_o;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:25.28" *)
  input jtag_dmi_valid_i;
  wire jtag_dmi_valid_i;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:31.28" *)
  output jtag_dmi_valid_o;
  wire jtag_dmi_valid_o;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:36.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:21.28" *)
  input tck_i;
  wire tck_i;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:22.28" *)
  input trst_ni;
  wire trst_ni;
  assign \$0y  = ! (* src = "rtl/riscv-dbg/dmi_cdc.sv:100.43-100.64" *) core_clear_pending_q;
  assign clear_pending_rise_edge_detect = \$0y  && (* src = "rtl/riscv-dbg/dmi_cdc.sv:100.43-100.86" *) core_clear_pending;
  assign \$5y  = ~ (* src = "rtl/riscv-dbg/dmi_cdc.sv:107.32-107.63" *) clear_pending_rise_edge_detect;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:102.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) core_clear_pending_q <= 1'h0;
    else core_clear_pending_q <= core_clear_pending;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:102.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) core_dmi_rst_no <= 1'h1;
    else core_dmi_rst_no <= \$5y ;
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:50.45" *)
  \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req  i_cdc_req (
    .dst_clear_i(1'h0),
    .dst_clear_pending_o(core_clear_pending),
    .dst_clk_i(clk_i),
    .dst_data_o(core_dmi_req_o),
    .dst_ready_i(core_dmi_ready_i),
    .dst_rst_ni(rst_ni),
    .dst_valid_o(core_dmi_valid_o),
    .src_clear_i(jtag_dmi_cdc_clear_i),
    .src_clk_i(tck_i),
    .src_data_i(jtag_dmi_req_i),
    .src_ready_o(jtag_dmi_ready_o),
    .src_rst_ni(trst_ni),
    .src_valid_i(jtag_dmi_valid_i)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:72.46" *)
  \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp  i_cdc_resp (
    .dst_clear_i(jtag_dmi_cdc_clear_i),
    .dst_clk_i(tck_i),
    .dst_data_o(jtag_dmi_resp_o),
    .dst_ready_i(jtag_dmi_ready_i),
    .dst_rst_ni(trst_ni),
    .dst_valid_o(jtag_dmi_valid_o),
    .src_clear_i(1'h0),
    .src_clk_i(clk_i),
    .src_data_i(core_dmi_resp_i),
    .src_ready_o(core_dmi_ready_o),
    .src_rst_ni(rst_ni),
    .src_valid_i(core_dmi_valid_i)
  );
endmodule

(* src = "rtl/riscv-dbg/dmi_jtag.sv:19.8" *)
module \dmi_jtag$croc_chip.i_croc_soc.i_croc.i_dmi_jtag (clk_i, rst_ni, testmode_i, dmi_rst_no, dmi_req_o, dmi_req_valid_o, dmi_req_ready_i, dmi_resp_i, dmi_resp_ready_o, dmi_resp_valid_i, tck_i, tms_i, trst_ni, td_i, td_o, tdo_oe_o);
  wire \$0y ;
  wire \$12y ;
  wire \$15y ;
  wire \$16y ;
  wire \$17y ;
  wire \$18y ;
  wire \$19y ;
  wire \$1y ;
  wire \$46y ;
  wire \$47y ;
  wire \$49y ;
  wire \$50y ;
  wire \$51y ;
  wire \$52y ;
  wire \$55y ;
  wire \$58y ;
  wire \$60y ;
  wire \$61y ;
  wire \$72y ;
  wire \$73y ;
  wire \$74y ;
  wire \$75y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14507 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14509 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14511 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14513 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14515 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14520 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14523 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14527 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14534 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14517 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14529 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14536 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13395 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13441 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" *)
  wire [31:0] \$data_d$26 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" *)
  wire [31:0] \$data_d$43 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:272.20-274.14" *)
  wire [40:0] \$dr_d$76 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:269.11-274.14" *)
  wire [40:0] \$dr_d$77 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:268.9-275.12" *)
  wire [40:0] \$dr_d$78 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:267.7-276.10" *)
  wire [40:0] \$dr_d$79 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:279.9-281.12" *)
  wire [40:0] \$dr_d$80 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:278.7-282.10" *)
  wire [40:0] \$dr_d$81 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:74.7-85.10" *)
  wire [31:0] \$dtmcs_d$4 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:73.5-86.8" *)
  wire [31:0] \$dtmcs_d$5 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:89.7-89.61" *)
  wire [31:0] \$dtmcs_d$7 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:248.7-250.10" *)
  wire [1:0] \$error_d$59 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:253.7-255.10" *)
  wire [1:0] \$error_d$62 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" *)
  wire \$error_dmi_busy$27 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" *)
  wire \$error_dmi_busy$31 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" *)
  wire \$error_dmi_busy$44 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:233.7-235.10" *)
  wire \$error_dmi_busy$48 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:240.7-242.10" *)
  wire \$error_dmi_busy$53 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" *)
  wire \$error_dmi_op_failed$28 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" *)
  wire \$error_dmi_op_failed$32 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" *)
  wire \$error_dmi_op_failed$45 ;
  wire \$procmux$12764_CMP ;
  wire \$procmux$12768_CMP ;
  wire \$procmux$12838_CMP ;
  wire [2:0] \$procmux$12931_Y ;
  wire [2:0] \$procmux$12968_Y ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:126.15" *)
  wire [6:0] address_d;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:126.26" *)
  reg [6:0] address_q;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:56.9" *)
  wire capture;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:22.24" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:127.16" *)
  wire [31:0] data_d;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:127.24" *)
  reg [31:0] data_q;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:129.10" *)
  reg [40:0] dmi;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:54.9" *)
  wire dmi_clear;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:108.18" *)
  wire [40:0] dmi_req;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:29.24" *)
  output [40:0] dmi_req_o;
  wire [40:0] dmi_req_o;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:109.18" *)
  wire dmi_req_ready;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:31.24" *)
  input dmi_req_ready_i;
  wire dmi_req_ready_i;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:110.18" *)
  wire dmi_req_valid;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:30.24" *)
  output dmi_req_valid_o;
  wire dmi_req_valid_o;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:112.18" *)
  wire [33:0] dmi_resp;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:33.24" *)
  input [33:0] dmi_resp_i;
  wire [33:0] dmi_resp_i;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:34.24" *)
  output dmi_resp_ready_o;
  wire dmi_resp_ready_o;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:113.18" *)
  wire dmi_resp_valid;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:35.24" *)
  input dmi_resp_valid_i;
  wire dmi_resp_valid_i;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:28.24" *)
  output dmi_rst_no;
  wire dmi_rst_no;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:105.16" *)
  wire dmi_select;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:125.28" *)
  wire [40:0] dr_d;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:62.15" *)
  wire [31:0] dtmcs_d;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:62.24" *)
  reg [31:0] dtmcs_q;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:60.9" *)
  wire dtmcs_select;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:49.15" *)
  wire [1:0] error_d;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:137.9" *)
  wire error_dmi_busy;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:49.24" *)
  reg [1:0] error_q;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:52.9" *)
  wire jtag_dmi_clear;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:23.24" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:57.9" *)
  wire shift;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:123.11" *)
  wire [2:0] state_d;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:123.20" *)
  reg [2:0] state_q;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:51.9" *)
  wire tck;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:37.24" *)
  input tck_i;
  wire tck_i;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:40.24" *)
  input td_i;
  wire td_i;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:41.24" *)
  output td_o;
  wire td_o;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:58.9" *)
  wire tdi;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:42.24" *)
  output tdo_oe_o;
  wire tdo_oe_o;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:24.24" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:38.24" *)
  input tms_i;
  wire tms_i;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:39.24" *)
  input trst_ni;
  wire trst_ni;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:55.9" *)
  wire update;
  assign \$0y  = dtmcs_select && (* src = "rtl/riscv-dbg/dmi_jtag.sv:64.41-64.63" *) update;
  assign \$1y  = \$0y  && (* src = "rtl/riscv-dbg/dmi_jtag.sv:64.41-64.87" *) dtmcs_q[17];
  assign \$12y  = state_q == (* src = "rtl/riscv-dbg/dmi_jtag.sv:133.26-133.42" *) 2'h3;
  assign dmi_req[33:32] = \$12y  ? (* src = "rtl/riscv-dbg/dmi_jtag.sv:133.25-133.74" *) 2'h2 : 2'h1;
  assign \$15y  = dmi_select && (* src = "rtl/riscv-dbg/dmi_jtag.sv:160.15-160.35" *) update;
  assign \$16y  = ! (* src = "rtl/riscv-dbg/dmi_jtag.sv:160.40-160.61" *) error_q;
  assign \$17y  = \$15y  && (* src = "rtl/riscv-dbg/dmi_jtag.sv:160.15-160.62" *) \$16y ;
  assign \$18y  = dmi[1:0] == (* src = "rtl/riscv-dbg/dmi_jtag.sv:164.17-164.54" *) 1'h1;
  assign \$19y  = dmi[1:0] == (* src = "rtl/riscv-dbg/dmi_jtag.sv:166.26-166.64" *) 2'h2;
  assign dmi_clear = jtag_dmi_clear || (* src = "rtl/riscv-dbg/dmi_jtag.sv:64.22-64.88" *) \$1y ;
  assign \$46y  = | (* src = "rtl/riscv-dbg/dmi_jtag.sv:233.21-233.36" *) state_q;
  assign \$47y  = update && (* src = "rtl/riscv-dbg/dmi_jtag.sv:233.11-233.36" *) \$46y ;
  assign \$49y  = state_q == (* src = "rtl/riscv-dbg/dmi_jtag.sv:240.22-240.58" *) 1'h1;
  assign \$50y  = state_q == (* src = "rtl/riscv-dbg/dmi_jtag.sv:240.22-240.58" *) 2'h2;
  assign \$51y  = | (* src = "rtl/riscv-dbg/dmi_jtag.sv:240.22-240.58" *) { \$50y , \$49y  };
  assign \$52y  = capture && (* src = "rtl/riscv-dbg/dmi_jtag.sv:240.11-240.58" *) \$51y ;
  assign \$55y  = \$error_dmi_busy$53  && (* src = "rtl/riscv-dbg/dmi_jtag.sv:244.11-244.50" *) \$16y ;
  assign \$58y  = \$error_dmi_op_failed$45  && (* src = "rtl/riscv-dbg/dmi_jtag.sv:248.11-248.55" *) \$16y ;
  assign \$60y  = update && (* src = "rtl/riscv-dbg/dmi_jtag.sv:253.11-253.37" *) dtmcs_q[16];
  assign \$61y  = \$60y  && (* src = "rtl/riscv-dbg/dmi_jtag.sv:253.11-253.53" *) dtmcs_select;
  assign \$72y  = ! (* src = "rtl/riscv-dbg/dmi_jtag.sv:269.40-269.55" *) error_dmi_busy;
  assign \$73y  = \$16y  && (* src = "rtl/riscv-dbg/dmi_jtag.sv:269.15-269.55" *) \$72y ;
  assign \$74y  = error_q == (* src = "rtl/riscv-dbg/dmi_jtag.sv:272.24-272.42" *) 2'h3;
  assign \$75y  = \$74y  || (* src = "rtl/riscv-dbg/dmi_jtag.sv:272.24-272.60" *) error_dmi_busy;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) state_q <= 3'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14517 ) state_q <= state_d;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) error_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14520 ) error_q <= error_d;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) data_q <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14529 ) data_q <= data_d;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) address_q <= 7'h00;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14536 ) address_q <= address_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14507  = { \$12y , dmi_clear, dmi_req_ready } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14509  = { \$49y , dmi_clear, dmi_req_ready } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14511  = | { \$procmux$12768_CMP , \$49y , \$12y , dmi_clear, dmi_resp_valid };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14513  = { \$procmux$12768_CMP , \$17y , dmi_clear } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14515  = { \$procmux$12768_CMP , \$19y , \$18y , \$17y , dmi_clear } != 5'h12;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14520  = | { \$61y , \$58y , \$55y , dmi_clear };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14523  = { \$50y , dmi_clear, dmi_resp_valid } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14527  = | { \$procmux$12768_CMP , \$50y , dmi_clear };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14534  = | { \$procmux$12768_CMP , dmi_clear };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14517  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14515 , \$auto$opt_dff.cc:194:make_patterns_logic$14513 , \$auto$opt_dff.cc:194:make_patterns_logic$14511 , \$auto$opt_dff.cc:194:make_patterns_logic$14509 , \$auto$opt_dff.cc:194:make_patterns_logic$14507  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14529  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14527 , \$auto$opt_dff.cc:194:make_patterns_logic$14523 , \$auto$opt_dff.cc:194:make_patterns_logic$14513  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14536  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14534 , \$auto$opt_dff.cc:194:make_patterns_logic$14513  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13395  = | { \$49y , \$12y  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13441  = | { \$procmux$12764_CMP , \$50y  };
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dmi <= 41'h00000000000;
    else dmi <= dr_d;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[9:4] <= 6'h00;
    else dtmcs_q[9:4] <= dtmcs_d[9:4];
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[17] <= 1'h0;
    else dtmcs_q[17] <= dtmcs_d[17];
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[16] <= 1'h0;
    else dtmcs_q[16] <= dtmcs_d[16];
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[11:10] <= 2'h0;
    else dtmcs_q[11:10] <= dtmcs_d[11:10];
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[14:12] <= 3'h0;
    else dtmcs_q[14:12] <= dtmcs_d[14:12];
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[3:0] <= 4'h0;
    else dtmcs_q[3:0] <= dtmcs_d[3:0];
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[15] <= 1'h0;
    else dtmcs_q[15] <= dtmcs_d[15];
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[31:18] <= 14'h0000;
    else dtmcs_q[31:18] <= dtmcs_d[31:18];
  assign \$error_d$62  = \$61y  ? (* src = "rtl/riscv-dbg/dmi_jtag.sv:254.9-254.30|rtl/riscv-dbg/dmi_jtag.sv:253.7-255.10" *) 2'h0 : { 1'h1, \$error_d$59 [0] };
  assign \$error_d$59 [0] = ~ (* src = "rtl/riscv-dbg/dmi_jtag.sv:249.9-249.31|rtl/riscv-dbg/dmi_jtag.sv:248.7-250.10" *) \$58y ;
  assign \$error_dmi_busy$53  = \$error_dmi_busy$48  | (* src = "rtl/riscv-dbg/dmi_jtag.sv:241.9-241.31|rtl/riscv-dbg/dmi_jtag.sv:240.7-242.10" *) \$52y ;
  assign \$error_dmi_busy$48  = \$error_dmi_busy$44  | (* src = "rtl/riscv-dbg/dmi_jtag.sv:234.9-234.31|rtl/riscv-dbg/dmi_jtag.sv:233.7-235.10" *) \$47y ;
  assign \$procmux$12764_CMP  = state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" *) 3'h4;
  assign \$procmux$12768_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" *) state_q;
  assign \$error_dmi_op_failed$28  = dmi_resp[1:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:215.28-215.55|rtl/riscv-dbg/dmi_jtag.sv:214.13-218.20" *) 2'h2;
  assign \$error_dmi_busy$27  = dmi_resp[1:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:216.29-216.51|rtl/riscv-dbg/dmi_jtag.sv:214.13-218.20" *) 2'h3;
  assign \$error_dmi_busy$31  = dmi_resp_valid & (* src = "rtl/riscv-dbg/dmi_jtag.sv:213.31-220.14|rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14" *) \$error_dmi_busy$27 ;
  function [31:0] \$procmux$12835 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dmi_jtag.sv:191.29-194.18|rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$12835  = b[31:0];
      3'b?1?:
        \$procmux$12835  = b[63:32];
      3'b1??:
        \$procmux$12835  = b[95:64];
      default:
        \$procmux$12835  = a;
    endcase
  endfunction
  assign \$data_d$26  = \$procmux$12835 (32'd3131949278, { dmi_resp[33:2], 64'hdeadbeefb051b051 }, { \$procmux$12838_CMP , \$error_dmi_op_failed$28 , \$error_dmi_busy$27  });
  assign \$procmux$12838_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:185.17-185.40|rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" *) dmi_resp[1:0];
  assign \$error_dmi_op_failed$32  = dmi_resp_valid & (* src = "rtl/riscv-dbg/dmi_jtag.sv:182.31-200.14|rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" *) \$error_dmi_op_failed$28 ;
  function [2:0] \$procmux$12931 ;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$12931  = b[2:0];
      3'b?1?:
        \$procmux$12931  = b[5:3];
      3'b1??:
        \$procmux$12931  = b[8:6];
      default:
        \$procmux$12931  = a;
    endcase
  endfunction
  assign \$procmux$12931_Y  = \$procmux$12931 (3'h0, { 1'h0, \$procmux$12968_Y [1], 7'h54 }, { \$procmux$12768_CMP , \$49y , \$12y  });
  assign \$procmux$12968_Y [1] = ~ (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:165.15-165.30|rtl/riscv-dbg/dmi_jtag.sv:164.13-168.16" *) \$18y ;
  assign \$error_dmi_op_failed$45  = \$auto$opt_reduce.cc:137:opt_pmux$13441  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" *) \$error_dmi_op_failed$32 ;
  assign \$error_dmi_busy$44  = \$auto$opt_reduce.cc:137:opt_pmux$13441  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" *) \$error_dmi_busy$31 ;
  assign \$data_d$43  = \$50y  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" *) \$data_d$26  : dmi[33:2];
  assign data_d = dmi_clear ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" *) 32'd0 : \$data_d$43 ;
  assign address_d = dmi_clear ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" *) 7'h00 : dmi[40:34];
  assign state_d = dmi_clear ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" *) 3'h0 : \$procmux$12931_Y ;
  assign error_d = dmi_clear ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" *) 2'h0 : \$error_d$62 ;
  assign error_dmi_busy = dmi_clear ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" *) 1'h0 : \$error_dmi_busy$53 ;
  assign dmi_req_valid = dmi_clear ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" *) 1'h0 : \$auto$opt_reduce.cc:137:opt_pmux$13395 ;
  assign \$dr_d$80  = dmi_select ? (* src = "rtl/riscv-dbg/dmi_jtag.sv:280.11-280.47|rtl/riscv-dbg/dmi_jtag.sv:279.9-281.12" *) { tdi, dmi[40:1] } : \$dr_d$79 ;
  assign \$dr_d$81  = shift ? (* src = "rtl/riscv-dbg/dmi_jtag.sv:279.9-281.12|rtl/riscv-dbg/dmi_jtag.sv:278.7-282.10" *) \$dr_d$80  : \$dr_d$79 ;
  assign \$dr_d$76  = \$75y  ? (* src = "rtl/riscv-dbg/dmi_jtag.sv:273.13-273.49|rtl/riscv-dbg/dmi_jtag.sv:272.20-274.14" *) { address_q, data_q, 2'h3 } : dmi;
  assign \$dr_d$77  = \$73y  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:270.13-270.52|rtl/riscv-dbg/dmi_jtag.sv:269.11-274.14" *) { address_q, data_q, 2'h0 } : \$dr_d$76 ;
  assign \$dr_d$78  = dmi_select ? (* src = "rtl/riscv-dbg/dmi_jtag.sv:269.11-274.14|rtl/riscv-dbg/dmi_jtag.sv:268.9-275.12" *) \$dr_d$77  : dmi;
  assign \$dr_d$79  = capture ? (* src = "rtl/riscv-dbg/dmi_jtag.sv:268.9-275.12|rtl/riscv-dbg/dmi_jtag.sv:267.7-276.10" *) \$dr_d$78  : dmi;
  assign dr_d = dmi_clear ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:265.7-265.17|rtl/riscv-dbg/dmi_jtag.sv:264.5-283.8" *) 41'h00000000000 : \$dr_d$81 ;
  assign \$dtmcs_d$7  = dtmcs_select ? (* src = "rtl/riscv-dbg/dmi_jtag.sv:89.25-89.61|rtl/riscv-dbg/dmi_jtag.sv:89.7-89.61" *) { tdi, dtmcs_q[31:1] } : \$dtmcs_d$5 ;
  assign dtmcs_d = shift ? (* src = "rtl/riscv-dbg/dmi_jtag.sv:89.7-89.61|rtl/riscv-dbg/dmi_jtag.sv:88.5-90.8" *) \$dtmcs_d$7  : \$dtmcs_d$5 ;
  assign \$dtmcs_d$4  = dtmcs_select ? (* src = "rtl/riscv-dbg/dmi_jtag.sv:75.9-84.23|rtl/riscv-dbg/dmi_jtag.sv:74.7-85.10" *) { 20'h00001, error_q, 10'h071 } : dtmcs_q;
  assign \$dtmcs_d$5  = capture ? (* src = "rtl/riscv-dbg/dmi_jtag.sv:74.7-85.10|rtl/riscv-dbg/dmi_jtag.sv:73.5-86.8" *) \$dtmcs_d$4  : dtmcs_q;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:331.11" *)
  \dmi_cdc$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc  i_dmi_cdc (
    .clk_i(clk_i),
    .core_dmi_ready_i(dmi_req_ready_i),
    .core_dmi_ready_o(dmi_resp_ready_o),
    .core_dmi_req_o(dmi_req_o),
    .core_dmi_resp_i(dmi_resp_i),
    .core_dmi_rst_no(dmi_rst_no),
    .core_dmi_valid_i(dmi_resp_valid_i),
    .core_dmi_valid_o(dmi_req_valid_o),
    .jtag_dmi_cdc_clear_i(dmi_clear),
    .jtag_dmi_ready_i(1'h1),
    .jtag_dmi_ready_o(dmi_req_ready),
    .jtag_dmi_req_i({ address_q, dmi_req[33:32], data_q }),
    .jtag_dmi_resp_o(dmi_resp),
    .jtag_dmi_valid_i(dmi_req_valid),
    .jtag_dmi_valid_o(dmi_resp_valid),
    .rst_ni(rst_ni),
    .tck_i(tck),
    .trst_ni(trst_ni)
  );
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:308.5" *)
  \dmi_jtag_tap$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap  i_dmi_jtag_tap (
    .capture_o(capture),
    .dmi_clear_o(jtag_dmi_clear),
    .dmi_select_o(dmi_select),
    .dmi_tdo_i(dmi[0]),
    .dtmcs_select_o(dtmcs_select),
    .dtmcs_tdo_i(dtmcs_q[0]),
    .shift_o(shift),
    .tck_i(tck_i),
    .tck_o(tck),
    .td_i(td_i),
    .td_o(td_o),
    .tdi_o(tdi),
    .tdo_oe_o(tdo_oe_o),
    .testmode_i(testmode_i),
    .tms_i(tms_i),
    .trst_ni(trst_ni),
    .update_o(update)
  );
  assign \$error_d$59 [1] = 1'h1;
  assign { \$procmux$12968_Y [2], \$procmux$12968_Y [0] } = 2'h1;
  assign { dmi_req[40:34], dmi_req[31:0] } = { address_q, data_q };
endmodule

(* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:19.8" *)
module \dmi_jtag_tap$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap (testmode_i, tck_i, tms_i, trst_ni, td_i, td_o, tdo_oe_o, tck_o, dmi_clear_o, update_o, capture_o, shift_o, tdi_o, dtmcs_select_o, dtmcs_tdo_i, dmi_select_o, dmi_tdo_i);
  wire \$32y ;
  wire \$34y ;
  wire [1:0] \$35y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14539 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14542 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13397 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13445 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13447 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13449 ;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:132.7-132.42" *)
  wire \$bypass_d$11 ;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" *)
  wire \$bypass_d$13 ;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:137.7-137.43" *)
  wire \$bypass_d$16 ;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" *)
  wire \$bypass_d$18 ;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:131.7-131.49" *)
  wire [31:0] \$idcode_d$10 ;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" *)
  wire [31:0] \$idcode_d$12 ;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:136.7-136.65" *)
  wire [31:0] \$idcode_d$15 ;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" *)
  wire [31:0] \$idcode_d$17 ;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:88.5-90.8" *)
  wire [4:0] \$jtag_ir_shift_d$2 ;
  wire \$procmux$11735_Y ;
  wire \$procmux$11807_CMP ;
  wire \$procmux$11808_CMP ;
  wire \$procmux$11809_CMP ;
  wire \$procmux$11812_CMP ;
  wire \$procmux$11814_CMP ;
  wire \$procmux$11815_CMP ;
  wire \$procmux$11816_CMP ;
  wire \$procmux$11819_CMP ;
  wire \$procmux$11820_CMP ;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:124.16" *)
  wire bypass_d;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:124.26" *)
  reg bypass_q;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:76.9" *)
  wire capture_ir;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:40.23" *)
  output capture_o;
  wire capture_o;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:38.23" *)
  output dmi_clear_o;
  wire dmi_clear_o;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:46.23" *)
  output dmi_select_o;
  wire dmi_select_o;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:47.23" *)
  input dmi_tdo_i;
  wire dmi_tdo_i;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:43.23" *)
  output dtmcs_select_o;
  wire dtmcs_select_o;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:44.23" *)
  input dtmcs_tdo_i;
  wire dtmcs_tdo_i;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:120.16" *)
  wire [31:0] idcode_d;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:120.26" *)
  reg [31:0] idcode_q;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:121.16" *)
  wire idcode_select;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:75.25" *)
  wire [4:0] jtag_ir_d;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:75.36" *)
  reg [4:0] jtag_ir_q;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:73.25" *)
  wire [4:0] jtag_ir_shift_d;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:73.42" *)
  reg [4:0] jtag_ir_shift_q;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:76.21" *)
  wire shift_ir;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:41.23" *)
  output shift_o;
  wire shift_o;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:57.28" *)
  wire [3:0] tap_state_d;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:57.15" *)
  reg [3:0] tap_state_q;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:28.23" *)
  input tck_i;
  wire tck_i;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:188.9" *)
  wire tck_n;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:188.16" *)
  wire tck_ni;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:36.23" *)
  output tck_o;
  wire tck_o;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:31.23" *)
  input td_i;
  wire td_i;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:32.23" *)
  output td_o;
  reg td_o;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:42.23" *)
  output tdi_o;
  wire tdi_o;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:168.9" *)
  wire tdo_mux;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:33.23" *)
  output tdo_oe_o;
  reg tdo_oe_o;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:34.23" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:29.23" *)
  input tms_i;
  wire tms_i;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:30.23" *)
  input trst_ni;
  wire trst_ni;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:76.31" *)
  wire update_ir;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:39.23" *)
  output update_o;
  wire update_o;
  assign \$32y  = shift_ir | (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:209.20-209.39" *) shift_o;
  assign \$35y  = tms_i ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:235.23-235.59" *) 2'h2 : 2'h1;
  assign \$34y  = ~ (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:264.23-264.59" *) tms_i;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:104.3" *)
  always @(posedge tck_i, negedge trst_ni)
    if (!trst_ni) jtag_ir_shift_q <= 5'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14539 ) jtag_ir_shift_q <= jtag_ir_shift_d;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:104.3" *)
  always @(posedge tck_i, negedge trst_ni)
    if (!trst_ni) jtag_ir_q <= 5'h01;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14542 ) jtag_ir_q <= jtag_ir_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14539  = | { dmi_clear_o, capture_ir, shift_ir };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14542  = | { dmi_clear_o, update_ir };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13397  = | { idcode_select, dmi_select_o, dtmcs_select_o };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13445  = | { \$procmux$11820_CMP , update_ir, update_o };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13447  = | { shift_ir, capture_ir };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13449  = | { shift_o, capture_o };
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" *)
  always @(posedge tck_i, negedge trst_ni)
    if (!trst_ni) bypass_q <= 1'h0;
    else bypass_q <= bypass_d;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" *)
  always @(posedge tck_i, negedge trst_ni)
    if (!trst_ni) idcode_q <= 32'd202137011;
    else idcode_q <= idcode_d;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" *)
  always @(posedge tck_i, negedge trst_ni)
    if (!trst_ni) tap_state_q <= 4'h1;
    else tap_state_q <= tap_state_d;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:203.3" *)
  always @(posedge tck_n, negedge trst_ni)
    if (!trst_ni) td_o <= 1'h0;
    else td_o <= tdo_mux;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:203.3" *)
  always @(posedge tck_n, negedge trst_ni)
    if (!trst_ni) tdo_oe_o <= 1'h0;
    else tdo_oe_o <= \$32y ;
  function [0:0] \$procmux$11735 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:179.25-179.45|rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$11735  = b[0:0];
      3'b?1?:
        \$procmux$11735  = b[1:1];
      3'b1??:
        \$procmux$11735  = b[2:2];
      default:
        \$procmux$11735  = a;
    endcase
  endfunction
  assign \$procmux$11735_Y  = \$procmux$11735 (bypass_q, { idcode_q[0], dtmcs_tdo_i, dmi_tdo_i }, { idcode_select, dtmcs_select_o, dmi_select_o });
  assign dmi_select_o = jtag_ir_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:179.25-179.45|rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" *) 5'h11;
  assign dtmcs_select_o = jtag_ir_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:178.25-178.47|rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" *) 5'h10;
  assign idcode_select = jtag_ir_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:177.25-177.47|rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" *) 1'h1;
  assign tdo_mux = shift_ir ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:173.7-173.36|rtl/riscv-dbg/dmi_jtag_tap.sv:172.5-182.8" *) jtag_ir_shift_q[0] : \$procmux$11735_Y ;
  assign bypass_d = dmi_clear_o ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:140.27-144.8|rtl/riscv-dbg/dmi_jtag_tap.sv:140.5-144.8" *) 1'h0 : \$bypass_d$18 ;
  assign idcode_d = dmi_clear_o ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:140.27-144.8|rtl/riscv-dbg/dmi_jtag_tap.sv:140.5-144.8" *) 32'd202137011 : \$idcode_d$17 ;
  assign \$bypass_d$16  = \$auto$opt_reduce.cc:137:opt_pmux$13397  ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:137.27-137.43|rtl/riscv-dbg/dmi_jtag_tap.sv:137.7-137.43" *) \$bypass_d$13  : td_i;
  assign \$idcode_d$15  = idcode_select ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:136.27-136.65|rtl/riscv-dbg/dmi_jtag_tap.sv:136.7-136.65" *) { td_i, idcode_q[31:1] } : \$idcode_d$12 ;
  assign \$bypass_d$18  = shift_o ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.19-138.8|rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" *) \$bypass_d$16  : \$bypass_d$13 ;
  assign \$idcode_d$17  = shift_o ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.19-138.8|rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" *) \$idcode_d$15  : \$idcode_d$12 ;
  assign \$bypass_d$11  = \$auto$opt_reduce.cc:137:opt_pmux$13397  & (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:132.26-132.42|rtl/riscv-dbg/dmi_jtag_tap.sv:132.7-132.42" *) bypass_q;
  assign \$idcode_d$10  = idcode_select ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:131.26-131.49|rtl/riscv-dbg/dmi_jtag_tap.sv:131.7-131.49" *) 32'd202137011 : idcode_q;
  assign \$bypass_d$13  = capture_o ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.21-133.8|rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" *) \$bypass_d$11  : bypass_q;
  assign \$idcode_d$12  = capture_o ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.21-133.8|rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" *) \$idcode_d$10  : idcode_q;
  function [3:0] \$procmux$11805 ;
    input [3:0] a;
    input [43:0] b;
    input [10:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:296.17-299.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *)
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \$procmux$11805  = b[3:0];
      11'b?????????1?:
        \$procmux$11805  = b[7:4];
      11'b????????1??:
        \$procmux$11805  = b[11:8];
      11'b???????1???:
        \$procmux$11805  = b[15:12];
      11'b??????1????:
        \$procmux$11805  = b[19:16];
      11'b?????1?????:
        \$procmux$11805  = b[23:20];
      11'b????1??????:
        \$procmux$11805  = b[27:24];
      11'b???1???????:
        \$procmux$11805  = b[31:28];
      11'b??1????????:
        \$procmux$11805  = b[35:32];
      11'b?1?????????:
        \$procmux$11805  = b[39:36];
      11'b1??????????:
        \$procmux$11805  = b[43:40];
      default:
        \$procmux$11805  = a;
    endcase
  endfunction
  assign tap_state_d = \$procmux$11805 ({ 3'h0, \$34y  }, { \$35y [1], 1'h0, \$35y [0], 4'ha, tms_i, \$35y , \$35y [0], 4'h3, tms_i, \$35y , 2'h0, \$34y , 1'h0, \$34y , 2'h1, \$35y , \$35y [0], 2'h3, tms_i, 3'h7, \$35y , 1'h1, tms_i, 4'hc, \$35y  }, { \$procmux$11819_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13449 , \$procmux$11816_CMP , \$procmux$11815_CMP , \$procmux$11814_CMP , \$procmux$11812_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13447 , \$procmux$11809_CMP , \$procmux$11808_CMP , \$procmux$11807_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13445  });
  assign update_ir = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:296.17-299.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'hf;
  assign \$procmux$11807_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:290.9-290.52|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'he;
  assign \$procmux$11808_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:287.9-287.51|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'hd;
  assign \$procmux$11809_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:283.9-283.52|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'hc;
  assign shift_ir = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:278.16-281.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'hb;
  assign capture_ir = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:270.18-273.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'ha;
  assign \$procmux$11812_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:264.9-264.60|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'h9;
  assign update_o = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:258.17-261.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'h8;
  assign \$procmux$11814_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:256.9-256.52|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 3'h7;
  assign \$procmux$11815_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:253.9-253.51|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 3'h6;
  assign \$procmux$11816_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:250.9-250.52|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 3'h5;
  assign shift_o = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:245.16-248.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 3'h4;
  assign capture_o = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:241.18-244.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 2'h3;
  assign \$procmux$11819_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:239.9-239.58|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 2'h2;
  assign \$procmux$11820_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:235.9-235.60|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 1'h1;
  assign dmi_clear_o = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:230.23-233.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) tap_state_q;
  assign jtag_ir_d = dmi_clear_o ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:97.27-101.8|rtl/riscv-dbg/dmi_jtag_tap.sv:97.5-101.8" *) 5'h01 : jtag_ir_shift_q;
  assign jtag_ir_shift_d = dmi_clear_o ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:97.27-101.8|rtl/riscv-dbg/dmi_jtag_tap.sv:97.5-101.8" *) 5'h00 : \$jtag_ir_shift_d$2 ;
  assign \$jtag_ir_shift_d$2  = capture_ir ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:89.7-89.45|rtl/riscv-dbg/dmi_jtag_tap.sv:88.5-90.8" *) 5'h05 : { td_i, jtag_ir_shift_q[4:1] };
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:195.15" *)
  \tc_clk_mux2$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_dft_tck_mux  i_dft_tck_mux (
    .clk0_i(tck_ni),
    .clk1_i(tck_i),
    .clk_o(tck_n),
    .clk_sel_i(testmode_i)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:190.19" *)
  \tc_clk_inverter$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_tck_inv  i_tck_inv (
    .clk_i(tck_i),
    .clk_o(tck_ni)
  );
  assign tck_o = tck_i;
  assign tdi_o = td_i;
endmodule

(* src = "rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_csrs.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$10y ;
  wire [67:0] \$15y ;
  wire \$26y ;
  wire \$27y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$38y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14545 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14548 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14550 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14555 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14552 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$14985 ;
  wire [1:0] \$procmux$1899_Y ;
  wire \$procmux$1902_Y ;
  wire \$procmux$1905_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/fifo_v3.sv:32.19" *)
  input [33:0] data_i;
  wire [33:0] data_i;
  (* src = "rtl/common_cells/fifo_v3.sv:35.19" *)
  output [33:0] data_o;
  wire [33:0] data_o;
  (* src = "rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "rtl/common_cells/fifo_v3.sv:49.29" *)
  wire [67:0] mem_n;
  (* src = "rtl/common_cells/fifo_v3.sv:49.36" *)
  reg [67:0] mem_q;
  (* src = "rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "rtl/common_cells/fifo_v3.sv:44.30" *)
  wire read_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.46" *)
  reg read_pointer_q;
  (* src = "rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  (* src = "rtl/common_cells/fifo_v3.sv:44.62" *)
  wire write_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.79" *)
  reg write_pointer_q;
  assign full_o = status_cnt_q == (* src = "rtl/common_cells/fifo_v3.sv:57.32-57.71" *) 2'h2;
  assign empty_o = ! (* src = "rtl/common_cells/fifo_v3.sv:58.32-58.49" *) status_cnt_q;
  assign \$10y  = push_i && (* src = "rtl/common_cells/fifo_v3.sv:73.13-73.30" *) \$35y ;
  (* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" *)
  \$bwmux  #(
    .WIDTH(32'd68)
  ) \$17  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33] }),
    .Y(mem_n)
  );
  assign write_pointer_n = write_pointer_q + (* src = "rtl/common_cells/fifo_v3.sv:83.35-83.54" *) 1'h1;
  assign \$26y  = ~ (* src = "rtl/common_cells/fifo_v3.sv:88.22-88.30" *) empty_o;
  assign \$27y  = pop_i && (* src = "rtl/common_cells/fifo_v3.sv:88.13-88.30" *) \$26y ;
  assign read_pointer_n = read_pointer_q + (* src = "rtl/common_cells/fifo_v3.sv:95.34-95.52" *) 1'h1;
  assign status_cnt_n = status_cnt_q - (* src = "rtl/common_cells/fifo_v3.sv:97.30-97.46" *) { \$auto$rtlil.cc:3092:Mux$14985 [1], 1'h1 };
  assign \$34y  = push_i && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.28" *) pop_i;
  assign \$35y  = ~ (* src = "rtl/common_cells/fifo_v3.sv:101.33-101.40" *) full_o;
  assign \$36y  = \$34y  && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.40" *) \$35y ;
  assign \$38y  = \$36y  && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.52" *) \$26y ;
  assign data_o = read_pointer_q ? (* src = "rtl/common_cells/fifo_v3.sv:68.51-68.72" *) mem_q[67:34] : mem_q[33:0];
  assign \$15y [33] = write_pointer_q == (* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" *) 1'h0;
  assign \$15y [67] = write_pointer_q == (* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" *) 1'h1;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) write_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14545 ) write_pointer_q <= \$procmux$1902_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14552 ) status_cnt_q <= \$procmux$1899_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) read_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14555 ) read_pointer_q <= \$procmux$1905_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[67:34] <= 34'h000000000;
    else if (\$10y ) mem_q[67:34] <= mem_n[67:34];
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[33:0] <= 34'h000000000;
    else if (\$10y ) mem_q[33:0] <= mem_n[33:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14545  = | { flush_i, \$10y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14548  = | { flush_i, \$38y , \$27y , \$10y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14550  = { flush_i, \$38y  } != 2'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14555  = | { flush_i, \$27y  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14552  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14550 , \$auto$opt_dff.cc:194:make_patterns_logic$14548  };
  assign \$auto$rtlil.cc:3092:Mux$14985 [1] = ~ \$27y ;
  assign \$procmux$1899_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$procmux$1902_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : write_pointer_n;
  assign \$procmux$1905_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : read_pointer_n;
  assign { \$15y [66:34], \$15y [32:0] } = { \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33] };
  assign \$auto$rtlil.cc:3092:Mux$14985 [0] = 1'h1;
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$10y ;
  wire [3:0] \$15y ;
  wire \$26y ;
  wire \$27y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$38y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14560 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14563 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14565 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14570 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14567 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$14990 ;
  wire [1:0] \$procmux$6129_Y ;
  wire \$procmux$6132_Y ;
  wire \$procmux$6135_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/fifo_v3.sv:32.19" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* src = "rtl/common_cells/fifo_v3.sv:35.19" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "rtl/common_cells/fifo_v3.sv:49.29" *)
  wire [3:0] mem_n;
  (* src = "rtl/common_cells/fifo_v3.sv:49.36" *)
  reg [3:0] mem_q;
  (* src = "rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "rtl/common_cells/fifo_v3.sv:44.30" *)
  wire read_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.46" *)
  reg read_pointer_q;
  (* src = "rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  (* src = "rtl/common_cells/fifo_v3.sv:44.62" *)
  wire write_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.79" *)
  reg write_pointer_q;
  assign full_o = status_cnt_q == (* src = "rtl/common_cells/fifo_v3.sv:57.32-57.71" *) 2'h2;
  assign empty_o = ! (* src = "rtl/common_cells/fifo_v3.sv:58.32-58.49" *) status_cnt_q;
  assign \$10y  = push_i && (* src = "rtl/common_cells/fifo_v3.sv:73.13-73.30" *) \$35y ;
  (* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" *)
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$17  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$15y [3], \$15y [3], \$15y [1], \$15y [1] }),
    .Y(mem_n)
  );
  assign write_pointer_n = write_pointer_q + (* src = "rtl/common_cells/fifo_v3.sv:83.35-83.54" *) 1'h1;
  assign \$26y  = ~ (* src = "rtl/common_cells/fifo_v3.sv:88.22-88.30" *) empty_o;
  assign \$27y  = pop_i && (* src = "rtl/common_cells/fifo_v3.sv:88.13-88.30" *) \$26y ;
  assign read_pointer_n = read_pointer_q + (* src = "rtl/common_cells/fifo_v3.sv:95.34-95.52" *) 1'h1;
  assign status_cnt_n = status_cnt_q - (* src = "rtl/common_cells/fifo_v3.sv:97.30-97.46" *) { \$auto$rtlil.cc:3092:Mux$14990 [1], 1'h1 };
  assign \$34y  = push_i && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.28" *) pop_i;
  assign \$35y  = ~ (* src = "rtl/common_cells/fifo_v3.sv:101.33-101.40" *) full_o;
  assign \$36y  = \$34y  && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.40" *) \$35y ;
  assign \$38y  = \$36y  && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.52" *) \$26y ;
  assign data_o = read_pointer_q ? (* src = "rtl/common_cells/fifo_v3.sv:68.51-68.72" *) mem_q[3:2] : mem_q[1:0];
  assign \$15y [1] = write_pointer_q == (* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" *) 1'h0;
  assign \$15y [3] = write_pointer_q == (* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" *) 1'h1;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) write_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14560 ) write_pointer_q <= \$procmux$6132_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14567 ) status_cnt_q <= \$procmux$6129_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) read_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14570 ) read_pointer_q <= \$procmux$6135_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[3:2] <= 2'h0;
    else if (\$10y ) mem_q[3:2] <= mem_n[3:2];
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[1:0] <= 2'h0;
    else if (\$10y ) mem_q[1:0] <= mem_n[1:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14560  = | { flush_i, \$10y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14563  = | { flush_i, \$38y , \$27y , \$10y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14565  = { flush_i, \$38y  } != 2'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14570  = | { flush_i, \$27y  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14567  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14565 , \$auto$opt_dff.cc:194:make_patterns_logic$14563  };
  assign \$auto$rtlil.cc:3092:Mux$14990 [1] = ~ \$27y ;
  assign \$procmux$6129_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$procmux$6132_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : write_pointer_n;
  assign \$procmux$6135_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : read_pointer_n;
  assign { \$15y [2], \$15y [0] } = { \$15y [3], \$15y [1] };
  assign \$auto$rtlil.cc:3092:Mux$14990 [0] = 1'h1;
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$10y ;
  wire [3:0] \$15y ;
  wire \$26y ;
  wire \$27y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$38y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14575 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14578 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14580 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14585 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14582 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$14995 ;
  wire [1:0] \$procmux$6076_Y ;
  wire \$procmux$6079_Y ;
  wire \$procmux$6082_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/fifo_v3.sv:32.19" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* src = "rtl/common_cells/fifo_v3.sv:35.19" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "rtl/common_cells/fifo_v3.sv:49.29" *)
  wire [3:0] mem_n;
  (* src = "rtl/common_cells/fifo_v3.sv:49.36" *)
  reg [3:0] mem_q;
  (* src = "rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "rtl/common_cells/fifo_v3.sv:44.30" *)
  wire read_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.46" *)
  reg read_pointer_q;
  (* src = "rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  (* src = "rtl/common_cells/fifo_v3.sv:44.62" *)
  wire write_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.79" *)
  reg write_pointer_q;
  assign full_o = status_cnt_q == (* src = "rtl/common_cells/fifo_v3.sv:57.32-57.71" *) 2'h2;
  assign empty_o = ! (* src = "rtl/common_cells/fifo_v3.sv:58.32-58.49" *) status_cnt_q;
  assign \$10y  = push_i && (* src = "rtl/common_cells/fifo_v3.sv:73.13-73.30" *) \$35y ;
  (* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" *)
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$17  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$15y [3], \$15y [3], \$15y [1], \$15y [1] }),
    .Y(mem_n)
  );
  assign write_pointer_n = write_pointer_q + (* src = "rtl/common_cells/fifo_v3.sv:83.35-83.54" *) 1'h1;
  assign \$26y  = ~ (* src = "rtl/common_cells/fifo_v3.sv:88.22-88.30" *) empty_o;
  assign \$27y  = pop_i && (* src = "rtl/common_cells/fifo_v3.sv:88.13-88.30" *) \$26y ;
  assign read_pointer_n = read_pointer_q + (* src = "rtl/common_cells/fifo_v3.sv:95.34-95.52" *) 1'h1;
  assign status_cnt_n = status_cnt_q - (* src = "rtl/common_cells/fifo_v3.sv:97.30-97.46" *) { \$auto$rtlil.cc:3092:Mux$14995 [1], 1'h1 };
  assign \$34y  = push_i && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.28" *) pop_i;
  assign \$35y  = ~ (* src = "rtl/common_cells/fifo_v3.sv:101.33-101.40" *) full_o;
  assign \$36y  = \$34y  && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.40" *) \$35y ;
  assign \$38y  = \$36y  && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.52" *) \$26y ;
  assign data_o = read_pointer_q ? (* src = "rtl/common_cells/fifo_v3.sv:68.51-68.72" *) mem_q[3:2] : mem_q[1:0];
  assign \$15y [1] = write_pointer_q == (* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" *) 1'h0;
  assign \$15y [3] = write_pointer_q == (* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" *) 1'h1;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) write_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14575 ) write_pointer_q <= \$procmux$6079_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14582 ) status_cnt_q <= \$procmux$6076_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) read_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14585 ) read_pointer_q <= \$procmux$6082_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[3:2] <= 2'h0;
    else if (\$10y ) mem_q[3:2] <= mem_n[3:2];
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[1:0] <= 2'h0;
    else if (\$10y ) mem_q[1:0] <= mem_n[1:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14575  = | { flush_i, \$10y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14578  = | { flush_i, \$38y , \$27y , \$10y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14580  = { flush_i, \$38y  } != 2'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14585  = | { flush_i, \$27y  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14582  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14580 , \$auto$opt_dff.cc:194:make_patterns_logic$14578  };
  assign \$auto$rtlil.cc:3092:Mux$14995 [1] = ~ \$27y ;
  assign \$procmux$6076_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$procmux$6079_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : write_pointer_n;
  assign \$procmux$6082_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : read_pointer_n;
  assign { \$15y [2], \$15y [0] } = { \$15y [3], \$15y [1] };
  assign \$auto$rtlil.cc:3092:Mux$14995 [0] = 1'h1;
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$10y ;
  wire [3:0] \$15y ;
  wire \$26y ;
  wire \$27y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$38y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14590 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14593 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14595 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14600 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14597 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$15000 ;
  wire [1:0] \$procmux$6023_Y ;
  wire \$procmux$6026_Y ;
  wire \$procmux$6029_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/fifo_v3.sv:32.19" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* src = "rtl/common_cells/fifo_v3.sv:35.19" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "rtl/common_cells/fifo_v3.sv:49.29" *)
  wire [3:0] mem_n;
  (* src = "rtl/common_cells/fifo_v3.sv:49.36" *)
  reg [3:0] mem_q;
  (* src = "rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "rtl/common_cells/fifo_v3.sv:44.30" *)
  wire read_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.46" *)
  reg read_pointer_q;
  (* src = "rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  (* src = "rtl/common_cells/fifo_v3.sv:44.62" *)
  wire write_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.79" *)
  reg write_pointer_q;
  assign full_o = status_cnt_q == (* src = "rtl/common_cells/fifo_v3.sv:57.32-57.71" *) 2'h2;
  assign empty_o = ! (* src = "rtl/common_cells/fifo_v3.sv:58.32-58.49" *) status_cnt_q;
  assign \$10y  = push_i && (* src = "rtl/common_cells/fifo_v3.sv:73.13-73.30" *) \$35y ;
  (* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" *)
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$17  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$15y [3], \$15y [3], \$15y [1], \$15y [1] }),
    .Y(mem_n)
  );
  assign write_pointer_n = write_pointer_q + (* src = "rtl/common_cells/fifo_v3.sv:83.35-83.54" *) 1'h1;
  assign \$26y  = ~ (* src = "rtl/common_cells/fifo_v3.sv:88.22-88.30" *) empty_o;
  assign \$27y  = pop_i && (* src = "rtl/common_cells/fifo_v3.sv:88.13-88.30" *) \$26y ;
  assign read_pointer_n = read_pointer_q + (* src = "rtl/common_cells/fifo_v3.sv:95.34-95.52" *) 1'h1;
  assign status_cnt_n = status_cnt_q - (* src = "rtl/common_cells/fifo_v3.sv:97.30-97.46" *) { \$auto$rtlil.cc:3092:Mux$15000 [1], 1'h1 };
  assign \$34y  = push_i && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.28" *) pop_i;
  assign \$35y  = ~ (* src = "rtl/common_cells/fifo_v3.sv:101.33-101.40" *) full_o;
  assign \$36y  = \$34y  && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.40" *) \$35y ;
  assign \$38y  = \$36y  && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.52" *) \$26y ;
  assign data_o = read_pointer_q ? (* src = "rtl/common_cells/fifo_v3.sv:68.51-68.72" *) mem_q[3:2] : mem_q[1:0];
  assign \$15y [1] = write_pointer_q == (* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" *) 1'h0;
  assign \$15y [3] = write_pointer_q == (* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" *) 1'h1;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) write_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14590 ) write_pointer_q <= \$procmux$6026_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14597 ) status_cnt_q <= \$procmux$6023_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) read_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14600 ) read_pointer_q <= \$procmux$6029_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[3:2] <= 2'h0;
    else if (\$10y ) mem_q[3:2] <= mem_n[3:2];
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[1:0] <= 2'h0;
    else if (\$10y ) mem_q[1:0] <= mem_n[1:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14590  = | { flush_i, \$10y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14593  = | { flush_i, \$38y , \$27y , \$10y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14595  = { flush_i, \$38y  } != 2'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14600  = | { flush_i, \$27y  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14597  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14595 , \$auto$opt_dff.cc:194:make_patterns_logic$14593  };
  assign \$auto$rtlil.cc:3092:Mux$15000 [1] = ~ \$27y ;
  assign \$procmux$6023_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$procmux$6026_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : write_pointer_n;
  assign \$procmux$6029_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : read_pointer_n;
  assign { \$15y [2], \$15y [0] } = { \$15y [3], \$15y [1] };
  assign \$auto$rtlil.cc:3092:Mux$15000 [0] = 1'h1;
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$10y ;
  wire [3:0] \$15y ;
  wire \$26y ;
  wire \$27y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$38y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14605 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14608 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14610 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14615 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14612 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$15005 ;
  wire [1:0] \$procmux$5970_Y ;
  wire \$procmux$5973_Y ;
  wire \$procmux$5976_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/fifo_v3.sv:32.19" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* src = "rtl/common_cells/fifo_v3.sv:35.19" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "rtl/common_cells/fifo_v3.sv:49.29" *)
  wire [3:0] mem_n;
  (* src = "rtl/common_cells/fifo_v3.sv:49.36" *)
  reg [3:0] mem_q;
  (* src = "rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "rtl/common_cells/fifo_v3.sv:44.30" *)
  wire read_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.46" *)
  reg read_pointer_q;
  (* src = "rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  (* src = "rtl/common_cells/fifo_v3.sv:44.62" *)
  wire write_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.79" *)
  reg write_pointer_q;
  assign full_o = status_cnt_q == (* src = "rtl/common_cells/fifo_v3.sv:57.32-57.71" *) 2'h2;
  assign empty_o = ! (* src = "rtl/common_cells/fifo_v3.sv:58.32-58.49" *) status_cnt_q;
  assign \$10y  = push_i && (* src = "rtl/common_cells/fifo_v3.sv:73.13-73.30" *) \$35y ;
  (* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" *)
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$17  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$15y [3], \$15y [3], \$15y [1], \$15y [1] }),
    .Y(mem_n)
  );
  assign write_pointer_n = write_pointer_q + (* src = "rtl/common_cells/fifo_v3.sv:83.35-83.54" *) 1'h1;
  assign \$26y  = ~ (* src = "rtl/common_cells/fifo_v3.sv:88.22-88.30" *) empty_o;
  assign \$27y  = pop_i && (* src = "rtl/common_cells/fifo_v3.sv:88.13-88.30" *) \$26y ;
  assign read_pointer_n = read_pointer_q + (* src = "rtl/common_cells/fifo_v3.sv:95.34-95.52" *) 1'h1;
  assign status_cnt_n = status_cnt_q - (* src = "rtl/common_cells/fifo_v3.sv:97.30-97.46" *) { \$auto$rtlil.cc:3092:Mux$15005 [1], 1'h1 };
  assign \$34y  = push_i && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.28" *) pop_i;
  assign \$35y  = ~ (* src = "rtl/common_cells/fifo_v3.sv:101.33-101.40" *) full_o;
  assign \$36y  = \$34y  && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.40" *) \$35y ;
  assign \$38y  = \$36y  && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.52" *) \$26y ;
  assign data_o = read_pointer_q ? (* src = "rtl/common_cells/fifo_v3.sv:68.51-68.72" *) mem_q[3:2] : mem_q[1:0];
  assign \$15y [1] = write_pointer_q == (* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" *) 1'h0;
  assign \$15y [3] = write_pointer_q == (* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" *) 1'h1;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) write_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14605 ) write_pointer_q <= \$procmux$5973_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14612 ) status_cnt_q <= \$procmux$5970_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) read_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14615 ) read_pointer_q <= \$procmux$5976_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[3:2] <= 2'h0;
    else if (\$10y ) mem_q[3:2] <= mem_n[3:2];
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[1:0] <= 2'h0;
    else if (\$10y ) mem_q[1:0] <= mem_n[1:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14605  = | { flush_i, \$10y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14608  = | { flush_i, \$38y , \$27y , \$10y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14610  = { flush_i, \$38y  } != 2'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14615  = | { flush_i, \$27y  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14612  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14610 , \$auto$opt_dff.cc:194:make_patterns_logic$14608  };
  assign \$auto$rtlil.cc:3092:Mux$15005 [1] = ~ \$27y ;
  assign \$procmux$5970_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$procmux$5973_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : write_pointer_n;
  assign \$procmux$5976_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : read_pointer_n;
  assign { \$15y [2], \$15y [0] } = { \$15y [3], \$15y [1] };
  assign \$auto$rtlil.cc:3092:Mux$15005 [0] = 1'h1;
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$10y ;
  wire [3:0] \$15y ;
  wire \$26y ;
  wire \$27y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$38y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14620 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14623 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14625 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14630 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14627 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$15010 ;
  wire [1:0] \$procmux$5917_Y ;
  wire \$procmux$5920_Y ;
  wire \$procmux$5923_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/fifo_v3.sv:32.19" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* src = "rtl/common_cells/fifo_v3.sv:35.19" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "rtl/common_cells/fifo_v3.sv:49.29" *)
  wire [3:0] mem_n;
  (* src = "rtl/common_cells/fifo_v3.sv:49.36" *)
  reg [3:0] mem_q;
  (* src = "rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "rtl/common_cells/fifo_v3.sv:44.30" *)
  wire read_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.46" *)
  reg read_pointer_q;
  (* src = "rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  (* src = "rtl/common_cells/fifo_v3.sv:44.62" *)
  wire write_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.79" *)
  reg write_pointer_q;
  assign full_o = status_cnt_q == (* src = "rtl/common_cells/fifo_v3.sv:57.32-57.71" *) 2'h2;
  assign empty_o = ! (* src = "rtl/common_cells/fifo_v3.sv:58.32-58.49" *) status_cnt_q;
  assign \$10y  = push_i && (* src = "rtl/common_cells/fifo_v3.sv:73.13-73.30" *) \$35y ;
  (* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" *)
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$17  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$15y [3], \$15y [3], \$15y [1], \$15y [1] }),
    .Y(mem_n)
  );
  assign write_pointer_n = write_pointer_q + (* src = "rtl/common_cells/fifo_v3.sv:83.35-83.54" *) 1'h1;
  assign \$26y  = ~ (* src = "rtl/common_cells/fifo_v3.sv:88.22-88.30" *) empty_o;
  assign \$27y  = pop_i && (* src = "rtl/common_cells/fifo_v3.sv:88.13-88.30" *) \$26y ;
  assign read_pointer_n = read_pointer_q + (* src = "rtl/common_cells/fifo_v3.sv:95.34-95.52" *) 1'h1;
  assign status_cnt_n = status_cnt_q - (* src = "rtl/common_cells/fifo_v3.sv:97.30-97.46" *) { \$auto$rtlil.cc:3092:Mux$15010 [1], 1'h1 };
  assign \$34y  = push_i && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.28" *) pop_i;
  assign \$35y  = ~ (* src = "rtl/common_cells/fifo_v3.sv:101.33-101.40" *) full_o;
  assign \$36y  = \$34y  && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.40" *) \$35y ;
  assign \$38y  = \$36y  && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.52" *) \$26y ;
  assign data_o = read_pointer_q ? (* src = "rtl/common_cells/fifo_v3.sv:68.51-68.72" *) mem_q[3:2] : mem_q[1:0];
  assign \$15y [1] = write_pointer_q == (* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" *) 1'h0;
  assign \$15y [3] = write_pointer_q == (* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" *) 1'h1;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) write_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14620 ) write_pointer_q <= \$procmux$5920_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14627 ) status_cnt_q <= \$procmux$5917_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) read_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14630 ) read_pointer_q <= \$procmux$5923_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[3:2] <= 2'h0;
    else if (\$10y ) mem_q[3:2] <= mem_n[3:2];
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[1:0] <= 2'h0;
    else if (\$10y ) mem_q[1:0] <= mem_n[1:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14620  = | { flush_i, \$10y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14623  = | { flush_i, \$38y , \$27y , \$10y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14625  = { flush_i, \$38y  } != 2'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14630  = | { flush_i, \$27y  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14627  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14623 , \$auto$opt_dff.cc:194:make_patterns_logic$14625  };
  assign \$auto$rtlil.cc:3092:Mux$15010 [1] = ~ \$27y ;
  assign \$procmux$5917_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$procmux$5920_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : write_pointer_n;
  assign \$procmux$5923_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : read_pointer_n;
  assign { \$15y [2], \$15y [0] } = { \$15y [3], \$15y [1] };
  assign \$auto$rtlil.cc:3092:Mux$15010 [0] = 1'h1;
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_periph_err.i_id_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$23y ;
  wire \$24y ;
  wire \$31y ;
  wire \$32y ;
  wire \$33y ;
  wire \$35y ;
  wire \$46y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14638 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14640 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14642 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$15015 ;
  wire [1:0] \$procmux$11482_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/fifo_v3.sv:32.19" *)
  input [2:0] data_i;
  wire [2:0] data_i;
  (* src = "rtl/common_cells/fifo_v3.sv:35.19" *)
  output [2:0] data_o;
  reg [2:0] data_o;
  (* src = "rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  assign full_o = status_cnt_q == (* src = "rtl/common_cells/fifo_v3.sv:57.32-57.71" *) 1'h1;
  assign empty_o = ! (* src = "rtl/common_cells/fifo_v3.sv:58.32-58.49" *) status_cnt_q;
  assign \$23y  = ~ (* src = "rtl/common_cells/fifo_v3.sv:88.22-88.30" *) empty_o;
  assign \$24y  = pop_i && (* src = "rtl/common_cells/fifo_v3.sv:88.13-88.30" *) \$23y ;
  assign status_cnt_n = status_cnt_q - (* src = "rtl/common_cells/fifo_v3.sv:97.30-97.46" *) { \$auto$rtlil.cc:3092:Mux$15015 [1], 1'h1 };
  assign \$31y  = push_i && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.28" *) pop_i;
  assign \$32y  = ~ (* src = "rtl/common_cells/fifo_v3.sv:101.33-101.40" *) full_o;
  assign \$33y  = \$31y  && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.40" *) \$32y ;
  assign \$35y  = \$33y  && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.52" *) \$23y ;
  assign \$46y  = push_i && (* src = "rtl/common_cells/fifo_v3.sv:73.13-73.30" *) \$32y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14642 ) status_cnt_q <= \$procmux$11482_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_o <= 3'h0;
    else if (\$46y ) data_o <= data_i;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14638  = | { \$35y , flush_i, \$24y , \$46y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14640  = { \$35y , flush_i } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14642  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14640 , \$auto$opt_dff.cc:194:make_patterns_logic$14638  };
  assign \$auto$rtlil.cc:3092:Mux$15015 [1] = ~ \$24y ;
  assign \$procmux$11482_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$auto$rtlil.cc:3092:Mux$15015 [0] = 1'h1;
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_xbar_err.i_id_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$23y ;
  wire \$24y ;
  wire \$31y ;
  wire \$32y ;
  wire \$33y ;
  wire \$35y ;
  wire \$46y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14652 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14654 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14656 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$15020 ;
  wire [1:0] \$procmux$11613_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/fifo_v3.sv:32.19" *)
  input [2:0] data_i;
  wire [2:0] data_i;
  (* src = "rtl/common_cells/fifo_v3.sv:35.19" *)
  output [2:0] data_o;
  reg [2:0] data_o;
  (* src = "rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  assign full_o = status_cnt_q == (* src = "rtl/common_cells/fifo_v3.sv:57.32-57.71" *) 1'h1;
  assign empty_o = ! (* src = "rtl/common_cells/fifo_v3.sv:58.32-58.49" *) status_cnt_q;
  assign \$23y  = ~ (* src = "rtl/common_cells/fifo_v3.sv:88.22-88.30" *) empty_o;
  assign \$24y  = pop_i && (* src = "rtl/common_cells/fifo_v3.sv:88.13-88.30" *) \$23y ;
  assign status_cnt_n = status_cnt_q - (* src = "rtl/common_cells/fifo_v3.sv:97.30-97.46" *) { \$auto$rtlil.cc:3092:Mux$15020 [1], 1'h1 };
  assign \$31y  = push_i && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.28" *) pop_i;
  assign \$32y  = ~ (* src = "rtl/common_cells/fifo_v3.sv:101.33-101.40" *) full_o;
  assign \$33y  = \$31y  && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.40" *) \$32y ;
  assign \$35y  = \$33y  && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.52" *) \$23y ;
  assign \$46y  = push_i && (* src = "rtl/common_cells/fifo_v3.sv:73.13-73.30" *) \$32y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14656 ) status_cnt_q <= \$procmux$11613_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_o <= 3'h0;
    else if (\$46y ) data_o <= data_i;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14652  = | { \$35y , flush_i, \$24y , \$46y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14654  = { \$35y , flush_i } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14656  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14654 , \$auto$opt_dff.cc:194:make_patterns_logic$14652  };
  assign \$auto$rtlil.cc:3092:Mux$15020 [1] = ~ \$24y ;
  assign \$procmux$11613_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$auto$rtlil.cc:3092:Mux$15020 [0] = 1'h1;
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_user.i_user_err.i_id_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$23y ;
  wire \$24y ;
  wire \$31y ;
  wire \$32y ;
  wire \$33y ;
  wire \$35y ;
  wire \$46y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14666 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14668 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14670 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$15025 ;
  wire [1:0] \$procmux$10815_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/fifo_v3.sv:32.19" *)
  input [2:0] data_i;
  wire [2:0] data_i;
  (* src = "rtl/common_cells/fifo_v3.sv:35.19" *)
  output [2:0] data_o;
  reg [2:0] data_o;
  (* src = "rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  assign full_o = status_cnt_q == (* src = "rtl/common_cells/fifo_v3.sv:57.32-57.71" *) 1'h1;
  assign empty_o = ! (* src = "rtl/common_cells/fifo_v3.sv:58.32-58.49" *) status_cnt_q;
  assign \$23y  = ~ (* src = "rtl/common_cells/fifo_v3.sv:88.22-88.30" *) empty_o;
  assign \$24y  = pop_i && (* src = "rtl/common_cells/fifo_v3.sv:88.13-88.30" *) \$23y ;
  assign status_cnt_n = status_cnt_q - (* src = "rtl/common_cells/fifo_v3.sv:97.30-97.46" *) { \$auto$rtlil.cc:3092:Mux$15025 [1], 1'h1 };
  assign \$31y  = push_i && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.28" *) pop_i;
  assign \$32y  = ~ (* src = "rtl/common_cells/fifo_v3.sv:101.33-101.40" *) full_o;
  assign \$33y  = \$31y  && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.40" *) \$32y ;
  assign \$35y  = \$33y  && (* src = "rtl/common_cells/fifo_v3.sv:101.13-101.52" *) \$23y ;
  assign \$46y  = push_i && (* src = "rtl/common_cells/fifo_v3.sv:73.13-73.30" *) \$32y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14670 ) status_cnt_q <= \$procmux$10815_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_o <= 3'h0;
    else if (\$46y ) data_o <= data_i;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14666  = | { \$35y , flush_i, \$24y , \$46y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14668  = { \$35y , flush_i } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14670  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14668 , \$auto$opt_dff.cc:194:make_patterns_logic$14666  };
  assign \$auto$rtlil.cc:3092:Mux$15025 [1] = ~ \$24y ;
  assign \$procmux$10815_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$auto$rtlil.cc:3092:Mux$15025 [0] = 1'h1;
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "rtl/gpio/gpio.sv:12.8" *)
module \gpio$croc_chip.i_croc_soc.i_croc.i_gpio (clk_i, rst_ni, gpio_i, gpio_o, gpio_out_en_o, gpio_in_sync_o, obi_req_i, obi_rsp_o, interrupt_o);
  wire \$100y ;
  wire \$103y ;
  wire \$109y ;
  wire \$110y ;
  wire \$112y ;
  wire \$117y ;
  wire \$119y ;
  wire \$122y ;
  wire \$128y ;
  wire \$129y ;
  wire \$131y ;
  wire \$136y ;
  wire \$138y ;
  wire \$141y ;
  wire \$147y ;
  wire \$148y ;
  wire \$14y ;
  wire \$150y ;
  wire \$155y ;
  wire \$157y ;
  wire \$15y ;
  wire \$160y ;
  wire \$166y ;
  wire \$167y ;
  wire \$169y ;
  wire \$174y ;
  wire \$176y ;
  wire \$179y ;
  wire \$17y ;
  wire \$185y ;
  wire \$186y ;
  wire \$188y ;
  wire \$193y ;
  wire \$195y ;
  wire \$198y ;
  wire \$204y ;
  wire \$205y ;
  wire \$207y ;
  wire \$212y ;
  wire \$214y ;
  wire \$217y ;
  wire \$223y ;
  wire \$224y ;
  wire \$226y ;
  wire \$22y ;
  wire \$231y ;
  wire \$233y ;
  wire \$236y ;
  wire \$242y ;
  wire \$243y ;
  wire \$245y ;
  wire \$24y ;
  wire \$250y ;
  wire \$252y ;
  wire \$255y ;
  wire \$261y ;
  wire \$262y ;
  wire \$264y ;
  wire \$269y ;
  wire \$271y ;
  wire \$274y ;
  wire \$27y ;
  wire \$280y ;
  wire \$281y ;
  wire \$283y ;
  wire \$288y ;
  wire \$290y ;
  wire \$293y ;
  wire \$299y ;
  wire \$300y ;
  wire \$302y ;
  wire \$307y ;
  wire \$309y ;
  wire \$312y ;
  wire \$318y ;
  wire \$319y ;
  wire \$321y ;
  wire \$326y ;
  wire \$328y ;
  wire \$331y ;
  wire \$337y ;
  wire \$338y ;
  wire \$33y ;
  wire \$340y ;
  wire \$345y ;
  wire \$347y ;
  wire \$34y ;
  wire \$350y ;
  wire \$356y ;
  wire \$357y ;
  wire \$359y ;
  wire \$364y ;
  wire \$366y ;
  wire \$369y ;
  wire \$36y ;
  wire \$375y ;
  wire \$376y ;
  wire \$378y ;
  wire \$383y ;
  wire \$385y ;
  wire \$388y ;
  wire \$394y ;
  wire \$395y ;
  wire \$397y ;
  wire \$3y ;
  wire \$402y ;
  wire \$404y ;
  wire \$407y ;
  wire \$413y ;
  wire \$414y ;
  wire \$416y ;
  wire \$41y ;
  wire \$421y ;
  wire \$423y ;
  wire \$426y ;
  wire \$432y ;
  wire \$433y ;
  wire \$435y ;
  wire \$43y ;
  wire \$440y ;
  wire \$442y ;
  wire \$445y ;
  wire \$451y ;
  wire \$452y ;
  wire \$454y ;
  wire \$459y ;
  wire \$461y ;
  wire \$464y ;
  wire \$46y ;
  wire \$470y ;
  wire \$471y ;
  wire \$473y ;
  wire \$478y ;
  wire \$480y ;
  wire \$483y ;
  wire \$489y ;
  wire \$490y ;
  wire \$492y ;
  wire \$497y ;
  wire \$499y ;
  wire \$502y ;
  wire \$508y ;
  wire \$509y ;
  wire \$511y ;
  wire \$516y ;
  wire \$518y ;
  wire \$521y ;
  wire \$527y ;
  wire \$528y ;
  wire \$52y ;
  wire \$530y ;
  wire \$535y ;
  wire \$537y ;
  wire \$53y ;
  wire \$540y ;
  wire \$546y ;
  wire \$547y ;
  wire \$549y ;
  wire \$554y ;
  wire \$556y ;
  wire \$559y ;
  wire \$55y ;
  wire \$565y ;
  wire \$566y ;
  wire \$568y ;
  wire \$573y ;
  wire \$575y ;
  wire \$578y ;
  wire \$584y ;
  wire \$585y ;
  wire \$587y ;
  wire \$592y ;
  wire \$594y ;
  wire \$597y ;
  wire \$5y ;
  wire \$603y ;
  wire \$604y ;
  wire \$606y ;
  wire \$60y ;
  wire \$610y ;
  wire \$611y ;
  wire \$612y ;
  wire \$613y ;
  wire \$614y ;
  wire \$615y ;
  wire \$616y ;
  wire \$617y ;
  wire \$618y ;
  wire \$619y ;
  wire \$620y ;
  wire \$621y ;
  wire \$622y ;
  wire \$623y ;
  wire \$624y ;
  wire \$625y ;
  wire \$626y ;
  wire \$627y ;
  wire \$628y ;
  wire \$629y ;
  wire \$62y ;
  wire \$630y ;
  wire \$631y ;
  wire \$632y ;
  wire \$633y ;
  wire \$634y ;
  wire \$635y ;
  wire \$636y ;
  wire \$637y ;
  wire \$638y ;
  wire \$639y ;
  wire \$65y ;
  wire \$71y ;
  wire \$72y ;
  wire \$74y ;
  wire \$79y ;
  wire \$81y ;
  wire \$84y ;
  wire \$8y ;
  wire \$90y ;
  wire \$91y ;
  wire \$93y ;
  wire \$98y ;
  (* src = "rtl/gpio/gpio.sv:25.34" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[0].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[0].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[0].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[0].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[0].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[0].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[10].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[10].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[10].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[10].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[10].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[10].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[11].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[11].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[11].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[11].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[11].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[11].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[12].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[12].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[12].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[12].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[12].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[12].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[13].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[13].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[13].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[13].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[13].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[13].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[14].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[14].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[14].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[14].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[14].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[14].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[15].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[15].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[15].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[15].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[15].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[15].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[16].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[16].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[16].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[16].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[16].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[16].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[17].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[17].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[17].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[17].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[17].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[17].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[18].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[18].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[18].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[18].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[18].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[18].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[19].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[19].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[19].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[19].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[19].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[19].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[1].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[1].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[1].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[1].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[1].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[1].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[20].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[20].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[20].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[20].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[20].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[20].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[21].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[21].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[21].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[21].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[21].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[21].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[22].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[22].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[22].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[22].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[22].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[22].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[23].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[23].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[23].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[23].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[23].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[23].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[24].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[24].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[24].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[24].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[24].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[24].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[25].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[25].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[25].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[25].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[25].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[25].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[26].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[26].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[26].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[26].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[26].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[26].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[27].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[27].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[27].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[27].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[27].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[27].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[28].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[28].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[28].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[28].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[28].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[28].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[29].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[29].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[29].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[29].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[29].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[29].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[2].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[2].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[2].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[2].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[2].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[2].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[30].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[30].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[30].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[30].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[30].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[30].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[31].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[31].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[31].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[31].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[31].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[31].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[3].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[3].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[3].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[3].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[3].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[3].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[4].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[4].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[4].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[4].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[4].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[4].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[5].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[5].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[5].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[5].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[5].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[5].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[6].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[6].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[6].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[6].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[6].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[6].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[7].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[7].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[7].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[7].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[7].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[7].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[8].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[8].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[8].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[8].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[8].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[8].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[9].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[9].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[9].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[9].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[9].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[9].serial_q ;
  (* src = "rtl/gpio/gpio.sv:64.25" *)
  wire [31:0] gpio_edge;
  (* src = "rtl/gpio/gpio.sv:30.34" *)
  input [31:0] gpio_i;
  wire [31:0] gpio_i;
  (* src = "rtl/gpio/gpio.sv:39.34" *)
  output [31:0] gpio_in_sync_o;
  wire [31:0] gpio_in_sync_o;
  (* src = "rtl/gpio/gpio.sv:65.25" *)
  wire [31:0] gpio_intrpt;
  (* src = "rtl/gpio/gpio.sv:32.34" *)
  output [31:0] gpio_o;
  wire [31:0] gpio_o;
  (* src = "rtl/gpio/gpio.sv:36.34" *)
  output [31:0] gpio_out_en_o;
  wire [31:0] gpio_out_en_o;
  (* src = "rtl/gpio/gpio.sv:58.33" *)
  wire [159:0] hw2reg;
  (* src = "rtl/gpio/gpio.sv:42.34" *)
  output interrupt_o;
  wire interrupt_o;
  (* src = "rtl/gpio/gpio.sv:45.34" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "rtl/gpio/gpio.sv:47.34" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "rtl/gpio/gpio.sv:57.33" *)
  wire [223:0] reg2hw;
  (* src = "rtl/gpio/gpio.sv:27.34" *)
  input rst_ni;
  wire rst_ni;
  assign \gen_gpios[0].is_output  = reg2hw[5] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[6];
  assign \$100y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[5].serial_q ;
  assign \gen_gpios[5].r_edge  = \gen_gpios[5].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$100y ;
  assign gpio_edge[5] = reg2hw[35] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[5].r_edge  : \gen_gpios[5].f_edge ;
  assign \$103y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[41];
  assign \gen_gpios[5].is_input  = reg2hw[40] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$103y ;
  assign \gen_gpios[5].is_output  = reg2hw[40] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[41];
  assign hw2reg[29] = \gen_gpios[5].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[5].is_input ;
  assign gpio_o[5] = reg2hw[39] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[5].is_output ;
  assign \$109y  = \gen_gpios[5].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[38];
  assign hw2reg[4] = \gen_gpios[0].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[0].is_input ;
  assign \$110y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[39];
  assign \$112y  = gpio_edge[5] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[37];
  assign gpio_intrpt[5] = \$112y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[5].is_input ;
  assign \$117y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[6].serial_d ;
  assign \gen_gpios[6].f_edge  = \$117y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[6].serial_q ;
  assign \$119y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[6].serial_q ;
  assign gpio_o[0] = reg2hw[4] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[0].is_output ;
  assign \gen_gpios[6].r_edge  = \gen_gpios[6].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$119y ;
  assign gpio_edge[6] = reg2hw[42] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[6].r_edge  : \gen_gpios[6].f_edge ;
  assign \$122y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[48];
  assign \gen_gpios[6].is_input  = reg2hw[47] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$122y ;
  assign \gen_gpios[6].is_output  = reg2hw[47] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[48];
  assign hw2reg[34] = \gen_gpios[6].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[6].is_input ;
  assign gpio_o[6] = reg2hw[46] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[6].is_output ;
  assign \$128y  = \gen_gpios[6].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[45];
  assign \$129y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[46];
  assign \$131y  = gpio_edge[6] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[44];
  assign gpio_intrpt[6] = \$131y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[6].is_input ;
  assign \$136y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[7].serial_d ;
  assign \gen_gpios[7].f_edge  = \$136y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[7].serial_q ;
  assign \$138y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[7].serial_q ;
  assign \gen_gpios[7].r_edge  = \gen_gpios[7].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$138y ;
  assign \$14y  = \gen_gpios[0].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[3];
  assign gpio_edge[7] = reg2hw[49] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[7].r_edge  : \gen_gpios[7].f_edge ;
  assign \$141y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[55];
  assign \gen_gpios[7].is_input  = reg2hw[54] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$141y ;
  assign \gen_gpios[7].is_output  = reg2hw[54] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[55];
  assign hw2reg[39] = \gen_gpios[7].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[7].is_input ;
  assign gpio_o[7] = reg2hw[53] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[7].is_output ;
  assign \$147y  = \gen_gpios[7].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[52];
  assign \$148y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[53];
  assign \$15y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[4];
  assign \$150y  = gpio_edge[7] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[51];
  assign gpio_intrpt[7] = \$150y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[7].is_input ;
  assign \$155y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[8].serial_d ;
  assign \gen_gpios[8].f_edge  = \$155y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[8].serial_q ;
  assign \$157y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[8].serial_q ;
  assign \gen_gpios[8].r_edge  = \gen_gpios[8].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$157y ;
  assign gpio_edge[8] = reg2hw[56] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[8].r_edge  : \gen_gpios[8].f_edge ;
  assign \$160y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[62];
  assign \gen_gpios[8].is_input  = reg2hw[61] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$160y ;
  assign \gen_gpios[8].is_output  = reg2hw[61] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[62];
  assign hw2reg[44] = \gen_gpios[8].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[8].is_input ;
  assign gpio_o[8] = reg2hw[60] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[8].is_output ;
  assign \$166y  = \gen_gpios[8].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[59];
  assign \$167y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[60];
  assign \$169y  = gpio_edge[8] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[58];
  assign \$17y  = gpio_edge[0] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[2];
  assign gpio_intrpt[8] = \$169y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[8].is_input ;
  assign \$174y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[9].serial_d ;
  assign \gen_gpios[9].f_edge  = \$174y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[9].serial_q ;
  assign \$176y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[9].serial_q ;
  assign \gen_gpios[9].r_edge  = \gen_gpios[9].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$176y ;
  assign gpio_edge[9] = reg2hw[63] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[9].r_edge  : \gen_gpios[9].f_edge ;
  assign \$179y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[69];
  assign gpio_intrpt[0] = \$17y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[0].is_input ;
  assign \gen_gpios[9].is_input  = reg2hw[68] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$179y ;
  assign \gen_gpios[9].is_output  = reg2hw[68] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[69];
  assign hw2reg[49] = \gen_gpios[9].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[9].is_input ;
  assign gpio_o[9] = reg2hw[67] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[9].is_output ;
  assign \$185y  = \gen_gpios[9].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[66];
  assign \$186y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[67];
  assign \$188y  = gpio_edge[9] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[65];
  assign gpio_intrpt[9] = \$188y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[9].is_input ;
  assign \$193y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[10].serial_d ;
  assign \gen_gpios[10].f_edge  = \$193y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[10].serial_q ;
  assign \$195y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[10].serial_q ;
  assign \gen_gpios[10].r_edge  = \gen_gpios[10].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$195y ;
  assign gpio_edge[10] = reg2hw[70] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[10].r_edge  : \gen_gpios[10].f_edge ;
  assign \$198y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[76];
  assign \gen_gpios[10].is_input  = reg2hw[75] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$198y ;
  assign \gen_gpios[10].is_output  = reg2hw[75] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[76];
  assign hw2reg[54] = \gen_gpios[10].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[10].is_input ;
  assign gpio_o[10] = reg2hw[74] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[10].is_output ;
  assign \$204y  = \gen_gpios[10].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[73];
  assign \$205y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[74];
  assign \$207y  = gpio_edge[10] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[72];
  assign gpio_intrpt[10] = \$207y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[10].is_input ;
  assign \$212y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[11].serial_d ;
  assign \gen_gpios[11].f_edge  = \$212y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[11].serial_q ;
  assign \$214y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[11].serial_q ;
  assign \gen_gpios[11].r_edge  = \gen_gpios[11].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$214y ;
  assign gpio_edge[11] = reg2hw[77] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[11].r_edge  : \gen_gpios[11].f_edge ;
  assign \$217y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[83];
  assign \gen_gpios[11].is_input  = reg2hw[82] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$217y ;
  assign \gen_gpios[11].is_output  = reg2hw[82] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[83];
  assign \$22y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[1].serial_d ;
  assign hw2reg[59] = \gen_gpios[11].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[11].is_input ;
  assign gpio_o[11] = reg2hw[81] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[11].is_output ;
  assign \$223y  = \gen_gpios[11].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[80];
  assign \$224y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[81];
  assign \$226y  = gpio_edge[11] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[79];
  assign gpio_intrpt[11] = \$226y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[11].is_input ;
  assign \gen_gpios[1].f_edge  = \$22y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[1].serial_q ;
  assign \$231y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[12].serial_d ;
  assign \gen_gpios[12].f_edge  = \$231y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[12].serial_q ;
  assign \$233y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[12].serial_q ;
  assign \gen_gpios[12].r_edge  = \gen_gpios[12].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$233y ;
  assign gpio_edge[12] = reg2hw[84] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[12].r_edge  : \gen_gpios[12].f_edge ;
  assign \$236y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[90];
  assign \gen_gpios[12].is_input  = reg2hw[89] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$236y ;
  assign \gen_gpios[12].is_output  = reg2hw[89] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[90];
  assign hw2reg[64] = \gen_gpios[12].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[12].is_input ;
  assign \$24y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[1].serial_q ;
  assign gpio_o[12] = reg2hw[88] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[12].is_output ;
  assign \$242y  = \gen_gpios[12].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[87];
  assign \$243y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[88];
  assign \$245y  = gpio_edge[12] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[86];
  assign gpio_intrpt[12] = \$245y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[12].is_input ;
  assign \gen_gpios[1].r_edge  = \gen_gpios[1].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$24y ;
  assign \$250y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[13].serial_d ;
  assign \gen_gpios[13].f_edge  = \$250y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[13].serial_q ;
  assign \$252y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[13].serial_q ;
  assign \gen_gpios[13].r_edge  = \gen_gpios[13].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$252y ;
  assign gpio_edge[13] = reg2hw[91] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[13].r_edge  : \gen_gpios[13].f_edge ;
  assign \$255y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[97];
  assign \gen_gpios[13].is_input  = reg2hw[96] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$255y ;
  assign \gen_gpios[13].is_output  = reg2hw[96] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[97];
  assign hw2reg[69] = \gen_gpios[13].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[13].is_input ;
  assign gpio_o[13] = reg2hw[95] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[13].is_output ;
  assign gpio_edge[1] = reg2hw[7] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[1].r_edge  : \gen_gpios[1].f_edge ;
  assign \$261y  = \gen_gpios[13].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[94];
  assign \$262y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[95];
  assign \$264y  = gpio_edge[13] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[93];
  assign gpio_intrpt[13] = \$264y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[13].is_input ;
  assign \$269y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[14].serial_d ;
  assign \$27y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[13];
  assign \gen_gpios[14].f_edge  = \$269y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[14].serial_q ;
  assign \$271y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[14].serial_q ;
  assign \gen_gpios[14].r_edge  = \gen_gpios[14].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$271y ;
  assign gpio_edge[14] = reg2hw[98] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[14].r_edge  : \gen_gpios[14].f_edge ;
  assign \$274y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[104];
  assign \gen_gpios[14].is_input  = reg2hw[103] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$274y ;
  assign \gen_gpios[14].is_output  = reg2hw[103] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[104];
  assign hw2reg[74] = \gen_gpios[14].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[14].is_input ;
  assign gpio_o[14] = reg2hw[102] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[14].is_output ;
  assign \gen_gpios[1].is_input  = reg2hw[12] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$27y ;
  assign \$280y  = \gen_gpios[14].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[101];
  assign \$281y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[102];
  assign \$283y  = gpio_edge[14] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[100];
  assign gpio_intrpt[14] = \$283y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[14].is_input ;
  assign \$288y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[15].serial_d ;
  assign \gen_gpios[15].f_edge  = \$288y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[15].serial_q ;
  assign \gen_gpios[1].is_output  = reg2hw[12] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[13];
  assign \$290y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[15].serial_q ;
  assign \gen_gpios[15].r_edge  = \gen_gpios[15].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$290y ;
  assign gpio_edge[15] = reg2hw[105] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[15].r_edge  : \gen_gpios[15].f_edge ;
  assign \$293y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[111];
  assign \gen_gpios[15].is_input  = reg2hw[110] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$293y ;
  assign \gen_gpios[15].is_output  = reg2hw[110] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[111];
  assign hw2reg[79] = \gen_gpios[15].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[15].is_input ;
  assign gpio_o[15] = reg2hw[109] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[15].is_output ;
  assign \$299y  = \gen_gpios[15].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[108];
  assign \$3y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[0].serial_d ;
  assign hw2reg[9] = \gen_gpios[1].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[1].is_input ;
  assign \$300y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[109];
  assign \$302y  = gpio_edge[15] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[107];
  assign gpio_intrpt[15] = \$302y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[15].is_input ;
  assign \$307y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[16].serial_d ;
  assign \gen_gpios[16].f_edge  = \$307y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[16].serial_q ;
  assign \$309y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[16].serial_q ;
  assign gpio_o[1] = reg2hw[11] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[1].is_output ;
  assign \gen_gpios[16].r_edge  = \gen_gpios[16].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$309y ;
  assign gpio_edge[16] = reg2hw[112] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[16].r_edge  : \gen_gpios[16].f_edge ;
  assign \$312y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[118];
  assign \gen_gpios[16].is_input  = reg2hw[117] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$312y ;
  assign \gen_gpios[16].is_output  = reg2hw[117] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[118];
  assign hw2reg[84] = \gen_gpios[16].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[16].is_input ;
  assign gpio_o[16] = reg2hw[116] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[16].is_output ;
  assign \$318y  = \gen_gpios[16].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[115];
  assign \$319y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[116];
  assign \$321y  = gpio_edge[16] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[114];
  assign gpio_intrpt[16] = \$321y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[16].is_input ;
  assign \$326y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[17].serial_d ;
  assign \gen_gpios[17].f_edge  = \$326y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[17].serial_q ;
  assign \$328y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[17].serial_q ;
  assign \gen_gpios[17].r_edge  = \gen_gpios[17].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$328y ;
  assign \$33y  = \gen_gpios[1].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[10];
  assign gpio_edge[17] = reg2hw[119] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[17].r_edge  : \gen_gpios[17].f_edge ;
  assign \$331y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[125];
  assign \gen_gpios[17].is_input  = reg2hw[124] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$331y ;
  assign \gen_gpios[17].is_output  = reg2hw[124] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[125];
  assign hw2reg[89] = \gen_gpios[17].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[17].is_input ;
  assign gpio_o[17] = reg2hw[123] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[17].is_output ;
  assign \$337y  = \gen_gpios[17].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[122];
  assign \$338y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[123];
  assign \$34y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[11];
  assign \$340y  = gpio_edge[17] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[121];
  assign gpio_intrpt[17] = \$340y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[17].is_input ;
  assign \$345y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[18].serial_d ;
  assign \gen_gpios[18].f_edge  = \$345y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[18].serial_q ;
  assign \$347y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[18].serial_q ;
  assign \gen_gpios[18].r_edge  = \gen_gpios[18].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$347y ;
  assign gpio_edge[18] = reg2hw[126] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[18].r_edge  : \gen_gpios[18].f_edge ;
  assign \$350y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[132];
  assign \gen_gpios[18].is_input  = reg2hw[131] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$350y ;
  assign \gen_gpios[18].is_output  = reg2hw[131] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[132];
  assign hw2reg[94] = \gen_gpios[18].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[18].is_input ;
  assign gpio_o[18] = reg2hw[130] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[18].is_output ;
  assign \$356y  = \gen_gpios[18].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[129];
  assign \$357y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[130];
  assign \$359y  = gpio_edge[18] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[128];
  assign \$36y  = gpio_edge[1] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[9];
  assign gpio_intrpt[18] = \$359y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[18].is_input ;
  assign \$364y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[19].serial_d ;
  assign \gen_gpios[19].f_edge  = \$364y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[19].serial_q ;
  assign \$366y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[19].serial_q ;
  assign \gen_gpios[19].r_edge  = \gen_gpios[19].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$366y ;
  assign gpio_edge[19] = reg2hw[133] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[19].r_edge  : \gen_gpios[19].f_edge ;
  assign \$369y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[139];
  assign gpio_intrpt[1] = \$36y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[1].is_input ;
  assign \gen_gpios[19].is_input  = reg2hw[138] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$369y ;
  assign \gen_gpios[19].is_output  = reg2hw[138] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[139];
  assign hw2reg[99] = \gen_gpios[19].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[19].is_input ;
  assign gpio_o[19] = reg2hw[137] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[19].is_output ;
  assign \$375y  = \gen_gpios[19].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[136];
  assign \$376y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[137];
  assign \$378y  = gpio_edge[19] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[135];
  assign gpio_intrpt[19] = \$378y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[19].is_input ;
  assign \$383y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[20].serial_d ;
  assign \gen_gpios[20].f_edge  = \$383y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[20].serial_q ;
  assign \$385y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[20].serial_q ;
  assign \gen_gpios[20].r_edge  = \gen_gpios[20].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$385y ;
  assign gpio_edge[20] = reg2hw[140] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[20].r_edge  : \gen_gpios[20].f_edge ;
  assign \$388y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[146];
  assign \gen_gpios[20].is_input  = reg2hw[145] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$388y ;
  assign \gen_gpios[20].is_output  = reg2hw[145] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[146];
  assign hw2reg[104] = \gen_gpios[20].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[20].is_input ;
  assign gpio_o[20] = reg2hw[144] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[20].is_output ;
  assign \$394y  = \gen_gpios[20].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[143];
  assign \$395y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[144];
  assign \$397y  = gpio_edge[20] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[142];
  assign gpio_intrpt[20] = \$397y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[20].is_input ;
  assign \gen_gpios[0].f_edge  = \$3y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[0].serial_q ;
  assign \$402y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[21].serial_d ;
  assign \gen_gpios[21].f_edge  = \$402y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[21].serial_q ;
  assign \$404y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[21].serial_q ;
  assign \gen_gpios[21].r_edge  = \gen_gpios[21].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$404y ;
  assign gpio_edge[21] = reg2hw[147] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[21].r_edge  : \gen_gpios[21].f_edge ;
  assign \$407y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[153];
  assign \gen_gpios[21].is_input  = reg2hw[152] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$407y ;
  assign \gen_gpios[21].is_output  = reg2hw[152] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[153];
  assign \$41y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[2].serial_d ;
  assign hw2reg[109] = \gen_gpios[21].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[21].is_input ;
  assign gpio_o[21] = reg2hw[151] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[21].is_output ;
  assign \$413y  = \gen_gpios[21].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[150];
  assign \$414y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[151];
  assign \$416y  = gpio_edge[21] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[149];
  assign gpio_intrpt[21] = \$416y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[21].is_input ;
  assign \gen_gpios[2].f_edge  = \$41y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[2].serial_q ;
  assign \$421y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[22].serial_d ;
  assign \gen_gpios[22].f_edge  = \$421y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[22].serial_q ;
  assign \$423y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[22].serial_q ;
  assign \gen_gpios[22].r_edge  = \gen_gpios[22].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$423y ;
  assign gpio_edge[22] = reg2hw[154] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[22].r_edge  : \gen_gpios[22].f_edge ;
  assign \$426y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[160];
  assign \gen_gpios[22].is_input  = reg2hw[159] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$426y ;
  assign \gen_gpios[22].is_output  = reg2hw[159] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[160];
  assign hw2reg[114] = \gen_gpios[22].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[22].is_input ;
  assign \$43y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[2].serial_q ;
  assign gpio_o[22] = reg2hw[158] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[22].is_output ;
  assign \$432y  = \gen_gpios[22].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[157];
  assign \$433y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[158];
  assign \$435y  = gpio_edge[22] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[156];
  assign gpio_intrpt[22] = \$435y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[22].is_input ;
  assign \gen_gpios[2].r_edge  = \gen_gpios[2].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$43y ;
  assign \$440y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[23].serial_d ;
  assign \gen_gpios[23].f_edge  = \$440y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[23].serial_q ;
  assign \$442y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[23].serial_q ;
  assign \gen_gpios[23].r_edge  = \gen_gpios[23].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$442y ;
  assign gpio_edge[23] = reg2hw[161] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[23].r_edge  : \gen_gpios[23].f_edge ;
  assign \$445y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[167];
  assign \gen_gpios[23].is_input  = reg2hw[166] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$445y ;
  assign \gen_gpios[23].is_output  = reg2hw[166] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[167];
  assign hw2reg[119] = \gen_gpios[23].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[23].is_input ;
  assign gpio_o[23] = reg2hw[165] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[23].is_output ;
  assign gpio_edge[2] = reg2hw[14] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[2].r_edge  : \gen_gpios[2].f_edge ;
  assign \$451y  = \gen_gpios[23].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[164];
  assign \$452y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[165];
  assign \$454y  = gpio_edge[23] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[163];
  assign gpio_intrpt[23] = \$454y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[23].is_input ;
  assign \$459y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[24].serial_d ;
  assign \$46y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[20];
  assign \gen_gpios[24].f_edge  = \$459y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[24].serial_q ;
  assign \$461y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[24].serial_q ;
  assign \gen_gpios[24].r_edge  = \gen_gpios[24].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$461y ;
  assign gpio_edge[24] = reg2hw[168] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[24].r_edge  : \gen_gpios[24].f_edge ;
  assign \$464y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[174];
  assign \gen_gpios[24].is_input  = reg2hw[173] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$464y ;
  assign \gen_gpios[24].is_output  = reg2hw[173] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[174];
  assign hw2reg[124] = \gen_gpios[24].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[24].is_input ;
  assign gpio_o[24] = reg2hw[172] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[24].is_output ;
  assign \gen_gpios[2].is_input  = reg2hw[19] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$46y ;
  assign \$470y  = \gen_gpios[24].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[171];
  assign \$471y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[172];
  assign \$473y  = gpio_edge[24] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[170];
  assign gpio_intrpt[24] = \$473y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[24].is_input ;
  assign \$478y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[25].serial_d ;
  assign \gen_gpios[25].f_edge  = \$478y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[25].serial_q ;
  assign \gen_gpios[2].is_output  = reg2hw[19] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[20];
  assign \$480y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[25].serial_q ;
  assign \gen_gpios[25].r_edge  = \gen_gpios[25].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$480y ;
  assign gpio_edge[25] = reg2hw[175] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[25].r_edge  : \gen_gpios[25].f_edge ;
  assign \$483y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[181];
  assign \gen_gpios[25].is_input  = reg2hw[180] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$483y ;
  assign \gen_gpios[25].is_output  = reg2hw[180] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[181];
  assign hw2reg[129] = \gen_gpios[25].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[25].is_input ;
  assign gpio_o[25] = reg2hw[179] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[25].is_output ;
  assign \$489y  = \gen_gpios[25].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[178];
  assign hw2reg[14] = \gen_gpios[2].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[2].is_input ;
  assign \$490y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[179];
  assign \$492y  = gpio_edge[25] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[177];
  assign gpio_intrpt[25] = \$492y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[25].is_input ;
  assign \$497y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[26].serial_d ;
  assign \gen_gpios[26].f_edge  = \$497y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[26].serial_q ;
  assign \$499y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[26].serial_q ;
  assign \$5y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[0].serial_q ;
  assign gpio_o[2] = reg2hw[18] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[2].is_output ;
  assign \gen_gpios[26].r_edge  = \gen_gpios[26].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$499y ;
  assign gpio_edge[26] = reg2hw[182] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[26].r_edge  : \gen_gpios[26].f_edge ;
  assign \$502y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[188];
  assign \gen_gpios[26].is_input  = reg2hw[187] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$502y ;
  assign \gen_gpios[26].is_output  = reg2hw[187] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[188];
  assign hw2reg[134] = \gen_gpios[26].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[26].is_input ;
  assign gpio_o[26] = reg2hw[186] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[26].is_output ;
  assign \$508y  = \gen_gpios[26].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[185];
  assign \$509y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[186];
  assign \$511y  = gpio_edge[26] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[184];
  assign gpio_intrpt[26] = \$511y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[26].is_input ;
  assign \$516y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[27].serial_d ;
  assign \gen_gpios[27].f_edge  = \$516y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[27].serial_q ;
  assign \$518y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[27].serial_q ;
  assign \gen_gpios[27].r_edge  = \gen_gpios[27].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$518y ;
  assign \$52y  = \gen_gpios[2].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[17];
  assign gpio_edge[27] = reg2hw[189] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[27].r_edge  : \gen_gpios[27].f_edge ;
  assign \$521y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[195];
  assign \gen_gpios[27].is_input  = reg2hw[194] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$521y ;
  assign \gen_gpios[27].is_output  = reg2hw[194] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[195];
  assign hw2reg[139] = \gen_gpios[27].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[27].is_input ;
  assign gpio_o[27] = reg2hw[193] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[27].is_output ;
  assign \$527y  = \gen_gpios[27].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[192];
  assign \$528y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[193];
  assign \$53y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[18];
  assign \$530y  = gpio_edge[27] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[191];
  assign gpio_intrpt[27] = \$530y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[27].is_input ;
  assign \$535y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[28].serial_d ;
  assign \gen_gpios[28].f_edge  = \$535y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[28].serial_q ;
  assign \$537y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[28].serial_q ;
  assign \gen_gpios[28].r_edge  = \gen_gpios[28].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$537y ;
  assign gpio_edge[28] = reg2hw[196] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[28].r_edge  : \gen_gpios[28].f_edge ;
  assign \$540y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[202];
  assign \gen_gpios[28].is_input  = reg2hw[201] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$540y ;
  assign \gen_gpios[28].is_output  = reg2hw[201] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[202];
  assign hw2reg[144] = \gen_gpios[28].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[28].is_input ;
  assign gpio_o[28] = reg2hw[200] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[28].is_output ;
  assign \$546y  = \gen_gpios[28].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[199];
  assign \$547y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[200];
  assign \$549y  = gpio_edge[28] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[198];
  assign \$55y  = gpio_edge[2] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[16];
  assign gpio_intrpt[28] = \$549y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[28].is_input ;
  assign \$554y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[29].serial_d ;
  assign \gen_gpios[29].f_edge  = \$554y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[29].serial_q ;
  assign \$556y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[29].serial_q ;
  assign \gen_gpios[29].r_edge  = \gen_gpios[29].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$556y ;
  assign gpio_edge[29] = reg2hw[203] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[29].r_edge  : \gen_gpios[29].f_edge ;
  assign \$559y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[209];
  assign gpio_intrpt[2] = \$55y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[2].is_input ;
  assign \gen_gpios[29].is_input  = reg2hw[208] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$559y ;
  assign \gen_gpios[29].is_output  = reg2hw[208] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[209];
  assign hw2reg[149] = \gen_gpios[29].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[29].is_input ;
  assign gpio_o[29] = reg2hw[207] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[29].is_output ;
  assign \$565y  = \gen_gpios[29].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[206];
  assign \$566y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[207];
  assign \$568y  = gpio_edge[29] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[205];
  assign gpio_intrpt[29] = \$568y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[29].is_input ;
  assign \$573y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[30].serial_d ;
  assign \gen_gpios[30].f_edge  = \$573y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[30].serial_q ;
  assign \$575y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[30].serial_q ;
  assign \gen_gpios[30].r_edge  = \gen_gpios[30].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$575y ;
  assign gpio_edge[30] = reg2hw[210] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[30].r_edge  : \gen_gpios[30].f_edge ;
  assign \$578y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[216];
  assign \gen_gpios[30].is_input  = reg2hw[215] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$578y ;
  assign \gen_gpios[30].is_output  = reg2hw[215] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[216];
  assign hw2reg[154] = \gen_gpios[30].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[30].is_input ;
  assign gpio_o[30] = reg2hw[214] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[30].is_output ;
  assign \$584y  = \gen_gpios[30].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[213];
  assign \$585y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[214];
  assign \$587y  = gpio_edge[30] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[212];
  assign gpio_intrpt[30] = \$587y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[30].is_input ;
  assign \$592y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[31].serial_d ;
  assign \gen_gpios[31].f_edge  = \$592y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[31].serial_q ;
  assign \$594y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[31].serial_q ;
  assign \gen_gpios[31].r_edge  = \gen_gpios[31].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$594y ;
  assign gpio_edge[31] = reg2hw[217] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[31].r_edge  : \gen_gpios[31].f_edge ;
  assign \$597y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[223];
  assign \gen_gpios[31].is_input  = reg2hw[222] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$597y ;
  assign \gen_gpios[31].is_output  = reg2hw[222] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[223];
  assign \gen_gpios[0].r_edge  = \gen_gpios[0].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$5y ;
  assign \$60y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[3].serial_d ;
  assign hw2reg[159] = \gen_gpios[31].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[31].is_input ;
  assign gpio_o[31] = reg2hw[221] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[31].is_output ;
  assign \$603y  = \gen_gpios[31].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[220];
  assign \$604y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[221];
  assign \$606y  = gpio_edge[31] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[219];
  assign gpio_intrpt[31] = \$606y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[31].is_input ;
  assign \gen_gpios[3].f_edge  = \$60y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[3].serial_q ;
  assign \$610y  = reg2hw[1] | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[8];
  assign \$611y  = \$610y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[15];
  assign \$612y  = \$611y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[22];
  assign \$613y  = \$612y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[29];
  assign \$614y  = \$613y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[36];
  assign \$615y  = \$614y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[43];
  assign \$616y  = \$615y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[50];
  assign \$617y  = \$616y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[57];
  assign \$618y  = \$617y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[64];
  assign \$619y  = \$618y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[71];
  assign \$62y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[3].serial_q ;
  assign \$620y  = \$619y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[78];
  assign \$621y  = \$620y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[85];
  assign \$622y  = \$621y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[92];
  assign \$623y  = \$622y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[99];
  assign \$624y  = \$623y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[106];
  assign \$625y  = \$624y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[113];
  assign \$626y  = \$625y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[120];
  assign \$627y  = \$626y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[127];
  assign \$628y  = \$627y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[134];
  assign \$629y  = \$628y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[141];
  assign \gen_gpios[3].r_edge  = \gen_gpios[3].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$62y ;
  assign \$630y  = \$629y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[148];
  assign \$631y  = \$630y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[155];
  assign \$632y  = \$631y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[162];
  assign \$633y  = \$632y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[169];
  assign \$634y  = \$633y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[176];
  assign \$635y  = \$634y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[183];
  assign \$636y  = \$635y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[190];
  assign \$637y  = \$636y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[197];
  assign \$638y  = \$637y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[204];
  assign \$639y  = \$638y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[211];
  assign gpio_edge[3] = reg2hw[21] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[3].r_edge  : \gen_gpios[3].f_edge ;
  assign interrupt_o = \$639y  | (* src = "rtl/gpio/gpio.sv:166.31-166.71" *) reg2hw[218];
  assign \$65y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[27];
  assign \gen_gpios[3].is_input  = reg2hw[26] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$65y ;
  assign \gen_gpios[3].is_output  = reg2hw[26] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[27];
  assign hw2reg[19] = \gen_gpios[3].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[3].is_input ;
  assign gpio_o[3] = reg2hw[25] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[3].is_output ;
  assign gpio_edge[0] = reg2hw[0] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[0].r_edge  : \gen_gpios[0].f_edge ;
  assign \$71y  = \gen_gpios[3].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[24];
  assign \$72y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[25];
  assign \$74y  = gpio_edge[3] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[23];
  assign gpio_intrpt[3] = \$74y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[3].is_input ;
  assign \$79y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[4].serial_d ;
  assign \$8y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[6];
  assign \gen_gpios[4].f_edge  = \$79y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[4].serial_q ;
  assign \$81y  = ~ (* src = "rtl/gpio/gpio.sv:111.37-111.46" *) \gen_gpios[4].serial_q ;
  assign \gen_gpios[4].r_edge  = \gen_gpios[4].serial_d  & (* src = "rtl/gpio/gpio.sv:111.25-111.47" *) \$81y ;
  assign gpio_edge[4] = reg2hw[28] ? (* src = "rtl/gpio/gpio.sv:112.33-112.74" *) \gen_gpios[4].r_edge  : \gen_gpios[4].f_edge ;
  assign \$84y  = ~ (* src = "rtl/gpio/gpio.sv:122.44-122.60" *) reg2hw[34];
  assign \gen_gpios[4].is_input  = reg2hw[33] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$84y ;
  assign \gen_gpios[4].is_output  = reg2hw[33] & (* src = "rtl/gpio/gpio.sv:123.28-123.60" *) reg2hw[34];
  assign hw2reg[24] = \gen_gpios[4].serial_q  & (* src = "rtl/gpio/gpio.sv:126.38-126.66" *) \gen_gpios[4].is_input ;
  assign gpio_o[4] = reg2hw[32] & (* src = "rtl/gpio/gpio.sv:129.30-129.57" *) \gen_gpios[4].is_output ;
  assign \gen_gpios[0].is_input  = reg2hw[5] & (* src = "rtl/gpio/gpio.sv:122.27-122.60" *) \$8y ;
  assign \$90y  = \gen_gpios[4].is_output  & (* src = "rtl/gpio/gpio.sv:143.17-143.47" *) reg2hw[31];
  assign \$91y  = ~ (* src = "rtl/gpio/gpio.sv:144.41-144.57" *) reg2hw[32];
  assign \$93y  = gpio_edge[4] & (* src = "rtl/gpio/gpio.sv:155.35-155.73" *) reg2hw[30];
  assign gpio_intrpt[4] = \$93y  & (* src = "rtl/gpio/gpio.sv:155.35-155.84" *) \gen_gpios[4].is_input ;
  assign \$98y  = ~ (* src = "rtl/gpio/gpio.sv:110.26-110.35" *) \gen_gpios[5].serial_d ;
  assign \gen_gpios[5].f_edge  = \$98y  & (* src = "rtl/gpio/gpio.sv:110.25-110.47" *) \gen_gpios[5].serial_q ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[0].serial_q  <= 1'h0;
    else \gen_gpios[0].serial_q  <= \gen_gpios[0].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[10].serial_q  <= 1'h0;
    else \gen_gpios[10].serial_q  <= \gen_gpios[10].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[11].serial_q  <= 1'h0;
    else \gen_gpios[11].serial_q  <= \gen_gpios[11].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[12].serial_q  <= 1'h0;
    else \gen_gpios[12].serial_q  <= \gen_gpios[12].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[13].serial_q  <= 1'h0;
    else \gen_gpios[13].serial_q  <= \gen_gpios[13].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[14].serial_q  <= 1'h0;
    else \gen_gpios[14].serial_q  <= \gen_gpios[14].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[15].serial_q  <= 1'h0;
    else \gen_gpios[15].serial_q  <= \gen_gpios[15].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[16].serial_q  <= 1'h0;
    else \gen_gpios[16].serial_q  <= \gen_gpios[16].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[17].serial_q  <= 1'h0;
    else \gen_gpios[17].serial_q  <= \gen_gpios[17].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[18].serial_q  <= 1'h0;
    else \gen_gpios[18].serial_q  <= \gen_gpios[18].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[19].serial_q  <= 1'h0;
    else \gen_gpios[19].serial_q  <= \gen_gpios[19].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[1].serial_q  <= 1'h0;
    else \gen_gpios[1].serial_q  <= \gen_gpios[1].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[20].serial_q  <= 1'h0;
    else \gen_gpios[20].serial_q  <= \gen_gpios[20].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[21].serial_q  <= 1'h0;
    else \gen_gpios[21].serial_q  <= \gen_gpios[21].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[22].serial_q  <= 1'h0;
    else \gen_gpios[22].serial_q  <= \gen_gpios[22].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[23].serial_q  <= 1'h0;
    else \gen_gpios[23].serial_q  <= \gen_gpios[23].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[24].serial_q  <= 1'h0;
    else \gen_gpios[24].serial_q  <= \gen_gpios[24].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[25].serial_q  <= 1'h0;
    else \gen_gpios[25].serial_q  <= \gen_gpios[25].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[26].serial_q  <= 1'h0;
    else \gen_gpios[26].serial_q  <= \gen_gpios[26].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[27].serial_q  <= 1'h0;
    else \gen_gpios[27].serial_q  <= \gen_gpios[27].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[28].serial_q  <= 1'h0;
    else \gen_gpios[28].serial_q  <= \gen_gpios[28].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[29].serial_q  <= 1'h0;
    else \gen_gpios[29].serial_q  <= \gen_gpios[29].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[2].serial_q  <= 1'h0;
    else \gen_gpios[2].serial_q  <= \gen_gpios[2].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[30].serial_q  <= 1'h0;
    else \gen_gpios[30].serial_q  <= \gen_gpios[30].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[31].serial_q  <= 1'h0;
    else \gen_gpios[31].serial_q  <= \gen_gpios[31].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[3].serial_q  <= 1'h0;
    else \gen_gpios[3].serial_q  <= \gen_gpios[3].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[4].serial_q  <= 1'h0;
    else \gen_gpios[4].serial_q  <= \gen_gpios[4].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[5].serial_q  <= 1'h0;
    else \gen_gpios[5].serial_q  <= \gen_gpios[5].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[6].serial_q  <= 1'h0;
    else \gen_gpios[6].serial_q  <= \gen_gpios[6].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[7].serial_q  <= 1'h0;
    else \gen_gpios[7].serial_q  <= \gen_gpios[7].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[8].serial_q  <= 1'h0;
    else \gen_gpios[8].serial_q  <= \gen_gpios[8].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[9].serial_q  <= 1'h0;
    else \gen_gpios[9].serial_q  <= \gen_gpios[9].serial_d ;
  assign hw2reg[78:77] = \$299y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$300y , 1'h1 } : 2'h0;
  assign hw2reg[118:117] = \$451y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$452y , 1'h1 } : 2'h0;
  assign hw2reg[73:72] = \$280y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$281y , 1'h1 } : 2'h0;
  assign hw2reg[138:137] = \$527y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$528y , 1'h1 } : 2'h0;
  assign hw2reg[68:67] = \$261y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$262y , 1'h1 } : 2'h0;
  assign hw2reg[113:112] = \$432y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$433y , 1'h1 } : 2'h0;
  assign hw2reg[63:62] = \$242y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$243y , 1'h1 } : 2'h0;
  assign hw2reg[148:147] = \$565y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$566y , 1'h1 } : 2'h0;
  assign hw2reg[58:57] = \$223y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$224y , 1'h1 } : 2'h0;
  assign hw2reg[108:107] = \$413y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$414y , 1'h1 } : 2'h0;
  assign hw2reg[53:52] = \$204y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$205y , 1'h1 } : 2'h0;
  assign hw2reg[133:132] = \$508y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$509y , 1'h1 } : 2'h0;
  assign hw2reg[48:47] = \$185y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$186y , 1'h1 } : 2'h0;
  assign hw2reg[103:102] = \$394y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$395y , 1'h1 } : 2'h0;
  assign hw2reg[43:42] = \$166y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$167y , 1'h1 } : 2'h0;
  assign hw2reg[153:152] = \$584y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$585y , 1'h1 } : 2'h0;
  assign hw2reg[38:37] = \$147y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$148y , 1'h1 } : 2'h0;
  assign hw2reg[98:97] = \$375y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$376y , 1'h1 } : 2'h0;
  assign hw2reg[33:32] = \$128y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$129y , 1'h1 } : 2'h0;
  assign hw2reg[128:127] = \$489y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$490y , 1'h1 } : 2'h0;
  assign hw2reg[28:27] = \$109y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$110y , 1'h1 } : 2'h0;
  assign hw2reg[93:92] = \$356y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$357y , 1'h1 } : 2'h0;
  assign hw2reg[23:22] = \$90y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$91y , 1'h1 } : 2'h0;
  assign hw2reg[143:142] = \$546y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$547y , 1'h1 } : 2'h0;
  assign hw2reg[18:17] = \$71y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$72y , 1'h1 } : 2'h0;
  assign hw2reg[88:87] = \$337y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$338y , 1'h1 } : 2'h0;
  assign hw2reg[13:12] = \$52y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$53y , 1'h1 } : 2'h0;
  assign hw2reg[123:122] = \$470y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$471y , 1'h1 } : 2'h0;
  assign hw2reg[8:7] = \$33y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$34y , 1'h1 } : 2'h0;
  assign hw2reg[83:82] = \$318y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$319y , 1'h1 } : 2'h0;
  assign hw2reg[3:2] = \$14y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$15y , 1'h1 } : 2'h0;
  assign hw2reg[158:157] = \$603y  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$604y , 1'h1 } : 2'h0;
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[0].i_sync  \gen_gpios[0].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[0]),
    .serial_o(\gen_gpios[0].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[10].i_sync  \gen_gpios[10].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[10]),
    .serial_o(\gen_gpios[10].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[11].i_sync  \gen_gpios[11].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[11]),
    .serial_o(\gen_gpios[11].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[12].i_sync  \gen_gpios[12].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[12]),
    .serial_o(\gen_gpios[12].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[13].i_sync  \gen_gpios[13].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[13]),
    .serial_o(\gen_gpios[13].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[14].i_sync  \gen_gpios[14].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[14]),
    .serial_o(\gen_gpios[14].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[15].i_sync  \gen_gpios[15].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[15]),
    .serial_o(\gen_gpios[15].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[16].i_sync  \gen_gpios[16].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[16]),
    .serial_o(\gen_gpios[16].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[17].i_sync  \gen_gpios[17].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[17]),
    .serial_o(\gen_gpios[17].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[18].i_sync  \gen_gpios[18].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[18]),
    .serial_o(\gen_gpios[18].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[19].i_sync  \gen_gpios[19].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[19]),
    .serial_o(\gen_gpios[19].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[1].i_sync  \gen_gpios[1].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[1]),
    .serial_o(\gen_gpios[1].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[20].i_sync  \gen_gpios[20].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[20]),
    .serial_o(\gen_gpios[20].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[21].i_sync  \gen_gpios[21].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[21]),
    .serial_o(\gen_gpios[21].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[22].i_sync  \gen_gpios[22].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[22]),
    .serial_o(\gen_gpios[22].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[23].i_sync  \gen_gpios[23].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[23]),
    .serial_o(\gen_gpios[23].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[24].i_sync  \gen_gpios[24].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[24]),
    .serial_o(\gen_gpios[24].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[25].i_sync  \gen_gpios[25].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[25]),
    .serial_o(\gen_gpios[25].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[26].i_sync  \gen_gpios[26].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[26]),
    .serial_o(\gen_gpios[26].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[27].i_sync  \gen_gpios[27].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[27]),
    .serial_o(\gen_gpios[27].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[28].i_sync  \gen_gpios[28].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[28]),
    .serial_o(\gen_gpios[28].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[29].i_sync  \gen_gpios[29].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[29]),
    .serial_o(\gen_gpios[29].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[2].i_sync  \gen_gpios[2].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[2]),
    .serial_o(\gen_gpios[2].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[30].i_sync  \gen_gpios[30].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[30]),
    .serial_o(\gen_gpios[30].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[31].i_sync  \gen_gpios[31].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[31]),
    .serial_o(\gen_gpios[31].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[3].i_sync  \gen_gpios[3].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[3]),
    .serial_o(\gen_gpios[3].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[4].i_sync  \gen_gpios[4].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[4]),
    .serial_o(\gen_gpios[4].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[5].i_sync  \gen_gpios[5].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[5]),
    .serial_o(\gen_gpios[5].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[6].i_sync  \gen_gpios[6].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[6]),
    .serial_o(\gen_gpios[6].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[7].i_sync  \gen_gpios[7].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[7]),
    .serial_o(\gen_gpios[7].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[8].i_sync  \gen_gpios[8].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[8]),
    .serial_o(\gen_gpios[8].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[9].i_sync  \gen_gpios[9].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[9]),
    .serial_o(\gen_gpios[9].serial_d )
  );
  (* src = "rtl/gpio/gpio.sv:74.5" *)
  \gpio_reg_top$croc_chip.i_croc_soc.i_croc.i_gpio.i_reg_file  i_reg_file (
    .clk_i(clk_i),
    .hw2reg({ hw2reg[159:157], gpio_intrpt[31], gpio_intrpt[31], hw2reg[154:152], gpio_intrpt[30], gpio_intrpt[30], hw2reg[149:147], gpio_intrpt[29], gpio_intrpt[29], hw2reg[144:142], gpio_intrpt[28], gpio_intrpt[28], hw2reg[139:137], gpio_intrpt[27], gpio_intrpt[27], hw2reg[134:132], gpio_intrpt[26], gpio_intrpt[26], hw2reg[129:127], gpio_intrpt[25], gpio_intrpt[25], hw2reg[124:122], gpio_intrpt[24], gpio_intrpt[24], hw2reg[119:117], gpio_intrpt[23], gpio_intrpt[23], hw2reg[114:112], gpio_intrpt[22], gpio_intrpt[22], hw2reg[109:107], gpio_intrpt[21], gpio_intrpt[21], hw2reg[104:102], gpio_intrpt[20], gpio_intrpt[20], hw2reg[99:97], gpio_intrpt[19], gpio_intrpt[19], hw2reg[94:92], gpio_intrpt[18], gpio_intrpt[18], hw2reg[89:87], gpio_intrpt[17], gpio_intrpt[17], hw2reg[84:82], gpio_intrpt[16], gpio_intrpt[16], hw2reg[79:77], gpio_intrpt[15], gpio_intrpt[15], hw2reg[74:72], gpio_intrpt[14], gpio_intrpt[14], hw2reg[69:67], gpio_intrpt[13], gpio_intrpt[13], hw2reg[64:62], gpio_intrpt[12], gpio_intrpt[12], hw2reg[59:57], gpio_intrpt[11], gpio_intrpt[11], hw2reg[54:52], gpio_intrpt[10], gpio_intrpt[10], hw2reg[49:47], gpio_intrpt[9], gpio_intrpt[9], hw2reg[44:42], gpio_intrpt[8], gpio_intrpt[8], hw2reg[39:37], gpio_intrpt[7], gpio_intrpt[7], hw2reg[34:32], gpio_intrpt[6], gpio_intrpt[6], hw2reg[29:27], gpio_intrpt[5], gpio_intrpt[5], hw2reg[24:22], gpio_intrpt[4], gpio_intrpt[4], hw2reg[19:17], gpio_intrpt[3], gpio_intrpt[3], hw2reg[14:12], gpio_intrpt[2], gpio_intrpt[2], hw2reg[9:7], gpio_intrpt[1], gpio_intrpt[1], hw2reg[4:2], gpio_intrpt[0], gpio_intrpt[0] }),
    .obi_req_i(obi_req_i),
    .obi_rsp_o(obi_rsp_o),
    .reg2hw(reg2hw),
    .rst_ni(rst_ni)
  );
  assign gpio_in_sync_o = { \gen_gpios[31].serial_q , \gen_gpios[30].serial_q , \gen_gpios[29].serial_q , \gen_gpios[28].serial_q , \gen_gpios[27].serial_q , \gen_gpios[26].serial_q , \gen_gpios[25].serial_q , \gen_gpios[24].serial_q , \gen_gpios[23].serial_q , \gen_gpios[22].serial_q , \gen_gpios[21].serial_q , \gen_gpios[20].serial_q , \gen_gpios[19].serial_q , \gen_gpios[18].serial_q , \gen_gpios[17].serial_q , \gen_gpios[16].serial_q , \gen_gpios[15].serial_q , \gen_gpios[14].serial_q , \gen_gpios[13].serial_q , \gen_gpios[12].serial_q , \gen_gpios[11].serial_q , \gen_gpios[10].serial_q , \gen_gpios[9].serial_q , \gen_gpios[8].serial_q , \gen_gpios[7].serial_q , \gen_gpios[6].serial_q , \gen_gpios[5].serial_q , \gen_gpios[4].serial_q , \gen_gpios[3].serial_q , \gen_gpios[2].serial_q , \gen_gpios[1].serial_q , \gen_gpios[0].serial_q  };
  assign gpio_out_en_o = { \gen_gpios[31].is_output , \gen_gpios[30].is_output , \gen_gpios[29].is_output , \gen_gpios[28].is_output , \gen_gpios[27].is_output , \gen_gpios[26].is_output , \gen_gpios[25].is_output , \gen_gpios[24].is_output , \gen_gpios[23].is_output , \gen_gpios[22].is_output , \gen_gpios[21].is_output , \gen_gpios[20].is_output , \gen_gpios[19].is_output , \gen_gpios[18].is_output , \gen_gpios[17].is_output , \gen_gpios[16].is_output , \gen_gpios[15].is_output , \gen_gpios[14].is_output , \gen_gpios[13].is_output , \gen_gpios[12].is_output , \gen_gpios[11].is_output , \gen_gpios[10].is_output , \gen_gpios[9].is_output , \gen_gpios[8].is_output , \gen_gpios[7].is_output , \gen_gpios[6].is_output , \gen_gpios[5].is_output , \gen_gpios[4].is_output , \gen_gpios[3].is_output , \gen_gpios[2].is_output , \gen_gpios[1].is_output , \gen_gpios[0].is_output  };
  assign { hw2reg[156:155], hw2reg[151:150], hw2reg[146:145], hw2reg[141:140], hw2reg[136:135], hw2reg[131:130], hw2reg[126:125], hw2reg[121:120], hw2reg[116:115], hw2reg[111:110], hw2reg[106:105], hw2reg[101:100], hw2reg[96:95], hw2reg[91:90], hw2reg[86:85], hw2reg[81:80], hw2reg[76:75], hw2reg[71:70], hw2reg[66:65], hw2reg[61:60], hw2reg[56:55], hw2reg[51:50], hw2reg[46:45], hw2reg[41:40], hw2reg[36:35], hw2reg[31:30], hw2reg[26:25], hw2reg[21:20], hw2reg[16:15], hw2reg[11:10], hw2reg[6:5], hw2reg[1:0] } = { gpio_intrpt[31], gpio_intrpt[31:30], gpio_intrpt[30:29], gpio_intrpt[29:28], gpio_intrpt[28:27], gpio_intrpt[27:26], gpio_intrpt[26:25], gpio_intrpt[25:24], gpio_intrpt[24:23], gpio_intrpt[23:22], gpio_intrpt[22:21], gpio_intrpt[21:20], gpio_intrpt[20:19], gpio_intrpt[19:18], gpio_intrpt[18:17], gpio_intrpt[17:16], gpio_intrpt[16:15], gpio_intrpt[15:14], gpio_intrpt[14:13], gpio_intrpt[13:12], gpio_intrpt[12:11], gpio_intrpt[11:10], gpio_intrpt[10:9], gpio_intrpt[9:8], gpio_intrpt[8:7], gpio_intrpt[7:6], gpio_intrpt[6:5], gpio_intrpt[5:4], gpio_intrpt[4:3], gpio_intrpt[3:2], gpio_intrpt[2:1], gpio_intrpt[1:0], gpio_intrpt[0] };
endmodule

(* src = "rtl/gpio/gpio_reg_top.sv:12.8" *)
module \gpio_reg_top$croc_chip.i_croc_soc.i_croc.i_gpio.i_reg_file (clk_i, rst_ni, obi_req_i, obi_rsp_o, reg2hw, hw2reg);
  wire [31:0] \$123y ;
  wire [31:0] \$124y ;
  wire [31:0] \$125y ;
  wire [31:0] \$126y ;
  wire [31:0] \$128y ;
  wire [31:0] \$130y ;
  wire [31:0] \$132y ;
  wire [31:0] \$134y ;
  wire [31:0] \$137y ;
  wire [31:0] \$139y ;
  wire [31:0] \$141y ;
  wire [31:0] \$143y ;
  wire \$1y ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14677 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14680 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14683 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14686 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13399 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13401 ;
  (* src = "rtl/gpio/gpio_reg_top.sv:165.5-199.8" *)
  wire \$obi_err$150 ;
  (* src = "rtl/gpio/gpio_reg_top.sv:205.7-244.14" *)
  wire \$obi_err$157 ;
  (* src = "rtl/gpio/gpio_reg_top.sv:205.7-244.14" *)
  wire [31:0] \$obi_rdata$158 ;
  wire \$procmux$10985_CMP ;
  wire \$procmux$10986_CMP ;
  wire \$procmux$10987_CMP ;
  wire \$procmux$10988_CMP ;
  wire \$procmux$10989_CMP ;
  wire \$procmux$10990_CMP ;
  wire \$procmux$10991_CMP ;
  wire \$procmux$10992_CMP ;
  wire [31:0] \$procmux$10997_Y ;
  wire \$procmux$11032_CMP ;
  wire \$procmux$11041_CMP ;
  wire [31:0] \$procmux$11047_Y ;
  wire \$procmux$11048_CMP ;
  wire [31:0] \$procmux$11055_Y ;
  wire \$procmux$11056_CMP ;
  wire \$procmux$11062_CMP ;
  wire \$procmux$11067_CMP ;
  wire \$procmux$11071_Y ;
  (* src = "rtl/gpio/gpio_reg_top.sv:23.18" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/gpio/gpio_reg_top.sv:37.43" *)
  input [159:0] hw2reg;
  wire [159:0] hw2reg;
  (* src = "rtl/gpio/gpio_reg_top.sv:50.41" *)
  reg id_q;
  (* src = "rtl/gpio/gpio_reg_top.sv:113.25" *)
  wire [31:0] new_intrpt;
  (* src = "rtl/gpio/gpio_reg_top.sv:108.21" *)
  wire [255:0] new_reg;
  (* src = "rtl/gpio/gpio_reg_top.sv:51.35" *)
  wire obi_err;
  (* src = "rtl/gpio/gpio_reg_top.sv:54.35" *)
  wire [31:0] obi_rdata;
  (* src = "rtl/gpio/gpio_reg_top.sv:55.35" *)
  wire obi_read_request;
  (* src = "rtl/gpio/gpio_reg_top.sv:29.23" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "rtl/gpio/gpio_reg_top.sv:31.22" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "rtl/gpio/gpio_reg_top.sv:55.53" *)
  wire obi_write_request;
  (* src = "rtl/gpio/gpio_reg_top.sv:49.48" *)
  wire [11:0] read_addr_q;
  (* src = "rtl/gpio/gpio_reg_top.sv:35.42" *)
  output [223:0] reg2hw;
  wire [223:0] reg2hw;
  (* src = "rtl/gpio/gpio_reg_top.sv:105.21" *)
  wire [255:0] reg_d;
  (* src = "rtl/gpio/gpio_reg_top.sv:105.28" *)
  wire [255:0] reg_q;
  (* src = "rtl/gpio/gpio_reg_top.sv:47.42" *)
  reg req_q;
  (* src = "rtl/gpio/gpio_reg_top.sv:25.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/gpio/gpio_reg_top.sv:114.25" *)
  wire [31:0] toggle_out;
  (* src = "rtl/gpio/gpio_reg_top.sv:52.35" *)
  wire w_err_d;
  (* src = "rtl/gpio/gpio_reg_top.sv:52.44" *)
  reg w_err_q;
  (* src = "rtl/gpio/gpio_reg_top.sv:46.41" *)
  reg we_q;
  assign \$1y  = ~ (* src = "rtl/gpio/gpio_reg_top.sv:69.38-69.43" *) we_q;
  assign new_reg[56] = hw2reg[120] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[121] : reg2hw[169];
  assign new_intrpt[24] = hw2reg[120] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[121];
  assign new_reg[153] = hw2reg[127] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[128] : reg2hw[179];
  assign new_reg[57] = hw2reg[125] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[126] : reg2hw[176];
  assign new_intrpt[25] = hw2reg[125] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[126];
  assign new_reg[154] = hw2reg[132] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[133] : reg2hw[186];
  assign new_reg[58] = hw2reg[130] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[131] : reg2hw[183];
  assign new_intrpt[26] = hw2reg[130] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[131];
  assign new_reg[155] = hw2reg[137] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[138] : reg2hw[193];
  assign new_reg[59] = hw2reg[135] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[136] : reg2hw[190];
  assign new_intrpt[27] = hw2reg[135] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[136];
  assign new_reg[156] = hw2reg[142] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[143] : reg2hw[200];
  assign new_reg[60] = hw2reg[140] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[141] : reg2hw[197];
  assign new_intrpt[28] = hw2reg[140] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[141];
  assign new_reg[157] = hw2reg[147] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[148] : reg2hw[207];
  assign new_reg[61] = hw2reg[145] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[146] : reg2hw[204];
  assign new_intrpt[29] = hw2reg[145] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[146];
  assign new_reg[158] = hw2reg[152] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[153] : reg2hw[214];
  assign new_reg[62] = hw2reg[150] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[151] : reg2hw[211];
  assign new_intrpt[30] = hw2reg[150] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[151];
  assign new_reg[159] = hw2reg[157] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[158] : reg2hw[221];
  assign new_reg[63] = hw2reg[155] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[156] : reg2hw[218];
  assign new_intrpt[31] = hw2reg[155] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[156];
  assign \$124y  = { \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7] } & (* src = "rtl/gpio/gpio_reg_top.sv:169.24-169.47" *) { reg2hw[223], reg2hw[216], reg2hw[209], reg2hw[202], reg2hw[195], reg2hw[188], reg2hw[181], reg2hw[174], reg2hw[167], reg2hw[160], reg2hw[153], reg2hw[146], reg2hw[139], reg2hw[132], reg2hw[125], reg2hw[118], reg2hw[111], reg2hw[104], reg2hw[97], reg2hw[90], reg2hw[83], reg2hw[76], reg2hw[69], reg2hw[62], reg2hw[55], reg2hw[48], reg2hw[41], reg2hw[34], reg2hw[27], reg2hw[20], reg2hw[13], reg2hw[6] };
  assign \$125y  = { obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40:39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39:38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38:37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37] } & (* src = "rtl/gpio/gpio_reg_top.sv:169.52-169.87" *) obi_req_i[36:5];
  assign \$126y  = \$124y  | (* src = "rtl/gpio/gpio_reg_top.sv:169.23-169.88" *) \$125y ;
  assign \$128y  = { \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7] } & (* src = "rtl/gpio/gpio_reg_top.sv:173.23-173.45" *) { reg2hw[222], reg2hw[215], reg2hw[208], reg2hw[201], reg2hw[194], reg2hw[187], reg2hw[180], reg2hw[173], reg2hw[166], reg2hw[159], reg2hw[152], reg2hw[145], reg2hw[138], reg2hw[131], reg2hw[124], reg2hw[117], reg2hw[110], reg2hw[103], reg2hw[96], reg2hw[89], reg2hw[82], reg2hw[75], reg2hw[68], reg2hw[61], reg2hw[54], reg2hw[47], reg2hw[40], reg2hw[33], reg2hw[26], reg2hw[19], reg2hw[12], reg2hw[5] };
  assign \$130y  = \$128y  | (* src = "rtl/gpio/gpio_reg_top.sv:173.22-173.86" *) \$125y ;
  assign \$132y  = { \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7] } & (* src = "rtl/gpio/gpio_reg_top.sv:178.12-178.35" *) new_reg[159:128];
  assign \$134y  = \$132y  | (* src = "rtl/gpio/gpio_reg_top.sv:178.11-178.76" *) \$125y ;
  assign \$137y  = { \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7] } & (* src = "rtl/gpio/gpio_reg_top.sv:187.14-187.43" *) { reg2hw[219], reg2hw[212], reg2hw[205], reg2hw[198], reg2hw[191], reg2hw[184], reg2hw[177], reg2hw[170], reg2hw[163], reg2hw[156], reg2hw[149], reg2hw[142], reg2hw[135], reg2hw[128], reg2hw[121], reg2hw[114], reg2hw[107], reg2hw[100], reg2hw[93], reg2hw[86], reg2hw[79], reg2hw[72], reg2hw[65], reg2hw[58], reg2hw[51], reg2hw[44], reg2hw[37], reg2hw[30], reg2hw[23], reg2hw[16], reg2hw[9], reg2hw[2] };
  assign \$139y  = \$137y  | (* src = "rtl/gpio/gpio_reg_top.sv:187.13-187.84" *) \$125y ;
  assign \$141y  = { \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7] } & (* src = "rtl/gpio/gpio_reg_top.sv:192.14-192.45" *) { reg2hw[217], reg2hw[210], reg2hw[203], reg2hw[196], reg2hw[189], reg2hw[182], reg2hw[175], reg2hw[168], reg2hw[161], reg2hw[154], reg2hw[147], reg2hw[140], reg2hw[133], reg2hw[126], reg2hw[119], reg2hw[112], reg2hw[105], reg2hw[98], reg2hw[91], reg2hw[84], reg2hw[77], reg2hw[70], reg2hw[63], reg2hw[56], reg2hw[49], reg2hw[42], reg2hw[35], reg2hw[28], reg2hw[21], reg2hw[14], reg2hw[7], reg2hw[0] };
  assign \$143y  = \$141y  | (* src = "rtl/gpio/gpio_reg_top.sv:192.13-192.86" *) \$125y ;
  assign obi_read_request = req_q & (* src = "rtl/gpio/gpio_reg_top.sv:69.30-69.43" *) \$1y ;
  assign new_reg[128] = hw2reg[2] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[3] : reg2hw[4];
  assign new_reg[32] = hw2reg[0] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[1] : reg2hw[1];
  assign new_intrpt[0] = hw2reg[0] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[1];
  assign obi_write_request = obi_req_i[0] & (* src = "rtl/gpio/gpio_reg_top.sv:70.30-70.60" *) obi_req_i[41];
  assign new_reg[129] = hw2reg[7] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[8] : reg2hw[11];
  assign new_reg[33] = hw2reg[5] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[6] : reg2hw[8];
  assign new_intrpt[1] = hw2reg[5] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[6];
  assign new_reg[130] = hw2reg[12] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[13] : reg2hw[18];
  assign new_reg[34] = hw2reg[10] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[11] : reg2hw[15];
  assign new_intrpt[2] = hw2reg[10] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[11];
  assign new_reg[131] = hw2reg[17] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[18] : reg2hw[25];
  assign new_reg[35] = hw2reg[15] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[16] : reg2hw[22];
  assign new_intrpt[3] = hw2reg[15] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[16];
  assign new_reg[132] = hw2reg[22] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[23] : reg2hw[32];
  assign new_reg[36] = hw2reg[20] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[21] : reg2hw[29];
  assign new_intrpt[4] = hw2reg[20] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[21];
  assign new_reg[133] = hw2reg[27] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[28] : reg2hw[39];
  assign new_reg[37] = hw2reg[25] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[26] : reg2hw[36];
  assign new_intrpt[5] = hw2reg[25] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[26];
  assign new_reg[134] = hw2reg[32] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[33] : reg2hw[46];
  assign new_reg[38] = hw2reg[30] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[31] : reg2hw[43];
  assign new_intrpt[6] = hw2reg[30] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[31];
  assign new_reg[135] = hw2reg[37] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[38] : reg2hw[53];
  assign new_reg[39] = hw2reg[35] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[36] : reg2hw[50];
  assign new_intrpt[7] = hw2reg[35] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[36];
  assign new_reg[136] = hw2reg[42] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[43] : reg2hw[60];
  assign new_reg[40] = hw2reg[40] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[41] : reg2hw[57];
  assign new_intrpt[8] = hw2reg[40] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[41];
  assign new_reg[137] = hw2reg[47] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[48] : reg2hw[67];
  assign new_reg[41] = hw2reg[45] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[46] : reg2hw[64];
  assign new_intrpt[9] = hw2reg[45] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[46];
  assign new_reg[138] = hw2reg[52] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[53] : reg2hw[74];
  assign new_reg[42] = hw2reg[50] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[51] : reg2hw[71];
  assign new_intrpt[10] = hw2reg[50] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[51];
  assign new_reg[139] = hw2reg[57] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[58] : reg2hw[81];
  assign new_reg[43] = hw2reg[55] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[56] : reg2hw[78];
  assign new_intrpt[11] = hw2reg[55] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[56];
  assign new_reg[140] = hw2reg[62] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[63] : reg2hw[88];
  assign new_reg[44] = hw2reg[60] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[61] : reg2hw[85];
  assign new_intrpt[12] = hw2reg[60] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[61];
  assign new_reg[141] = hw2reg[67] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[68] : reg2hw[95];
  assign new_reg[45] = hw2reg[65] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[66] : reg2hw[92];
  assign new_intrpt[13] = hw2reg[65] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[66];
  assign new_reg[142] = hw2reg[72] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[73] : reg2hw[102];
  assign new_reg[46] = hw2reg[70] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[71] : reg2hw[99];
  assign new_intrpt[14] = hw2reg[70] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[71];
  assign new_reg[143] = hw2reg[77] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[78] : reg2hw[109];
  assign new_reg[47] = hw2reg[75] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[76] : reg2hw[106];
  assign new_intrpt[15] = hw2reg[75] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[76];
  assign new_reg[144] = hw2reg[82] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[83] : reg2hw[116];
  assign new_reg[48] = hw2reg[80] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[81] : reg2hw[113];
  assign new_intrpt[16] = hw2reg[80] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[81];
  assign new_reg[145] = hw2reg[87] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[88] : reg2hw[123];
  assign new_reg[49] = hw2reg[85] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[86] : reg2hw[120];
  assign new_intrpt[17] = hw2reg[85] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[86];
  assign new_reg[146] = hw2reg[92] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[93] : reg2hw[130];
  assign new_reg[50] = hw2reg[90] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[91] : reg2hw[127];
  assign new_intrpt[18] = hw2reg[90] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[91];
  assign new_reg[147] = hw2reg[97] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[98] : reg2hw[137];
  assign new_reg[51] = hw2reg[95] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[96] : reg2hw[134];
  assign new_intrpt[19] = hw2reg[95] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[96];
  assign new_reg[148] = hw2reg[102] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[103] : reg2hw[144];
  assign new_reg[52] = hw2reg[100] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[101] : reg2hw[141];
  assign new_intrpt[20] = hw2reg[100] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[101];
  assign new_reg[149] = hw2reg[107] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[108] : reg2hw[151];
  assign new_reg[53] = hw2reg[105] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[106] : reg2hw[148];
  assign new_intrpt[21] = hw2reg[105] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[106];
  assign new_reg[150] = hw2reg[112] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[113] : reg2hw[158];
  assign new_reg[54] = hw2reg[110] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[111] : reg2hw[155];
  assign new_intrpt[22] = hw2reg[110] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[111];
  assign new_reg[151] = hw2reg[117] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[118] : reg2hw[165];
  assign new_reg[55] = hw2reg[115] ? (* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" *) hw2reg[116] : reg2hw[162];
  assign new_intrpt[23] = hw2reg[115] & (* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" *) hw2reg[116];
  assign new_reg[152] = hw2reg[122] ? (* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" *) hw2reg[123] : reg2hw[172];
  reg [31:0] \$auto$ff.cc:266:slice$14676 ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14676  <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14677 ) \$auto$ff.cc:266:slice$14676  <= \$139y ;
  assign { reg2hw[219], reg2hw[212], reg2hw[205], reg2hw[198], reg2hw[191], reg2hw[184], reg2hw[177], reg2hw[170], reg2hw[163], reg2hw[156], reg2hw[149], reg2hw[142], reg2hw[135], reg2hw[128], reg2hw[121], reg2hw[114], reg2hw[107], reg2hw[100], reg2hw[93], reg2hw[86], reg2hw[79], reg2hw[72], reg2hw[65], reg2hw[58], reg2hw[51], reg2hw[44], reg2hw[37], reg2hw[30], reg2hw[23], reg2hw[16], reg2hw[9], reg2hw[2] } = \$auto$ff.cc:266:slice$14676 ;
  reg [31:0] \$auto$ff.cc:266:slice$14679 ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14679  <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14680 ) \$auto$ff.cc:266:slice$14679  <= \$143y ;
  assign { reg2hw[217], reg2hw[210], reg2hw[203], reg2hw[196], reg2hw[189], reg2hw[182], reg2hw[175], reg2hw[168], reg2hw[161], reg2hw[154], reg2hw[147], reg2hw[140], reg2hw[133], reg2hw[126], reg2hw[119], reg2hw[112], reg2hw[105], reg2hw[98], reg2hw[91], reg2hw[84], reg2hw[77], reg2hw[70], reg2hw[63], reg2hw[56], reg2hw[49], reg2hw[42], reg2hw[35], reg2hw[28], reg2hw[21], reg2hw[14], reg2hw[7], reg2hw[0] } = \$auto$ff.cc:266:slice$14679 ;
  reg [31:0] \$auto$ff.cc:266:slice$14682 ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14682  <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14683 ) \$auto$ff.cc:266:slice$14682  <= \$130y ;
  assign { reg2hw[222], reg2hw[215], reg2hw[208], reg2hw[201], reg2hw[194], reg2hw[187], reg2hw[180], reg2hw[173], reg2hw[166], reg2hw[159], reg2hw[152], reg2hw[145], reg2hw[138], reg2hw[131], reg2hw[124], reg2hw[117], reg2hw[110], reg2hw[103], reg2hw[96], reg2hw[89], reg2hw[82], reg2hw[75], reg2hw[68], reg2hw[61], reg2hw[54], reg2hw[47], reg2hw[40], reg2hw[33], reg2hw[26], reg2hw[19], reg2hw[12], reg2hw[5] } = \$auto$ff.cc:266:slice$14682 ;
  reg [31:0] \$auto$ff.cc:266:slice$14685 ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14685  <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14686 ) \$auto$ff.cc:266:slice$14685  <= \$126y ;
  assign { reg2hw[223], reg2hw[216], reg2hw[209], reg2hw[202], reg2hw[195], reg2hw[188], reg2hw[181], reg2hw[174], reg2hw[167], reg2hw[160], reg2hw[153], reg2hw[146], reg2hw[139], reg2hw[132], reg2hw[125], reg2hw[118], reg2hw[111], reg2hw[104], reg2hw[97], reg2hw[90], reg2hw[83], reg2hw[76], reg2hw[69], reg2hw[62], reg2hw[55], reg2hw[48], reg2hw[41], reg2hw[34], reg2hw[27], reg2hw[20], reg2hw[13], reg2hw[6] } = \$auto$ff.cc:266:slice$14685 ;
  reg [9:0] \$auto$ff.cc:266:slice$14688 ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14688  <= 10'h000;
    else \$auto$ff.cc:266:slice$14688  <= obi_req_i[53:44];
  assign read_addr_q[9:0] = \$auto$ff.cc:266:slice$14688 ;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14677  = & { \$procmux$11062_CMP , obi_write_request };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14680  = & { \$procmux$11067_CMP , obi_write_request };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14683  = & { \$procmux$11041_CMP , obi_write_request };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14686  = & { \$procmux$11032_CMP , obi_write_request };
  assign { \$123y [31], \$123y [23], \$123y [15], \$123y [7] } = ~ obi_req_i[40:37];
  assign \$auto$opt_reduce.cc:137:opt_pmux$13399  = | { \$procmux$10992_CMP , \$procmux$10991_CMP , \$procmux$10990_CMP , \$procmux$10989_CMP , \$procmux$10988_CMP , \$procmux$10987_CMP , \$procmux$10986_CMP , \$procmux$10985_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13401  = | { \$procmux$11067_CMP , \$procmux$11062_CMP , \$procmux$11056_CMP , \$procmux$11048_CMP , \$procmux$11041_CMP , \$procmux$11032_CMP  };
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) id_q <= 1'h0;
    else id_q <= obi_req_i[2];
  reg [31:0] \$driver$reg_q.in ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$driver$reg_q.in  <= 32'd0;
    else \$driver$reg_q.in  <= { hw2reg[159], hw2reg[154], hw2reg[149], hw2reg[144], hw2reg[139], hw2reg[134], hw2reg[129], hw2reg[124], hw2reg[119], hw2reg[114], hw2reg[109], hw2reg[104], hw2reg[99], hw2reg[94], hw2reg[89], hw2reg[84], hw2reg[79], hw2reg[74], hw2reg[69], hw2reg[64], hw2reg[59], hw2reg[54], hw2reg[49], hw2reg[44], hw2reg[39], hw2reg[34], hw2reg[29], hw2reg[24], hw2reg[19], hw2reg[14], hw2reg[9], hw2reg[4] };
  assign reg_q[191:160] = \$driver$reg_q.in ;
  reg [31:0] \$driver$reg_q.intrpt ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$driver$reg_q.intrpt  <= 32'd0;
    else \$driver$reg_q.intrpt  <= reg_d[63:32];
  assign { reg2hw[218], reg2hw[211], reg2hw[204], reg2hw[197], reg2hw[190], reg2hw[183], reg2hw[176], reg2hw[169], reg2hw[162], reg2hw[155], reg2hw[148], reg2hw[141], reg2hw[134], reg2hw[127], reg2hw[120], reg2hw[113], reg2hw[106], reg2hw[99], reg2hw[92], reg2hw[85], reg2hw[78], reg2hw[71], reg2hw[64], reg2hw[57], reg2hw[50], reg2hw[43], reg2hw[36], reg2hw[29], reg2hw[22], reg2hw[15], reg2hw[8], reg2hw[1] } = \$driver$reg_q.intrpt ;
  reg [31:0] \$driver$reg_q.out ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$driver$reg_q.out  <= 32'd0;
    else \$driver$reg_q.out  <= reg_d[159:128];
  assign { reg2hw[221], reg2hw[214], reg2hw[207], reg2hw[200], reg2hw[193], reg2hw[186], reg2hw[179], reg2hw[172], reg2hw[165], reg2hw[158], reg2hw[151], reg2hw[144], reg2hw[137], reg2hw[130], reg2hw[123], reg2hw[116], reg2hw[109], reg2hw[102], reg2hw[95], reg2hw[88], reg2hw[81], reg2hw[74], reg2hw[67], reg2hw[60], reg2hw[53], reg2hw[46], reg2hw[39], reg2hw[32], reg2hw[25], reg2hw[18], reg2hw[11], reg2hw[4] } = \$driver$reg_q.out ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) req_q <= 1'h0;
    else req_q <= obi_req_i[0];
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) w_err_q <= 1'h0;
    else w_err_q <= w_err_d;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) we_q <= 1'h0;
    else we_q <= obi_req_i[41];
  function [31:0] \$procmux$10984 ;
    input [31:0] a;
    input [255:0] b;
    input [7:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/gpio/gpio_reg_top.sv:237.11-237.41|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *)
    (* parallel_case *)
    casez (s)
      8'b???????1:
        \$procmux$10984  = b[31:0];
      8'b??????1?:
        \$procmux$10984  = b[63:32];
      8'b?????1??:
        \$procmux$10984  = b[95:64];
      8'b????1???:
        \$procmux$10984  = b[127:96];
      8'b???1????:
        \$procmux$10984  = b[159:128];
      8'b??1?????:
        \$procmux$10984  = b[191:160];
      8'b?1??????:
        \$procmux$10984  = b[223:192];
      8'b1???????:
        \$procmux$10984  = b[255:224];
      default:
        \$procmux$10984  = a;
    endcase
  endfunction
  assign \$obi_rdata$158  = \$procmux$10984 (32'd3135023902, { reg2hw[223], reg2hw[216], reg2hw[209], reg2hw[202], reg2hw[195], reg2hw[188], reg2hw[181], reg2hw[174], reg2hw[167], reg2hw[160], reg2hw[153], reg2hw[146], reg2hw[139], reg2hw[132], reg2hw[125], reg2hw[118], reg2hw[111], reg2hw[104], reg2hw[97], reg2hw[90], reg2hw[83], reg2hw[76], reg2hw[69], reg2hw[62], reg2hw[55], reg2hw[48], reg2hw[41], reg2hw[34], reg2hw[27], reg2hw[20], reg2hw[13], reg2hw[6], reg2hw[222], reg2hw[215], reg2hw[208], reg2hw[201], reg2hw[194], reg2hw[187], reg2hw[180], reg2hw[173], reg2hw[166], reg2hw[159], reg2hw[152], reg2hw[145], reg2hw[138], reg2hw[131], reg2hw[124], reg2hw[117], reg2hw[110], reg2hw[103], reg2hw[96], reg2hw[89], reg2hw[82], reg2hw[75], reg2hw[68], reg2hw[61], reg2hw[54], reg2hw[47], reg2hw[40], reg2hw[33], reg2hw[26], reg2hw[19], reg2hw[12], reg2hw[5], reg_q[191:160], reg2hw[221], reg2hw[214], reg2hw[207], reg2hw[200], reg2hw[193], reg2hw[186], reg2hw[179], reg2hw[172], reg2hw[165], reg2hw[158], reg2hw[151], reg2hw[144], reg2hw[137], reg2hw[130], reg2hw[123], reg2hw[116], reg2hw[109], reg2hw[102], reg2hw[95], reg2hw[88], reg2hw[81], reg2hw[74], reg2hw[67], reg2hw[60], reg2hw[53], reg2hw[46], reg2hw[39], reg2hw[32], reg2hw[25], reg2hw[18], reg2hw[11], reg2hw[4], 32'h00000000, reg2hw[219], reg2hw[212], reg2hw[205], reg2hw[198], reg2hw[191], reg2hw[184], reg2hw[177], reg2hw[170], reg2hw[163], reg2hw[156], reg2hw[149], reg2hw[142], reg2hw[135], reg2hw[128], reg2hw[121], reg2hw[114], reg2hw[107], reg2hw[100], reg2hw[93], reg2hw[86], reg2hw[79], reg2hw[72], reg2hw[65], reg2hw[58], reg2hw[51], reg2hw[44], reg2hw[37], reg2hw[30], reg2hw[23], reg2hw[16], reg2hw[9], reg2hw[2], reg2hw[218], reg2hw[211], reg2hw[204], reg2hw[197], reg2hw[190], reg2hw[183], reg2hw[176], reg2hw[169], reg2hw[162], reg2hw[155], reg2hw[148], reg2hw[141], reg2hw[134], reg2hw[127], reg2hw[120], reg2hw[113], reg2hw[106], reg2hw[99], reg2hw[92], reg2hw[85], reg2hw[78], reg2hw[71], reg2hw[64], reg2hw[57], reg2hw[50], reg2hw[43], reg2hw[36], reg2hw[29], reg2hw[22], reg2hw[15], reg2hw[8], reg2hw[1], reg2hw[217], reg2hw[210], reg2hw[203], reg2hw[196], reg2hw[189], reg2hw[182], reg2hw[175], reg2hw[168], reg2hw[161], reg2hw[154], reg2hw[147], reg2hw[140], reg2hw[133], reg2hw[126], reg2hw[119], reg2hw[112], reg2hw[105], reg2hw[98], reg2hw[91], reg2hw[84], reg2hw[77], reg2hw[70], reg2hw[63], reg2hw[56], reg2hw[49], reg2hw[42], reg2hw[35], reg2hw[28], reg2hw[21], reg2hw[14], reg2hw[7], reg2hw[0] }, { \$procmux$10992_CMP , \$procmux$10991_CMP , \$procmux$10990_CMP , \$procmux$10989_CMP , \$procmux$10988_CMP , \$procmux$10987_CMP , \$procmux$10986_CMP , \$procmux$10985_CMP  });
  assign \$procmux$10985_CMP  = read_addr_q[9:0] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:237.11-237.41|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) 10'h0e0;
  assign \$procmux$10986_CMP  = read_addr_q[9:0] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:230.36-234.12|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) 10'h0c0;
  assign \$procmux$10987_CMP  = read_addr_q[9:0] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:227.11-227.39|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) 10'h0a0;
  assign \$procmux$10988_CMP  = read_addr_q[9:0] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:223.11-223.26|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) 10'h080;
  assign \$procmux$10989_CMP  = read_addr_q[9:0] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:219.11-219.33|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) 10'h060;
  assign \$procmux$10990_CMP  = read_addr_q[9:0] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:215.11-215.32|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) 10'h040;
  assign \$procmux$10991_CMP  = read_addr_q[9:0] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:211.11-211.32|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) 10'h020;
  assign \$procmux$10992_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:207.11-207.33|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) read_addr_q[9:0];
  assign \$procmux$10997_Y  = \$procmux$10986_CMP  ? (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:230.36-234.12|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) new_intrpt : new_reg[63:32];
  assign \$obi_err$157  = ~ (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:237.11-237.41|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) \$auto$opt_reduce.cc:137:opt_pmux$13399 ;
  assign reg_d[63:32] = obi_read_request ? (* src = "rtl/gpio/gpio_reg_top.sv:203.27-245.8|rtl/gpio/gpio_reg_top.sv:203.5-245.8" *) \$procmux$10997_Y  : new_reg[63:32];
  assign obi_rdata = obi_read_request ? (* src = "rtl/gpio/gpio_reg_top.sv:203.27-245.8|rtl/gpio/gpio_reg_top.sv:203.5-245.8" *) \$obi_rdata$158  : 32'd0;
  assign obi_err = obi_read_request ? (* src = "rtl/gpio/gpio_reg_top.sv:203.27-245.8|rtl/gpio/gpio_reg_top.sv:203.5-245.8" *) \$obi_err$157  : \$obi_err$150 ;
  assign \$procmux$11032_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:169.11-169.89|rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) obi_req_i[53:44];
  assign \$procmux$11041_CMP  = obi_req_i[53:44] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:173.11-173.87|rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) 6'h20;
  assign \$procmux$11047_Y  = \$procmux$11048_CMP  ? (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:182.11-182.60|rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) \$125y  : 32'd0;
  assign \$procmux$11048_CMP  = obi_req_i[53:44] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:182.11-182.60|rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) 8'h80;
  assign \$procmux$11055_Y  = \$procmux$11056_CMP  ? (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:177.11-178.77|rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) \$134y  : new_reg[159:128];
  assign \$procmux$11056_CMP  = obi_req_i[53:44] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:177.11-178.77|rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) 7'h60;
  assign \$procmux$11062_CMP  = obi_req_i[53:44] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:186.11-187.85|rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) 8'ha0;
  assign \$procmux$11067_CMP  = obi_req_i[53:44] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:191.11-192.87|rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) 8'he0;
  assign \$procmux$11071_Y  = ~ (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:191.11-192.87|rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) \$auto$opt_reduce.cc:137:opt_pmux$13401 ;
  assign toggle_out = obi_write_request ? (* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" *) \$procmux$11047_Y  : 32'd0;
  assign reg_d[159:128] = obi_write_request ? (* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" *) \$procmux$11055_Y  : new_reg[159:128];
  assign w_err_d = obi_write_request & (* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" *) \$procmux$11071_Y ;
  assign \$obi_err$150  = obi_write_request ? (* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" *) 1'h0 : w_err_q;
  assign { new_reg[255:160], new_reg[127:64], new_reg[31:0] } = { reg2hw[223], reg2hw[216], reg2hw[209], reg2hw[202], reg2hw[195], reg2hw[188], reg2hw[181], reg2hw[174], reg2hw[167], reg2hw[160], reg2hw[153], reg2hw[146], reg2hw[139], reg2hw[132], reg2hw[125], reg2hw[118], reg2hw[111], reg2hw[104], reg2hw[97], reg2hw[90], reg2hw[83], reg2hw[76], reg2hw[69], reg2hw[62], reg2hw[55], reg2hw[48], reg2hw[41], reg2hw[34], reg2hw[27], reg2hw[20], reg2hw[13], reg2hw[6], reg2hw[222], reg2hw[215], reg2hw[208], reg2hw[201], reg2hw[194], reg2hw[187], reg2hw[180], reg2hw[173], reg2hw[166], reg2hw[159], reg2hw[152], reg2hw[145], reg2hw[138], reg2hw[131], reg2hw[124], reg2hw[117], reg2hw[110], reg2hw[103], reg2hw[96], reg2hw[89], reg2hw[82], reg2hw[75], reg2hw[68], reg2hw[61], reg2hw[54], reg2hw[47], reg2hw[40], reg2hw[33], reg2hw[26], reg2hw[19], reg2hw[12], reg2hw[5], hw2reg[159], hw2reg[154], hw2reg[149], hw2reg[144], hw2reg[139], hw2reg[134], hw2reg[129], hw2reg[124], hw2reg[119], hw2reg[114], hw2reg[109], hw2reg[104], hw2reg[99], hw2reg[94], hw2reg[89], hw2reg[84], hw2reg[79], hw2reg[74], hw2reg[69], hw2reg[64], hw2reg[59], hw2reg[54], hw2reg[49], hw2reg[44], hw2reg[39], hw2reg[34], hw2reg[29], hw2reg[24], hw2reg[19], hw2reg[14], hw2reg[9], hw2reg[4], 32'h00000000, reg2hw[219], reg2hw[212], reg2hw[205], reg2hw[198], reg2hw[191], reg2hw[184], reg2hw[177], reg2hw[170], reg2hw[163], reg2hw[156], reg2hw[149], reg2hw[142], reg2hw[135], reg2hw[128], reg2hw[121], reg2hw[114], reg2hw[107], reg2hw[100], reg2hw[93], reg2hw[86], reg2hw[79], reg2hw[72], reg2hw[65], reg2hw[58], reg2hw[51], reg2hw[44], reg2hw[37], reg2hw[30], reg2hw[23], reg2hw[16], reg2hw[9], reg2hw[2], reg2hw[217], reg2hw[210], reg2hw[203], reg2hw[196], reg2hw[189], reg2hw[182], reg2hw[175], reg2hw[168], reg2hw[161], reg2hw[154], reg2hw[147], reg2hw[140], reg2hw[133], reg2hw[126], reg2hw[119], reg2hw[112], reg2hw[105], reg2hw[98], reg2hw[91], reg2hw[84], reg2hw[77], reg2hw[70], reg2hw[63], reg2hw[56], reg2hw[49], reg2hw[42], reg2hw[35], reg2hw[28], reg2hw[21], reg2hw[14], reg2hw[7], reg2hw[0] };
  assign obi_rsp_o = { obi_rdata, 2'h0, id_q, obi_err, 1'h0, obi_req_i[0], req_q };
  assign read_addr_q[11:10] = 2'h0;
  assign { reg2hw[220], reg2hw[213], reg2hw[206], reg2hw[199], reg2hw[192], reg2hw[185], reg2hw[178], reg2hw[171], reg2hw[164], reg2hw[157], reg2hw[150], reg2hw[143], reg2hw[136], reg2hw[129], reg2hw[122], reg2hw[115], reg2hw[108], reg2hw[101], reg2hw[94], reg2hw[87], reg2hw[80], reg2hw[73], reg2hw[66], reg2hw[59], reg2hw[52], reg2hw[45], reg2hw[38], reg2hw[31], reg2hw[24], reg2hw[17], reg2hw[10], reg2hw[3] } = toggle_out;
  assign { reg_d[255:160], reg_d[127:64], reg_d[31:0] } = { 64'hxxxxxxxxxxxxxxxx, hw2reg[159], hw2reg[154], hw2reg[149], hw2reg[144], hw2reg[139], hw2reg[134], hw2reg[129], hw2reg[124], hw2reg[119], hw2reg[114], hw2reg[109], hw2reg[104], hw2reg[99], hw2reg[94], hw2reg[89], hw2reg[84], hw2reg[79], hw2reg[74], hw2reg[69], hw2reg[64], hw2reg[59], hw2reg[54], hw2reg[49], hw2reg[44], hw2reg[39], hw2reg[34], hw2reg[29], hw2reg[24], hw2reg[19], hw2reg[14], hw2reg[9], hw2reg[4], 96'h00000000xxxxxxxxxxxxxxxx };
  assign { reg_q[255:192], reg_q[159:0] } = { reg2hw[223], reg2hw[216], reg2hw[209], reg2hw[202], reg2hw[195], reg2hw[188], reg2hw[181], reg2hw[174], reg2hw[167], reg2hw[160], reg2hw[153], reg2hw[146], reg2hw[139], reg2hw[132], reg2hw[125], reg2hw[118], reg2hw[111], reg2hw[104], reg2hw[97], reg2hw[90], reg2hw[83], reg2hw[76], reg2hw[69], reg2hw[62], reg2hw[55], reg2hw[48], reg2hw[41], reg2hw[34], reg2hw[27], reg2hw[20], reg2hw[13], reg2hw[6], reg2hw[222], reg2hw[215], reg2hw[208], reg2hw[201], reg2hw[194], reg2hw[187], reg2hw[180], reg2hw[173], reg2hw[166], reg2hw[159], reg2hw[152], reg2hw[145], reg2hw[138], reg2hw[131], reg2hw[124], reg2hw[117], reg2hw[110], reg2hw[103], reg2hw[96], reg2hw[89], reg2hw[82], reg2hw[75], reg2hw[68], reg2hw[61], reg2hw[54], reg2hw[47], reg2hw[40], reg2hw[33], reg2hw[26], reg2hw[19], reg2hw[12], reg2hw[5], reg2hw[221], reg2hw[214], reg2hw[207], reg2hw[200], reg2hw[193], reg2hw[186], reg2hw[179], reg2hw[172], reg2hw[165], reg2hw[158], reg2hw[151], reg2hw[144], reg2hw[137], reg2hw[130], reg2hw[123], reg2hw[116], reg2hw[109], reg2hw[102], reg2hw[95], reg2hw[88], reg2hw[81], reg2hw[74], reg2hw[67], reg2hw[60], reg2hw[53], reg2hw[46], reg2hw[39], reg2hw[32], reg2hw[25], reg2hw[18], reg2hw[11], reg2hw[4], 32'hxxxxxxxx, reg2hw[219], reg2hw[212], reg2hw[205], reg2hw[198], reg2hw[191], reg2hw[184], reg2hw[177], reg2hw[170], reg2hw[163], reg2hw[156], reg2hw[149], reg2hw[142], reg2hw[135], reg2hw[128], reg2hw[121], reg2hw[114], reg2hw[107], reg2hw[100], reg2hw[93], reg2hw[86], reg2hw[79], reg2hw[72], reg2hw[65], reg2hw[58], reg2hw[51], reg2hw[44], reg2hw[37], reg2hw[30], reg2hw[23], reg2hw[16], reg2hw[9], reg2hw[2], reg2hw[218], reg2hw[211], reg2hw[204], reg2hw[197], reg2hw[190], reg2hw[183], reg2hw[176], reg2hw[169], reg2hw[162], reg2hw[155], reg2hw[148], reg2hw[141], reg2hw[134], reg2hw[127], reg2hw[120], reg2hw[113], reg2hw[106], reg2hw[99], reg2hw[92], reg2hw[85], reg2hw[78], reg2hw[71], reg2hw[64], reg2hw[57], reg2hw[50], reg2hw[43], reg2hw[36], reg2hw[29], reg2hw[22], reg2hw[15], reg2hw[8], reg2hw[1], reg2hw[217], reg2hw[210], reg2hw[203], reg2hw[196], reg2hw[189], reg2hw[182], reg2hw[175], reg2hw[168], reg2hw[161], reg2hw[154], reg2hw[147], reg2hw[140], reg2hw[133], reg2hw[126], reg2hw[119], reg2hw[112], reg2hw[105], reg2hw[98], reg2hw[91], reg2hw[84], reg2hw[77], reg2hw[70], reg2hw[63], reg2hw[56], reg2hw[49], reg2hw[42], reg2hw[35], reg2hw[28], reg2hw[21], reg2hw[14], reg2hw[7], reg2hw[0] };
  assign { \$123y [30:24], \$123y [22:16], \$123y [14:8], \$123y [6:0] } = { \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7] };
endmodule

(* src = "rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  (* src = "rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | (* src = "rtl/common_cells/lzc.sv:89.15-89.100" *) \gen_lzc.sel_nodes [2];
  assign empty_o = ~ (* src = "rtl/common_cells/lzc.sv:98.49-98.62" *) \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? (* src = "rtl/common_cells/lzc.sv:90.52-92.60" *) { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.sel_nodes [1] = in_i[0] | (* src = "rtl/common_cells/lzc.sv:70.52-70.85" *) in_i[1];
  assign \gen_lzc.index_nodes [2] = ~ (* src = "rtl/common_cells/lzc.sv:71.54-73.37" *) in_i[0];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | (* src = "rtl/common_cells/lzc.sv:70.52-70.85" *) in_i[3];
  assign \gen_lzc.index_nodes [4] = ~ (* src = "rtl/common_cells/lzc.sv:71.54-73.37" *) in_i[2];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  (* src = "rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | (* src = "rtl/common_cells/lzc.sv:89.15-89.100" *) \gen_lzc.sel_nodes [2];
  assign empty_o = ~ (* src = "rtl/common_cells/lzc.sv:98.49-98.62" *) \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? (* src = "rtl/common_cells/lzc.sv:90.52-92.60" *) { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.sel_nodes [1] = in_i[0] | (* src = "rtl/common_cells/lzc.sv:70.52-70.85" *) in_i[1];
  assign \gen_lzc.index_nodes [2] = ~ (* src = "rtl/common_cells/lzc.sv:71.54-73.37" *) in_i[0];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | (* src = "rtl/common_cells/lzc.sv:70.52-70.85" *) in_i[3];
  assign \gen_lzc.index_nodes [4] = ~ (* src = "rtl/common_cells/lzc.sv:71.54-73.37" *) in_i[2];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  (* src = "rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | (* src = "rtl/common_cells/lzc.sv:89.15-89.100" *) \gen_lzc.sel_nodes [2];
  assign empty_o = ~ (* src = "rtl/common_cells/lzc.sv:98.49-98.62" *) \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? (* src = "rtl/common_cells/lzc.sv:90.52-92.60" *) { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.sel_nodes [1] = in_i[0] | (* src = "rtl/common_cells/lzc.sv:70.52-70.85" *) in_i[1];
  assign \gen_lzc.index_nodes [2] = ~ (* src = "rtl/common_cells/lzc.sv:71.54-73.37" *) in_i[0];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | (* src = "rtl/common_cells/lzc.sv:70.52-70.85" *) in_i[3];
  assign \gen_lzc.index_nodes [4] = ~ (* src = "rtl/common_cells/lzc.sv:71.54-73.37" *) in_i[2];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  (* src = "rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | (* src = "rtl/common_cells/lzc.sv:89.15-89.100" *) \gen_lzc.sel_nodes [2];
  assign empty_o = ~ (* src = "rtl/common_cells/lzc.sv:98.49-98.62" *) \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? (* src = "rtl/common_cells/lzc.sv:90.52-92.60" *) { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.sel_nodes [1] = in_i[0] | (* src = "rtl/common_cells/lzc.sv:70.52-70.85" *) in_i[1];
  assign \gen_lzc.index_nodes [2] = ~ (* src = "rtl/common_cells/lzc.sv:71.54-73.37" *) in_i[0];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | (* src = "rtl/common_cells/lzc.sv:70.52-70.85" *) in_i[3];
  assign \gen_lzc.index_nodes [4] = ~ (* src = "rtl/common_cells/lzc.sv:71.54-73.37" *) in_i[2];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  (* src = "rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | (* src = "rtl/common_cells/lzc.sv:89.15-89.100" *) \gen_lzc.sel_nodes [2];
  assign empty_o = ~ (* src = "rtl/common_cells/lzc.sv:98.49-98.62" *) \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? (* src = "rtl/common_cells/lzc.sv:90.52-92.60" *) { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.sel_nodes [1] = in_i[0] | (* src = "rtl/common_cells/lzc.sv:70.52-70.85" *) in_i[1];
  assign \gen_lzc.index_nodes [2] = ~ (* src = "rtl/common_cells/lzc.sv:71.54-73.37" *) in_i[0];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | (* src = "rtl/common_cells/lzc.sv:70.52-70.85" *) in_i[3];
  assign \gen_lzc.index_nodes [4] = ~ (* src = "rtl/common_cells/lzc.sv:71.54-73.37" *) in_i[2];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  (* src = "rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | (* src = "rtl/common_cells/lzc.sv:89.15-89.100" *) \gen_lzc.sel_nodes [2];
  assign empty_o = ~ (* src = "rtl/common_cells/lzc.sv:98.49-98.62" *) \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? (* src = "rtl/common_cells/lzc.sv:90.52-92.60" *) { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.sel_nodes [1] = in_i[0] | (* src = "rtl/common_cells/lzc.sv:70.52-70.85" *) in_i[1];
  assign \gen_lzc.index_nodes [2] = ~ (* src = "rtl/common_cells/lzc.sv:71.54-73.37" *) in_i[0];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | (* src = "rtl/common_cells/lzc.sv:70.52-70.85" *) in_i[3];
  assign \gen_lzc.index_nodes [4] = ~ (* src = "rtl/common_cells/lzc.sv:71.54-73.37" *) in_i[2];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  (* src = "rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | (* src = "rtl/common_cells/lzc.sv:89.15-89.100" *) \gen_lzc.sel_nodes [2];
  assign empty_o = ~ (* src = "rtl/common_cells/lzc.sv:98.49-98.62" *) \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? (* src = "rtl/common_cells/lzc.sv:90.52-92.60" *) { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.sel_nodes [1] = in_i[0] | (* src = "rtl/common_cells/lzc.sv:70.52-70.85" *) in_i[1];
  assign \gen_lzc.index_nodes [2] = ~ (* src = "rtl/common_cells/lzc.sv:71.54-73.37" *) in_i[0];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | (* src = "rtl/common_cells/lzc.sv:70.52-70.85" *) in_i[3];
  assign \gen_lzc.index_nodes [4] = ~ (* src = "rtl/common_cells/lzc.sv:71.54-73.37" *) in_i[2];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  (* src = "rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | (* src = "rtl/common_cells/lzc.sv:89.15-89.100" *) \gen_lzc.sel_nodes [2];
  assign empty_o = ~ (* src = "rtl/common_cells/lzc.sv:98.49-98.62" *) \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? (* src = "rtl/common_cells/lzc.sv:90.52-92.60" *) { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.sel_nodes [1] = in_i[0] | (* src = "rtl/common_cells/lzc.sv:70.52-70.85" *) in_i[1];
  assign \gen_lzc.index_nodes [2] = ~ (* src = "rtl/common_cells/lzc.sv:71.54-73.37" *) in_i[0];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | (* src = "rtl/common_cells/lzc.sv:70.52-70.85" *) in_i[3];
  assign \gen_lzc.index_nodes [4] = ~ (* src = "rtl/common_cells/lzc.sv:71.54-73.37" *) in_i[2];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  (* src = "rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | (* src = "rtl/common_cells/lzc.sv:89.15-89.100" *) \gen_lzc.sel_nodes [2];
  assign empty_o = ~ (* src = "rtl/common_cells/lzc.sv:98.49-98.62" *) \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? (* src = "rtl/common_cells/lzc.sv:90.52-92.60" *) { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.sel_nodes [1] = in_i[0] | (* src = "rtl/common_cells/lzc.sv:70.52-70.85" *) in_i[1];
  assign \gen_lzc.index_nodes [2] = ~ (* src = "rtl/common_cells/lzc.sv:71.54-73.37" *) in_i[0];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | (* src = "rtl/common_cells/lzc.sv:70.52-70.85" *) in_i[3];
  assign \gen_lzc.index_nodes [4] = ~ (* src = "rtl/common_cells/lzc.sv:71.54-73.37" *) in_i[2];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  (* src = "rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | (* src = "rtl/common_cells/lzc.sv:89.15-89.100" *) \gen_lzc.sel_nodes [2];
  assign empty_o = ~ (* src = "rtl/common_cells/lzc.sv:98.49-98.62" *) \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? (* src = "rtl/common_cells/lzc.sv:90.52-92.60" *) { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.sel_nodes [1] = in_i[0] | (* src = "rtl/common_cells/lzc.sv:70.52-70.85" *) in_i[1];
  assign \gen_lzc.index_nodes [2] = ~ (* src = "rtl/common_cells/lzc.sv:71.54-73.37" *) in_i[0];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | (* src = "rtl/common_cells/lzc.sv:70.52-70.85" *) in_i[3];
  assign \gen_lzc.index_nodes [4] = ~ (* src = "rtl/common_cells/lzc.sv:71.54-73.37" *) in_i[2];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "rtl/obi/obi_demux.sv:7.8" *)
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  (* unused_bits = "360 432 504" *)
  wire [575:0] \$12y ;
  wire [359:0] \$14y ;
  wire [359:0] \$21y ;
  (* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" *)
  wire [36:0] \$23y ;
  wire \$2y ;
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" *)
  wire [71:0] \$30y ;
  (* unused_bits = "1" *)
  wire [36:0] \$39y ;
  wire \$3y ;
  wire \$48y ;
  wire \$4y ;
  wire \$6y ;
  wire \$7y ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$15467 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$15472 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$15475 ;
  wire [287:0] \$auto$bmuxmap.cc:84:execute$15477 ;
  wire [143:0] \$auto$bmuxmap.cc:84:execute$15482 ;
  wire [71:0] \$auto$bmuxmap.cc:84:execute$15485 ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$15487 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$15492 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$15495 ;
  (* src = "rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire [359:0] \$mgr_ports_req_o$26 ;
  wire \$procmux$11724_Y ;
  (* src = "rtl/obi/obi_demux.sv:21.38" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_demux.sv:39.9" *)
  wire cnt_up;
  (* src = "rtl/obi/obi_demux.sv:40.28" *)
  wire in_flight;
  (* src = "rtl/obi/obi_demux.sv:28.38" *)
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  (* src = "rtl/obi/obi_demux.sv:29.38" *)
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  (* src = "rtl/obi/obi_demux.sv:39.27" *)
  wire overflow;
  (* src = "rtl/obi/obi_demux.sv:22.38" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_demux.sv:41.9" *)
  wire sbr_port_gnt;
  (* src = "rtl/obi/obi_demux.sv:25.38" *)
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  (* src = "rtl/obi/obi_demux.sv:26.38" *)
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  (* src = "rtl/obi/obi_demux.sv:24.38" *)
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  (* src = "rtl/obi/obi_demux.sv:44.22" *)
  reg [2:0] select_q;
  assign \$2y  = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:56.11-56.40" *) select_q;
  (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *)
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$21  (
    .A({ 71'h000000000000000000, \$14y [288], 71'h000000000000000000, \$14y [216], 71'h000000000000000000, \$14y [144], 71'h000000000000000000, \$14y [72], 71'h000000000000000000, \$14y [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], 1'h0, \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], 1'h0, \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], 1'h0, \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], 1'h0, \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], 1'h0 }),
    .Y(\$21y )
  );
  assign \$3y  = ~ (* src = "rtl/obi/obi_demux.sv:56.44-56.59" *) in_flight;
  assign cnt_up = \$30y [0] && (* src = "rtl/obi/obi_demux.sv:63.9-63.89" *) \$23y [1];
  assign \$4y  = \$2y  || (* src = "rtl/obi/obi_demux.sv:56.11-56.59" *) \$3y ;
  assign \$48y  = cnt_up ^ (* src = "rtl/obi/obi_demux.sv:92.18-92.35" *) sbr_port_rsp_o[0];
  assign \$6y  = in_flight && (* src = "rtl/obi/obi_demux.sv:56.64-56.90" *) sbr_port_rsp_o[0];
  assign \$7y  = \$4y  || (* src = "rtl/obi/obi_demux.sv:56.11-56.91" *) \$6y ;
  assign \$auto$bmuxmap.cc:84:execute$15467 [36:0] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$15467 [73:37] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$15467 [110:74] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$15467 [147:111] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$15472 [36:0] = sbr_port_select_i[1] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) \$auto$bmuxmap.cc:84:execute$15467 [73:37] : \$auto$bmuxmap.cc:84:execute$15467 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$15472 [73:37] = sbr_port_select_i[1] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) \$auto$bmuxmap.cc:84:execute$15467 [147:111] : \$auto$bmuxmap.cc:84:execute$15467 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$15475  = sbr_port_select_i[2] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) \$auto$bmuxmap.cc:84:execute$15472 [73:37] : \$auto$bmuxmap.cc:84:execute$15472 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$15477 [71:0] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) mgr_ports_req_o[143:72] : mgr_ports_req_o[71:0];
  assign \$auto$bmuxmap.cc:84:execute$15477 [143:72] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) mgr_ports_req_o[287:216] : mgr_ports_req_o[215:144];
  assign \$auto$bmuxmap.cc:84:execute$15477 [215:144] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) 72'hxxxxxxxxxxxxxxxxxx : mgr_ports_req_o[359:288];
  assign \$auto$bmuxmap.cc:84:execute$15477 [287:216] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) 72'hxxxxxxxxxxxxxxxxxx : 72'hxxxxxxxxxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$15482 [71:0] = sbr_port_select_i[1] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) \$auto$bmuxmap.cc:84:execute$15477 [143:72] : \$auto$bmuxmap.cc:84:execute$15477 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$15482 [143:72] = sbr_port_select_i[1] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) \$auto$bmuxmap.cc:84:execute$15477 [287:216] : \$auto$bmuxmap.cc:84:execute$15477 [215:144];
  assign \$auto$bmuxmap.cc:84:execute$15485  = sbr_port_select_i[2] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) \$auto$bmuxmap.cc:84:execute$15482 [143:72] : \$auto$bmuxmap.cc:84:execute$15482 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$15487 [36:0] = select_q[0] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$15487 [73:37] = select_q[0] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$15487 [110:74] = select_q[0] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$15487 [147:111] = select_q[0] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$15492 [36:0] = select_q[1] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) \$auto$bmuxmap.cc:84:execute$15487 [73:37] : \$auto$bmuxmap.cc:84:execute$15487 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$15492 [73:37] = select_q[1] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) \$auto$bmuxmap.cc:84:execute$15487 [147:111] : \$auto$bmuxmap.cc:84:execute$15487 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$15495  = select_q[2] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) \$auto$bmuxmap.cc:84:execute$15492 [73:37] : \$auto$bmuxmap.cc:84:execute$15492 [36:0];
  assign \$12y [0] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h0;
  assign \$12y [72] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h1;
  assign \$12y [144] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h2;
  assign \$12y [216] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h3;
  assign \$12y [288] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h4;
  assign \$12y [360] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h5;
  assign \$12y [432] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h6;
  assign \$12y [504] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h7;
  (* src = "rtl/obi/obi_demux.sv:101.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) select_q <= 3'h0;
    else if (cnt_up) select_q <= sbr_port_select_i;
  assign { \$14y [288], \$14y [216], \$14y [144], \$14y [72], \$14y [0] } = { sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] } & { \$12y [288], \$12y [216], \$12y [144], \$12y [72], \$12y [0] };
  assign \$mgr_ports_req_o$26  = \$7y  ? (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$21y  : 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign \$procmux$11724_Y  = \$7y  & (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$23y [1];
  assign mgr_ports_req_o = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : \$mgr_ports_req_o$26 ;
  assign sbr_port_gnt = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 1'h0 : \$procmux$11724_Y ;
  (* src = "rtl/obi/obi_demux.sv:87.5" *)
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(sbr_port_rsp_o[0]),
    .en_i(\$48y ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$39y [36:2], \$39y [0] } = { sbr_port_rsp_o[36:2], sbr_port_rsp_o[0] };
  assign { \$14y [359:289], \$14y [287:217], \$14y [215:145], \$14y [143:73], \$14y [71:1] } = 355'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign { \$12y [575:505], \$12y [503:433], \$12y [431:361], \$12y [359:289], \$12y [287:217], \$12y [215:145], \$12y [143:73], \$12y [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
  assign \$23y  = \$auto$bmuxmap.cc:84:execute$15475 ;
  assign \$30y  = \$auto$bmuxmap.cc:84:execute$15485 ;
  assign { sbr_port_rsp_o[36:2], \$39y [1], sbr_port_rsp_o[0] } = \$auto$bmuxmap.cc:84:execute$15495 ;
endmodule

(* src = "rtl/obi/obi_demux.sv:7.8" *)
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  (* unused_bits = "360 432 504" *)
  wire [575:0] \$12y ;
  wire [359:0] \$14y ;
  wire [359:0] \$21y ;
  (* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" *)
  wire [36:0] \$23y ;
  wire \$2y ;
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" *)
  wire [71:0] \$30y ;
  (* unused_bits = "1" *)
  wire [36:0] \$39y ;
  wire \$3y ;
  wire \$48y ;
  wire \$4y ;
  wire \$6y ;
  wire \$7y ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$15497 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$15502 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$15505 ;
  wire [287:0] \$auto$bmuxmap.cc:84:execute$15507 ;
  wire [143:0] \$auto$bmuxmap.cc:84:execute$15512 ;
  wire [71:0] \$auto$bmuxmap.cc:84:execute$15515 ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$15517 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$15522 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$15525 ;
  (* src = "rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire [359:0] \$mgr_ports_req_o$26 ;
  wire \$procmux$11704_Y ;
  (* src = "rtl/obi/obi_demux.sv:21.38" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_demux.sv:39.9" *)
  wire cnt_up;
  (* src = "rtl/obi/obi_demux.sv:40.28" *)
  wire in_flight;
  (* src = "rtl/obi/obi_demux.sv:28.38" *)
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  (* src = "rtl/obi/obi_demux.sv:29.38" *)
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  (* src = "rtl/obi/obi_demux.sv:39.27" *)
  wire overflow;
  (* src = "rtl/obi/obi_demux.sv:22.38" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_demux.sv:41.9" *)
  wire sbr_port_gnt;
  (* src = "rtl/obi/obi_demux.sv:25.38" *)
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  (* src = "rtl/obi/obi_demux.sv:26.38" *)
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  (* src = "rtl/obi/obi_demux.sv:24.38" *)
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  (* src = "rtl/obi/obi_demux.sv:44.22" *)
  reg [2:0] select_q;
  assign \$2y  = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:56.11-56.40" *) select_q;
  (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *)
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$21  (
    .A({ 71'h000000000000000000, \$14y [288], 71'h000000000000000000, \$14y [216], 71'h000000000000000000, \$14y [144], 71'h000000000000000000, \$14y [72], 71'h000000000000000000, \$14y [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], 1'h0, \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], 1'h0, \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], 1'h0, \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], 1'h0, \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], 1'h0 }),
    .Y(\$21y )
  );
  assign \$3y  = ~ (* src = "rtl/obi/obi_demux.sv:56.44-56.59" *) in_flight;
  assign cnt_up = \$30y [0] && (* src = "rtl/obi/obi_demux.sv:63.9-63.89" *) \$23y [1];
  assign \$4y  = \$2y  || (* src = "rtl/obi/obi_demux.sv:56.11-56.59" *) \$3y ;
  assign \$48y  = cnt_up ^ (* src = "rtl/obi/obi_demux.sv:92.18-92.35" *) sbr_port_rsp_o[0];
  assign \$6y  = in_flight && (* src = "rtl/obi/obi_demux.sv:56.64-56.90" *) sbr_port_rsp_o[0];
  assign \$7y  = \$4y  || (* src = "rtl/obi/obi_demux.sv:56.11-56.91" *) \$6y ;
  assign \$auto$bmuxmap.cc:84:execute$15497 [36:0] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$15497 [73:37] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$15497 [110:74] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$15497 [147:111] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$15502 [36:0] = sbr_port_select_i[1] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) \$auto$bmuxmap.cc:84:execute$15497 [73:37] : \$auto$bmuxmap.cc:84:execute$15497 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$15502 [73:37] = sbr_port_select_i[1] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) \$auto$bmuxmap.cc:84:execute$15497 [147:111] : \$auto$bmuxmap.cc:84:execute$15497 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$15505  = sbr_port_select_i[2] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) \$auto$bmuxmap.cc:84:execute$15502 [73:37] : \$auto$bmuxmap.cc:84:execute$15502 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$15507 [71:0] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) mgr_ports_req_o[143:72] : mgr_ports_req_o[71:0];
  assign \$auto$bmuxmap.cc:84:execute$15507 [143:72] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) mgr_ports_req_o[287:216] : mgr_ports_req_o[215:144];
  assign \$auto$bmuxmap.cc:84:execute$15507 [215:144] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) 72'hxxxxxxxxxxxxxxxxxx : mgr_ports_req_o[359:288];
  assign \$auto$bmuxmap.cc:84:execute$15507 [287:216] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) 72'hxxxxxxxxxxxxxxxxxx : 72'hxxxxxxxxxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$15512 [71:0] = sbr_port_select_i[1] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) \$auto$bmuxmap.cc:84:execute$15507 [143:72] : \$auto$bmuxmap.cc:84:execute$15507 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$15512 [143:72] = sbr_port_select_i[1] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) \$auto$bmuxmap.cc:84:execute$15507 [287:216] : \$auto$bmuxmap.cc:84:execute$15507 [215:144];
  assign \$auto$bmuxmap.cc:84:execute$15515  = sbr_port_select_i[2] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) \$auto$bmuxmap.cc:84:execute$15512 [143:72] : \$auto$bmuxmap.cc:84:execute$15512 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$15517 [36:0] = select_q[0] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$15517 [73:37] = select_q[0] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$15517 [110:74] = select_q[0] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$15517 [147:111] = select_q[0] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$15522 [36:0] = select_q[1] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) \$auto$bmuxmap.cc:84:execute$15517 [73:37] : \$auto$bmuxmap.cc:84:execute$15517 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$15522 [73:37] = select_q[1] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) \$auto$bmuxmap.cc:84:execute$15517 [147:111] : \$auto$bmuxmap.cc:84:execute$15517 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$15525  = select_q[2] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) \$auto$bmuxmap.cc:84:execute$15522 [73:37] : \$auto$bmuxmap.cc:84:execute$15522 [36:0];
  assign \$12y [0] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h0;
  assign \$12y [72] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h1;
  assign \$12y [144] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h2;
  assign \$12y [216] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h3;
  assign \$12y [288] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h4;
  assign \$12y [360] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h5;
  assign \$12y [432] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h6;
  assign \$12y [504] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h7;
  (* src = "rtl/obi/obi_demux.sv:101.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) select_q <= 3'h0;
    else if (cnt_up) select_q <= sbr_port_select_i;
  assign { \$14y [288], \$14y [216], \$14y [144], \$14y [72], \$14y [0] } = { sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] } & { \$12y [288], \$12y [216], \$12y [144], \$12y [72], \$12y [0] };
  assign \$mgr_ports_req_o$26  = \$7y  ? (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$21y  : 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign \$procmux$11704_Y  = \$7y  & (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$23y [1];
  assign mgr_ports_req_o = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : \$mgr_ports_req_o$26 ;
  assign sbr_port_gnt = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 1'h0 : \$procmux$11704_Y ;
  (* src = "rtl/obi/obi_demux.sv:87.5" *)
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(sbr_port_rsp_o[0]),
    .en_i(\$48y ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$39y [36:2], \$39y [0] } = { sbr_port_rsp_o[36:2], sbr_port_rsp_o[0] };
  assign { \$14y [359:289], \$14y [287:217], \$14y [215:145], \$14y [143:73], \$14y [71:1] } = 355'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign { \$12y [575:505], \$12y [503:433], \$12y [431:361], \$12y [359:289], \$12y [287:217], \$12y [215:145], \$12y [143:73], \$12y [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
  assign \$23y  = \$auto$bmuxmap.cc:84:execute$15505 ;
  assign \$30y  = \$auto$bmuxmap.cc:84:execute$15515 ;
  assign { sbr_port_rsp_o[36:2], \$39y [1], sbr_port_rsp_o[0] } = \$auto$bmuxmap.cc:84:execute$15525 ;
endmodule

(* src = "rtl/obi/obi_demux.sv:7.8" *)
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  (* unused_bits = "360 432 504" *)
  wire [575:0] \$12y ;
  wire [359:0] \$14y ;
  wire [359:0] \$21y ;
  (* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" *)
  wire [36:0] \$23y ;
  wire \$2y ;
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" *)
  wire [71:0] \$30y ;
  (* unused_bits = "1" *)
  wire [36:0] \$39y ;
  wire \$3y ;
  wire \$48y ;
  wire \$4y ;
  wire \$6y ;
  wire \$7y ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$15527 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$15532 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$15535 ;
  wire [287:0] \$auto$bmuxmap.cc:84:execute$15537 ;
  wire [143:0] \$auto$bmuxmap.cc:84:execute$15542 ;
  wire [71:0] \$auto$bmuxmap.cc:84:execute$15545 ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$15547 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$15552 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$15555 ;
  (* src = "rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire [359:0] \$mgr_ports_req_o$26 ;
  wire \$procmux$11684_Y ;
  (* src = "rtl/obi/obi_demux.sv:21.38" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_demux.sv:39.9" *)
  wire cnt_up;
  (* src = "rtl/obi/obi_demux.sv:40.28" *)
  wire in_flight;
  (* src = "rtl/obi/obi_demux.sv:28.38" *)
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  (* src = "rtl/obi/obi_demux.sv:29.38" *)
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  (* src = "rtl/obi/obi_demux.sv:39.27" *)
  wire overflow;
  (* src = "rtl/obi/obi_demux.sv:22.38" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_demux.sv:41.9" *)
  wire sbr_port_gnt;
  (* src = "rtl/obi/obi_demux.sv:25.38" *)
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  (* src = "rtl/obi/obi_demux.sv:26.38" *)
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  (* src = "rtl/obi/obi_demux.sv:24.38" *)
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  (* src = "rtl/obi/obi_demux.sv:44.22" *)
  reg [2:0] select_q;
  assign \$2y  = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:56.11-56.40" *) select_q;
  (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *)
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$21  (
    .A({ 71'h000000000000000000, \$14y [288], 71'h000000000000000000, \$14y [216], 71'h000000000000000000, \$14y [144], 71'h000000000000000000, \$14y [72], 71'h000000000000000000, \$14y [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], 1'h0, \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], 1'h0, \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], 1'h0, \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], 1'h0, \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], 1'h0 }),
    .Y(\$21y )
  );
  assign \$3y  = ~ (* src = "rtl/obi/obi_demux.sv:56.44-56.59" *) in_flight;
  assign cnt_up = \$30y [0] && (* src = "rtl/obi/obi_demux.sv:63.9-63.89" *) \$23y [1];
  assign \$4y  = \$2y  || (* src = "rtl/obi/obi_demux.sv:56.11-56.59" *) \$3y ;
  assign \$48y  = cnt_up ^ (* src = "rtl/obi/obi_demux.sv:92.18-92.35" *) sbr_port_rsp_o[0];
  assign \$6y  = in_flight && (* src = "rtl/obi/obi_demux.sv:56.64-56.90" *) sbr_port_rsp_o[0];
  assign \$7y  = \$4y  || (* src = "rtl/obi/obi_demux.sv:56.11-56.91" *) \$6y ;
  assign \$auto$bmuxmap.cc:84:execute$15527 [36:0] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$15527 [73:37] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$15527 [110:74] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$15527 [147:111] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$15532 [36:0] = sbr_port_select_i[1] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) \$auto$bmuxmap.cc:84:execute$15527 [73:37] : \$auto$bmuxmap.cc:84:execute$15527 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$15532 [73:37] = sbr_port_select_i[1] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) \$auto$bmuxmap.cc:84:execute$15527 [147:111] : \$auto$bmuxmap.cc:84:execute$15527 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$15535  = sbr_port_select_i[2] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) \$auto$bmuxmap.cc:84:execute$15532 [73:37] : \$auto$bmuxmap.cc:84:execute$15532 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$15537 [71:0] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) mgr_ports_req_o[143:72] : mgr_ports_req_o[71:0];
  assign \$auto$bmuxmap.cc:84:execute$15537 [143:72] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) mgr_ports_req_o[287:216] : mgr_ports_req_o[215:144];
  assign \$auto$bmuxmap.cc:84:execute$15537 [215:144] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) 72'hxxxxxxxxxxxxxxxxxx : mgr_ports_req_o[359:288];
  assign \$auto$bmuxmap.cc:84:execute$15537 [287:216] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) 72'hxxxxxxxxxxxxxxxxxx : 72'hxxxxxxxxxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$15542 [71:0] = sbr_port_select_i[1] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) \$auto$bmuxmap.cc:84:execute$15537 [143:72] : \$auto$bmuxmap.cc:84:execute$15537 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$15542 [143:72] = sbr_port_select_i[1] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) \$auto$bmuxmap.cc:84:execute$15537 [287:216] : \$auto$bmuxmap.cc:84:execute$15537 [215:144];
  assign \$auto$bmuxmap.cc:84:execute$15545  = sbr_port_select_i[2] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) \$auto$bmuxmap.cc:84:execute$15542 [143:72] : \$auto$bmuxmap.cc:84:execute$15542 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$15547 [36:0] = select_q[0] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$15547 [73:37] = select_q[0] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$15547 [110:74] = select_q[0] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$15547 [147:111] = select_q[0] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$15552 [36:0] = select_q[1] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) \$auto$bmuxmap.cc:84:execute$15547 [73:37] : \$auto$bmuxmap.cc:84:execute$15547 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$15552 [73:37] = select_q[1] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) \$auto$bmuxmap.cc:84:execute$15547 [147:111] : \$auto$bmuxmap.cc:84:execute$15547 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$15555  = select_q[2] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) \$auto$bmuxmap.cc:84:execute$15552 [73:37] : \$auto$bmuxmap.cc:84:execute$15552 [36:0];
  assign \$12y [0] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h0;
  assign \$12y [72] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h1;
  assign \$12y [144] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h2;
  assign \$12y [216] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h3;
  assign \$12y [288] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h4;
  assign \$12y [360] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h5;
  assign \$12y [432] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h6;
  assign \$12y [504] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h7;
  (* src = "rtl/obi/obi_demux.sv:101.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) select_q <= 3'h0;
    else if (cnt_up) select_q <= sbr_port_select_i;
  assign { \$14y [288], \$14y [216], \$14y [144], \$14y [72], \$14y [0] } = { sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] } & { \$12y [288], \$12y [216], \$12y [144], \$12y [72], \$12y [0] };
  assign \$mgr_ports_req_o$26  = \$7y  ? (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$21y  : 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign \$procmux$11684_Y  = \$7y  & (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$23y [1];
  assign mgr_ports_req_o = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : \$mgr_ports_req_o$26 ;
  assign sbr_port_gnt = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 1'h0 : \$procmux$11684_Y ;
  (* src = "rtl/obi/obi_demux.sv:87.5" *)
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(sbr_port_rsp_o[0]),
    .en_i(\$48y ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$39y [36:2], \$39y [0] } = { sbr_port_rsp_o[36:2], sbr_port_rsp_o[0] };
  assign { \$14y [359:289], \$14y [287:217], \$14y [215:145], \$14y [143:73], \$14y [71:1] } = 355'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign { \$12y [575:505], \$12y [503:433], \$12y [431:361], \$12y [359:289], \$12y [287:217], \$12y [215:145], \$12y [143:73], \$12y [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
  assign \$23y  = \$auto$bmuxmap.cc:84:execute$15535 ;
  assign \$30y  = \$auto$bmuxmap.cc:84:execute$15545 ;
  assign { sbr_port_rsp_o[36:2], \$39y [1], sbr_port_rsp_o[0] } = \$auto$bmuxmap.cc:84:execute$15555 ;
endmodule

(* src = "rtl/obi/obi_demux.sv:7.8" *)
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  (* unused_bits = "360 432 504" *)
  wire [575:0] \$12y ;
  wire [359:0] \$14y ;
  wire [359:0] \$21y ;
  (* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" *)
  wire [36:0] \$23y ;
  wire \$2y ;
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" *)
  wire [71:0] \$30y ;
  (* unused_bits = "1" *)
  wire [36:0] \$39y ;
  wire \$3y ;
  wire \$48y ;
  wire \$4y ;
  wire \$6y ;
  wire \$7y ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$15557 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$15562 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$15565 ;
  wire [287:0] \$auto$bmuxmap.cc:84:execute$15567 ;
  wire [143:0] \$auto$bmuxmap.cc:84:execute$15572 ;
  wire [71:0] \$auto$bmuxmap.cc:84:execute$15575 ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$15577 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$15582 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$15585 ;
  (* src = "rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire [359:0] \$mgr_ports_req_o$26 ;
  wire \$procmux$11664_Y ;
  (* src = "rtl/obi/obi_demux.sv:21.38" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_demux.sv:39.9" *)
  wire cnt_up;
  (* src = "rtl/obi/obi_demux.sv:40.28" *)
  wire in_flight;
  (* src = "rtl/obi/obi_demux.sv:28.38" *)
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  (* src = "rtl/obi/obi_demux.sv:29.38" *)
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  (* src = "rtl/obi/obi_demux.sv:39.27" *)
  wire overflow;
  (* src = "rtl/obi/obi_demux.sv:22.38" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_demux.sv:41.9" *)
  wire sbr_port_gnt;
  (* src = "rtl/obi/obi_demux.sv:25.38" *)
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  (* src = "rtl/obi/obi_demux.sv:26.38" *)
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  (* src = "rtl/obi/obi_demux.sv:24.38" *)
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  (* src = "rtl/obi/obi_demux.sv:44.22" *)
  reg [2:0] select_q;
  assign \$2y  = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:56.11-56.40" *) select_q;
  (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *)
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$21  (
    .A({ 71'h000000000000000000, \$14y [288], 71'h000000000000000000, \$14y [216], 71'h000000000000000000, \$14y [144], 71'h000000000000000000, \$14y [72], 71'h000000000000000000, \$14y [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], 1'h0, \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], 1'h0, \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], 1'h0, \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], 1'h0, \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], 1'h0 }),
    .Y(\$21y )
  );
  assign \$3y  = ~ (* src = "rtl/obi/obi_demux.sv:56.44-56.59" *) in_flight;
  assign cnt_up = \$30y [0] && (* src = "rtl/obi/obi_demux.sv:63.9-63.89" *) \$23y [1];
  assign \$4y  = \$2y  || (* src = "rtl/obi/obi_demux.sv:56.11-56.59" *) \$3y ;
  assign \$48y  = cnt_up ^ (* src = "rtl/obi/obi_demux.sv:92.18-92.35" *) sbr_port_rsp_o[0];
  assign \$6y  = in_flight && (* src = "rtl/obi/obi_demux.sv:56.64-56.90" *) sbr_port_rsp_o[0];
  assign \$7y  = \$4y  || (* src = "rtl/obi/obi_demux.sv:56.11-56.91" *) \$6y ;
  assign \$auto$bmuxmap.cc:84:execute$15557 [36:0] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$15557 [73:37] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$15557 [110:74] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$15557 [147:111] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$15562 [36:0] = sbr_port_select_i[1] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) \$auto$bmuxmap.cc:84:execute$15557 [73:37] : \$auto$bmuxmap.cc:84:execute$15557 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$15562 [73:37] = sbr_port_select_i[1] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) \$auto$bmuxmap.cc:84:execute$15557 [147:111] : \$auto$bmuxmap.cc:84:execute$15557 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$15565  = sbr_port_select_i[2] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) \$auto$bmuxmap.cc:84:execute$15562 [73:37] : \$auto$bmuxmap.cc:84:execute$15562 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$15567 [71:0] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) mgr_ports_req_o[143:72] : mgr_ports_req_o[71:0];
  assign \$auto$bmuxmap.cc:84:execute$15567 [143:72] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) mgr_ports_req_o[287:216] : mgr_ports_req_o[215:144];
  assign \$auto$bmuxmap.cc:84:execute$15567 [215:144] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) 72'hxxxxxxxxxxxxxxxxxx : mgr_ports_req_o[359:288];
  assign \$auto$bmuxmap.cc:84:execute$15567 [287:216] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) 72'hxxxxxxxxxxxxxxxxxx : 72'hxxxxxxxxxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$15572 [71:0] = sbr_port_select_i[1] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) \$auto$bmuxmap.cc:84:execute$15567 [143:72] : \$auto$bmuxmap.cc:84:execute$15567 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$15572 [143:72] = sbr_port_select_i[1] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) \$auto$bmuxmap.cc:84:execute$15567 [287:216] : \$auto$bmuxmap.cc:84:execute$15567 [215:144];
  assign \$auto$bmuxmap.cc:84:execute$15575  = sbr_port_select_i[2] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) \$auto$bmuxmap.cc:84:execute$15572 [143:72] : \$auto$bmuxmap.cc:84:execute$15572 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$15577 [36:0] = select_q[0] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$15577 [73:37] = select_q[0] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$15577 [110:74] = select_q[0] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$15577 [147:111] = select_q[0] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$15582 [36:0] = select_q[1] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) \$auto$bmuxmap.cc:84:execute$15577 [73:37] : \$auto$bmuxmap.cc:84:execute$15577 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$15582 [73:37] = select_q[1] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) \$auto$bmuxmap.cc:84:execute$15577 [147:111] : \$auto$bmuxmap.cc:84:execute$15577 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$15585  = select_q[2] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) \$auto$bmuxmap.cc:84:execute$15582 [73:37] : \$auto$bmuxmap.cc:84:execute$15582 [36:0];
  assign \$12y [0] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h0;
  assign \$12y [72] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h1;
  assign \$12y [144] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h2;
  assign \$12y [216] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h3;
  assign \$12y [288] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h4;
  assign \$12y [360] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h5;
  assign \$12y [432] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h6;
  assign \$12y [504] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h7;
  (* src = "rtl/obi/obi_demux.sv:101.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) select_q <= 3'h0;
    else if (cnt_up) select_q <= sbr_port_select_i;
  assign { \$14y [288], \$14y [216], \$14y [144], \$14y [72], \$14y [0] } = { sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] } & { \$12y [288], \$12y [216], \$12y [144], \$12y [72], \$12y [0] };
  assign \$mgr_ports_req_o$26  = \$7y  ? (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$21y  : 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign \$procmux$11664_Y  = \$7y  & (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$23y [1];
  assign mgr_ports_req_o = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : \$mgr_ports_req_o$26 ;
  assign sbr_port_gnt = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 1'h0 : \$procmux$11664_Y ;
  (* src = "rtl/obi/obi_demux.sv:87.5" *)
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(sbr_port_rsp_o[0]),
    .en_i(\$48y ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$39y [36:2], \$39y [0] } = { sbr_port_rsp_o[36:2], sbr_port_rsp_o[0] };
  assign { \$14y [359:289], \$14y [287:217], \$14y [215:145], \$14y [143:73], \$14y [71:1] } = 355'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign { \$12y [575:505], \$12y [503:433], \$12y [431:361], \$12y [359:289], \$12y [287:217], \$12y [215:145], \$12y [143:73], \$12y [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
  assign \$23y  = \$auto$bmuxmap.cc:84:execute$15565 ;
  assign \$30y  = \$auto$bmuxmap.cc:84:execute$15575 ;
  assign { sbr_port_rsp_o[36:2], \$39y [1], sbr_port_rsp_o[0] } = \$auto$bmuxmap.cc:84:execute$15585 ;
endmodule

(* src = "rtl/obi/obi_demux.sv:7.8" *)
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_obi_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  (* unused_bits = "444 518" *)
  wire [591:0] \$12y ;
  wire [443:0] \$14y ;
  wire [443:0] \$21y ;
  (* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38" *)
  wire [38:0] \$23y ;
  wire \$2y ;
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73" *)
  wire [73:0] \$30y ;
  (* unused_bits = "1" *)
  wire [38:0] \$39y ;
  wire \$3y ;
  wire \$48y ;
  wire \$4y ;
  wire \$6y ;
  wire \$7y ;
  wire [155:0] \$auto$bmuxmap.cc:84:execute$15587 ;
  wire [77:0] \$auto$bmuxmap.cc:84:execute$15592 ;
  wire [38:0] \$auto$bmuxmap.cc:84:execute$15595 ;
  wire [295:0] \$auto$bmuxmap.cc:84:execute$15597 ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$15602 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$15605 ;
  wire [155:0] \$auto$bmuxmap.cc:84:execute$15607 ;
  wire [77:0] \$auto$bmuxmap.cc:84:execute$15612 ;
  wire [38:0] \$auto$bmuxmap.cc:84:execute$15615 ;
  (* src = "rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire [443:0] \$mgr_ports_req_o$26 ;
  wire \$procmux$12518_Y ;
  (* src = "rtl/obi/obi_demux.sv:21.38" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_demux.sv:39.9" *)
  wire cnt_up;
  (* src = "rtl/obi/obi_demux.sv:40.28" *)
  wire in_flight;
  (* src = "rtl/obi/obi_demux.sv:28.38" *)
  output [443:0] mgr_ports_req_o;
  wire [443:0] mgr_ports_req_o;
  (* src = "rtl/obi/obi_demux.sv:29.38" *)
  input [233:0] mgr_ports_rsp_i;
  wire [233:0] mgr_ports_rsp_i;
  (* src = "rtl/obi/obi_demux.sv:39.27" *)
  wire overflow;
  (* src = "rtl/obi/obi_demux.sv:22.38" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_demux.sv:41.9" *)
  wire sbr_port_gnt;
  (* src = "rtl/obi/obi_demux.sv:25.38" *)
  input [73:0] sbr_port_req_i;
  wire [73:0] sbr_port_req_i;
  (* src = "rtl/obi/obi_demux.sv:26.38" *)
  output [38:0] sbr_port_rsp_o;
  wire [38:0] sbr_port_rsp_o;
  (* src = "rtl/obi/obi_demux.sv:24.38" *)
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  (* src = "rtl/obi/obi_demux.sv:44.22" *)
  reg [2:0] select_q;
  assign \$2y  = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:56.11-56.40" *) select_q;
  (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *)
  \$bwmux  #(
    .WIDTH(32'd444)
  ) \$21  (
    .A({ 73'h0000000000000000000, \$14y [370], 73'h0000000000000000000, \$14y [296], 73'h0000000000000000000, \$14y [222], 73'h0000000000000000000, \$14y [148], 73'h0000000000000000000, \$14y [74], 73'h0000000000000000000, \$14y [0] }),
    .B({ sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx }),
    .S({ \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], 1'h0, \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], 1'h0, \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], 1'h0, \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], 1'h0, \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], 1'h0, \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], 1'h0 }),
    .Y(\$21y )
  );
  assign \$3y  = ~ (* src = "rtl/obi/obi_demux.sv:56.44-56.59" *) in_flight;
  assign cnt_up = \$30y [0] && (* src = "rtl/obi/obi_demux.sv:63.9-63.89" *) \$23y [1];
  assign \$4y  = \$2y  || (* src = "rtl/obi/obi_demux.sv:56.11-56.59" *) \$3y ;
  assign \$48y  = cnt_up ^ (* src = "rtl/obi/obi_demux.sv:92.18-92.35" *) sbr_port_rsp_o[0];
  assign \$6y  = in_flight && (* src = "rtl/obi/obi_demux.sv:56.64-56.90" *) sbr_port_rsp_o[0];
  assign \$7y  = \$4y  || (* src = "rtl/obi/obi_demux.sv:56.11-56.91" *) \$6y ;
  assign \$auto$bmuxmap.cc:84:execute$15587 [38:0] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) mgr_ports_rsp_i[77:39] : mgr_ports_rsp_i[38:0];
  assign \$auto$bmuxmap.cc:84:execute$15587 [77:39] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) mgr_ports_rsp_i[155:117] : mgr_ports_rsp_i[116:78];
  assign \$auto$bmuxmap.cc:84:execute$15587 [116:78] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) mgr_ports_rsp_i[233:195] : mgr_ports_rsp_i[194:156];
  assign \$auto$bmuxmap.cc:84:execute$15587 [155:117] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) 39'hxxxxxxxxxx : 39'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$15592 [38:0] = sbr_port_select_i[1] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) \$auto$bmuxmap.cc:84:execute$15587 [77:39] : \$auto$bmuxmap.cc:84:execute$15587 [38:0];
  assign \$auto$bmuxmap.cc:84:execute$15592 [77:39] = sbr_port_select_i[1] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) \$auto$bmuxmap.cc:84:execute$15587 [155:117] : \$auto$bmuxmap.cc:84:execute$15587 [116:78];
  assign \$auto$bmuxmap.cc:84:execute$15595  = sbr_port_select_i[2] ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) \$auto$bmuxmap.cc:84:execute$15592 [77:39] : \$auto$bmuxmap.cc:84:execute$15592 [38:0];
  assign \$auto$bmuxmap.cc:84:execute$15597 [73:0] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) mgr_ports_req_o[147:74] : mgr_ports_req_o[73:0];
  assign \$auto$bmuxmap.cc:84:execute$15597 [147:74] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) mgr_ports_req_o[295:222] : mgr_ports_req_o[221:148];
  assign \$auto$bmuxmap.cc:84:execute$15597 [221:148] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) mgr_ports_req_o[443:370] : mgr_ports_req_o[369:296];
  assign \$auto$bmuxmap.cc:84:execute$15597 [295:222] = sbr_port_select_i[0] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) 74'hxxxxxxxxxxxxxxxxxxx : 74'hxxxxxxxxxxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$15602 [73:0] = sbr_port_select_i[1] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) \$auto$bmuxmap.cc:84:execute$15597 [147:74] : \$auto$bmuxmap.cc:84:execute$15597 [73:0];
  assign \$auto$bmuxmap.cc:84:execute$15602 [147:74] = sbr_port_select_i[1] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) \$auto$bmuxmap.cc:84:execute$15597 [295:222] : \$auto$bmuxmap.cc:84:execute$15597 [221:148];
  assign \$auto$bmuxmap.cc:84:execute$15605  = sbr_port_select_i[2] ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) \$auto$bmuxmap.cc:84:execute$15602 [147:74] : \$auto$bmuxmap.cc:84:execute$15602 [73:0];
  assign \$auto$bmuxmap.cc:84:execute$15607 [38:0] = select_q[0] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) mgr_ports_rsp_i[77:39] : mgr_ports_rsp_i[38:0];
  assign \$auto$bmuxmap.cc:84:execute$15607 [77:39] = select_q[0] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) mgr_ports_rsp_i[155:117] : mgr_ports_rsp_i[116:78];
  assign \$auto$bmuxmap.cc:84:execute$15607 [116:78] = select_q[0] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) mgr_ports_rsp_i[233:195] : mgr_ports_rsp_i[194:156];
  assign \$auto$bmuxmap.cc:84:execute$15607 [155:117] = select_q[0] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) 39'hxxxxxxxxxx : 39'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$15612 [38:0] = select_q[1] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) \$auto$bmuxmap.cc:84:execute$15607 [77:39] : \$auto$bmuxmap.cc:84:execute$15607 [38:0];
  assign \$auto$bmuxmap.cc:84:execute$15612 [77:39] = select_q[1] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) \$auto$bmuxmap.cc:84:execute$15607 [155:117] : \$auto$bmuxmap.cc:84:execute$15607 [116:78];
  assign \$auto$bmuxmap.cc:84:execute$15615  = select_q[2] ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) \$auto$bmuxmap.cc:84:execute$15612 [77:39] : \$auto$bmuxmap.cc:84:execute$15612 [38:0];
  assign \$12y [0] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h0;
  assign \$12y [74] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h1;
  assign \$12y [148] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h2;
  assign \$12y [222] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h3;
  assign \$12y [296] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h4;
  assign \$12y [370] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h5;
  assign \$12y [444] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h6;
  assign \$12y [518] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 3'h7;
  (* src = "rtl/obi/obi_demux.sv:101.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) select_q <= 3'h0;
    else if (cnt_up) select_q <= sbr_port_select_i;
  assign { \$14y [370], \$14y [296], \$14y [222], \$14y [148], \$14y [74], \$14y [0] } = { sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] } & { \$12y [370], \$12y [296], \$12y [222], \$12y [148], \$12y [74], \$12y [0] };
  assign \$mgr_ports_req_o$26  = \$7y  ? (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$21y  : 444'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign \$procmux$12518_Y  = \$7y  & (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$23y [1];
  assign mgr_ports_req_o = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 444'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : \$mgr_ports_req_o$26 ;
  assign sbr_port_gnt = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 1'h0 : \$procmux$12518_Y ;
  (* src = "rtl/obi/obi_demux.sv:87.5" *)
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_obi_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(sbr_port_rsp_o[0]),
    .en_i(\$48y ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$39y [38:2], \$39y [0] } = { sbr_port_rsp_o[38:2], sbr_port_rsp_o[0] };
  assign { \$14y [443:371], \$14y [369:297], \$14y [295:223], \$14y [221:149], \$14y [147:75], \$14y [73:1] } = 438'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign { \$12y [591:519], \$12y [517:445], \$12y [443:371], \$12y [369:297], \$12y [295:223], \$12y [221:149], \$12y [147:75], \$12y [73:1] } = 584'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
  assign \$23y  = \$auto$bmuxmap.cc:84:execute$15595 ;
  assign \$30y  = \$auto$bmuxmap.cc:84:execute$15605 ;
  assign { sbr_port_rsp_o[38:2], \$39y [1], sbr_port_rsp_o[0] } = \$auto$bmuxmap.cc:84:execute$15615 ;
endmodule

(* src = "rtl/obi/obi_demux.sv:7.8" *)
module \obi_demux$croc_chip.i_croc_soc.i_user.i_obi_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire [147:0] \$12y ;
  wire [147:0] \$14y ;
  wire [147:0] \$21y ;
  (* unused_bits = "0" *)
  wire [1:0] \$23y ;
  wire \$2y ;
  wire \$30y ;
  (* unused_bits = "1" *)
  wire [38:0] \$39y ;
  wire \$3y ;
  wire \$48y ;
  wire \$4y ;
  wire \$6y ;
  wire \$7y ;
  (* src = "rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire [147:0] \$mgr_ports_req_o$26 ;
  wire \$procmux$11937_Y ;
  (* src = "rtl/obi/obi_demux.sv:21.38" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_demux.sv:39.9" *)
  wire cnt_up;
  (* src = "rtl/obi/obi_demux.sv:40.28" *)
  wire in_flight;
  (* src = "rtl/obi/obi_demux.sv:28.38" *)
  output [147:0] mgr_ports_req_o;
  wire [147:0] mgr_ports_req_o;
  (* src = "rtl/obi/obi_demux.sv:29.38" *)
  input [77:0] mgr_ports_rsp_i;
  wire [77:0] mgr_ports_rsp_i;
  (* src = "rtl/obi/obi_demux.sv:39.27" *)
  wire overflow;
  (* src = "rtl/obi/obi_demux.sv:22.38" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_demux.sv:41.9" *)
  wire sbr_port_gnt;
  (* src = "rtl/obi/obi_demux.sv:25.38" *)
  input [73:0] sbr_port_req_i;
  wire [73:0] sbr_port_req_i;
  (* src = "rtl/obi/obi_demux.sv:26.38" *)
  output [38:0] sbr_port_rsp_o;
  wire [38:0] sbr_port_rsp_o;
  (* src = "rtl/obi/obi_demux.sv:24.38" *)
  input sbr_port_select_i;
  wire sbr_port_select_i;
  (* src = "rtl/obi/obi_demux.sv:44.22" *)
  reg select_q;
  assign \$2y  = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:56.11-56.40" *) select_q;
  (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *)
  \$bwmux  #(
    .WIDTH(32'd148)
  ) \$21  (
    .A({ 73'h0000000000000000000, \$14y [74], 73'h0000000000000000000, \$14y [0] }),
    .B({ sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx }),
    .S({ \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], 1'h0, \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], 1'h0 }),
    .Y(\$21y )
  );
  assign \$23y  = sbr_port_select_i ? (* src = "rtl/obi/obi_demux.sv:59.50-59.84" *) mgr_ports_rsp_i[40:39] : mgr_ports_rsp_i[1:0];
  assign \$3y  = ~ (* src = "rtl/obi/obi_demux.sv:56.44-56.59" *) in_flight;
  assign \$30y  = sbr_port_select_i ? (* src = "rtl/obi/obi_demux.sv:63.9-63.43" *) mgr_ports_req_o[74] : mgr_ports_req_o[0];
  assign cnt_up = \$30y  && (* src = "rtl/obi/obi_demux.sv:63.9-63.89" *) \$23y [1];
  assign { sbr_port_rsp_o[38:2], \$39y [1], sbr_port_rsp_o[0] } = select_q ? (* src = "rtl/obi/obi_demux.sv:70.34-70.59" *) mgr_ports_rsp_i[77:39] : mgr_ports_rsp_i[38:0];
  assign \$4y  = \$2y  || (* src = "rtl/obi/obi_demux.sv:56.11-56.59" *) \$3y ;
  assign \$48y  = cnt_up ^ (* src = "rtl/obi/obi_demux.sv:92.18-92.35" *) sbr_port_rsp_o[0];
  assign \$6y  = in_flight && (* src = "rtl/obi/obi_demux.sv:56.64-56.90" *) sbr_port_rsp_o[0];
  assign \$7y  = \$4y  || (* src = "rtl/obi/obi_demux.sv:56.11-56.91" *) \$6y ;
  assign \$12y [0] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 1'h0;
  assign \$12y [74] = sbr_port_select_i == (* src = "rtl/obi/obi_demux.sv:58.9-58.66" *) 1'h1;
  (* src = "rtl/obi/obi_demux.sv:101.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) select_q <= 1'h0;
    else if (cnt_up) select_q <= sbr_port_select_i;
  assign { \$14y [74], \$14y [0] } = { sbr_port_req_i[0], sbr_port_req_i[0] } & { \$12y [74], \$12y [0] };
  assign \$mgr_ports_req_o$26  = \$7y  ? (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$21y  : 148'h0000000000000000000000000000000000000;
  assign \$procmux$11937_Y  = \$7y  & (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$23y [1];
  assign mgr_ports_req_o = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 148'h0000000000000000000000000000000000000 : \$mgr_ports_req_o$26 ;
  assign sbr_port_gnt = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 1'h0 : \$procmux$11937_Y ;
  (* src = "rtl/obi/obi_demux.sv:87.5" *)
  \delta_counter$croc_chip.i_croc_soc.i_user.i_obi_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(sbr_port_rsp_o[0]),
    .en_i(\$48y ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$39y [38:2], \$39y [0] } = { sbr_port_rsp_o[38:2], sbr_port_rsp_o[0] };
  assign { \$14y [147:75], \$14y [73:1] } = 146'h0000000000000000000000000000000000000;
  assign { \$12y [147:75], \$12y [73:1] } = 146'h0000000000000000000000000000000000000;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
endmodule

(* src = "rtl/obi/obi_err_sbr.sv:7.8" *)
module \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_periph_err (clk_i, rst_ni, testmode_i, obi_req_i, obi_rsp_o);
  wire \$3y ;
  (* src = "rtl/obi/obi_err_sbr.sv:19.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_err_sbr.sv:28.20" *)
  wire fifo_empty;
  (* src = "rtl/obi/obi_err_sbr.sv:28.9" *)
  wire fifo_full;
  (* src = "rtl/obi/obi_err_sbr.sv:28.32" *)
  wire fifo_pop;
  (* src = "rtl/obi/obi_err_sbr.sv:23.20" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "rtl/obi/obi_err_sbr.sv:24.20" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "rtl/obi/obi_err_sbr.sv:27.30" *)
  wire [2:0] rid;
  (* src = "rtl/obi/obi_err_sbr.sv:20.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_err_sbr.sv:21.16" *)
  input testmode_i;
  wire testmode_i;
  assign obi_rsp_o[1] = ~ (* src = "rtl/obi/obi_err_sbr.sv:36.25-36.35" *) fifo_full;
  assign fifo_pop = ~ (* src = "rtl/obi/obi_err_sbr.sv:37.25-37.36" *) fifo_empty;
  assign \$3y  = obi_req_i[0] && (* src = "rtl/obi/obi_err_sbr.sv:59.18-59.48" *) obi_rsp_o[1];
  (* src = "rtl/obi/obi_err_sbr.sv:50.5" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_periph_err.i_id_fifo  i_id_fifo (
    .clk_i(clk_i),
    .data_i(obi_req_i[4:2]),
    .data_o(rid),
    .empty_o(fifo_empty),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$3y ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { obi_rsp_o[38:2], obi_rsp_o[0] } = { 32'hbadcab1e, rid, 2'h2, fifo_pop };
endmodule

(* src = "rtl/obi/obi_err_sbr.sv:7.8" *)
module \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_xbar_err (clk_i, rst_ni, testmode_i, obi_req_i, obi_rsp_o);
  wire \$3y ;
  (* src = "rtl/obi/obi_err_sbr.sv:19.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_err_sbr.sv:28.20" *)
  wire fifo_empty;
  (* src = "rtl/obi/obi_err_sbr.sv:28.9" *)
  wire fifo_full;
  (* src = "rtl/obi/obi_err_sbr.sv:28.32" *)
  wire fifo_pop;
  (* src = "rtl/obi/obi_err_sbr.sv:23.20" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "rtl/obi/obi_err_sbr.sv:24.20" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "rtl/obi/obi_err_sbr.sv:27.30" *)
  wire [2:0] rid;
  (* src = "rtl/obi/obi_err_sbr.sv:20.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_err_sbr.sv:21.16" *)
  input testmode_i;
  wire testmode_i;
  assign obi_rsp_o[1] = ~ (* src = "rtl/obi/obi_err_sbr.sv:36.25-36.35" *) fifo_full;
  assign fifo_pop = ~ (* src = "rtl/obi/obi_err_sbr.sv:37.25-37.36" *) fifo_empty;
  assign \$3y  = obi_req_i[0] && (* src = "rtl/obi/obi_err_sbr.sv:59.18-59.48" *) obi_rsp_o[1];
  (* src = "rtl/obi/obi_err_sbr.sv:50.5" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_xbar_err.i_id_fifo  i_id_fifo (
    .clk_i(clk_i),
    .data_i(obi_req_i[4:2]),
    .data_o(rid),
    .empty_o(fifo_empty),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$3y ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { obi_rsp_o[38:2], obi_rsp_o[0] } = { 32'hbadcab1e, rid, 2'h2, fifo_pop };
endmodule

(* src = "rtl/obi/obi_err_sbr.sv:7.8" *)
module \obi_err_sbr$croc_chip.i_croc_soc.i_user.i_user_err (clk_i, rst_ni, testmode_i, obi_req_i, obi_rsp_o);
  wire \$3y ;
  (* src = "rtl/obi/obi_err_sbr.sv:19.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_err_sbr.sv:28.20" *)
  wire fifo_empty;
  (* src = "rtl/obi/obi_err_sbr.sv:28.9" *)
  wire fifo_full;
  (* src = "rtl/obi/obi_err_sbr.sv:28.32" *)
  wire fifo_pop;
  (* src = "rtl/obi/obi_err_sbr.sv:23.20" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "rtl/obi/obi_err_sbr.sv:24.20" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "rtl/obi/obi_err_sbr.sv:27.30" *)
  wire [2:0] rid;
  (* src = "rtl/obi/obi_err_sbr.sv:20.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_err_sbr.sv:21.16" *)
  input testmode_i;
  wire testmode_i;
  assign obi_rsp_o[1] = ~ (* src = "rtl/obi/obi_err_sbr.sv:36.25-36.35" *) fifo_full;
  assign fifo_pop = ~ (* src = "rtl/obi/obi_err_sbr.sv:37.25-37.36" *) fifo_empty;
  assign \$3y  = obi_req_i[0] && (* src = "rtl/obi/obi_err_sbr.sv:59.18-59.48" *) obi_rsp_o[1];
  (* src = "rtl/obi/obi_err_sbr.sv:50.5" *)
  \fifo_v3$croc_chip.i_croc_soc.i_user.i_user_err.i_id_fifo  i_id_fifo (
    .clk_i(clk_i),
    .data_i(obi_req_i[4:2]),
    .data_o(rid),
    .empty_o(fifo_empty),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$3y ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { obi_rsp_o[38:2], obi_rsp_o[0] } = { 32'hbadcab1e, rid, 2'h2, fifo_pop };
endmodule

(* src = "rtl/obi/obi_mux.sv:10.8" *)
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$0y ;
  wire [139:0] \$11y ;
  wire [139:0] \$13y ;
  wire \$1y ;
  wire [139:0] \$20y ;
  wire [139:0] \$27y ;
  wire \$5y ;
  (* src = "rtl/obi/obi_mux.sv:34.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_mux.sv:60.23" *)
  wire fifo_full;
  (* src = "rtl/obi/obi_mux.sv:58.21" *)
  wire [70:0] mgr_port_a_in_sbr;
  (* src = "rtl/obi/obi_mux.sv:60.9" *)
  wire mgr_port_req;
  (* src = "rtl/obi/obi_mux.sv:41.47" *)
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  (* src = "rtl/obi/obi_mux.sv:42.47" *)
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  (* src = "rtl/obi/obi_mux.sv:59.49" *)
  wire [1:0] response_id;
  (* src = "rtl/obi/obi_mux.sv:35.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_mux.sv:50.42" *)
  wire [3:0] sbr_ports_gnt;
  (* src = "rtl/obi/obi_mux.sv:38.47" *)
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  (* src = "rtl/obi/obi_mux.sv:39.47" *)
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  (* src = "rtl/obi/obi_mux.sv:141.39" *)
  wire [139:0] sbr_rsp_r;
  (* src = "rtl/obi/obi_mux.sv:140.27" *)
  wire [3:0] sbr_rsp_rvalid;
  (* src = "rtl/obi/obi_mux.sv:59.36" *)
  wire [1:0] selected_id;
  (* src = "rtl/obi/obi_mux.sv:36.16" *)
  input testmode_i;
  wire testmode_i;
  assign \$0y  = ~ (* src = "rtl/obi/obi_mux.sv:79.38-79.48" *) fifo_full;
  assign \$1y  = mgr_port_rsp_i[1] && (* src = "rtl/obi/obi_mux.sv:79.16-79.48" *) \$0y ;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$20  (
    .A({ \$13y [139:108], 3'h0, \$13y [104:73], 3'h0, \$13y [69:38], 3'h0, \$13y [34:3], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34], 2'h0 }),
    .Y(\$20y )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$27  (
    .A(\$20y ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34], 1'h0 }),
    .Y(\$27y )
  );
  assign mgr_port_req_o[0] = mgr_port_req && (* src = "rtl/obi/obi_mux.sv:85.31-85.57" *) \$0y ;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$34  (
    .A(\$27y ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34] }),
    .Y(sbr_rsp_r)
  );
  assign \$5y  = mgr_port_req_o[0] && (* src = "rtl/obi/obi_mux.sv:129.20-129.60" *) mgr_port_rsp_i[1];
  assign \$11y [34] = response_id == 2'h0;
  assign \$11y [69] = response_id == 2'h1;
  assign \$11y [104] = response_id == 2'h2;
  assign \$11y [139] = response_id == 2'h3;
  assign { \$13y [139], \$13y [104], \$13y [69], \$13y [34], \$13y [138], \$13y [103], \$13y [68], \$13y [33], \$13y [137], \$13y [102], \$13y [67], \$13y [32], \$13y [136], \$13y [101], \$13y [66], \$13y [31], \$13y [135], \$13y [100], \$13y [65], \$13y [30], \$13y [134], \$13y [99], \$13y [64], \$13y [29], \$13y [133], \$13y [98], \$13y [63], \$13y [28], \$13y [132], \$13y [97], \$13y [62], \$13y [27], \$13y [131], \$13y [96], \$13y [61], \$13y [26], \$13y [130], \$13y [95], \$13y [60], \$13y [25], \$13y [129], \$13y [94], \$13y [59], \$13y [24], \$13y [128], \$13y [93], \$13y [58], \$13y [23], \$13y [127], \$13y [92], \$13y [57], \$13y [22], \$13y [126], \$13y [91], \$13y [56], \$13y [21], \$13y [125], \$13y [90], \$13y [55], \$13y [20], \$13y [124], \$13y [89], \$13y [54], \$13y [19], \$13y [123], \$13y [88], \$13y [53], \$13y [18], \$13y [122], \$13y [87], \$13y [52], \$13y [17], \$13y [121], \$13y [86], \$13y [51], \$13y [16], \$13y [120], \$13y [85], \$13y [50], \$13y [15], \$13y [119], \$13y [84], \$13y [49], \$13y [14], \$13y [118], \$13y [83], \$13y [48], \$13y [13], \$13y [117], \$13y [82], \$13y [47], \$13y [12], \$13y [116], \$13y [81], \$13y [46], \$13y [11], \$13y [115], \$13y [80], \$13y [45], \$13y [10], \$13y [114], \$13y [79], \$13y [44], \$13y [9], \$13y [113], \$13y [78], \$13y [43], \$13y [8], \$13y [112], \$13y [77], \$13y [42], \$13y [7], \$13y [111], \$13y [76], \$13y [41], \$13y [6], \$13y [110], \$13y [75], \$13y [40], \$13y [5], \$13y [109], \$13y [74], \$13y [39], \$13y [4], \$13y [108], \$13y [73], \$13y [38], \$13y [3] } = { mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] } & { \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34] };
  assign sbr_rsp_rvalid = { mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] } & { \$11y [139], \$11y [104], \$11y [69], \$11y [34] };
  (* src = "rtl/obi/obi_mux.sv:119.7" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$5y ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/obi/obi_mux.sv:67.5" *)
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$1y ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$13y [107:105], \$13y [72:70], \$13y [37:35], \$13y [2:0] } = 12'h000;
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign { \$11y [138:105], \$11y [103:70], \$11y [68:35], \$11y [33:0] } = { \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], 3'h0, \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], 3'h0, \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], 3'h0, \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], 3'h0 };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

(* src = "rtl/obi/obi_mux.sv:10.8" *)
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$0y ;
  wire [139:0] \$11y ;
  wire [139:0] \$13y ;
  wire \$1y ;
  wire [139:0] \$20y ;
  wire [139:0] \$27y ;
  wire \$5y ;
  (* src = "rtl/obi/obi_mux.sv:34.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_mux.sv:60.23" *)
  wire fifo_full;
  (* src = "rtl/obi/obi_mux.sv:58.21" *)
  wire [70:0] mgr_port_a_in_sbr;
  (* src = "rtl/obi/obi_mux.sv:60.9" *)
  wire mgr_port_req;
  (* src = "rtl/obi/obi_mux.sv:41.47" *)
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  (* src = "rtl/obi/obi_mux.sv:42.47" *)
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  (* src = "rtl/obi/obi_mux.sv:59.49" *)
  wire [1:0] response_id;
  (* src = "rtl/obi/obi_mux.sv:35.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_mux.sv:50.42" *)
  wire [3:0] sbr_ports_gnt;
  (* src = "rtl/obi/obi_mux.sv:38.47" *)
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  (* src = "rtl/obi/obi_mux.sv:39.47" *)
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  (* src = "rtl/obi/obi_mux.sv:141.39" *)
  wire [139:0] sbr_rsp_r;
  (* src = "rtl/obi/obi_mux.sv:140.27" *)
  wire [3:0] sbr_rsp_rvalid;
  (* src = "rtl/obi/obi_mux.sv:59.36" *)
  wire [1:0] selected_id;
  (* src = "rtl/obi/obi_mux.sv:36.16" *)
  input testmode_i;
  wire testmode_i;
  assign \$0y  = ~ (* src = "rtl/obi/obi_mux.sv:79.38-79.48" *) fifo_full;
  assign \$1y  = mgr_port_rsp_i[1] && (* src = "rtl/obi/obi_mux.sv:79.16-79.48" *) \$0y ;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$20  (
    .A({ \$13y [139:108], 3'h0, \$13y [104:73], 3'h0, \$13y [69:38], 3'h0, \$13y [34:3], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34], 2'h0 }),
    .Y(\$20y )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$27  (
    .A(\$20y ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34], 1'h0 }),
    .Y(\$27y )
  );
  assign mgr_port_req_o[0] = mgr_port_req && (* src = "rtl/obi/obi_mux.sv:85.31-85.57" *) \$0y ;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$34  (
    .A(\$27y ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34] }),
    .Y(sbr_rsp_r)
  );
  assign \$5y  = mgr_port_req_o[0] && (* src = "rtl/obi/obi_mux.sv:129.20-129.60" *) mgr_port_rsp_i[1];
  assign \$11y [34] = response_id == 2'h0;
  assign \$11y [69] = response_id == 2'h1;
  assign \$11y [104] = response_id == 2'h2;
  assign \$11y [139] = response_id == 2'h3;
  assign { \$13y [139], \$13y [104], \$13y [69], \$13y [34], \$13y [138], \$13y [103], \$13y [68], \$13y [33], \$13y [137], \$13y [102], \$13y [67], \$13y [32], \$13y [136], \$13y [101], \$13y [66], \$13y [31], \$13y [135], \$13y [100], \$13y [65], \$13y [30], \$13y [134], \$13y [99], \$13y [64], \$13y [29], \$13y [133], \$13y [98], \$13y [63], \$13y [28], \$13y [132], \$13y [97], \$13y [62], \$13y [27], \$13y [131], \$13y [96], \$13y [61], \$13y [26], \$13y [130], \$13y [95], \$13y [60], \$13y [25], \$13y [129], \$13y [94], \$13y [59], \$13y [24], \$13y [128], \$13y [93], \$13y [58], \$13y [23], \$13y [127], \$13y [92], \$13y [57], \$13y [22], \$13y [126], \$13y [91], \$13y [56], \$13y [21], \$13y [125], \$13y [90], \$13y [55], \$13y [20], \$13y [124], \$13y [89], \$13y [54], \$13y [19], \$13y [123], \$13y [88], \$13y [53], \$13y [18], \$13y [122], \$13y [87], \$13y [52], \$13y [17], \$13y [121], \$13y [86], \$13y [51], \$13y [16], \$13y [120], \$13y [85], \$13y [50], \$13y [15], \$13y [119], \$13y [84], \$13y [49], \$13y [14], \$13y [118], \$13y [83], \$13y [48], \$13y [13], \$13y [117], \$13y [82], \$13y [47], \$13y [12], \$13y [116], \$13y [81], \$13y [46], \$13y [11], \$13y [115], \$13y [80], \$13y [45], \$13y [10], \$13y [114], \$13y [79], \$13y [44], \$13y [9], \$13y [113], \$13y [78], \$13y [43], \$13y [8], \$13y [112], \$13y [77], \$13y [42], \$13y [7], \$13y [111], \$13y [76], \$13y [41], \$13y [6], \$13y [110], \$13y [75], \$13y [40], \$13y [5], \$13y [109], \$13y [74], \$13y [39], \$13y [4], \$13y [108], \$13y [73], \$13y [38], \$13y [3] } = { mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] } & { \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34] };
  assign sbr_rsp_rvalid = { mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] } & { \$11y [139], \$11y [104], \$11y [69], \$11y [34] };
  (* src = "rtl/obi/obi_mux.sv:119.7" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$5y ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/obi/obi_mux.sv:67.5" *)
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$1y ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$13y [107:105], \$13y [72:70], \$13y [37:35], \$13y [2:0] } = 12'h000;
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign { \$11y [138:105], \$11y [103:70], \$11y [68:35], \$11y [33:0] } = { \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], 3'h0, \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], 3'h0, \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], 3'h0, \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], 3'h0 };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

(* src = "rtl/obi/obi_mux.sv:10.8" *)
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$0y ;
  wire [139:0] \$11y ;
  wire [139:0] \$13y ;
  wire \$1y ;
  wire [139:0] \$20y ;
  wire [139:0] \$27y ;
  wire \$5y ;
  (* src = "rtl/obi/obi_mux.sv:34.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_mux.sv:60.23" *)
  wire fifo_full;
  (* src = "rtl/obi/obi_mux.sv:58.21" *)
  wire [70:0] mgr_port_a_in_sbr;
  (* src = "rtl/obi/obi_mux.sv:60.9" *)
  wire mgr_port_req;
  (* src = "rtl/obi/obi_mux.sv:41.47" *)
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  (* src = "rtl/obi/obi_mux.sv:42.47" *)
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  (* src = "rtl/obi/obi_mux.sv:59.49" *)
  wire [1:0] response_id;
  (* src = "rtl/obi/obi_mux.sv:35.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_mux.sv:50.42" *)
  wire [3:0] sbr_ports_gnt;
  (* src = "rtl/obi/obi_mux.sv:38.47" *)
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  (* src = "rtl/obi/obi_mux.sv:39.47" *)
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  (* src = "rtl/obi/obi_mux.sv:141.39" *)
  wire [139:0] sbr_rsp_r;
  (* src = "rtl/obi/obi_mux.sv:140.27" *)
  wire [3:0] sbr_rsp_rvalid;
  (* src = "rtl/obi/obi_mux.sv:59.36" *)
  wire [1:0] selected_id;
  (* src = "rtl/obi/obi_mux.sv:36.16" *)
  input testmode_i;
  wire testmode_i;
  assign \$0y  = ~ (* src = "rtl/obi/obi_mux.sv:79.38-79.48" *) fifo_full;
  assign \$1y  = mgr_port_rsp_i[1] && (* src = "rtl/obi/obi_mux.sv:79.16-79.48" *) \$0y ;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$20  (
    .A({ \$13y [139:108], 3'h0, \$13y [104:73], 3'h0, \$13y [69:38], 3'h0, \$13y [34:3], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34], 2'h0 }),
    .Y(\$20y )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$27  (
    .A(\$20y ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34], 1'h0 }),
    .Y(\$27y )
  );
  assign mgr_port_req_o[0] = mgr_port_req && (* src = "rtl/obi/obi_mux.sv:85.31-85.57" *) \$0y ;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$34  (
    .A(\$27y ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34] }),
    .Y(sbr_rsp_r)
  );
  assign \$5y  = mgr_port_req_o[0] && (* src = "rtl/obi/obi_mux.sv:129.20-129.60" *) mgr_port_rsp_i[1];
  assign \$11y [34] = response_id == 2'h0;
  assign \$11y [69] = response_id == 2'h1;
  assign \$11y [104] = response_id == 2'h2;
  assign \$11y [139] = response_id == 2'h3;
  assign { \$13y [139], \$13y [104], \$13y [69], \$13y [34], \$13y [138], \$13y [103], \$13y [68], \$13y [33], \$13y [137], \$13y [102], \$13y [67], \$13y [32], \$13y [136], \$13y [101], \$13y [66], \$13y [31], \$13y [135], \$13y [100], \$13y [65], \$13y [30], \$13y [134], \$13y [99], \$13y [64], \$13y [29], \$13y [133], \$13y [98], \$13y [63], \$13y [28], \$13y [132], \$13y [97], \$13y [62], \$13y [27], \$13y [131], \$13y [96], \$13y [61], \$13y [26], \$13y [130], \$13y [95], \$13y [60], \$13y [25], \$13y [129], \$13y [94], \$13y [59], \$13y [24], \$13y [128], \$13y [93], \$13y [58], \$13y [23], \$13y [127], \$13y [92], \$13y [57], \$13y [22], \$13y [126], \$13y [91], \$13y [56], \$13y [21], \$13y [125], \$13y [90], \$13y [55], \$13y [20], \$13y [124], \$13y [89], \$13y [54], \$13y [19], \$13y [123], \$13y [88], \$13y [53], \$13y [18], \$13y [122], \$13y [87], \$13y [52], \$13y [17], \$13y [121], \$13y [86], \$13y [51], \$13y [16], \$13y [120], \$13y [85], \$13y [50], \$13y [15], \$13y [119], \$13y [84], \$13y [49], \$13y [14], \$13y [118], \$13y [83], \$13y [48], \$13y [13], \$13y [117], \$13y [82], \$13y [47], \$13y [12], \$13y [116], \$13y [81], \$13y [46], \$13y [11], \$13y [115], \$13y [80], \$13y [45], \$13y [10], \$13y [114], \$13y [79], \$13y [44], \$13y [9], \$13y [113], \$13y [78], \$13y [43], \$13y [8], \$13y [112], \$13y [77], \$13y [42], \$13y [7], \$13y [111], \$13y [76], \$13y [41], \$13y [6], \$13y [110], \$13y [75], \$13y [40], \$13y [5], \$13y [109], \$13y [74], \$13y [39], \$13y [4], \$13y [108], \$13y [73], \$13y [38], \$13y [3] } = { mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] } & { \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34] };
  assign sbr_rsp_rvalid = { mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] } & { \$11y [139], \$11y [104], \$11y [69], \$11y [34] };
  (* src = "rtl/obi/obi_mux.sv:119.7" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$5y ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/obi/obi_mux.sv:67.5" *)
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$1y ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$13y [107:105], \$13y [72:70], \$13y [37:35], \$13y [2:0] } = 12'h000;
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign { \$11y [138:105], \$11y [103:70], \$11y [68:35], \$11y [33:0] } = { \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], 3'h0, \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], 3'h0, \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], 3'h0, \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], 3'h0 };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

(* src = "rtl/obi/obi_mux.sv:10.8" *)
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$0y ;
  wire [139:0] \$11y ;
  wire [139:0] \$13y ;
  wire \$1y ;
  wire [139:0] \$20y ;
  wire [139:0] \$27y ;
  wire \$5y ;
  (* src = "rtl/obi/obi_mux.sv:34.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_mux.sv:60.23" *)
  wire fifo_full;
  (* src = "rtl/obi/obi_mux.sv:58.21" *)
  wire [70:0] mgr_port_a_in_sbr;
  (* src = "rtl/obi/obi_mux.sv:60.9" *)
  wire mgr_port_req;
  (* src = "rtl/obi/obi_mux.sv:41.47" *)
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  (* src = "rtl/obi/obi_mux.sv:42.47" *)
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  (* src = "rtl/obi/obi_mux.sv:59.49" *)
  wire [1:0] response_id;
  (* src = "rtl/obi/obi_mux.sv:35.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_mux.sv:50.42" *)
  wire [3:0] sbr_ports_gnt;
  (* src = "rtl/obi/obi_mux.sv:38.47" *)
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  (* src = "rtl/obi/obi_mux.sv:39.47" *)
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  (* src = "rtl/obi/obi_mux.sv:141.39" *)
  wire [139:0] sbr_rsp_r;
  (* src = "rtl/obi/obi_mux.sv:140.27" *)
  wire [3:0] sbr_rsp_rvalid;
  (* src = "rtl/obi/obi_mux.sv:59.36" *)
  wire [1:0] selected_id;
  (* src = "rtl/obi/obi_mux.sv:36.16" *)
  input testmode_i;
  wire testmode_i;
  assign \$0y  = ~ (* src = "rtl/obi/obi_mux.sv:79.38-79.48" *) fifo_full;
  assign \$1y  = mgr_port_rsp_i[1] && (* src = "rtl/obi/obi_mux.sv:79.16-79.48" *) \$0y ;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$20  (
    .A({ \$13y [139:108], 3'h0, \$13y [104:73], 3'h0, \$13y [69:38], 3'h0, \$13y [34:3], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34], 2'h0 }),
    .Y(\$20y )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$27  (
    .A(\$20y ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34], 1'h0 }),
    .Y(\$27y )
  );
  assign mgr_port_req_o[0] = mgr_port_req && (* src = "rtl/obi/obi_mux.sv:85.31-85.57" *) \$0y ;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$34  (
    .A(\$27y ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34] }),
    .Y(sbr_rsp_r)
  );
  assign \$5y  = mgr_port_req_o[0] && (* src = "rtl/obi/obi_mux.sv:129.20-129.60" *) mgr_port_rsp_i[1];
  assign \$11y [34] = response_id == 2'h0;
  assign \$11y [69] = response_id == 2'h1;
  assign \$11y [104] = response_id == 2'h2;
  assign \$11y [139] = response_id == 2'h3;
  assign { \$13y [139], \$13y [104], \$13y [69], \$13y [34], \$13y [138], \$13y [103], \$13y [68], \$13y [33], \$13y [137], \$13y [102], \$13y [67], \$13y [32], \$13y [136], \$13y [101], \$13y [66], \$13y [31], \$13y [135], \$13y [100], \$13y [65], \$13y [30], \$13y [134], \$13y [99], \$13y [64], \$13y [29], \$13y [133], \$13y [98], \$13y [63], \$13y [28], \$13y [132], \$13y [97], \$13y [62], \$13y [27], \$13y [131], \$13y [96], \$13y [61], \$13y [26], \$13y [130], \$13y [95], \$13y [60], \$13y [25], \$13y [129], \$13y [94], \$13y [59], \$13y [24], \$13y [128], \$13y [93], \$13y [58], \$13y [23], \$13y [127], \$13y [92], \$13y [57], \$13y [22], \$13y [126], \$13y [91], \$13y [56], \$13y [21], \$13y [125], \$13y [90], \$13y [55], \$13y [20], \$13y [124], \$13y [89], \$13y [54], \$13y [19], \$13y [123], \$13y [88], \$13y [53], \$13y [18], \$13y [122], \$13y [87], \$13y [52], \$13y [17], \$13y [121], \$13y [86], \$13y [51], \$13y [16], \$13y [120], \$13y [85], \$13y [50], \$13y [15], \$13y [119], \$13y [84], \$13y [49], \$13y [14], \$13y [118], \$13y [83], \$13y [48], \$13y [13], \$13y [117], \$13y [82], \$13y [47], \$13y [12], \$13y [116], \$13y [81], \$13y [46], \$13y [11], \$13y [115], \$13y [80], \$13y [45], \$13y [10], \$13y [114], \$13y [79], \$13y [44], \$13y [9], \$13y [113], \$13y [78], \$13y [43], \$13y [8], \$13y [112], \$13y [77], \$13y [42], \$13y [7], \$13y [111], \$13y [76], \$13y [41], \$13y [6], \$13y [110], \$13y [75], \$13y [40], \$13y [5], \$13y [109], \$13y [74], \$13y [39], \$13y [4], \$13y [108], \$13y [73], \$13y [38], \$13y [3] } = { mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] } & { \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34] };
  assign sbr_rsp_rvalid = { mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] } & { \$11y [139], \$11y [104], \$11y [69], \$11y [34] };
  (* src = "rtl/obi/obi_mux.sv:119.7" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$5y ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/obi/obi_mux.sv:67.5" *)
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$1y ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$13y [107:105], \$13y [72:70], \$13y [37:35], \$13y [2:0] } = 12'h000;
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign { \$11y [138:105], \$11y [103:70], \$11y [68:35], \$11y [33:0] } = { \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], 3'h0, \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], 3'h0, \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], 3'h0, \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], 3'h0 };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

(* src = "rtl/obi/obi_mux.sv:10.8" *)
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$0y ;
  wire [139:0] \$11y ;
  wire [139:0] \$13y ;
  wire \$1y ;
  wire [139:0] \$20y ;
  wire [139:0] \$27y ;
  wire \$5y ;
  (* src = "rtl/obi/obi_mux.sv:34.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_mux.sv:60.23" *)
  wire fifo_full;
  (* src = "rtl/obi/obi_mux.sv:58.21" *)
  wire [70:0] mgr_port_a_in_sbr;
  (* src = "rtl/obi/obi_mux.sv:60.9" *)
  wire mgr_port_req;
  (* src = "rtl/obi/obi_mux.sv:41.47" *)
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  (* src = "rtl/obi/obi_mux.sv:42.47" *)
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  (* src = "rtl/obi/obi_mux.sv:59.49" *)
  wire [1:0] response_id;
  (* src = "rtl/obi/obi_mux.sv:35.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_mux.sv:50.42" *)
  wire [3:0] sbr_ports_gnt;
  (* src = "rtl/obi/obi_mux.sv:38.47" *)
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  (* src = "rtl/obi/obi_mux.sv:39.47" *)
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  (* src = "rtl/obi/obi_mux.sv:141.39" *)
  wire [139:0] sbr_rsp_r;
  (* src = "rtl/obi/obi_mux.sv:140.27" *)
  wire [3:0] sbr_rsp_rvalid;
  (* src = "rtl/obi/obi_mux.sv:59.36" *)
  wire [1:0] selected_id;
  (* src = "rtl/obi/obi_mux.sv:36.16" *)
  input testmode_i;
  wire testmode_i;
  assign \$0y  = ~ (* src = "rtl/obi/obi_mux.sv:79.38-79.48" *) fifo_full;
  assign \$1y  = mgr_port_rsp_i[1] && (* src = "rtl/obi/obi_mux.sv:79.16-79.48" *) \$0y ;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$20  (
    .A({ \$13y [139:108], 3'h0, \$13y [104:73], 3'h0, \$13y [69:38], 3'h0, \$13y [34:3], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34], 2'h0 }),
    .Y(\$20y )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$27  (
    .A(\$20y ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34], 1'h0 }),
    .Y(\$27y )
  );
  assign mgr_port_req_o[0] = mgr_port_req && (* src = "rtl/obi/obi_mux.sv:85.31-85.57" *) \$0y ;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$34  (
    .A(\$27y ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34] }),
    .Y(sbr_rsp_r)
  );
  assign \$5y  = mgr_port_req_o[0] && (* src = "rtl/obi/obi_mux.sv:129.20-129.60" *) mgr_port_rsp_i[1];
  assign \$11y [34] = response_id == 2'h0;
  assign \$11y [69] = response_id == 2'h1;
  assign \$11y [104] = response_id == 2'h2;
  assign \$11y [139] = response_id == 2'h3;
  assign { \$13y [139], \$13y [104], \$13y [69], \$13y [34], \$13y [138], \$13y [103], \$13y [68], \$13y [33], \$13y [137], \$13y [102], \$13y [67], \$13y [32], \$13y [136], \$13y [101], \$13y [66], \$13y [31], \$13y [135], \$13y [100], \$13y [65], \$13y [30], \$13y [134], \$13y [99], \$13y [64], \$13y [29], \$13y [133], \$13y [98], \$13y [63], \$13y [28], \$13y [132], \$13y [97], \$13y [62], \$13y [27], \$13y [131], \$13y [96], \$13y [61], \$13y [26], \$13y [130], \$13y [95], \$13y [60], \$13y [25], \$13y [129], \$13y [94], \$13y [59], \$13y [24], \$13y [128], \$13y [93], \$13y [58], \$13y [23], \$13y [127], \$13y [92], \$13y [57], \$13y [22], \$13y [126], \$13y [91], \$13y [56], \$13y [21], \$13y [125], \$13y [90], \$13y [55], \$13y [20], \$13y [124], \$13y [89], \$13y [54], \$13y [19], \$13y [123], \$13y [88], \$13y [53], \$13y [18], \$13y [122], \$13y [87], \$13y [52], \$13y [17], \$13y [121], \$13y [86], \$13y [51], \$13y [16], \$13y [120], \$13y [85], \$13y [50], \$13y [15], \$13y [119], \$13y [84], \$13y [49], \$13y [14], \$13y [118], \$13y [83], \$13y [48], \$13y [13], \$13y [117], \$13y [82], \$13y [47], \$13y [12], \$13y [116], \$13y [81], \$13y [46], \$13y [11], \$13y [115], \$13y [80], \$13y [45], \$13y [10], \$13y [114], \$13y [79], \$13y [44], \$13y [9], \$13y [113], \$13y [78], \$13y [43], \$13y [8], \$13y [112], \$13y [77], \$13y [42], \$13y [7], \$13y [111], \$13y [76], \$13y [41], \$13y [6], \$13y [110], \$13y [75], \$13y [40], \$13y [5], \$13y [109], \$13y [74], \$13y [39], \$13y [4], \$13y [108], \$13y [73], \$13y [38], \$13y [3] } = { mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] } & { \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34] };
  assign sbr_rsp_rvalid = { mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] } & { \$11y [139], \$11y [104], \$11y [69], \$11y [34] };
  (* src = "rtl/obi/obi_mux.sv:119.7" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$5y ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/obi/obi_mux.sv:67.5" *)
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$1y ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$13y [107:105], \$13y [72:70], \$13y [37:35], \$13y [2:0] } = 12'h000;
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign { \$11y [138:105], \$11y [103:70], \$11y [68:35], \$11y [33:0] } = { \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], 3'h0, \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], 3'h0, \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], 3'h0, \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], 3'h0 };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

(* src = "rtl/obi/obi_sram_shim.sv:7.8" *)
module \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram_shim (clk_i, rst_ni, obi_req_i, obi_rsp_o, req_o, we_o, addr_o, wdata_o, be_o, gnt_i, rdata_i);
  (* src = "rtl/obi/obi_sram_shim.sv:23.41" *)
  output [31:0] addr_o;
  wire [31:0] addr_o;
  (* src = "rtl/obi/obi_sram_shim.sv:25.41" *)
  output [3:0] be_o;
  wire [3:0] be_o;
  (* src = "rtl/obi/obi_sram_shim.sv:15.41" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_sram_shim.sv:27.41" *)
  input gnt_i;
  wire gnt_i;
  (* src = "rtl/obi/obi_sram_shim.sv:38.36" *)
  reg [2:0] id_q;
  (* src = "rtl/obi/obi_sram_shim.sv:18.41" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "rtl/obi/obi_sram_shim.sv:19.41" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "rtl/obi/obi_sram_shim.sv:28.41" *)
  input [31:0] rdata_i;
  wire [31:0] rdata_i;
  (* src = "rtl/obi/obi_sram_shim.sv:21.41" *)
  output req_o;
  wire req_o;
  (* src = "rtl/obi/obi_sram_shim.sv:16.41" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_sram_shim.sv:37.9" *)
  wire rvalid_d;
  (* src = "rtl/obi/obi_sram_shim.sv:37.19" *)
  reg rvalid_q;
  (* src = "rtl/obi/obi_sram_shim.sv:24.41" *)
  output [31:0] wdata_o;
  wire [31:0] wdata_o;
  (* src = "rtl/obi/obi_sram_shim.sv:22.41" *)
  output we_o;
  wire we_o;
  assign rvalid_d = obi_req_i[0] & (* src = "rtl/obi/obi_sram_shim.sv:55.21-55.50" *) gnt_i;
  (* src = "rtl/obi/obi_sram_shim.sv:58.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) id_q <= 3'h0;
    else id_q <= obi_req_i[4:2];
  (* src = "rtl/obi/obi_sram_shim.sv:58.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rvalid_q <= 1'h0;
    else rvalid_q <= rvalid_d;
  assign be_o = obi_req_i[40:37];
  assign addr_o = obi_req_i[73:42];
  assign obi_rsp_o = { rdata_i, id_q, 2'h0, gnt_i, rvalid_q };
  assign req_o = obi_req_i[0];
  assign wdata_o = obi_req_i[36:5];
  assign we_o = obi_req_i[41];
endmodule

(* src = "rtl/obi/obi_sram_shim.sv:7.8" *)
module \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram_shim (clk_i, rst_ni, obi_req_i, obi_rsp_o, req_o, we_o, addr_o, wdata_o, be_o, gnt_i, rdata_i);
  (* src = "rtl/obi/obi_sram_shim.sv:23.41" *)
  output [31:0] addr_o;
  wire [31:0] addr_o;
  (* src = "rtl/obi/obi_sram_shim.sv:25.41" *)
  output [3:0] be_o;
  wire [3:0] be_o;
  (* src = "rtl/obi/obi_sram_shim.sv:15.41" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_sram_shim.sv:27.41" *)
  input gnt_i;
  wire gnt_i;
  (* src = "rtl/obi/obi_sram_shim.sv:38.36" *)
  reg [2:0] id_q;
  (* src = "rtl/obi/obi_sram_shim.sv:18.41" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "rtl/obi/obi_sram_shim.sv:19.41" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "rtl/obi/obi_sram_shim.sv:28.41" *)
  input [31:0] rdata_i;
  wire [31:0] rdata_i;
  (* src = "rtl/obi/obi_sram_shim.sv:21.41" *)
  output req_o;
  wire req_o;
  (* src = "rtl/obi/obi_sram_shim.sv:16.41" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_sram_shim.sv:37.9" *)
  wire rvalid_d;
  (* src = "rtl/obi/obi_sram_shim.sv:37.19" *)
  reg rvalid_q;
  (* src = "rtl/obi/obi_sram_shim.sv:24.41" *)
  output [31:0] wdata_o;
  wire [31:0] wdata_o;
  (* src = "rtl/obi/obi_sram_shim.sv:22.41" *)
  output we_o;
  wire we_o;
  assign rvalid_d = obi_req_i[0] & (* src = "rtl/obi/obi_sram_shim.sv:55.21-55.50" *) gnt_i;
  (* src = "rtl/obi/obi_sram_shim.sv:58.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) id_q <= 3'h0;
    else id_q <= obi_req_i[4:2];
  (* src = "rtl/obi/obi_sram_shim.sv:58.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rvalid_q <= 1'h0;
    else rvalid_q <= rvalid_d;
  assign be_o = obi_req_i[40:37];
  assign addr_o = obi_req_i[73:42];
  assign obi_rsp_o = { rdata_i, id_q, 2'h0, gnt_i, rvalid_q };
  assign req_o = obi_req_i[0];
  assign wdata_o = obi_req_i[36:5];
  assign we_o = obi_req_i[41];
endmodule

(* src = "rtl/obi/obi_xbar.sv:8.8" *)
module \obi_xbar$croc_chip.i_croc_soc.i_croc.i_main_xbar (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_ports_req_o, mgr_ports_rsp_i, addr_map_i, en_default_idx_i, default_idx_i);
  (* src = "rtl/obi/obi_xbar.sv:50.47" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "rtl/obi/obi_xbar.sv:40.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_xbar.sv:52.75" *)
  input [11:0] default_idx_i;
  wire [11:0] default_idx_i;
  (* src = "rtl/obi/obi_xbar.sv:51.47" *)
  input [3:0] en_default_idx_i;
  wire [3:0] en_default_idx_i;
  (* src = "rtl/obi/obi_xbar.sv:47.47" *)
  output [369:0] mgr_ports_req_o;
  wire [369:0] mgr_ports_req_o;
  (* src = "rtl/obi/obi_xbar.sv:48.47" *)
  input [194:0] mgr_ports_rsp_i;
  wire [194:0] mgr_ports_rsp_i;
  (* src = "rtl/obi/obi_xbar.sv:62.57" *)
  wire [1439:0] mgr_reqs;
  (* src = "rtl/obi/obi_xbar.sv:63.57" *)
  wire [739:0] mgr_rsps;
  (* src = "rtl/obi/obi_xbar.sv:41.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_xbar.sv:55.68" *)
  wire [11:0] sbr_port_select;
  (* src = "rtl/obi/obi_xbar.sv:44.47" *)
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  (* src = "rtl/obi/obi_xbar.sv:45.47" *)
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  (* src = "rtl/obi/obi_xbar.sv:42.16" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/obi/obi_xbar.sv:71.7" *)
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode  \gen_demux[0].i_addr_decode  (
    .addr_i(sbr_ports_req_i[71:40]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[2:0]),
    .en_default_idx_i(en_default_idx_i[0]),
    .idx_o(sbr_port_select[2:0])
  );
  (* src = "rtl/obi/obi_xbar.sv:87.7" *)
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux  \gen_demux[0].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1223:1152], mgr_reqs[935:864], mgr_reqs[647:576], mgr_reqs[359:288], mgr_reqs[71:0] }),
    .mgr_ports_rsp_i({ mgr_rsps[628:592], mgr_rsps[480:444], mgr_rsps[332:296], mgr_rsps[184:148], mgr_rsps[36:0] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[71:0]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[36:0]),
    .sbr_port_select_i(sbr_port_select[2:0])
  );
  (* src = "rtl/obi/obi_xbar.sv:71.7" *)
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode  \gen_demux[1].i_addr_decode  (
    .addr_i(sbr_ports_req_i[143:112]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[5:3]),
    .en_default_idx_i(en_default_idx_i[1]),
    .idx_o(sbr_port_select[5:3])
  );
  (* src = "rtl/obi/obi_xbar.sv:87.7" *)
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux  \gen_demux[1].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1295:1224], mgr_reqs[1007:936], mgr_reqs[719:648], mgr_reqs[431:360], mgr_reqs[143:72] }),
    .mgr_ports_rsp_i({ mgr_rsps[665:629], mgr_rsps[517:481], mgr_rsps[369:333], mgr_rsps[221:185], mgr_rsps[73:37] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[143:72]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[73:37]),
    .sbr_port_select_i(sbr_port_select[5:3])
  );
  (* src = "rtl/obi/obi_xbar.sv:71.7" *)
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode  \gen_demux[2].i_addr_decode  (
    .addr_i(sbr_ports_req_i[215:184]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[8:6]),
    .en_default_idx_i(en_default_idx_i[2]),
    .idx_o(sbr_port_select[8:6])
  );
  (* src = "rtl/obi/obi_xbar.sv:87.7" *)
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux  \gen_demux[2].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1367:1296], mgr_reqs[1079:1008], mgr_reqs[791:720], mgr_reqs[503:432], mgr_reqs[215:144] }),
    .mgr_ports_rsp_i({ mgr_rsps[702:666], mgr_rsps[554:518], mgr_rsps[406:370], mgr_rsps[258:222], mgr_rsps[110:74] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[215:144]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[110:74]),
    .sbr_port_select_i(sbr_port_select[8:6])
  );
  (* src = "rtl/obi/obi_xbar.sv:71.7" *)
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode  \gen_demux[3].i_addr_decode  (
    .addr_i(sbr_ports_req_i[287:256]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[11:9]),
    .en_default_idx_i(en_default_idx_i[3]),
    .idx_o(sbr_port_select[11:9])
  );
  (* src = "rtl/obi/obi_xbar.sv:87.7" *)
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux  \gen_demux[3].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1439:1368], mgr_reqs[1151:1080], mgr_reqs[863:792], mgr_reqs[575:504], mgr_reqs[287:216] }),
    .mgr_ports_rsp_i({ mgr_rsps[739:703], mgr_rsps[591:555], mgr_rsps[443:407], mgr_rsps[295:259], mgr_rsps[147:111] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[287:216]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[147:111]),
    .sbr_port_select_i(sbr_port_select[11:9])
  );
  (* src = "rtl/obi/obi_xbar.sv:145.7" *)
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux  \gen_mux[0].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[73:0]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[38:0]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[287:0]),
    .sbr_ports_rsp_o(mgr_rsps[147:0]),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/obi/obi_xbar.sv:145.7" *)
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux  \gen_mux[1].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[147:74]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[77:39]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[575:288]),
    .sbr_ports_rsp_o(mgr_rsps[295:148]),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/obi/obi_xbar.sv:145.7" *)
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux  \gen_mux[2].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[221:148]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[116:78]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[863:576]),
    .sbr_ports_rsp_o(mgr_rsps[443:296]),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/obi/obi_xbar.sv:145.7" *)
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux  \gen_mux[3].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[295:222]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[155:117]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[1151:864]),
    .sbr_ports_rsp_o(mgr_rsps[591:444]),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/obi/obi_xbar.sv:145.7" *)
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux  \gen_mux[4].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[369:296]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[194:156]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[1439:1152]),
    .sbr_ports_rsp_o(mgr_rsps[739:592]),
    .testmode_i(testmode_i)
  );
endmodule

(* src = "rtl/register_interface/periph_to_reg.sv:13.8" *)
module \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl_translate (clk_i, rst_ni, req_i, wdata_i, be_i, add_i, wen_i, id_i, gnt_o, r_rdata_o, r_opc_o, r_id_o, r_valid_o, reg_req_o, reg_rsp_i);
  (* src = "rtl/register_interface/periph_to_reg.sv:25.28" *)
  input [31:0] add_i;
  wire [31:0] add_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:28.28" *)
  input [3:0] be_i;
  wire [3:0] be_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:21.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:30.28" *)
  output gnt_o;
  wire gnt_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:29.28" *)
  input [2:0] id_i;
  wire [2:0] id_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:33.28" *)
  output [2:0] r_id_o;
  reg [2:0] r_id_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:32.28" *)
  output r_opc_o;
  reg r_opc_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:31.28" *)
  output [31:0] r_rdata_o;
  reg [31:0] r_rdata_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:34.28" *)
  output r_valid_o;
  reg r_valid_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:36.28" *)
  output [69:0] reg_req_o;
  wire [69:0] reg_req_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:37.28" *)
  input [33:0] reg_rsp_i;
  wire [33:0] reg_rsp_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:24.28" *)
  input req_i;
  wire req_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:22.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/register_interface/periph_to_reg.sv:27.28" *)
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:26.28" *)
  input wen_i;
  wire wen_i;
  assign reg_req_o[37] = ~ (* src = "rtl/register_interface/periph_to_reg.sv:67.28-67.34" *) wen_i;
  assign gnt_o = req_i & (* src = "rtl/register_interface/periph_to_reg.sv:72.22-72.45" *) reg_rsp_i[0];
  (* src = "rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_id_o <= 3'h0;
    else r_id_o <= id_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_opc_o <= 1'h0;
    else r_opc_o <= reg_rsp_i[1];
  (* src = "rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_rdata_o <= 32'd0;
    else r_rdata_o <= reg_rsp_i[33:2];
  (* src = "rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_valid_o <= 1'h0;
    else r_valid_o <= gnt_o;
  assign { reg_req_o[69:38], reg_req_o[36:0] } = { add_i, wdata_i, be_i, req_i };
endmodule

(* src = "rtl/register_interface/periph_to_reg.sv:13.8" *)
module \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_uart_translate (clk_i, rst_ni, req_i, wdata_i, be_i, add_i, wen_i, id_i, gnt_o, r_rdata_o, r_opc_o, r_id_o, r_valid_o, reg_req_o, reg_rsp_i);
  (* src = "rtl/register_interface/periph_to_reg.sv:25.28" *)
  input [31:0] add_i;
  wire [31:0] add_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:28.28" *)
  input [3:0] be_i;
  wire [3:0] be_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:21.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:30.28" *)
  output gnt_o;
  wire gnt_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:29.28" *)
  input [2:0] id_i;
  wire [2:0] id_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:33.28" *)
  output [2:0] r_id_o;
  reg [2:0] r_id_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:32.28" *)
  output r_opc_o;
  reg r_opc_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:31.28" *)
  output [31:0] r_rdata_o;
  reg [31:0] r_rdata_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:34.28" *)
  output r_valid_o;
  reg r_valid_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:36.28" *)
  output [69:0] reg_req_o;
  wire [69:0] reg_req_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:37.28" *)
  input [33:0] reg_rsp_i;
  wire [33:0] reg_rsp_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:24.28" *)
  input req_i;
  wire req_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:22.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/register_interface/periph_to_reg.sv:27.28" *)
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:26.28" *)
  input wen_i;
  wire wen_i;
  assign reg_req_o[37] = ~ (* src = "rtl/register_interface/periph_to_reg.sv:67.28-67.34" *) wen_i;
  assign gnt_o = req_i & (* src = "rtl/register_interface/periph_to_reg.sv:72.22-72.45" *) reg_rsp_i[0];
  (* src = "rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_id_o <= 3'h0;
    else r_id_o <= id_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_opc_o <= 1'h0;
    else r_opc_o <= reg_rsp_i[1];
  (* src = "rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_rdata_o <= 32'd0;
    else r_rdata_o <= reg_rsp_i[33:2];
  (* src = "rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_valid_o <= 1'h0;
    else r_valid_o <= gnt_o;
  assign { reg_req_o[69:38], reg_req_o[36:0] } = { add_i, wdata_i, be_i, req_i };
endmodule

(* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" *)
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" *)
  input [31:0] d;
  wire [31:0] d;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" *)
  input de;
  wire de;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" *)
  output [31:0] q;
  reg [31:0] q;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" *)
  output qe;
  reg qe;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" *)
  output [31:0] qs;
  wire [31:0] qs;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" *)
  input [31:0] wd;
  wire [31:0] wd;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" *)
  input we;
  wire we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" *)
  wire [31:0] wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" *)
  wire wr_en;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) q <= 32'd268435456;
    else if (wr_en) q <= wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) qe <= 1'h0;
    else qe <= we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" *)
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

(* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" *)
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" *)
  input d;
  wire d;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" *)
  input de;
  wire de;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" *)
  output q;
  reg q;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" *)
  output qe;
  reg qe;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" *)
  output qs;
  wire qs;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" *)
  input wd;
  wire wd;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" *)
  input we;
  wire we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" *)
  wire wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" *)
  wire wr_en;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) q <= 1'h0;
    else if (wr_en) q <= wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) qe <= 1'h0;
    else qe <= we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" *)
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

(* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" *)
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" *)
  input [31:0] d;
  wire [31:0] d;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" *)
  input de;
  wire de;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" *)
  output [31:0] q;
  reg [31:0] q;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" *)
  output qe;
  reg qe;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" *)
  output [31:0] qs;
  wire [31:0] qs;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" *)
  input [31:0] wd;
  wire [31:0] wd;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" *)
  input we;
  wire we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" *)
  wire [31:0] wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" *)
  wire wr_en;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) q <= 32'd0;
    else if (wr_en) q <= wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) qe <= 1'h0;
    else qe <= we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" *)
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

(* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" *)
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" *)
  input d;
  wire d;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" *)
  input de;
  wire de;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" *)
  output q;
  reg q;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" *)
  output qe;
  reg qe;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" *)
  output qs;
  wire qs;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" *)
  input wd;
  wire wd;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" *)
  input we;
  wire we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" *)
  wire wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" *)
  wire wr_en;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) q <= 1'h0;
    else if (wr_en) q <= wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) qe <= 1'h0;
    else qe <= we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" *)
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

(* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" *)
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" *)
  input d;
  wire d;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" *)
  input de;
  wire de;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" *)
  output q;
  reg q;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" *)
  output qe;
  reg qe;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" *)
  output qs;
  wire qs;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" *)
  input wd;
  wire wd;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" *)
  input we;
  wire we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" *)
  wire wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" *)
  wire wr_en;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) q <= 1'h1;
    else if (wr_en) q <= wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) qe <= 1'h0;
    else qe <= we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" *)
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

(* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" *)
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" *)
  input [31:0] d;
  wire [31:0] d;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" *)
  input de;
  wire de;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" *)
  input [31:0] q;
  wire [31:0] q;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" *)
  input [31:0] wd;
  wire [31:0] wd;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" *)
  input we;
  wire we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" *)
  output [31:0] wr_data;
  wire [31:0] wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" *)
  output wr_en;
  wire wr_en;
  assign wr_en = we | (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:29.22-29.29" *) de;
  assign wr_data = we ? (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:30.22-30.43" *) wd : d;
endmodule

(* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" *)
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" *)
  input d;
  wire d;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" *)
  input de;
  wire de;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" *)
  input q;
  wire q;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" *)
  input wd;
  wire wd;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" *)
  input we;
  wire we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" *)
  output wr_data;
  wire wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" *)
  output wr_en;
  wire wr_en;
  assign wr_en = we | (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:29.22-29.29" *) de;
  assign wr_data = we ? (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:30.22-30.43" *) wd : d;
endmodule

(* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" *)
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" *)
  input [31:0] d;
  wire [31:0] d;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" *)
  input de;
  wire de;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" *)
  input [31:0] q;
  wire [31:0] q;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" *)
  input [31:0] wd;
  wire [31:0] wd;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" *)
  input we;
  wire we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" *)
  output [31:0] wr_data;
  wire [31:0] wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" *)
  output wr_en;
  wire wr_en;
  assign wr_en = we | (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:29.22-29.29" *) de;
  assign wr_data = we ? (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:30.22-30.43" *) wd : d;
endmodule

(* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" *)
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" *)
  input d;
  wire d;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" *)
  input de;
  wire de;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" *)
  input q;
  wire q;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" *)
  input wd;
  wire wd;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" *)
  input we;
  wire we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" *)
  output wr_data;
  wire wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" *)
  output wr_en;
  wire wr_en;
  assign wr_en = we | (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:29.22-29.29" *) de;
  assign wr_data = we ? (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:30.22-30.43" *) wd : d;
endmodule

(* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" *)
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" *)
  input d;
  wire d;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" *)
  input de;
  wire de;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" *)
  input q;
  wire q;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" *)
  input wd;
  wire wd;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" *)
  input we;
  wire we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" *)
  output wr_data;
  wire wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" *)
  output wr_en;
  wire wr_en;
  assign wr_en = we | (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:29.22-29.29" *) de;
  assign wr_data = we ? (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:30.22-30.43" *) wd : d;
endmodule

(* src = "rtl/register_interface/reg_to_apb.sv:7.8" *)
module \reg_to_apb$croc_chip.i_croc_soc.i_croc.i_uart.i_reg_uart_reg_to_apb (clk_i, rst_ni, reg_req_i, reg_rsp_o, apb_req_o, apb_rsp_i);
  wire \$procmux$11449_Y ;
  (* src = "rtl/register_interface/reg_to_apb.sv:26.20" *)
  output [73:0] apb_req_o;
  wire [73:0] apb_req_o;
  (* src = "rtl/register_interface/reg_to_apb.sv:27.20" *)
  input [33:0] apb_rsp_i;
  wire [33:0] apb_rsp_i;
  (* src = "rtl/register_interface/reg_to_apb.sv:18.20" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/register_interface/reg_to_apb.sv:22.20" *)
  input [69:0] reg_req_i;
  wire [69:0] reg_req_i;
  (* src = "rtl/register_interface/reg_to_apb.sv:23.20" *)
  output [33:0] reg_rsp_o;
  wire [33:0] reg_rsp_o;
  (* src = "rtl/register_interface/reg_to_apb.sv:19.20" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/register_interface/reg_to_apb.sv:32.11" *)
  wire state_d;
  (* src = "rtl/register_interface/reg_to_apb.sv:32.20" *)
  reg state_q;
  (* src = "rtl/register_interface/reg_to_apb.sv:66.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 1'h0;
    else state_q <= state_d;
  assign \$procmux$11449_Y  = ~ (* src = "rtl/register_interface/reg_to_apb.sv:59.31-59.47|rtl/register_interface/reg_to_apb.sv:59.9-59.47" *) apb_rsp_i[33];
  assign state_d = state_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/register_interface/reg_to_apb.sv:56.15-60.10|rtl/register_interface/reg_to_apb.sv:52.5-63.12" *) \$procmux$11449_Y  : reg_req_i[0];
  assign reg_rsp_o[0] = state_q & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/register_interface/reg_to_apb.sv:56.15-60.10|rtl/register_interface/reg_to_apb.sv:52.5-63.12" *) apb_rsp_i[33];
  assign apb_req_o = { reg_req_i[69:38], 3'h2, reg_req_i[0], state_q, reg_req_i[37:1] };
  assign reg_rsp_o[33:1] = apb_rsp_i[32:0];
endmodule

(* src = "rtl/apb_uart/reg_uart_wrap.sv:31.8" *)
module \reg_uart_wrap$croc_chip.i_croc_soc.i_croc.i_uart (clk_i, rst_ni, reg_req_i, reg_rsp_o, intr_o, cts_ni, dsr_ni, dcd_ni, rin_ni, sin_i, sout_o, out1_no, out2_no, rts_no, dtr_no);
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:36.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:49.16" *)
  input cts_ni;
  wire cts_ni;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:51.16" *)
  input dcd_ni;
  wire dcd_ni;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:50.16" *)
  input dsr_ni;
  wire dsr_ni;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:48.16" *)
  output dtr_no;
  wire dtr_no;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:44.16" *)
  output intr_o;
  wire intr_o;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:45.16" *)
  output out1_no;
  wire out1_no;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:46.16" *)
  output out2_no;
  wire out2_no;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:40.20" *)
  input [69:0] reg_req_i;
  wire [69:0] reg_req_i;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:41.20" *)
  output [33:0] reg_rsp_o;
  wire [33:0] reg_rsp_o;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:52.16" *)
  input rin_ni;
  wire rin_ni;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:37.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:47.16" *)
  output rts_no;
  wire rts_no;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:53.16" *)
  input sin_i;
  wire sin_i;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:54.16" *)
  output sout_o;
  wire sout_o;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:59.22" *)
  (* unused_bits = "0 1 2 3 39 40 41 42 43 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73" *)
  wire [73:0] uart_apb_req;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:60.22" *)
  wire [33:0] uart_apb_rsp;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:76.12" *)
  \apb_uart$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart  i_apb_uart (
    .CLK(clk_i),
    .CTSN(cts_ni),
    .DCDN(dcd_ni),
    .DSRN(dsr_ni),
    .DTRN(dtr_no),
    .INT(intr_o),
    .OUT1N(out1_no),
    .OUT2N(out2_no),
    .PADDR(uart_apb_req[46:44]),
    .PENABLE(uart_apb_req[37]),
    .PRDATA(uart_apb_rsp[32:1]),
    .PREADY(uart_apb_rsp[33]),
    .PSEL(uart_apb_req[38]),
    .PSLVERR(uart_apb_rsp[0]),
    .PWDATA(uart_apb_req[35:4]),
    .PWRITE(uart_apb_req[36]),
    .RIN(rin_ni),
    .RSTN(rst_ni),
    .RTSN(rts_no),
    .SIN(sin_i),
    .SOUT(sout_o)
  );
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:67.5" *)
  \reg_to_apb$croc_chip.i_croc_soc.i_croc.i_uart.i_reg_uart_reg_to_apb  i_reg_uart_reg_to_apb (
    .apb_req_o(uart_apb_req),
    .apb_rsp_i(uart_apb_rsp),
    .clk_i(clk_i),
    .reg_req_i(reg_req_i),
    .reg_rsp_o(reg_rsp_o),
    .rst_ni(rst_ni)
  );
endmodule

(* src = "rtl/common_cells/rr_arb_tree.sv:49.8" *)
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$0y ;
  wire \$11y ;
  wire \$13y ;
  wire \$19y ;
  wire \$21y ;
  wire \$24y ;
  wire \$31y ;
  wire \$32y ;
  wire \$36y ;
  wire \$40y ;
  wire \$41y ;
  wire \$46y ;
  wire \$52y ;
  wire \$53y ;
  wire \$58y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14701 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *)
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *)
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$10 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *)
  wire [1:0] \$gen_arbiter.rr_q$29 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:89.31" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:103.31" *)
  input [283:0] data_i;
  wire [283:0] data_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:109.31" *)
  output [70:0] data_o;
  wire [70:0] data_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:93.31" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:126.33" *)
  wire [212:0] \gen_arbiter.data_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.40" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:191.40" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.53" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:193.27" *)
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.27" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:191.27" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:146.16" *)
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:146.24" *)
  reg \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:147.27" *)
  reg [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:127.33" *)
  wire [2:0] \gen_arbiter.gnt_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:131.33" *)
  wire [3:0] \gen_arbiter.req_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:128.33" *)
  wire [2:0] \gen_arbiter.req_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:130.33" *)
  reg [1:0] \gen_arbiter.rr_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:107.31" *)
  input gnt_i;
  wire gnt_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:100.31" *)
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:111.31" *)
  output [1:0] idx_o;
  wire [1:0] idx_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:97.31" *)
  input [3:0] req_i;
  wire [3:0] req_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:105.31" *)
  output req_o;
  wire req_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:95.31" *)
  input [1:0] rr_i;
  wire [1:0] rr_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:91.31" *)
  input rst_ni;
  wire rst_ni;
  assign \$0y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:149.37-149.43" *) gnt_i;
  assign \gen_arbiter.gen_int_rr.gen_lock.lock_d  = req_o & (* src = "rtl/common_cells/rr_arb_tree.sv:149.29-149.43" *) \$0y ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = \$11y  & (* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" *) \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = \$13y  & (* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" *) \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = \gen_arbiter.rr_q [1] ? (* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" *) 1'h0 : \gen_arbiter.req_d [2];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = \gen_arbiter.rr_q [1] & (* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" *) \gen_arbiter.req_d [2];
  assign \$19y  = 2'h3 > (* src = "rtl/common_cells/rr_arb_tree.sv:196.35-196.44" *) \gen_arbiter.rr_q ;
  assign \gen_arbiter.req_d  = \gen_arbiter.gen_int_rr.gen_lock.lock_q  ? (* src = "rtl/common_cells/rr_arb_tree.sv:150.29-150.53" *) \gen_arbiter.gen_int_rr.gen_lock.req_q  : req_i;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = \$19y  & (* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" *) \gen_arbiter.req_d [3];
  assign \$21y  = 2'h3 <= (* src = "rtl/common_cells/rr_arb_tree.sv:197.35-197.44" *) \gen_arbiter.rr_q ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = \$21y  & (* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" *) \gen_arbiter.req_d [3];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? (* src = "rtl/common_cells/rr_arb_tree.sv:218.27-218.67" *) \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign \$24y  = gnt_i && (* src = "rtl/common_cells/rr_arb_tree.sv:219.28-219.42" *) req_o;
  assign req_o = \gen_arbiter.req_nodes [1] | (* src = "rtl/common_cells/rr_arb_tree.sv:280.38-280.73" *) \gen_arbiter.req_nodes [2];
  assign \$31y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:283.25-283.41" *) \gen_arbiter.req_nodes [1];
  assign \$32y  = \gen_arbiter.req_nodes [2] & (* src = "rtl/common_cells/rr_arb_tree.sv:283.44-283.87" *) \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = \$31y  | (* src = "rtl/common_cells/rr_arb_tree.sv:283.25-283.87" *) \$32y ;
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? (* src = "rtl/common_cells/rr_arb_tree.sv:285.38-287.78" *) { 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  } : { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? (* src = "rtl/common_cells/rr_arb_tree.sv:289.38-289.83" *) \gen_arbiter.data_nodes [212:142] : \gen_arbiter.data_nodes [141:71];
  assign \$36y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:290.56-290.60" *) \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & (* src = "rtl/common_cells/rr_arb_tree.sv:290.38-290.60" *) \$36y ;
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & (* src = "rtl/common_cells/rr_arb_tree.sv:291.38-291.59" *) \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [1] = \gen_arbiter.req_d [0] | (* src = "rtl/common_cells/rr_arb_tree.sv:254.40-254.65" *) \gen_arbiter.req_d [1];
  assign \$40y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.38" *) \gen_arbiter.req_d [0];
  assign \$41y  = \gen_arbiter.req_d [1] & (* src = "rtl/common_cells/rr_arb_tree.sv:257.41-257.79" *) \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = \$40y  | (* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.79" *) \$41y ;
  assign \gen_arbiter.data_nodes [141:71] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? (* src = "rtl/common_cells/rr_arb_tree.sv:260.40-260.75" *) data_i[141:71] : data_i[70:0];
  assign \$46y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:261.87-261.91" *) \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [1] & (* src = "rtl/common_cells/rr_arb_tree.sv:261.40-261.91" *) \$46y ;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [1] & (* src = "rtl/common_cells/rr_arb_tree.sv:262.40-262.90" *) \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [2] = \gen_arbiter.req_d [2] | (* src = "rtl/common_cells/rr_arb_tree.sv:254.40-254.65" *) \gen_arbiter.req_d [3];
  assign \$52y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.38" *) \gen_arbiter.req_d [2];
  assign \$53y  = \gen_arbiter.req_d [3] & (* src = "rtl/common_cells/rr_arb_tree.sv:257.41-257.79" *) \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = \$52y  | (* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.79" *) \$53y ;
  assign \gen_arbiter.data_nodes [212:142] = \gen_arbiter.gen_levels[1].gen_level[1].sel  ? (* src = "rtl/common_cells/rr_arb_tree.sv:260.40-260.75" *) data_i[283:213] : data_i[212:142];
  assign \$58y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:261.87-261.91" *) \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [2] & (* src = "rtl/common_cells/rr_arb_tree.sv:261.40-261.91" *) \$58y ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [2] & (* src = "rtl/common_cells/rr_arb_tree.sv:262.40-262.90" *) \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:226.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14701 ) \gen_arbiter.rr_q  <= \$gen_arbiter.rr_q$29 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14701  = | { flush_i, \$24y  };
  assign \$11y  = ! \gen_arbiter.rr_q ;
  assign \$13y  = | \gen_arbiter.rr_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:152.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= 1'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= \$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:175.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.req_q  <= 4'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.req_q  <= \$gen_arbiter.gen_int_rr.gen_lock.req_q$10 ;
  assign \$gen_arbiter.rr_q$29  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *) 2'h0 : \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \$gen_arbiter.gen_int_rr.gen_lock.req_q$10  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *) 4'h0 : \gen_arbiter.req_d ;
  assign \$gen_arbiter.gen_int_rr.gen_lock.lock_q$6  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *) 1'h0 : \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:212.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  (* src = "rtl/common_cells/rr_arb_tree.sv:203.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

(* src = "rtl/common_cells/rr_arb_tree.sv:49.8" *)
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$0y ;
  wire \$11y ;
  wire \$13y ;
  wire \$19y ;
  wire \$21y ;
  wire \$24y ;
  wire \$31y ;
  wire \$32y ;
  wire \$36y ;
  wire \$40y ;
  wire \$41y ;
  wire \$46y ;
  wire \$52y ;
  wire \$53y ;
  wire \$58y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14704 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *)
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *)
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$10 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *)
  wire [1:0] \$gen_arbiter.rr_q$29 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:89.31" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:103.31" *)
  input [283:0] data_i;
  wire [283:0] data_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:109.31" *)
  output [70:0] data_o;
  wire [70:0] data_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:93.31" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:126.33" *)
  wire [212:0] \gen_arbiter.data_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.40" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:191.40" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.53" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:193.27" *)
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.27" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:191.27" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:146.16" *)
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:146.24" *)
  reg \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:147.27" *)
  reg [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:127.33" *)
  wire [2:0] \gen_arbiter.gnt_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:131.33" *)
  wire [3:0] \gen_arbiter.req_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:128.33" *)
  wire [2:0] \gen_arbiter.req_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:130.33" *)
  reg [1:0] \gen_arbiter.rr_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:107.31" *)
  input gnt_i;
  wire gnt_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:100.31" *)
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:111.31" *)
  output [1:0] idx_o;
  wire [1:0] idx_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:97.31" *)
  input [3:0] req_i;
  wire [3:0] req_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:105.31" *)
  output req_o;
  wire req_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:95.31" *)
  input [1:0] rr_i;
  wire [1:0] rr_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:91.31" *)
  input rst_ni;
  wire rst_ni;
  assign \$0y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:149.37-149.43" *) gnt_i;
  assign \gen_arbiter.gen_int_rr.gen_lock.lock_d  = req_o & (* src = "rtl/common_cells/rr_arb_tree.sv:149.29-149.43" *) \$0y ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = \$11y  & (* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" *) \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = \$13y  & (* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" *) \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = \gen_arbiter.rr_q [1] ? (* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" *) 1'h0 : \gen_arbiter.req_d [2];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = \gen_arbiter.rr_q [1] & (* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" *) \gen_arbiter.req_d [2];
  assign \$19y  = 2'h3 > (* src = "rtl/common_cells/rr_arb_tree.sv:196.35-196.44" *) \gen_arbiter.rr_q ;
  assign \gen_arbiter.req_d  = \gen_arbiter.gen_int_rr.gen_lock.lock_q  ? (* src = "rtl/common_cells/rr_arb_tree.sv:150.29-150.53" *) \gen_arbiter.gen_int_rr.gen_lock.req_q  : req_i;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = \$19y  & (* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" *) \gen_arbiter.req_d [3];
  assign \$21y  = 2'h3 <= (* src = "rtl/common_cells/rr_arb_tree.sv:197.35-197.44" *) \gen_arbiter.rr_q ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = \$21y  & (* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" *) \gen_arbiter.req_d [3];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? (* src = "rtl/common_cells/rr_arb_tree.sv:218.27-218.67" *) \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign \$24y  = gnt_i && (* src = "rtl/common_cells/rr_arb_tree.sv:219.28-219.42" *) req_o;
  assign req_o = \gen_arbiter.req_nodes [1] | (* src = "rtl/common_cells/rr_arb_tree.sv:280.38-280.73" *) \gen_arbiter.req_nodes [2];
  assign \$31y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:283.25-283.41" *) \gen_arbiter.req_nodes [1];
  assign \$32y  = \gen_arbiter.req_nodes [2] & (* src = "rtl/common_cells/rr_arb_tree.sv:283.44-283.87" *) \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = \$31y  | (* src = "rtl/common_cells/rr_arb_tree.sv:283.25-283.87" *) \$32y ;
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? (* src = "rtl/common_cells/rr_arb_tree.sv:285.38-287.78" *) { 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  } : { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? (* src = "rtl/common_cells/rr_arb_tree.sv:289.38-289.83" *) \gen_arbiter.data_nodes [212:142] : \gen_arbiter.data_nodes [141:71];
  assign \$36y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:290.56-290.60" *) \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & (* src = "rtl/common_cells/rr_arb_tree.sv:290.38-290.60" *) \$36y ;
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & (* src = "rtl/common_cells/rr_arb_tree.sv:291.38-291.59" *) \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [1] = \gen_arbiter.req_d [0] | (* src = "rtl/common_cells/rr_arb_tree.sv:254.40-254.65" *) \gen_arbiter.req_d [1];
  assign \$40y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.38" *) \gen_arbiter.req_d [0];
  assign \$41y  = \gen_arbiter.req_d [1] & (* src = "rtl/common_cells/rr_arb_tree.sv:257.41-257.79" *) \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = \$40y  | (* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.79" *) \$41y ;
  assign \gen_arbiter.data_nodes [141:71] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? (* src = "rtl/common_cells/rr_arb_tree.sv:260.40-260.75" *) data_i[141:71] : data_i[70:0];
  assign \$46y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:261.87-261.91" *) \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [1] & (* src = "rtl/common_cells/rr_arb_tree.sv:261.40-261.91" *) \$46y ;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [1] & (* src = "rtl/common_cells/rr_arb_tree.sv:262.40-262.90" *) \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [2] = \gen_arbiter.req_d [2] | (* src = "rtl/common_cells/rr_arb_tree.sv:254.40-254.65" *) \gen_arbiter.req_d [3];
  assign \$52y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.38" *) \gen_arbiter.req_d [2];
  assign \$53y  = \gen_arbiter.req_d [3] & (* src = "rtl/common_cells/rr_arb_tree.sv:257.41-257.79" *) \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = \$52y  | (* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.79" *) \$53y ;
  assign \gen_arbiter.data_nodes [212:142] = \gen_arbiter.gen_levels[1].gen_level[1].sel  ? (* src = "rtl/common_cells/rr_arb_tree.sv:260.40-260.75" *) data_i[283:213] : data_i[212:142];
  assign \$58y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:261.87-261.91" *) \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [2] & (* src = "rtl/common_cells/rr_arb_tree.sv:261.40-261.91" *) \$58y ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [2] & (* src = "rtl/common_cells/rr_arb_tree.sv:262.40-262.90" *) \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:226.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14704 ) \gen_arbiter.rr_q  <= \$gen_arbiter.rr_q$29 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14704  = | { flush_i, \$24y  };
  assign \$11y  = ! \gen_arbiter.rr_q ;
  assign \$13y  = | \gen_arbiter.rr_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:152.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= 1'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= \$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:175.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.req_q  <= 4'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.req_q  <= \$gen_arbiter.gen_int_rr.gen_lock.req_q$10 ;
  assign \$gen_arbiter.rr_q$29  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *) 2'h0 : \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \$gen_arbiter.gen_int_rr.gen_lock.req_q$10  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *) 4'h0 : \gen_arbiter.req_d ;
  assign \$gen_arbiter.gen_int_rr.gen_lock.lock_q$6  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *) 1'h0 : \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:212.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  (* src = "rtl/common_cells/rr_arb_tree.sv:203.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

(* src = "rtl/common_cells/rr_arb_tree.sv:49.8" *)
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$0y ;
  wire \$11y ;
  wire \$13y ;
  wire \$19y ;
  wire \$21y ;
  wire \$24y ;
  wire \$31y ;
  wire \$32y ;
  wire \$36y ;
  wire \$40y ;
  wire \$41y ;
  wire \$46y ;
  wire \$52y ;
  wire \$53y ;
  wire \$58y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14707 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *)
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *)
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$10 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *)
  wire [1:0] \$gen_arbiter.rr_q$29 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:89.31" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:103.31" *)
  input [283:0] data_i;
  wire [283:0] data_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:109.31" *)
  output [70:0] data_o;
  wire [70:0] data_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:93.31" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:126.33" *)
  wire [212:0] \gen_arbiter.data_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.40" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:191.40" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.53" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:193.27" *)
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.27" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:191.27" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:146.16" *)
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:146.24" *)
  reg \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:147.27" *)
  reg [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:127.33" *)
  wire [2:0] \gen_arbiter.gnt_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:131.33" *)
  wire [3:0] \gen_arbiter.req_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:128.33" *)
  wire [2:0] \gen_arbiter.req_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:130.33" *)
  reg [1:0] \gen_arbiter.rr_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:107.31" *)
  input gnt_i;
  wire gnt_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:100.31" *)
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:111.31" *)
  output [1:0] idx_o;
  wire [1:0] idx_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:97.31" *)
  input [3:0] req_i;
  wire [3:0] req_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:105.31" *)
  output req_o;
  wire req_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:95.31" *)
  input [1:0] rr_i;
  wire [1:0] rr_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:91.31" *)
  input rst_ni;
  wire rst_ni;
  assign \$0y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:149.37-149.43" *) gnt_i;
  assign \gen_arbiter.gen_int_rr.gen_lock.lock_d  = req_o & (* src = "rtl/common_cells/rr_arb_tree.sv:149.29-149.43" *) \$0y ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = \$11y  & (* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" *) \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = \$13y  & (* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" *) \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = \gen_arbiter.rr_q [1] ? (* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" *) 1'h0 : \gen_arbiter.req_d [2];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = \gen_arbiter.rr_q [1] & (* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" *) \gen_arbiter.req_d [2];
  assign \$19y  = 2'h3 > (* src = "rtl/common_cells/rr_arb_tree.sv:196.35-196.44" *) \gen_arbiter.rr_q ;
  assign \gen_arbiter.req_d  = \gen_arbiter.gen_int_rr.gen_lock.lock_q  ? (* src = "rtl/common_cells/rr_arb_tree.sv:150.29-150.53" *) \gen_arbiter.gen_int_rr.gen_lock.req_q  : req_i;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = \$19y  & (* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" *) \gen_arbiter.req_d [3];
  assign \$21y  = 2'h3 <= (* src = "rtl/common_cells/rr_arb_tree.sv:197.35-197.44" *) \gen_arbiter.rr_q ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = \$21y  & (* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" *) \gen_arbiter.req_d [3];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? (* src = "rtl/common_cells/rr_arb_tree.sv:218.27-218.67" *) \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign \$24y  = gnt_i && (* src = "rtl/common_cells/rr_arb_tree.sv:219.28-219.42" *) req_o;
  assign req_o = \gen_arbiter.req_nodes [1] | (* src = "rtl/common_cells/rr_arb_tree.sv:280.38-280.73" *) \gen_arbiter.req_nodes [2];
  assign \$31y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:283.25-283.41" *) \gen_arbiter.req_nodes [1];
  assign \$32y  = \gen_arbiter.req_nodes [2] & (* src = "rtl/common_cells/rr_arb_tree.sv:283.44-283.87" *) \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = \$31y  | (* src = "rtl/common_cells/rr_arb_tree.sv:283.25-283.87" *) \$32y ;
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? (* src = "rtl/common_cells/rr_arb_tree.sv:285.38-287.78" *) { 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  } : { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? (* src = "rtl/common_cells/rr_arb_tree.sv:289.38-289.83" *) \gen_arbiter.data_nodes [212:142] : \gen_arbiter.data_nodes [141:71];
  assign \$36y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:290.56-290.60" *) \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & (* src = "rtl/common_cells/rr_arb_tree.sv:290.38-290.60" *) \$36y ;
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & (* src = "rtl/common_cells/rr_arb_tree.sv:291.38-291.59" *) \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [1] = \gen_arbiter.req_d [0] | (* src = "rtl/common_cells/rr_arb_tree.sv:254.40-254.65" *) \gen_arbiter.req_d [1];
  assign \$40y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.38" *) \gen_arbiter.req_d [0];
  assign \$41y  = \gen_arbiter.req_d [1] & (* src = "rtl/common_cells/rr_arb_tree.sv:257.41-257.79" *) \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = \$40y  | (* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.79" *) \$41y ;
  assign \gen_arbiter.data_nodes [141:71] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? (* src = "rtl/common_cells/rr_arb_tree.sv:260.40-260.75" *) data_i[141:71] : data_i[70:0];
  assign \$46y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:261.87-261.91" *) \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [1] & (* src = "rtl/common_cells/rr_arb_tree.sv:261.40-261.91" *) \$46y ;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [1] & (* src = "rtl/common_cells/rr_arb_tree.sv:262.40-262.90" *) \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [2] = \gen_arbiter.req_d [2] | (* src = "rtl/common_cells/rr_arb_tree.sv:254.40-254.65" *) \gen_arbiter.req_d [3];
  assign \$52y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.38" *) \gen_arbiter.req_d [2];
  assign \$53y  = \gen_arbiter.req_d [3] & (* src = "rtl/common_cells/rr_arb_tree.sv:257.41-257.79" *) \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = \$52y  | (* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.79" *) \$53y ;
  assign \gen_arbiter.data_nodes [212:142] = \gen_arbiter.gen_levels[1].gen_level[1].sel  ? (* src = "rtl/common_cells/rr_arb_tree.sv:260.40-260.75" *) data_i[283:213] : data_i[212:142];
  assign \$58y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:261.87-261.91" *) \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [2] & (* src = "rtl/common_cells/rr_arb_tree.sv:261.40-261.91" *) \$58y ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [2] & (* src = "rtl/common_cells/rr_arb_tree.sv:262.40-262.90" *) \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:226.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14707 ) \gen_arbiter.rr_q  <= \$gen_arbiter.rr_q$29 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14707  = | { flush_i, \$24y  };
  assign \$11y  = ! \gen_arbiter.rr_q ;
  assign \$13y  = | \gen_arbiter.rr_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:152.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= 1'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= \$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:175.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.req_q  <= 4'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.req_q  <= \$gen_arbiter.gen_int_rr.gen_lock.req_q$10 ;
  assign \$gen_arbiter.rr_q$29  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *) 2'h0 : \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \$gen_arbiter.gen_int_rr.gen_lock.req_q$10  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *) 4'h0 : \gen_arbiter.req_d ;
  assign \$gen_arbiter.gen_int_rr.gen_lock.lock_q$6  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *) 1'h0 : \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:212.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  (* src = "rtl/common_cells/rr_arb_tree.sv:203.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

(* src = "rtl/common_cells/rr_arb_tree.sv:49.8" *)
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$0y ;
  wire \$11y ;
  wire \$13y ;
  wire \$19y ;
  wire \$21y ;
  wire \$24y ;
  wire \$31y ;
  wire \$32y ;
  wire \$36y ;
  wire \$40y ;
  wire \$41y ;
  wire \$46y ;
  wire \$52y ;
  wire \$53y ;
  wire \$58y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14710 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *)
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *)
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$10 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *)
  wire [1:0] \$gen_arbiter.rr_q$29 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:89.31" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:103.31" *)
  input [283:0] data_i;
  wire [283:0] data_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:109.31" *)
  output [70:0] data_o;
  wire [70:0] data_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:93.31" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:126.33" *)
  wire [212:0] \gen_arbiter.data_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.40" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:191.40" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.53" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:193.27" *)
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.27" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:191.27" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:146.16" *)
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:146.24" *)
  reg \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:147.27" *)
  reg [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:127.33" *)
  wire [2:0] \gen_arbiter.gnt_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:131.33" *)
  wire [3:0] \gen_arbiter.req_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:128.33" *)
  wire [2:0] \gen_arbiter.req_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:130.33" *)
  reg [1:0] \gen_arbiter.rr_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:107.31" *)
  input gnt_i;
  wire gnt_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:100.31" *)
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:111.31" *)
  output [1:0] idx_o;
  wire [1:0] idx_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:97.31" *)
  input [3:0] req_i;
  wire [3:0] req_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:105.31" *)
  output req_o;
  wire req_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:95.31" *)
  input [1:0] rr_i;
  wire [1:0] rr_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:91.31" *)
  input rst_ni;
  wire rst_ni;
  assign \$0y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:149.37-149.43" *) gnt_i;
  assign \gen_arbiter.gen_int_rr.gen_lock.lock_d  = req_o & (* src = "rtl/common_cells/rr_arb_tree.sv:149.29-149.43" *) \$0y ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = \$11y  & (* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" *) \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = \$13y  & (* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" *) \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = \gen_arbiter.rr_q [1] ? (* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" *) 1'h0 : \gen_arbiter.req_d [2];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = \gen_arbiter.rr_q [1] & (* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" *) \gen_arbiter.req_d [2];
  assign \$19y  = 2'h3 > (* src = "rtl/common_cells/rr_arb_tree.sv:196.35-196.44" *) \gen_arbiter.rr_q ;
  assign \gen_arbiter.req_d  = \gen_arbiter.gen_int_rr.gen_lock.lock_q  ? (* src = "rtl/common_cells/rr_arb_tree.sv:150.29-150.53" *) \gen_arbiter.gen_int_rr.gen_lock.req_q  : req_i;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = \$19y  & (* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" *) \gen_arbiter.req_d [3];
  assign \$21y  = 2'h3 <= (* src = "rtl/common_cells/rr_arb_tree.sv:197.35-197.44" *) \gen_arbiter.rr_q ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = \$21y  & (* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" *) \gen_arbiter.req_d [3];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? (* src = "rtl/common_cells/rr_arb_tree.sv:218.27-218.67" *) \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign \$24y  = gnt_i && (* src = "rtl/common_cells/rr_arb_tree.sv:219.28-219.42" *) req_o;
  assign req_o = \gen_arbiter.req_nodes [1] | (* src = "rtl/common_cells/rr_arb_tree.sv:280.38-280.73" *) \gen_arbiter.req_nodes [2];
  assign \$31y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:283.25-283.41" *) \gen_arbiter.req_nodes [1];
  assign \$32y  = \gen_arbiter.req_nodes [2] & (* src = "rtl/common_cells/rr_arb_tree.sv:283.44-283.87" *) \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = \$31y  | (* src = "rtl/common_cells/rr_arb_tree.sv:283.25-283.87" *) \$32y ;
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? (* src = "rtl/common_cells/rr_arb_tree.sv:285.38-287.78" *) { 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  } : { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? (* src = "rtl/common_cells/rr_arb_tree.sv:289.38-289.83" *) \gen_arbiter.data_nodes [212:142] : \gen_arbiter.data_nodes [141:71];
  assign \$36y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:290.56-290.60" *) \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & (* src = "rtl/common_cells/rr_arb_tree.sv:290.38-290.60" *) \$36y ;
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & (* src = "rtl/common_cells/rr_arb_tree.sv:291.38-291.59" *) \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [1] = \gen_arbiter.req_d [0] | (* src = "rtl/common_cells/rr_arb_tree.sv:254.40-254.65" *) \gen_arbiter.req_d [1];
  assign \$40y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.38" *) \gen_arbiter.req_d [0];
  assign \$41y  = \gen_arbiter.req_d [1] & (* src = "rtl/common_cells/rr_arb_tree.sv:257.41-257.79" *) \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = \$40y  | (* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.79" *) \$41y ;
  assign \gen_arbiter.data_nodes [141:71] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? (* src = "rtl/common_cells/rr_arb_tree.sv:260.40-260.75" *) data_i[141:71] : data_i[70:0];
  assign \$46y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:261.87-261.91" *) \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [1] & (* src = "rtl/common_cells/rr_arb_tree.sv:261.40-261.91" *) \$46y ;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [1] & (* src = "rtl/common_cells/rr_arb_tree.sv:262.40-262.90" *) \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [2] = \gen_arbiter.req_d [2] | (* src = "rtl/common_cells/rr_arb_tree.sv:254.40-254.65" *) \gen_arbiter.req_d [3];
  assign \$52y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.38" *) \gen_arbiter.req_d [2];
  assign \$53y  = \gen_arbiter.req_d [3] & (* src = "rtl/common_cells/rr_arb_tree.sv:257.41-257.79" *) \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = \$52y  | (* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.79" *) \$53y ;
  assign \gen_arbiter.data_nodes [212:142] = \gen_arbiter.gen_levels[1].gen_level[1].sel  ? (* src = "rtl/common_cells/rr_arb_tree.sv:260.40-260.75" *) data_i[283:213] : data_i[212:142];
  assign \$58y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:261.87-261.91" *) \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [2] & (* src = "rtl/common_cells/rr_arb_tree.sv:261.40-261.91" *) \$58y ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [2] & (* src = "rtl/common_cells/rr_arb_tree.sv:262.40-262.90" *) \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:226.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14710 ) \gen_arbiter.rr_q  <= \$gen_arbiter.rr_q$29 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14710  = | { flush_i, \$24y  };
  assign \$11y  = ! \gen_arbiter.rr_q ;
  assign \$13y  = | \gen_arbiter.rr_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:152.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= 1'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= \$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:175.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.req_q  <= 4'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.req_q  <= \$gen_arbiter.gen_int_rr.gen_lock.req_q$10 ;
  assign \$gen_arbiter.rr_q$29  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *) 2'h0 : \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \$gen_arbiter.gen_int_rr.gen_lock.req_q$10  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *) 4'h0 : \gen_arbiter.req_d ;
  assign \$gen_arbiter.gen_int_rr.gen_lock.lock_q$6  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *) 1'h0 : \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:212.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  (* src = "rtl/common_cells/rr_arb_tree.sv:203.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

(* src = "rtl/common_cells/rr_arb_tree.sv:49.8" *)
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$0y ;
  wire \$11y ;
  wire \$13y ;
  wire \$19y ;
  wire \$21y ;
  wire \$24y ;
  wire \$31y ;
  wire \$32y ;
  wire \$36y ;
  wire \$40y ;
  wire \$41y ;
  wire \$46y ;
  wire \$52y ;
  wire \$53y ;
  wire \$58y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14713 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *)
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *)
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$10 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *)
  wire [1:0] \$gen_arbiter.rr_q$29 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:89.31" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:103.31" *)
  input [283:0] data_i;
  wire [283:0] data_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:109.31" *)
  output [70:0] data_o;
  wire [70:0] data_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:93.31" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:126.33" *)
  wire [212:0] \gen_arbiter.data_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.40" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:191.40" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.53" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:193.27" *)
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.27" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:191.27" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:146.16" *)
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:146.24" *)
  reg \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:147.27" *)
  reg [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:127.33" *)
  wire [2:0] \gen_arbiter.gnt_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:131.33" *)
  wire [3:0] \gen_arbiter.req_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:128.33" *)
  wire [2:0] \gen_arbiter.req_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:130.33" *)
  reg [1:0] \gen_arbiter.rr_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:107.31" *)
  input gnt_i;
  wire gnt_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:100.31" *)
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:111.31" *)
  output [1:0] idx_o;
  wire [1:0] idx_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:97.31" *)
  input [3:0] req_i;
  wire [3:0] req_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:105.31" *)
  output req_o;
  wire req_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:95.31" *)
  input [1:0] rr_i;
  wire [1:0] rr_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:91.31" *)
  input rst_ni;
  wire rst_ni;
  assign \$0y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:149.37-149.43" *) gnt_i;
  assign \gen_arbiter.gen_int_rr.gen_lock.lock_d  = req_o & (* src = "rtl/common_cells/rr_arb_tree.sv:149.29-149.43" *) \$0y ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = \$11y  & (* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" *) \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = \$13y  & (* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" *) \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = \gen_arbiter.rr_q [1] ? (* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" *) 1'h0 : \gen_arbiter.req_d [2];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = \gen_arbiter.rr_q [1] & (* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" *) \gen_arbiter.req_d [2];
  assign \$19y  = 2'h3 > (* src = "rtl/common_cells/rr_arb_tree.sv:196.35-196.44" *) \gen_arbiter.rr_q ;
  assign \gen_arbiter.req_d  = \gen_arbiter.gen_int_rr.gen_lock.lock_q  ? (* src = "rtl/common_cells/rr_arb_tree.sv:150.29-150.53" *) \gen_arbiter.gen_int_rr.gen_lock.req_q  : req_i;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = \$19y  & (* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" *) \gen_arbiter.req_d [3];
  assign \$21y  = 2'h3 <= (* src = "rtl/common_cells/rr_arb_tree.sv:197.35-197.44" *) \gen_arbiter.rr_q ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = \$21y  & (* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" *) \gen_arbiter.req_d [3];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? (* src = "rtl/common_cells/rr_arb_tree.sv:218.27-218.67" *) \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign \$24y  = gnt_i && (* src = "rtl/common_cells/rr_arb_tree.sv:219.28-219.42" *) req_o;
  assign req_o = \gen_arbiter.req_nodes [1] | (* src = "rtl/common_cells/rr_arb_tree.sv:280.38-280.73" *) \gen_arbiter.req_nodes [2];
  assign \$31y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:283.25-283.41" *) \gen_arbiter.req_nodes [1];
  assign \$32y  = \gen_arbiter.req_nodes [2] & (* src = "rtl/common_cells/rr_arb_tree.sv:283.44-283.87" *) \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = \$31y  | (* src = "rtl/common_cells/rr_arb_tree.sv:283.25-283.87" *) \$32y ;
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? (* src = "rtl/common_cells/rr_arb_tree.sv:285.38-287.78" *) { 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  } : { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? (* src = "rtl/common_cells/rr_arb_tree.sv:289.38-289.83" *) \gen_arbiter.data_nodes [212:142] : \gen_arbiter.data_nodes [141:71];
  assign \$36y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:290.56-290.60" *) \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & (* src = "rtl/common_cells/rr_arb_tree.sv:290.38-290.60" *) \$36y ;
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & (* src = "rtl/common_cells/rr_arb_tree.sv:291.38-291.59" *) \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [1] = \gen_arbiter.req_d [0] | (* src = "rtl/common_cells/rr_arb_tree.sv:254.40-254.65" *) \gen_arbiter.req_d [1];
  assign \$40y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.38" *) \gen_arbiter.req_d [0];
  assign \$41y  = \gen_arbiter.req_d [1] & (* src = "rtl/common_cells/rr_arb_tree.sv:257.41-257.79" *) \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = \$40y  | (* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.79" *) \$41y ;
  assign \gen_arbiter.data_nodes [141:71] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? (* src = "rtl/common_cells/rr_arb_tree.sv:260.40-260.75" *) data_i[141:71] : data_i[70:0];
  assign \$46y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:261.87-261.91" *) \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [1] & (* src = "rtl/common_cells/rr_arb_tree.sv:261.40-261.91" *) \$46y ;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [1] & (* src = "rtl/common_cells/rr_arb_tree.sv:262.40-262.90" *) \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [2] = \gen_arbiter.req_d [2] | (* src = "rtl/common_cells/rr_arb_tree.sv:254.40-254.65" *) \gen_arbiter.req_d [3];
  assign \$52y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.38" *) \gen_arbiter.req_d [2];
  assign \$53y  = \gen_arbiter.req_d [3] & (* src = "rtl/common_cells/rr_arb_tree.sv:257.41-257.79" *) \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = \$52y  | (* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.79" *) \$53y ;
  assign \gen_arbiter.data_nodes [212:142] = \gen_arbiter.gen_levels[1].gen_level[1].sel  ? (* src = "rtl/common_cells/rr_arb_tree.sv:260.40-260.75" *) data_i[283:213] : data_i[212:142];
  assign \$58y  = ~ (* src = "rtl/common_cells/rr_arb_tree.sv:261.87-261.91" *) \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [2] & (* src = "rtl/common_cells/rr_arb_tree.sv:261.40-261.91" *) \$58y ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [2] & (* src = "rtl/common_cells/rr_arb_tree.sv:262.40-262.90" *) \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:226.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14713 ) \gen_arbiter.rr_q  <= \$gen_arbiter.rr_q$29 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14713  = | { flush_i, \$24y  };
  assign \$11y  = ! \gen_arbiter.rr_q ;
  assign \$13y  = | \gen_arbiter.rr_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:152.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= 1'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= \$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:175.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.req_q  <= 4'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.req_q  <= \$gen_arbiter.gen_int_rr.gen_lock.req_q$10 ;
  assign \$gen_arbiter.rr_q$29  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *) 2'h0 : \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \$gen_arbiter.gen_int_rr.gen_lock.req_q$10  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *) 4'h0 : \gen_arbiter.req_d ;
  assign \$gen_arbiter.gen_int_rr.gen_lock.lock_q$6  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *) 1'h0 : \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:212.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  (* src = "rtl/common_cells/rr_arb_tree.sv:203.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

(* src = "rtl/common_cells/rstgen.sv:13.8" *)
module \rstgen$croc_chip.i_croc_soc.i_rstgen (clk_i, rst_ni, test_mode_i, rst_no, init_no);
  (* src = "rtl/common_cells/rstgen.sv:14.18" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/rstgen.sv:18.18" *)
  output init_no;
  wire init_no;
  (* src = "rtl/common_cells/rstgen.sv:15.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/rstgen.sv:17.18" *)
  output rst_no;
  wire rst_no;
  (* src = "rtl/common_cells/rstgen.sv:16.18" *)
  input test_mode_i;
  wire test_mode_i;
  (* src = "rtl/common_cells/rstgen.sv:21.19" *)
  \rstgen_bypass$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass  i_rstgen_bypass (
    .clk_i(clk_i),
    .init_no(init_no),
    .rst_ni(rst_ni),
    .rst_no(rst_no),
    .rst_test_mode_ni(rst_ni),
    .test_mode_i(test_mode_i)
  );
endmodule

(* src = "rtl/common_cells/rstgen_bypass.sv:15.8" *)
module \rstgen_bypass$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass (clk_i, rst_ni, test_mode_i, rst_no, init_no, rst_test_mode_ni);
  (* src = "rtl/common_cells/rstgen_bypass.sv:18.18" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/rstgen_bypass.sv:23.18" *)
  output init_no;
  wire init_no;
  (* src = "rtl/common_cells/rstgen_bypass.sv:27.11" *)
  wire rst_n;
  (* src = "rtl/common_cells/rstgen_bypass.sv:19.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/rstgen_bypass.sv:22.18" *)
  output rst_no;
  wire rst_no;
  (* src = "rtl/common_cells/rstgen_bypass.sv:20.18" *)
  input rst_test_mode_ni;
  wire rst_test_mode_ni;
  (* src = "rtl/common_cells/rstgen_bypass.sv:29.25" *)
  reg [3:0] synch_regs_q;
  (* src = "rtl/common_cells/rstgen_bypass.sv:21.18" *)
  input test_mode_i;
  wire test_mode_i;
  (* src = "rtl/common_cells/rstgen_bypass.sv:53.5" *)
  always @(posedge clk_i, negedge rst_n)
    if (!rst_n) synch_regs_q <= 4'h0;
    else synch_regs_q <= { synch_regs_q[2:0], 1'h1 };
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/rstgen_bypass.sv:46.17" *)
  \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_init_no  i_tc_clk_mux2_init_no (
    .clk0_i(synch_regs_q[3]),
    .clk1_i(1'h1),
    .clk_o(init_no),
    .clk_sel_i(test_mode_i)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/rstgen_bypass.sv:32.17" *)
  \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_n  i_tc_clk_mux2_rst_n (
    .clk0_i(rst_ni),
    .clk1_i(rst_test_mode_ni),
    .clk_o(rst_n),
    .clk_sel_i(test_mode_i)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/rstgen_bypass.sv:39.17" *)
  \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_no  i_tc_clk_mux2_rst_no (
    .clk0_i(synch_regs_q[3]),
    .clk1_i(rst_test_mode_ni),
    .clk_o(rst_no),
    .clk_sel_i(test_mode_i)
  );
endmodule

(* src = "rtl/apb_uart/slib_clock_div.sv:35.8" *)
module \slib_clock_div$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG2 (CLK, Q, RST, CE);
  wire \$3y ;
  wire [2:0] \$4y ;
  (* src = "rtl/apb_uart/slib_clock_div.sv:58.7-66.26" *)
  wire [2:0] \$iCounter$6 ;
  (* src = "rtl/apb_uart/slib_clock_div.sv:56.5-67.20" *)
  wire \$iQ$7 ;
  (* src = "rtl/apb_uart/slib_clock_div.sv:38.14" *)
  input CE;
  wire CE;
  (* src = "rtl/apb_uart/slib_clock_div.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_clock_div.sv:39.16" *)
  output Q;
  reg Q;
  (* src = "rtl/apb_uart/slib_clock_div.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_clock_div.sv:44.27" *)
  reg [2:0] iCounter;
  assign \$3y  = iCounter == (* src = "rtl/apb_uart/slib_clock_div.sv:58.12-58.35" *) 3'h7;
  assign \$4y  = iCounter + (* src = "rtl/apb_uart/slib_clock_div.sv:65.23-65.35" *) 1'h1;
  (* src = "rtl/apb_uart/slib_clock_div.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCounter <= 3'h0;
    else if (CE) iCounter <= \$iCounter$6 ;
  (* src = "rtl/apb_uart/slib_clock_div.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 1'h0;
    else Q <= \$iQ$7 ;
  assign \$iCounter$6  = \$3y  ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_clock_div.sv:59.19-62.26|rtl/apb_uart/slib_clock_div.sv:58.7-66.26" *) 3'h0 : \$4y ;
  assign \$iQ$7  = CE & (* src = "rtl/apb_uart/slib_clock_div.sv:58.7-66.26|rtl/apb_uart/slib_clock_div.sv:56.5-67.20" *) \$3y ;
endmodule

(* src = "rtl/apb_uart/slib_counter.sv:35.8" *)
module \slib_counter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_BRC (CLK, D, Q, RST, CLEAR, LOAD, ENABLE, DOWN, OVERFLOW);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14717 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14720 ;
  wire [4:0] \$auto$opt_share.cc:222:merge_operators$13788 ;
  wire [4:0] \$auto$rtlil.cc:3092:Mux$13790 ;
  (* src = "rtl/apb_uart/slib_counter.sv:63.11-78.11" *)
  wire [4:0] \$iCounter$10 ;
  (* src = "rtl/apb_uart/slib_counter.sv:58.6-78.11" *)
  wire [4:0] \$iCounter$11 ;
  (* src = "rtl/apb_uart/slib_counter.sv:80.6-83.11" *)
  wire \$iCounter[4]$13 ;
  (* src = "rtl/apb_uart/slib_counter.sv:38.14" *)
  input CLEAR;
  wire CLEAR;
  (* src = "rtl/apb_uart/slib_counter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_counter.sv:42.28" *)
  input [3:0] D;
  wire [3:0] D;
  (* src = "rtl/apb_uart/slib_counter.sv:41.14" *)
  input DOWN;
  wire DOWN;
  (* src = "rtl/apb_uart/slib_counter.sv:40.14" *)
  input ENABLE;
  wire ENABLE;
  (* src = "rtl/apb_uart/slib_counter.sv:39.14" *)
  input LOAD;
  wire LOAD;
  (* src = "rtl/apb_uart/slib_counter.sv:44.16" *)
  output OVERFLOW;
  reg OVERFLOW;
  (* src = "rtl/apb_uart/slib_counter.sv:43.30" *)
  output [3:0] Q;
  reg [3:0] Q;
  (* src = "rtl/apb_uart/slib_counter.sv:37.14" *)
  input RST;
  wire RST;
  assign \$auto$opt_share.cc:222:merge_operators$13788  = { OVERFLOW, Q } - (* src = "rtl/apb_uart/slib_counter.sv:76.28-76.40" *) { \$auto$rtlil.cc:3092:Mux$13790 [4], \$auto$rtlil.cc:3092:Mux$13790 [4], \$auto$rtlil.cc:3092:Mux$13790 [4], \$auto$rtlil.cc:3092:Mux$13790 [4], 1'h1 };
  (* src = "rtl/apb_uart/slib_counter.sv:50.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) OVERFLOW <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14717 ) OVERFLOW <= \$iCounter[4]$13 ;
  (* src = "rtl/apb_uart/slib_counter.sv:50.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 4'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14720 ) Q <= \$iCounter$11 [3:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14717  = | { ENABLE, LOAD, OVERFLOW, CLEAR };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14720  = | { ENABLE, LOAD, CLEAR };
  assign \$auto$rtlil.cc:3092:Mux$13790 [4] = ~ DOWN;
  assign \$iCounter[4]$13  = OVERFLOW ? (* src = "rtl/apb_uart/slib_counter.sv:82.11-82.32|rtl/apb_uart/slib_counter.sv:80.6-83.11" *) 1'h0 : \$iCounter$11 [4];
  assign \$iCounter$10  = LOAD ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_counter.sv:65.11-65.45|rtl/apb_uart/slib_counter.sv:63.11-78.11" *) { 1'h0, D } : \$auto$opt_share.cc:222:merge_operators$13788 ;
  assign \$iCounter$11  = CLEAR ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_counter.sv:61.11-61.25|rtl/apb_uart/slib_counter.sv:58.6-78.11" *) 5'h00 : \$iCounter$10 ;
  assign \$auto$rtlil.cc:3092:Mux$13790 [3:0] = { \$auto$rtlil.cc:3092:Mux$13790 [4], \$auto$rtlil.cc:3092:Mux$13790 [4], \$auto$rtlil.cc:3092:Mux$13790 [4], 1'h1 };
endmodule

(* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BIDET (CLK, D, RST, RE, FE);
  wire \$2y ;
  wire \$7y ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$2y  = ~ (* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.33" *) iDd;
  assign RE = \$2y  && (* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.47" *) D;
  assign \$7y  = ~ (* src = "rtl/apb_uart/slib_edge_detect.sv:60.37-60.47" *) D;
  assign FE = iDd && (* src = "rtl/apb_uart/slib_edge_detect.sv:60.21-60.47" *) \$7y ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_CTS (CLK, D, RST, RE, FE);
  wire \$2y ;
  wire \$7y ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$2y  = ~ (* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.33" *) iDd;
  assign RE = \$2y  && (* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.47" *) D;
  assign \$7y  = ~ (* src = "rtl/apb_uart/slib_edge_detect.sv:60.37-60.47" *) D;
  assign FE = iDd && (* src = "rtl/apb_uart/slib_edge_detect.sv:60.21-60.47" *) \$7y ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DCD (CLK, D, RST, RE, FE);
  wire \$2y ;
  wire \$7y ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$2y  = ~ (* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.33" *) iDd;
  assign RE = \$2y  && (* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.47" *) D;
  assign \$7y  = ~ (* src = "rtl/apb_uart/slib_edge_detect.sv:60.37-60.47" *) D;
  assign FE = iDd && (* src = "rtl/apb_uart/slib_edge_detect.sv:60.21-60.47" *) \$7y ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DSR (CLK, D, RST, RE, FE);
  wire \$2y ;
  wire \$7y ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$2y  = ~ (* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.33" *) iDd;
  assign RE = \$2y  && (* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.47" *) D;
  assign \$7y  = ~ (* src = "rtl/apb_uart/slib_edge_detect.sv:60.37-60.47" *) D;
  assign FE = iDd && (* src = "rtl/apb_uart/slib_edge_detect.sv:60.21-60.47" *) \$7y ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_RI (CLK, D, RST, RE, FE);
  wire \$2y ;
  wire \$7y ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$2y  = ~ (* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.33" *) iDd;
  assign RE = \$2y  && (* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.47" *) D;
  assign \$7y  = ~ (* src = "rtl/apb_uart/slib_edge_detect.sv:60.37-60.47" *) D;
  assign FE = iDd && (* src = "rtl/apb_uart/slib_edge_detect.sv:60.21-60.47" *) \$7y ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_FEDET (CLK, D, RST, RE, FE);
  wire \$2y ;
  wire \$7y ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$2y  = ~ (* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.33" *) iDd;
  assign RE = \$2y  && (* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.47" *) D;
  assign \$7y  = ~ (* src = "rtl/apb_uart/slib_edge_detect.sv:60.37-60.47" *) D;
  assign FE = iDd && (* src = "rtl/apb_uart/slib_edge_detect.sv:60.21-60.47" *) \$7y ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC_THRE_ED (CLK, D, RST, RE, FE);
  wire \$2y ;
  wire \$7y ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$2y  = ~ (* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.33" *) iDd;
  assign RE = \$2y  && (* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.47" *) D;
  assign \$7y  = ~ (* src = "rtl/apb_uart/slib_edge_detect.sv:60.37-60.47" *) D;
  assign FE = iDd && (* src = "rtl/apb_uart/slib_edge_detect.sv:60.21-60.47" *) \$7y ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_PEDET (CLK, D, RST, RE, FE);
  wire \$2y ;
  wire \$7y ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$2y  = ~ (* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.33" *) iDd;
  assign RE = \$2y  && (* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.47" *) D;
  assign \$7y  = ~ (* src = "rtl/apb_uart/slib_edge_detect.sv:60.37-60.47" *) D;
  assign FE = iDd && (* src = "rtl/apb_uart/slib_edge_detect.sv:60.21-60.47" *) \$7y ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RCLK (CLK, D, RST, RE, FE);
  wire \$2y ;
  wire \$7y ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$2y  = ~ (* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.33" *) iDd;
  assign RE = \$2y  && (* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.47" *) D;
  assign \$7y  = ~ (* src = "rtl/apb_uart/slib_edge_detect.sv:60.37-60.47" *) D;
  assign FE = iDd && (* src = "rtl/apb_uart/slib_edge_detect.sv:60.21-60.47" *) \$7y ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "rtl/apb_uart/slib_fifo.sv:35.8" *)
module \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RXFF (CLK, D, FULL, Q, RST, CLEAR, WRITE, READ, EMPTY, USAGE);
  wire \$0y ;
  wire \$12y ;
  wire \$13y ;
  wire [6:0] \$14y ;
  wire \$19y ;
  wire \$1y ;
  wire \$24y ;
  wire \$25y ;
  wire [6:0] \$26y ;
  wire \$27y ;
  wire [703:0] \$31y ;
  wire [703:0] \$32y ;
  wire [6:0] \$34y ;
  wire [10:0] \$36y ;
  wire \$42y ;
  wire \$44y ;
  wire \$46y ;
  wire \$49y ;
  wire \$51y ;
  wire \$53y ;
  (* unused_bits = "7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] \$9y ;
  wire [351:0] \$auto$bmuxmap.cc:84:execute$15617 ;
  wire [175:0] \$auto$bmuxmap.cc:84:execute$15650 ;
  wire [87:0] \$auto$bmuxmap.cc:84:execute$15667 ;
  wire [43:0] \$auto$bmuxmap.cc:84:execute$15676 ;
  wire [21:0] \$auto$bmuxmap.cc:84:execute$15681 ;
  wire [10:0] \$auto$bmuxmap.cc:84:execute$15684 ;
  wire \$auto$demuxmap.cc:63:execute$15879 ;
  wire \$auto$demuxmap.cc:63:execute$15882 ;
  wire \$auto$demuxmap.cc:63:execute$15885 ;
  wire \$auto$demuxmap.cc:63:execute$15888 ;
  wire \$auto$demuxmap.cc:63:execute$15891 ;
  wire \$auto$demuxmap.cc:63:execute$15894 ;
  wire \$auto$demuxmap.cc:63:execute$15897 ;
  wire \$auto$demuxmap.cc:63:execute$15900 ;
  wire \$auto$demuxmap.cc:63:execute$15903 ;
  wire \$auto$demuxmap.cc:63:execute$15906 ;
  wire \$auto$demuxmap.cc:63:execute$15909 ;
  wire \$auto$demuxmap.cc:63:execute$15912 ;
  wire \$auto$demuxmap.cc:63:execute$15915 ;
  wire \$auto$demuxmap.cc:63:execute$15918 ;
  wire \$auto$demuxmap.cc:63:execute$15921 ;
  wire \$auto$demuxmap.cc:63:execute$15924 ;
  wire \$auto$demuxmap.cc:63:execute$15927 ;
  wire \$auto$demuxmap.cc:63:execute$15930 ;
  wire \$auto$demuxmap.cc:63:execute$15933 ;
  wire \$auto$demuxmap.cc:63:execute$15936 ;
  wire \$auto$demuxmap.cc:63:execute$15939 ;
  wire \$auto$demuxmap.cc:63:execute$15942 ;
  wire \$auto$demuxmap.cc:63:execute$15945 ;
  wire \$auto$demuxmap.cc:63:execute$15948 ;
  wire \$auto$demuxmap.cc:63:execute$15951 ;
  wire \$auto$demuxmap.cc:63:execute$15954 ;
  wire \$auto$demuxmap.cc:63:execute$15957 ;
  wire \$auto$demuxmap.cc:63:execute$15960 ;
  wire \$auto$demuxmap.cc:63:execute$15963 ;
  wire \$auto$demuxmap.cc:63:execute$15966 ;
  wire \$auto$demuxmap.cc:63:execute$15969 ;
  wire \$auto$demuxmap.cc:63:execute$15972 ;
  wire \$auto$demuxmap.cc:63:execute$15975 ;
  wire \$auto$demuxmap.cc:63:execute$15978 ;
  wire \$auto$demuxmap.cc:63:execute$15981 ;
  wire \$auto$demuxmap.cc:63:execute$15984 ;
  wire \$auto$demuxmap.cc:63:execute$15987 ;
  wire \$auto$demuxmap.cc:63:execute$15990 ;
  wire \$auto$demuxmap.cc:63:execute$15993 ;
  wire \$auto$demuxmap.cc:63:execute$15996 ;
  wire \$auto$demuxmap.cc:63:execute$15999 ;
  wire \$auto$demuxmap.cc:63:execute$16002 ;
  wire \$auto$demuxmap.cc:63:execute$16005 ;
  wire \$auto$demuxmap.cc:63:execute$16008 ;
  wire \$auto$demuxmap.cc:63:execute$16011 ;
  wire \$auto$demuxmap.cc:63:execute$16014 ;
  wire \$auto$demuxmap.cc:63:execute$16017 ;
  wire \$auto$demuxmap.cc:63:execute$16020 ;
  wire \$auto$demuxmap.cc:63:execute$16023 ;
  wire \$auto$demuxmap.cc:63:execute$16026 ;
  wire \$auto$demuxmap.cc:63:execute$16029 ;
  wire \$auto$demuxmap.cc:63:execute$16032 ;
  wire \$auto$demuxmap.cc:63:execute$16035 ;
  wire \$auto$demuxmap.cc:63:execute$16038 ;
  wire \$auto$demuxmap.cc:63:execute$16041 ;
  wire \$auto$demuxmap.cc:63:execute$16044 ;
  wire \$auto$demuxmap.cc:63:execute$16047 ;
  wire \$auto$demuxmap.cc:63:execute$16050 ;
  wire \$auto$demuxmap.cc:63:execute$16053 ;
  wire \$auto$demuxmap.cc:63:execute$16056 ;
  wire \$auto$demuxmap.cc:63:execute$16059 ;
  wire \$auto$demuxmap.cc:63:execute$16062 ;
  wire \$auto$demuxmap.cc:63:execute$16065 ;
  wire \$auto$demuxmap.cc:63:execute$16068 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14723 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14726 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14729 ;
  wire [5:0] \$auto$opt_share.cc:222:merge_operators$15028 ;
  wire [5:0] \$auto$rtlil.cc:3092:Mux$15030 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:81.1-87.10" *)
  wire [6:0] \$iRDAddr$18 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:133.3-150.10" *)
  wire [5:0] \$iUSAGE$56 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:81.1-87.10" *)
  wire [6:0] \$iWRAddr$17 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:38.14" *)
  input CLEAR;
  wire CLEAR;
  (* src = "rtl/apb_uart/slib_fifo.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_fifo.sv:41.28" *)
  input [10:0] D;
  wire [10:0] D;
  (* src = "rtl/apb_uart/slib_fifo.sv:43.16" *)
  output EMPTY;
  reg EMPTY;
  (* src = "rtl/apb_uart/slib_fifo.sv:44.16" *)
  output FULL;
  wire FULL;
  (* src = "rtl/apb_uart/slib_fifo.sv:42.30" *)
  output [10:0] Q;
  reg [10:0] Q;
  (* src = "rtl/apb_uart/slib_fifo.sv:40.14" *)
  input READ;
  wire READ;
  (* src = "rtl/apb_uart/slib_fifo.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_fifo.sv:45.31" *)
  output [5:0] USAGE;
  reg [5:0] USAGE;
  (* src = "rtl/apb_uart/slib_fifo.sv:39.14" *)
  input WRITE;
  wire WRITE;
  (* src = "rtl/apb_uart/slib_fifo.sv:55.17" *)
  reg [703:0] iFIFOMem;
  (* src = "rtl/apb_uart/slib_fifo.sv:52.16" *)
  reg [6:0] iRDAddr;
  (* src = "rtl/apb_uart/slib_fifo.sv:51.16" *)
  reg [6:0] iWRAddr;
  assign \$0y  = iRDAddr[5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:57.25-57.72" *) iWRAddr[5:0];
  assign \$1y  = iRDAddr[6] != (* src = "rtl/apb_uart/slib_fifo.sv:57.79-57.113" *) iWRAddr[6];
  assign \$12y  = ~ (* src = "rtl/apb_uart/slib_fifo.sv:76.23-76.38" *) EMPTY;
  assign \$13y  = READ && (* src = "rtl/apb_uart/slib_fifo.sv:76.6-76.38" *) \$12y ;
  assign \$14y  = iRDAddr + (* src = "rtl/apb_uart/slib_fifo.sv:78.18-78.29" *) 1'h1;
  assign \$19y  = iRDAddr == (* src = "rtl/apb_uart/slib_fifo.sv:89.6-89.24" *) iWRAddr;
  assign FULL = \$0y  && (* src = "rtl/apb_uart/slib_fifo.sv:57.24-57.114" *) \$1y ;
  assign \$24y  = ~ (* src = "rtl/apb_uart/slib_fifo.sv:113.26-113.40" *) FULL;
  assign \$25y  = WRITE && (* src = "rtl/apb_uart/slib_fifo.sv:113.8-113.40" *) \$24y ;
  assign \$27y  = $signed({ 1'h1, \$26y [5:0] }) >= (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) $signed(7'h40);
  (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *)
  \$bwmux  #(
    .WIDTH(32'd704)
  ) \$32  (
    .A(iFIFOMem),
    .B({ D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D }),
    .S({ \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10] }),
    .Y(\$32y )
  );
  assign \$42y  = ~ (* src = "rtl/apb_uart/slib_fifo.sv:140.13-140.26" *) READ;
  assign \$44y  = \$42y  && (* src = "rtl/apb_uart/slib_fifo.sv:140.13-140.44" *) WRITE;
  assign \$46y  = \$44y  && (* src = "rtl/apb_uart/slib_fifo.sv:140.12-140.63" *) \$24y ;
  assign \$49y  = ~ (* src = "rtl/apb_uart/slib_fifo.sv:145.7-145.21" *) WRITE;
  assign \$51y  = \$49y  && (* src = "rtl/apb_uart/slib_fifo.sv:145.7-145.38" *) READ;
  assign \$53y  = \$51y  && (* src = "rtl/apb_uart/slib_fifo.sv:145.6-145.58" *) \$12y ;
  assign \$auto$opt_share.cc:222:merge_operators$15028  = USAGE - (* src = "rtl/apb_uart/slib_fifo.sv:147.21-147.31" *) { \$auto$rtlil.cc:3092:Mux$15030 [5], \$auto$rtlil.cc:3092:Mux$15030 [5], \$auto$rtlil.cc:3092:Mux$15030 [5], \$auto$rtlil.cc:3092:Mux$15030 [5], \$auto$rtlil.cc:3092:Mux$15030 [5], 1'h1 };
  assign \$9y [6:0] = iWRAddr + (* src = "rtl/apb_uart/slib_fifo.sv:73.18-73.29" *) 1'h1;
  assign \$auto$bmuxmap.cc:84:execute$15617 [10:0] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[21:11] : iFIFOMem[10:0];
  assign \$auto$bmuxmap.cc:84:execute$15617 [21:11] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[43:33] : iFIFOMem[32:22];
  assign \$auto$bmuxmap.cc:84:execute$15617 [32:22] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[65:55] : iFIFOMem[54:44];
  assign \$auto$bmuxmap.cc:84:execute$15617 [43:33] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[87:77] : iFIFOMem[76:66];
  assign \$auto$bmuxmap.cc:84:execute$15617 [54:44] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[109:99] : iFIFOMem[98:88];
  assign \$auto$bmuxmap.cc:84:execute$15617 [65:55] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[131:121] : iFIFOMem[120:110];
  assign \$auto$bmuxmap.cc:84:execute$15617 [76:66] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[153:143] : iFIFOMem[142:132];
  assign \$auto$bmuxmap.cc:84:execute$15617 [87:77] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[175:165] : iFIFOMem[164:154];
  assign \$auto$bmuxmap.cc:84:execute$15617 [98:88] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[197:187] : iFIFOMem[186:176];
  assign \$auto$bmuxmap.cc:84:execute$15617 [109:99] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[219:209] : iFIFOMem[208:198];
  assign \$auto$bmuxmap.cc:84:execute$15617 [120:110] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[241:231] : iFIFOMem[230:220];
  assign \$auto$bmuxmap.cc:84:execute$15617 [131:121] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[263:253] : iFIFOMem[252:242];
  assign \$auto$bmuxmap.cc:84:execute$15617 [142:132] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[285:275] : iFIFOMem[274:264];
  assign \$auto$bmuxmap.cc:84:execute$15617 [153:143] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[307:297] : iFIFOMem[296:286];
  assign \$auto$bmuxmap.cc:84:execute$15617 [164:154] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[329:319] : iFIFOMem[318:308];
  assign \$auto$bmuxmap.cc:84:execute$15617 [175:165] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[351:341] : iFIFOMem[340:330];
  assign \$auto$bmuxmap.cc:84:execute$15617 [186:176] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[373:363] : iFIFOMem[362:352];
  assign \$auto$bmuxmap.cc:84:execute$15617 [197:187] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[395:385] : iFIFOMem[384:374];
  assign \$auto$bmuxmap.cc:84:execute$15617 [208:198] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[417:407] : iFIFOMem[406:396];
  assign \$auto$bmuxmap.cc:84:execute$15617 [219:209] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[439:429] : iFIFOMem[428:418];
  assign \$auto$bmuxmap.cc:84:execute$15617 [230:220] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[461:451] : iFIFOMem[450:440];
  assign \$auto$bmuxmap.cc:84:execute$15617 [241:231] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[483:473] : iFIFOMem[472:462];
  assign \$auto$bmuxmap.cc:84:execute$15617 [252:242] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[505:495] : iFIFOMem[494:484];
  assign \$auto$bmuxmap.cc:84:execute$15617 [263:253] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[527:517] : iFIFOMem[516:506];
  assign \$auto$bmuxmap.cc:84:execute$15617 [274:264] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[549:539] : iFIFOMem[538:528];
  assign \$auto$bmuxmap.cc:84:execute$15617 [285:275] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[571:561] : iFIFOMem[560:550];
  assign \$auto$bmuxmap.cc:84:execute$15617 [296:286] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[593:583] : iFIFOMem[582:572];
  assign \$auto$bmuxmap.cc:84:execute$15617 [307:297] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[615:605] : iFIFOMem[604:594];
  assign \$auto$bmuxmap.cc:84:execute$15617 [318:308] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[637:627] : iFIFOMem[626:616];
  assign \$auto$bmuxmap.cc:84:execute$15617 [329:319] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[659:649] : iFIFOMem[648:638];
  assign \$auto$bmuxmap.cc:84:execute$15617 [340:330] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[681:671] : iFIFOMem[670:660];
  assign \$auto$bmuxmap.cc:84:execute$15617 [351:341] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[703:693] : iFIFOMem[692:682];
  assign \$auto$bmuxmap.cc:84:execute$15650 [10:0] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15617 [21:11] : \$auto$bmuxmap.cc:84:execute$15617 [10:0];
  assign \$auto$bmuxmap.cc:84:execute$15650 [21:11] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15617 [43:33] : \$auto$bmuxmap.cc:84:execute$15617 [32:22];
  assign \$auto$bmuxmap.cc:84:execute$15650 [32:22] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15617 [65:55] : \$auto$bmuxmap.cc:84:execute$15617 [54:44];
  assign \$auto$bmuxmap.cc:84:execute$15650 [43:33] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15617 [87:77] : \$auto$bmuxmap.cc:84:execute$15617 [76:66];
  assign \$auto$bmuxmap.cc:84:execute$15650 [54:44] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15617 [109:99] : \$auto$bmuxmap.cc:84:execute$15617 [98:88];
  assign \$auto$bmuxmap.cc:84:execute$15650 [65:55] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15617 [131:121] : \$auto$bmuxmap.cc:84:execute$15617 [120:110];
  assign \$auto$bmuxmap.cc:84:execute$15650 [76:66] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15617 [153:143] : \$auto$bmuxmap.cc:84:execute$15617 [142:132];
  assign \$auto$bmuxmap.cc:84:execute$15650 [87:77] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15617 [175:165] : \$auto$bmuxmap.cc:84:execute$15617 [164:154];
  assign \$auto$bmuxmap.cc:84:execute$15650 [98:88] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15617 [197:187] : \$auto$bmuxmap.cc:84:execute$15617 [186:176];
  assign \$auto$bmuxmap.cc:84:execute$15650 [109:99] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15617 [219:209] : \$auto$bmuxmap.cc:84:execute$15617 [208:198];
  assign \$auto$bmuxmap.cc:84:execute$15650 [120:110] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15617 [241:231] : \$auto$bmuxmap.cc:84:execute$15617 [230:220];
  assign \$auto$bmuxmap.cc:84:execute$15650 [131:121] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15617 [263:253] : \$auto$bmuxmap.cc:84:execute$15617 [252:242];
  assign \$auto$bmuxmap.cc:84:execute$15650 [142:132] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15617 [285:275] : \$auto$bmuxmap.cc:84:execute$15617 [274:264];
  assign \$auto$bmuxmap.cc:84:execute$15650 [153:143] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15617 [307:297] : \$auto$bmuxmap.cc:84:execute$15617 [296:286];
  assign \$auto$bmuxmap.cc:84:execute$15650 [164:154] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15617 [329:319] : \$auto$bmuxmap.cc:84:execute$15617 [318:308];
  assign \$auto$bmuxmap.cc:84:execute$15650 [175:165] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15617 [351:341] : \$auto$bmuxmap.cc:84:execute$15617 [340:330];
  assign \$auto$bmuxmap.cc:84:execute$15667 [10:0] = \$34y [2] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15650 [21:11] : \$auto$bmuxmap.cc:84:execute$15650 [10:0];
  assign \$auto$bmuxmap.cc:84:execute$15667 [21:11] = \$34y [2] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15650 [43:33] : \$auto$bmuxmap.cc:84:execute$15650 [32:22];
  assign \$auto$bmuxmap.cc:84:execute$15667 [32:22] = \$34y [2] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15650 [65:55] : \$auto$bmuxmap.cc:84:execute$15650 [54:44];
  assign \$auto$bmuxmap.cc:84:execute$15667 [43:33] = \$34y [2] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15650 [87:77] : \$auto$bmuxmap.cc:84:execute$15650 [76:66];
  assign \$auto$bmuxmap.cc:84:execute$15667 [54:44] = \$34y [2] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15650 [109:99] : \$auto$bmuxmap.cc:84:execute$15650 [98:88];
  assign \$auto$bmuxmap.cc:84:execute$15667 [65:55] = \$34y [2] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15650 [131:121] : \$auto$bmuxmap.cc:84:execute$15650 [120:110];
  assign \$auto$bmuxmap.cc:84:execute$15667 [76:66] = \$34y [2] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15650 [153:143] : \$auto$bmuxmap.cc:84:execute$15650 [142:132];
  assign \$auto$bmuxmap.cc:84:execute$15667 [87:77] = \$34y [2] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15650 [175:165] : \$auto$bmuxmap.cc:84:execute$15650 [164:154];
  assign \$auto$bmuxmap.cc:84:execute$15676 [10:0] = \$34y [3] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15667 [21:11] : \$auto$bmuxmap.cc:84:execute$15667 [10:0];
  assign \$auto$bmuxmap.cc:84:execute$15676 [21:11] = \$34y [3] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15667 [43:33] : \$auto$bmuxmap.cc:84:execute$15667 [32:22];
  assign \$auto$bmuxmap.cc:84:execute$15676 [32:22] = \$34y [3] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15667 [65:55] : \$auto$bmuxmap.cc:84:execute$15667 [54:44];
  assign \$auto$bmuxmap.cc:84:execute$15676 [43:33] = \$34y [3] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15667 [87:77] : \$auto$bmuxmap.cc:84:execute$15667 [76:66];
  assign \$auto$bmuxmap.cc:84:execute$15681 [10:0] = \$34y [4] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15676 [21:11] : \$auto$bmuxmap.cc:84:execute$15676 [10:0];
  assign \$auto$bmuxmap.cc:84:execute$15681 [21:11] = \$34y [4] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15676 [43:33] : \$auto$bmuxmap.cc:84:execute$15676 [32:22];
  assign \$auto$bmuxmap.cc:84:execute$15684  = \$34y [5] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15681 [21:11] : \$auto$bmuxmap.cc:84:execute$15681 [10:0];
  assign \$auto$demuxmap.cc:63:execute$15879  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h00;
  assign \$auto$demuxmap.cc:63:execute$15882  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h01;
  assign \$auto$demuxmap.cc:63:execute$15885  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h02;
  assign \$auto$demuxmap.cc:63:execute$15888  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h03;
  assign \$auto$demuxmap.cc:63:execute$15891  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h04;
  assign \$auto$demuxmap.cc:63:execute$15894  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h05;
  assign \$auto$demuxmap.cc:63:execute$15897  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h06;
  assign \$auto$demuxmap.cc:63:execute$15900  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h07;
  assign \$auto$demuxmap.cc:63:execute$15903  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h08;
  assign \$auto$demuxmap.cc:63:execute$15906  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h09;
  assign \$auto$demuxmap.cc:63:execute$15909  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h0a;
  assign \$auto$demuxmap.cc:63:execute$15912  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h0b;
  assign \$auto$demuxmap.cc:63:execute$15915  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h0c;
  assign \$auto$demuxmap.cc:63:execute$15918  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h0d;
  assign \$auto$demuxmap.cc:63:execute$15921  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h0e;
  assign \$auto$demuxmap.cc:63:execute$15924  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h0f;
  assign \$auto$demuxmap.cc:63:execute$15927  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h10;
  assign \$auto$demuxmap.cc:63:execute$15930  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h11;
  assign \$auto$demuxmap.cc:63:execute$15933  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h12;
  assign \$auto$demuxmap.cc:63:execute$15936  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h13;
  assign \$auto$demuxmap.cc:63:execute$15939  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h14;
  assign \$auto$demuxmap.cc:63:execute$15942  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h15;
  assign \$auto$demuxmap.cc:63:execute$15945  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h16;
  assign \$auto$demuxmap.cc:63:execute$15948  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h17;
  assign \$auto$demuxmap.cc:63:execute$15951  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h18;
  assign \$auto$demuxmap.cc:63:execute$15954  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h19;
  assign \$auto$demuxmap.cc:63:execute$15957  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h1a;
  assign \$auto$demuxmap.cc:63:execute$15960  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h1b;
  assign \$auto$demuxmap.cc:63:execute$15963  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h1c;
  assign \$auto$demuxmap.cc:63:execute$15966  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h1d;
  assign \$auto$demuxmap.cc:63:execute$15969  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h1e;
  assign \$auto$demuxmap.cc:63:execute$15972  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h1f;
  assign \$auto$demuxmap.cc:63:execute$15975  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h20;
  assign \$auto$demuxmap.cc:63:execute$15978  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h21;
  assign \$auto$demuxmap.cc:63:execute$15981  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h22;
  assign \$auto$demuxmap.cc:63:execute$15984  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h23;
  assign \$auto$demuxmap.cc:63:execute$15987  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h24;
  assign \$auto$demuxmap.cc:63:execute$15990  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h25;
  assign \$auto$demuxmap.cc:63:execute$15993  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h26;
  assign \$auto$demuxmap.cc:63:execute$15996  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h27;
  assign \$auto$demuxmap.cc:63:execute$15999  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h28;
  assign \$auto$demuxmap.cc:63:execute$16002  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h29;
  assign \$auto$demuxmap.cc:63:execute$16005  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h2a;
  assign \$auto$demuxmap.cc:63:execute$16008  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h2b;
  assign \$auto$demuxmap.cc:63:execute$16011  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h2c;
  assign \$auto$demuxmap.cc:63:execute$16014  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h2d;
  assign \$auto$demuxmap.cc:63:execute$16017  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h2e;
  assign \$auto$demuxmap.cc:63:execute$16020  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h2f;
  assign \$auto$demuxmap.cc:63:execute$16023  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h30;
  assign \$auto$demuxmap.cc:63:execute$16026  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h31;
  assign \$auto$demuxmap.cc:63:execute$16029  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h32;
  assign \$auto$demuxmap.cc:63:execute$16032  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h33;
  assign \$auto$demuxmap.cc:63:execute$16035  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h34;
  assign \$auto$demuxmap.cc:63:execute$16038  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h35;
  assign \$auto$demuxmap.cc:63:execute$16041  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h36;
  assign \$auto$demuxmap.cc:63:execute$16044  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h37;
  assign \$auto$demuxmap.cc:63:execute$16047  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h38;
  assign \$auto$demuxmap.cc:63:execute$16050  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h39;
  assign \$auto$demuxmap.cc:63:execute$16053  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h3a;
  assign \$auto$demuxmap.cc:63:execute$16056  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h3b;
  assign \$auto$demuxmap.cc:63:execute$16059  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h3c;
  assign \$auto$demuxmap.cc:63:execute$16062  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h3d;
  assign \$auto$demuxmap.cc:63:execute$16065  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h3e;
  assign \$auto$demuxmap.cc:63:execute$16068  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h3f;
  assign \$31y [10] = \$auto$demuxmap.cc:63:execute$15879  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [21] = \$auto$demuxmap.cc:63:execute$15882  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [32] = \$auto$demuxmap.cc:63:execute$15885  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [43] = \$auto$demuxmap.cc:63:execute$15888  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [54] = \$auto$demuxmap.cc:63:execute$15891  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [65] = \$auto$demuxmap.cc:63:execute$15894  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [76] = \$auto$demuxmap.cc:63:execute$15897  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [87] = \$auto$demuxmap.cc:63:execute$15900  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [98] = \$auto$demuxmap.cc:63:execute$15903  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [109] = \$auto$demuxmap.cc:63:execute$15906  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [120] = \$auto$demuxmap.cc:63:execute$15909  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [131] = \$auto$demuxmap.cc:63:execute$15912  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [142] = \$auto$demuxmap.cc:63:execute$15915  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [153] = \$auto$demuxmap.cc:63:execute$15918  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [164] = \$auto$demuxmap.cc:63:execute$15921  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [175] = \$auto$demuxmap.cc:63:execute$15924  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [186] = \$auto$demuxmap.cc:63:execute$15927  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [197] = \$auto$demuxmap.cc:63:execute$15930  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [208] = \$auto$demuxmap.cc:63:execute$15933  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [219] = \$auto$demuxmap.cc:63:execute$15936  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [230] = \$auto$demuxmap.cc:63:execute$15939  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [241] = \$auto$demuxmap.cc:63:execute$15942  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [252] = \$auto$demuxmap.cc:63:execute$15945  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [263] = \$auto$demuxmap.cc:63:execute$15948  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [274] = \$auto$demuxmap.cc:63:execute$15951  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [285] = \$auto$demuxmap.cc:63:execute$15954  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [296] = \$auto$demuxmap.cc:63:execute$15957  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [307] = \$auto$demuxmap.cc:63:execute$15960  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [318] = \$auto$demuxmap.cc:63:execute$15963  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [329] = \$auto$demuxmap.cc:63:execute$15966  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [340] = \$auto$demuxmap.cc:63:execute$15969  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [351] = \$auto$demuxmap.cc:63:execute$15972  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [362] = \$auto$demuxmap.cc:63:execute$15975  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [373] = \$auto$demuxmap.cc:63:execute$15978  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [384] = \$auto$demuxmap.cc:63:execute$15981  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [395] = \$auto$demuxmap.cc:63:execute$15984  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [406] = \$auto$demuxmap.cc:63:execute$15987  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [417] = \$auto$demuxmap.cc:63:execute$15990  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [428] = \$auto$demuxmap.cc:63:execute$15993  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [439] = \$auto$demuxmap.cc:63:execute$15996  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [450] = \$auto$demuxmap.cc:63:execute$15999  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [461] = \$auto$demuxmap.cc:63:execute$16002  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [472] = \$auto$demuxmap.cc:63:execute$16005  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [483] = \$auto$demuxmap.cc:63:execute$16008  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [494] = \$auto$demuxmap.cc:63:execute$16011  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [505] = \$auto$demuxmap.cc:63:execute$16014  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [516] = \$auto$demuxmap.cc:63:execute$16017  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [527] = \$auto$demuxmap.cc:63:execute$16020  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [538] = \$auto$demuxmap.cc:63:execute$16023  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [549] = \$auto$demuxmap.cc:63:execute$16026  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [560] = \$auto$demuxmap.cc:63:execute$16029  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [571] = \$auto$demuxmap.cc:63:execute$16032  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [582] = \$auto$demuxmap.cc:63:execute$16035  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [593] = \$auto$demuxmap.cc:63:execute$16038  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [604] = \$auto$demuxmap.cc:63:execute$16041  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [615] = \$auto$demuxmap.cc:63:execute$16044  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [626] = \$auto$demuxmap.cc:63:execute$16047  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [637] = \$auto$demuxmap.cc:63:execute$16050  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [648] = \$auto$demuxmap.cc:63:execute$16053  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [659] = \$auto$demuxmap.cc:63:execute$16056  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [670] = \$auto$demuxmap.cc:63:execute$16059  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [681] = \$auto$demuxmap.cc:63:execute$16062  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [692] = \$auto$demuxmap.cc:63:execute$16065  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [703] = \$auto$demuxmap.cc:63:execute$16068  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  (* src = "rtl/apb_uart/slib_fifo.sv:59.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iWRAddr <= 7'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14723 ) iWRAddr <= \$iWRAddr$17 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:124.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) USAGE <= 6'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14726 ) USAGE <= \$iUSAGE$56 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:59.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iRDAddr <= 7'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14729 ) iRDAddr <= \$iRDAddr$18 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[604:594] <= 11'h000;
    else if (\$25y ) iFIFOMem[604:594] <= \$32y [604:594];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[615:605] <= 11'h000;
    else if (\$25y ) iFIFOMem[615:605] <= \$32y [615:605];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[626:616] <= 11'h000;
    else if (\$25y ) iFIFOMem[626:616] <= \$32y [626:616];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[637:627] <= 11'h000;
    else if (\$25y ) iFIFOMem[637:627] <= \$32y [637:627];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[10:0] <= 11'h000;
    else if (\$25y ) iFIFOMem[10:0] <= \$32y [10:0];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[21:11] <= 11'h000;
    else if (\$25y ) iFIFOMem[21:11] <= \$32y [21:11];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[32:22] <= 11'h000;
    else if (\$25y ) iFIFOMem[32:22] <= \$32y [32:22];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[43:33] <= 11'h000;
    else if (\$25y ) iFIFOMem[43:33] <= \$32y [43:33];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[648:638] <= 11'h000;
    else if (\$25y ) iFIFOMem[648:638] <= \$32y [648:638];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[54:44] <= 11'h000;
    else if (\$25y ) iFIFOMem[54:44] <= \$32y [54:44];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[65:55] <= 11'h000;
    else if (\$25y ) iFIFOMem[65:55] <= \$32y [65:55];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[76:66] <= 11'h000;
    else if (\$25y ) iFIFOMem[76:66] <= \$32y [76:66];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[87:77] <= 11'h000;
    else if (\$25y ) iFIFOMem[87:77] <= \$32y [87:77];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[98:88] <= 11'h000;
    else if (\$25y ) iFIFOMem[98:88] <= \$32y [98:88];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[109:99] <= 11'h000;
    else if (\$25y ) iFIFOMem[109:99] <= \$32y [109:99];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[120:110] <= 11'h000;
    else if (\$25y ) iFIFOMem[120:110] <= \$32y [120:110];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[131:121] <= 11'h000;
    else if (\$25y ) iFIFOMem[131:121] <= \$32y [131:121];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[142:132] <= 11'h000;
    else if (\$25y ) iFIFOMem[142:132] <= \$32y [142:132];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[153:143] <= 11'h000;
    else if (\$25y ) iFIFOMem[153:143] <= \$32y [153:143];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[659:649] <= 11'h000;
    else if (\$25y ) iFIFOMem[659:649] <= \$32y [659:649];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[164:154] <= 11'h000;
    else if (\$25y ) iFIFOMem[164:154] <= \$32y [164:154];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[175:165] <= 11'h000;
    else if (\$25y ) iFIFOMem[175:165] <= \$32y [175:165];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[186:176] <= 11'h000;
    else if (\$25y ) iFIFOMem[186:176] <= \$32y [186:176];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[197:187] <= 11'h000;
    else if (\$25y ) iFIFOMem[197:187] <= \$32y [197:187];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[208:198] <= 11'h000;
    else if (\$25y ) iFIFOMem[208:198] <= \$32y [208:198];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[219:209] <= 11'h000;
    else if (\$25y ) iFIFOMem[219:209] <= \$32y [219:209];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[230:220] <= 11'h000;
    else if (\$25y ) iFIFOMem[230:220] <= \$32y [230:220];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[241:231] <= 11'h000;
    else if (\$25y ) iFIFOMem[241:231] <= \$32y [241:231];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[252:242] <= 11'h000;
    else if (\$25y ) iFIFOMem[252:242] <= \$32y [252:242];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[263:253] <= 11'h000;
    else if (\$25y ) iFIFOMem[263:253] <= \$32y [263:253];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[670:660] <= 11'h000;
    else if (\$25y ) iFIFOMem[670:660] <= \$32y [670:660];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[274:264] <= 11'h000;
    else if (\$25y ) iFIFOMem[274:264] <= \$32y [274:264];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[285:275] <= 11'h000;
    else if (\$25y ) iFIFOMem[285:275] <= \$32y [285:275];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[296:286] <= 11'h000;
    else if (\$25y ) iFIFOMem[296:286] <= \$32y [296:286];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[307:297] <= 11'h000;
    else if (\$25y ) iFIFOMem[307:297] <= \$32y [307:297];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[318:308] <= 11'h000;
    else if (\$25y ) iFIFOMem[318:308] <= \$32y [318:308];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[329:319] <= 11'h000;
    else if (\$25y ) iFIFOMem[329:319] <= \$32y [329:319];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[340:330] <= 11'h000;
    else if (\$25y ) iFIFOMem[340:330] <= \$32y [340:330];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[351:341] <= 11'h000;
    else if (\$25y ) iFIFOMem[351:341] <= \$32y [351:341];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[362:352] <= 11'h000;
    else if (\$25y ) iFIFOMem[362:352] <= \$32y [362:352];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[373:363] <= 11'h000;
    else if (\$25y ) iFIFOMem[373:363] <= \$32y [373:363];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[681:671] <= 11'h000;
    else if (\$25y ) iFIFOMem[681:671] <= \$32y [681:671];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[384:374] <= 11'h000;
    else if (\$25y ) iFIFOMem[384:374] <= \$32y [384:374];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[395:385] <= 11'h000;
    else if (\$25y ) iFIFOMem[395:385] <= \$32y [395:385];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[406:396] <= 11'h000;
    else if (\$25y ) iFIFOMem[406:396] <= \$32y [406:396];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[417:407] <= 11'h000;
    else if (\$25y ) iFIFOMem[417:407] <= \$32y [417:407];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[428:418] <= 11'h000;
    else if (\$25y ) iFIFOMem[428:418] <= \$32y [428:418];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[439:429] <= 11'h000;
    else if (\$25y ) iFIFOMem[439:429] <= \$32y [439:429];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[450:440] <= 11'h000;
    else if (\$25y ) iFIFOMem[450:440] <= \$32y [450:440];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[461:451] <= 11'h000;
    else if (\$25y ) iFIFOMem[461:451] <= \$32y [461:451];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[472:462] <= 11'h000;
    else if (\$25y ) iFIFOMem[472:462] <= \$32y [472:462];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[483:473] <= 11'h000;
    else if (\$25y ) iFIFOMem[483:473] <= \$32y [483:473];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[692:682] <= 11'h000;
    else if (\$25y ) iFIFOMem[692:682] <= \$32y [692:682];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[494:484] <= 11'h000;
    else if (\$25y ) iFIFOMem[494:484] <= \$32y [494:484];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[505:495] <= 11'h000;
    else if (\$25y ) iFIFOMem[505:495] <= \$32y [505:495];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[516:506] <= 11'h000;
    else if (\$25y ) iFIFOMem[516:506] <= \$32y [516:506];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[527:517] <= 11'h000;
    else if (\$25y ) iFIFOMem[527:517] <= \$32y [527:517];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[538:528] <= 11'h000;
    else if (\$25y ) iFIFOMem[538:528] <= \$32y [538:528];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[549:539] <= 11'h000;
    else if (\$25y ) iFIFOMem[549:539] <= \$32y [549:539];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[560:550] <= 11'h000;
    else if (\$25y ) iFIFOMem[560:550] <= \$32y [560:550];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[571:561] <= 11'h000;
    else if (\$25y ) iFIFOMem[571:561] <= \$32y [571:561];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[582:572] <= 11'h000;
    else if (\$25y ) iFIFOMem[582:572] <= \$32y [582:572];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[593:583] <= 11'h000;
    else if (\$25y ) iFIFOMem[593:583] <= \$32y [593:583];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[703:693] <= 11'h000;
    else if (\$25y ) iFIFOMem[703:693] <= \$32y [703:693];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14723  = | { CLEAR, \$25y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14726  = | { CLEAR, \$53y , \$46y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14729  = | { CLEAR, \$13y  };
  assign \$26y [5:0] = ~ iWRAddr[5:0];
  assign \$34y [5:0] = ~ iRDAddr[5:0];
  assign \$auto$rtlil.cc:3092:Mux$15030 [5] = ~ \$53y ;
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 11'h000;
    else Q <= \$36y ;
  (* src = "rtl/apb_uart/slib_fifo.sv:59.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) EMPTY <= 1'h1;
    else EMPTY <= \$19y ;
  assign \$iUSAGE$56  = CLEAR ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_fifo.sv:136.1-136.13|rtl/apb_uart/slib_fifo.sv:133.3-150.10" *) 6'h00 : \$auto$opt_share.cc:222:merge_operators$15028 ;
  assign \$iRDAddr$18  = CLEAR ? (* src = "rtl/apb_uart/slib_fifo.sv:82.11-87.10|rtl/apb_uart/slib_fifo.sv:81.1-87.10" *) 7'h00 : \$14y ;
  assign \$iWRAddr$17  = CLEAR ? (* src = "rtl/apb_uart/slib_fifo.sv:82.11-87.10|rtl/apb_uart/slib_fifo.sv:81.1-87.10" *) 7'h00 : \$9y [6:0];
  assign \$26y [6] = 1'h1;
  assign { \$31y [702:693], \$31y [691:682], \$31y [680:671], \$31y [669:660], \$31y [658:649], \$31y [647:638], \$31y [636:627], \$31y [625:616], \$31y [614:605], \$31y [603:594], \$31y [592:583], \$31y [581:572], \$31y [570:561], \$31y [559:550], \$31y [548:539], \$31y [537:528], \$31y [526:517], \$31y [515:506], \$31y [504:495], \$31y [493:484], \$31y [482:473], \$31y [471:462], \$31y [460:451], \$31y [449:440], \$31y [438:429], \$31y [427:418], \$31y [416:407], \$31y [405:396], \$31y [394:385], \$31y [383:374], \$31y [372:363], \$31y [361:352], \$31y [350:341], \$31y [339:330], \$31y [328:319], \$31y [317:308], \$31y [306:297], \$31y [295:286], \$31y [284:275], \$31y [273:264], \$31y [262:253], \$31y [251:242], \$31y [240:231], \$31y [229:220], \$31y [218:209], \$31y [207:198], \$31y [196:187], \$31y [185:176], \$31y [174:165], \$31y [163:154], \$31y [152:143], \$31y [141:132], \$31y [130:121], \$31y [119:110], \$31y [108:99], \$31y [97:88], \$31y [86:77], \$31y [75:66], \$31y [64:55], \$31y [53:44], \$31y [42:33], \$31y [31:22], \$31y [20:11], \$31y [9:0] } = { \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10] };
  assign \$34y [6] = 1'h1;
  assign \$auto$rtlil.cc:3092:Mux$15030 [4:0] = { \$auto$rtlil.cc:3092:Mux$15030 [5], \$auto$rtlil.cc:3092:Mux$15030 [5], \$auto$rtlil.cc:3092:Mux$15030 [5], \$auto$rtlil.cc:3092:Mux$15030 [5], 1'h1 };
  assign \$36y  = \$auto$bmuxmap.cc:84:execute$15684 ;
endmodule

(* src = "rtl/apb_uart/slib_fifo.sv:35.8" *)
module \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TXFF (CLK, D, FULL, Q, RST, CLEAR, WRITE, READ, EMPTY, USAGE);
  wire \$0y ;
  wire \$12y ;
  wire \$13y ;
  wire [6:0] \$14y ;
  wire \$19y ;
  wire \$1y ;
  wire \$24y ;
  wire \$25y ;
  wire [6:0] \$26y ;
  wire \$27y ;
  wire [511:0] \$31y ;
  wire [511:0] \$32y ;
  wire [6:0] \$34y ;
  wire [7:0] \$36y ;
  wire \$42y ;
  wire \$44y ;
  wire \$46y ;
  wire \$49y ;
  wire \$51y ;
  wire \$53y ;
  wire [6:0] \$9y ;
  wire [255:0] \$auto$bmuxmap.cc:84:execute$15686 ;
  wire [127:0] \$auto$bmuxmap.cc:84:execute$15719 ;
  wire [63:0] \$auto$bmuxmap.cc:84:execute$15736 ;
  wire [31:0] \$auto$bmuxmap.cc:84:execute$15745 ;
  wire [15:0] \$auto$bmuxmap.cc:84:execute$15750 ;
  wire [7:0] \$auto$bmuxmap.cc:84:execute$15753 ;
  wire \$auto$demuxmap.cc:63:execute$16071 ;
  wire \$auto$demuxmap.cc:63:execute$16074 ;
  wire \$auto$demuxmap.cc:63:execute$16077 ;
  wire \$auto$demuxmap.cc:63:execute$16080 ;
  wire \$auto$demuxmap.cc:63:execute$16083 ;
  wire \$auto$demuxmap.cc:63:execute$16086 ;
  wire \$auto$demuxmap.cc:63:execute$16089 ;
  wire \$auto$demuxmap.cc:63:execute$16092 ;
  wire \$auto$demuxmap.cc:63:execute$16095 ;
  wire \$auto$demuxmap.cc:63:execute$16098 ;
  wire \$auto$demuxmap.cc:63:execute$16101 ;
  wire \$auto$demuxmap.cc:63:execute$16104 ;
  wire \$auto$demuxmap.cc:63:execute$16107 ;
  wire \$auto$demuxmap.cc:63:execute$16110 ;
  wire \$auto$demuxmap.cc:63:execute$16113 ;
  wire \$auto$demuxmap.cc:63:execute$16116 ;
  wire \$auto$demuxmap.cc:63:execute$16119 ;
  wire \$auto$demuxmap.cc:63:execute$16122 ;
  wire \$auto$demuxmap.cc:63:execute$16125 ;
  wire \$auto$demuxmap.cc:63:execute$16128 ;
  wire \$auto$demuxmap.cc:63:execute$16131 ;
  wire \$auto$demuxmap.cc:63:execute$16134 ;
  wire \$auto$demuxmap.cc:63:execute$16137 ;
  wire \$auto$demuxmap.cc:63:execute$16140 ;
  wire \$auto$demuxmap.cc:63:execute$16143 ;
  wire \$auto$demuxmap.cc:63:execute$16146 ;
  wire \$auto$demuxmap.cc:63:execute$16149 ;
  wire \$auto$demuxmap.cc:63:execute$16152 ;
  wire \$auto$demuxmap.cc:63:execute$16155 ;
  wire \$auto$demuxmap.cc:63:execute$16158 ;
  wire \$auto$demuxmap.cc:63:execute$16161 ;
  wire \$auto$demuxmap.cc:63:execute$16164 ;
  wire \$auto$demuxmap.cc:63:execute$16167 ;
  wire \$auto$demuxmap.cc:63:execute$16170 ;
  wire \$auto$demuxmap.cc:63:execute$16173 ;
  wire \$auto$demuxmap.cc:63:execute$16176 ;
  wire \$auto$demuxmap.cc:63:execute$16179 ;
  wire \$auto$demuxmap.cc:63:execute$16182 ;
  wire \$auto$demuxmap.cc:63:execute$16185 ;
  wire \$auto$demuxmap.cc:63:execute$16188 ;
  wire \$auto$demuxmap.cc:63:execute$16191 ;
  wire \$auto$demuxmap.cc:63:execute$16194 ;
  wire \$auto$demuxmap.cc:63:execute$16197 ;
  wire \$auto$demuxmap.cc:63:execute$16200 ;
  wire \$auto$demuxmap.cc:63:execute$16203 ;
  wire \$auto$demuxmap.cc:63:execute$16206 ;
  wire \$auto$demuxmap.cc:63:execute$16209 ;
  wire \$auto$demuxmap.cc:63:execute$16212 ;
  wire \$auto$demuxmap.cc:63:execute$16215 ;
  wire \$auto$demuxmap.cc:63:execute$16218 ;
  wire \$auto$demuxmap.cc:63:execute$16221 ;
  wire \$auto$demuxmap.cc:63:execute$16224 ;
  wire \$auto$demuxmap.cc:63:execute$16227 ;
  wire \$auto$demuxmap.cc:63:execute$16230 ;
  wire \$auto$demuxmap.cc:63:execute$16233 ;
  wire \$auto$demuxmap.cc:63:execute$16236 ;
  wire \$auto$demuxmap.cc:63:execute$16239 ;
  wire \$auto$demuxmap.cc:63:execute$16242 ;
  wire \$auto$demuxmap.cc:63:execute$16245 ;
  wire \$auto$demuxmap.cc:63:execute$16248 ;
  wire \$auto$demuxmap.cc:63:execute$16251 ;
  wire \$auto$demuxmap.cc:63:execute$16254 ;
  wire \$auto$demuxmap.cc:63:execute$16257 ;
  wire \$auto$demuxmap.cc:63:execute$16260 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14796 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14799 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14802 ;
  wire [5:0] \$auto$opt_share.cc:222:merge_operators$15033 ;
  wire [5:0] \$auto$rtlil.cc:3092:Mux$15035 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:81.1-87.10" *)
  wire [6:0] \$iRDAddr$18 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:133.3-150.10" *)
  wire [5:0] \$iUSAGE$56 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:81.1-87.10" *)
  wire [6:0] \$iWRAddr$17 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:38.14" *)
  input CLEAR;
  wire CLEAR;
  (* src = "rtl/apb_uart/slib_fifo.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_fifo.sv:41.28" *)
  input [7:0] D;
  wire [7:0] D;
  (* src = "rtl/apb_uart/slib_fifo.sv:43.16" *)
  output EMPTY;
  reg EMPTY;
  (* src = "rtl/apb_uart/slib_fifo.sv:44.16" *)
  output FULL;
  wire FULL;
  (* src = "rtl/apb_uart/slib_fifo.sv:42.30" *)
  output [7:0] Q;
  reg [7:0] Q;
  (* src = "rtl/apb_uart/slib_fifo.sv:40.14" *)
  input READ;
  wire READ;
  (* src = "rtl/apb_uart/slib_fifo.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_fifo.sv:45.31" *)
  output [5:0] USAGE;
  reg [5:0] USAGE;
  (* src = "rtl/apb_uart/slib_fifo.sv:39.14" *)
  input WRITE;
  wire WRITE;
  (* src = "rtl/apb_uart/slib_fifo.sv:55.17" *)
  reg [511:0] iFIFOMem;
  (* src = "rtl/apb_uart/slib_fifo.sv:52.16" *)
  reg [6:0] iRDAddr;
  (* src = "rtl/apb_uart/slib_fifo.sv:51.16" *)
  reg [6:0] iWRAddr;
  assign \$0y  = iRDAddr[5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:57.25-57.72" *) iWRAddr[5:0];
  assign \$1y  = iRDAddr[6] != (* src = "rtl/apb_uart/slib_fifo.sv:57.79-57.113" *) iWRAddr[6];
  assign \$12y  = ~ (* src = "rtl/apb_uart/slib_fifo.sv:76.23-76.38" *) EMPTY;
  assign \$13y  = READ && (* src = "rtl/apb_uart/slib_fifo.sv:76.6-76.38" *) \$12y ;
  assign \$14y  = iRDAddr + (* src = "rtl/apb_uart/slib_fifo.sv:78.18-78.29" *) 1'h1;
  assign \$19y  = iRDAddr == (* src = "rtl/apb_uart/slib_fifo.sv:89.6-89.24" *) iWRAddr;
  assign FULL = \$0y  && (* src = "rtl/apb_uart/slib_fifo.sv:57.24-57.114" *) \$1y ;
  assign \$24y  = ~ (* src = "rtl/apb_uart/slib_fifo.sv:113.26-113.40" *) FULL;
  assign \$25y  = WRITE && (* src = "rtl/apb_uart/slib_fifo.sv:113.8-113.40" *) \$24y ;
  assign \$27y  = $signed({ 1'h1, \$26y [5:0] }) >= (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) $signed(7'h40);
  (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *)
  \$bwmux  #(
    .WIDTH(32'd512)
  ) \$32  (
    .A(iFIFOMem),
    .B({ D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D }),
    .S({ \$31y [511], \$31y [511], \$31y [511], \$31y [511], \$31y [511], \$31y [511], \$31y [511], \$31y [511], \$31y [503], \$31y [503], \$31y [503], \$31y [503], \$31y [503], \$31y [503], \$31y [503], \$31y [503], \$31y [495], \$31y [495], \$31y [495], \$31y [495], \$31y [495], \$31y [495], \$31y [495], \$31y [495], \$31y [487], \$31y [487], \$31y [487], \$31y [487], \$31y [487], \$31y [487], \$31y [487], \$31y [487], \$31y [479], \$31y [479], \$31y [479], \$31y [479], \$31y [479], \$31y [479], \$31y [479], \$31y [479], \$31y [471], \$31y [471], \$31y [471], \$31y [471], \$31y [471], \$31y [471], \$31y [471], \$31y [471], \$31y [463], \$31y [463], \$31y [463], \$31y [463], \$31y [463], \$31y [463], \$31y [463], \$31y [463], \$31y [455], \$31y [455], \$31y [455], \$31y [455], \$31y [455], \$31y [455], \$31y [455], \$31y [455], \$31y [447], \$31y [447], \$31y [447], \$31y [447], \$31y [447], \$31y [447], \$31y [447], \$31y [447], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [431], \$31y [431], \$31y [431], \$31y [431], \$31y [431], \$31y [431], \$31y [431], \$31y [431], \$31y [423], \$31y [423], \$31y [423], \$31y [423], \$31y [423], \$31y [423], \$31y [423], \$31y [423], \$31y [415], \$31y [415], \$31y [415], \$31y [415], \$31y [415], \$31y [415], \$31y [415], \$31y [415], \$31y [407], \$31y [407], \$31y [407], \$31y [407], \$31y [407], \$31y [407], \$31y [407], \$31y [407], \$31y [399], \$31y [399], \$31y [399], \$31y [399], \$31y [399], \$31y [399], \$31y [399], \$31y [399], \$31y [391], \$31y [391], \$31y [391], \$31y [391], \$31y [391], \$31y [391], \$31y [391], \$31y [391], \$31y [383], \$31y [383], \$31y [383], \$31y [383], \$31y [383], \$31y [383], \$31y [383], \$31y [383], \$31y [375], \$31y [375], \$31y [375], \$31y [375], \$31y [375], \$31y [375], \$31y [375], \$31y [375], \$31y [367], \$31y [367], \$31y [367], \$31y [367], \$31y [367], \$31y [367], \$31y [367], \$31y [367], \$31y [359], \$31y [359], \$31y [359], \$31y [359], \$31y [359], \$31y [359], \$31y [359], \$31y [359], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [343], \$31y [343], \$31y [343], \$31y [343], \$31y [343], \$31y [343], \$31y [343], \$31y [343], \$31y [335], \$31y [335], \$31y [335], \$31y [335], \$31y [335], \$31y [335], \$31y [335], \$31y [335], \$31y [327], \$31y [327], \$31y [327], \$31y [327], \$31y [327], \$31y [327], \$31y [327], \$31y [327], \$31y [319], \$31y [319], \$31y [319], \$31y [319], \$31y [319], \$31y [319], \$31y [319], \$31y [319], \$31y [311], \$31y [311], \$31y [311], \$31y [311], \$31y [311], \$31y [311], \$31y [311], \$31y [311], \$31y [303], \$31y [303], \$31y [303], \$31y [303], \$31y [303], \$31y [303], \$31y [303], \$31y [303], \$31y [295], \$31y [295], \$31y [295], \$31y [295], \$31y [295], \$31y [295], \$31y [295], \$31y [295], \$31y [287], \$31y [287], \$31y [287], \$31y [287], \$31y [287], \$31y [287], \$31y [287], \$31y [287], \$31y [279], \$31y [279], \$31y [279], \$31y [279], \$31y [279], \$31y [279], \$31y [279], \$31y [279], \$31y [271], \$31y [271], \$31y [271], \$31y [271], \$31y [271], \$31y [271], \$31y [271], \$31y [271], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [255], \$31y [255], \$31y [255], \$31y [255], \$31y [255], \$31y [255], \$31y [255], \$31y [255], \$31y [247], \$31y [247], \$31y [247], \$31y [247], \$31y [247], \$31y [247], \$31y [247], \$31y [247], \$31y [239], \$31y [239], \$31y [239], \$31y [239], \$31y [239], \$31y [239], \$31y [239], \$31y [239], \$31y [231], \$31y [231], \$31y [231], \$31y [231], \$31y [231], \$31y [231], \$31y [231], \$31y [231], \$31y [223], \$31y [223], \$31y [223], \$31y [223], \$31y [223], \$31y [223], \$31y [223], \$31y [223], \$31y [215], \$31y [215], \$31y [215], \$31y [215], \$31y [215], \$31y [215], \$31y [215], \$31y [215], \$31y [207], \$31y [207], \$31y [207], \$31y [207], \$31y [207], \$31y [207], \$31y [207], \$31y [207], \$31y [199], \$31y [199], \$31y [199], \$31y [199], \$31y [199], \$31y [199], \$31y [199], \$31y [199], \$31y [191], \$31y [191], \$31y [191], \$31y [191], \$31y [191], \$31y [191], \$31y [191], \$31y [191], \$31y [183], \$31y [183], \$31y [183], \$31y [183], \$31y [183], \$31y [183], \$31y [183], \$31y [183], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [167], \$31y [167], \$31y [167], \$31y [167], \$31y [167], \$31y [167], \$31y [167], \$31y [167], \$31y [159], \$31y [159], \$31y [159], \$31y [159], \$31y [159], \$31y [159], \$31y [159], \$31y [159], \$31y [151], \$31y [151], \$31y [151], \$31y [151], \$31y [151], \$31y [151], \$31y [151], \$31y [151], \$31y [143], \$31y [143], \$31y [143], \$31y [143], \$31y [143], \$31y [143], \$31y [143], \$31y [143], \$31y [135], \$31y [135], \$31y [135], \$31y [135], \$31y [135], \$31y [135], \$31y [135], \$31y [135], \$31y [127], \$31y [127], \$31y [127], \$31y [127], \$31y [127], \$31y [127], \$31y [127], \$31y [127], \$31y [119], \$31y [119], \$31y [119], \$31y [119], \$31y [119], \$31y [119], \$31y [119], \$31y [119], \$31y [111], \$31y [111], \$31y [111], \$31y [111], \$31y [111], \$31y [111], \$31y [111], \$31y [111], \$31y [103], \$31y [103], \$31y [103], \$31y [103], \$31y [103], \$31y [103], \$31y [103], \$31y [103], \$31y [95], \$31y [95], \$31y [95], \$31y [95], \$31y [95], \$31y [95], \$31y [95], \$31y [95], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [79], \$31y [79], \$31y [79], \$31y [79], \$31y [79], \$31y [79], \$31y [79], \$31y [79], \$31y [71], \$31y [71], \$31y [71], \$31y [71], \$31y [71], \$31y [71], \$31y [71], \$31y [71], \$31y [63], \$31y [63], \$31y [63], \$31y [63], \$31y [63], \$31y [63], \$31y [63], \$31y [63], \$31y [55], \$31y [55], \$31y [55], \$31y [55], \$31y [55], \$31y [55], \$31y [55], \$31y [55], \$31y [47], \$31y [47], \$31y [47], \$31y [47], \$31y [47], \$31y [47], \$31y [47], \$31y [47], \$31y [39], \$31y [39], \$31y [39], \$31y [39], \$31y [39], \$31y [39], \$31y [39], \$31y [39], \$31y [31], \$31y [31], \$31y [31], \$31y [31], \$31y [31], \$31y [31], \$31y [31], \$31y [31], \$31y [23], \$31y [23], \$31y [23], \$31y [23], \$31y [23], \$31y [23], \$31y [23], \$31y [23], \$31y [15], \$31y [15], \$31y [15], \$31y [15], \$31y [15], \$31y [15], \$31y [15], \$31y [15], \$31y [7], \$31y [7], \$31y [7], \$31y [7], \$31y [7], \$31y [7], \$31y [7], \$31y [7] }),
    .Y(\$32y )
  );
  assign \$42y  = ~ (* src = "rtl/apb_uart/slib_fifo.sv:140.13-140.26" *) READ;
  assign \$44y  = \$42y  && (* src = "rtl/apb_uart/slib_fifo.sv:140.13-140.44" *) WRITE;
  assign \$46y  = \$44y  && (* src = "rtl/apb_uart/slib_fifo.sv:140.12-140.63" *) \$24y ;
  assign \$49y  = ~ (* src = "rtl/apb_uart/slib_fifo.sv:145.7-145.21" *) WRITE;
  assign \$51y  = \$49y  && (* src = "rtl/apb_uart/slib_fifo.sv:145.7-145.38" *) READ;
  assign \$53y  = \$51y  && (* src = "rtl/apb_uart/slib_fifo.sv:145.6-145.58" *) \$12y ;
  assign \$auto$opt_share.cc:222:merge_operators$15033  = USAGE - (* src = "rtl/apb_uart/slib_fifo.sv:147.21-147.31" *) { \$auto$rtlil.cc:3092:Mux$15035 [5], \$auto$rtlil.cc:3092:Mux$15035 [5], \$auto$rtlil.cc:3092:Mux$15035 [5], \$auto$rtlil.cc:3092:Mux$15035 [5], \$auto$rtlil.cc:3092:Mux$15035 [5], 1'h1 };
  assign \$9y  = iWRAddr + (* src = "rtl/apb_uart/slib_fifo.sv:73.18-73.29" *) 1'h1;
  assign \$auto$bmuxmap.cc:84:execute$15686 [7:0] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[15:8] : iFIFOMem[7:0];
  assign \$auto$bmuxmap.cc:84:execute$15686 [15:8] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[31:24] : iFIFOMem[23:16];
  assign \$auto$bmuxmap.cc:84:execute$15686 [23:16] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[47:40] : iFIFOMem[39:32];
  assign \$auto$bmuxmap.cc:84:execute$15686 [31:24] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[63:56] : iFIFOMem[55:48];
  assign \$auto$bmuxmap.cc:84:execute$15686 [39:32] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[79:72] : iFIFOMem[71:64];
  assign \$auto$bmuxmap.cc:84:execute$15686 [47:40] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[95:88] : iFIFOMem[87:80];
  assign \$auto$bmuxmap.cc:84:execute$15686 [55:48] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[111:104] : iFIFOMem[103:96];
  assign \$auto$bmuxmap.cc:84:execute$15686 [63:56] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[127:120] : iFIFOMem[119:112];
  assign \$auto$bmuxmap.cc:84:execute$15686 [71:64] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[143:136] : iFIFOMem[135:128];
  assign \$auto$bmuxmap.cc:84:execute$15686 [79:72] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[159:152] : iFIFOMem[151:144];
  assign \$auto$bmuxmap.cc:84:execute$15686 [87:80] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[175:168] : iFIFOMem[167:160];
  assign \$auto$bmuxmap.cc:84:execute$15686 [95:88] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[191:184] : iFIFOMem[183:176];
  assign \$auto$bmuxmap.cc:84:execute$15686 [103:96] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[207:200] : iFIFOMem[199:192];
  assign \$auto$bmuxmap.cc:84:execute$15686 [111:104] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[223:216] : iFIFOMem[215:208];
  assign \$auto$bmuxmap.cc:84:execute$15686 [119:112] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[239:232] : iFIFOMem[231:224];
  assign \$auto$bmuxmap.cc:84:execute$15686 [127:120] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[255:248] : iFIFOMem[247:240];
  assign \$auto$bmuxmap.cc:84:execute$15686 [135:128] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[271:264] : iFIFOMem[263:256];
  assign \$auto$bmuxmap.cc:84:execute$15686 [143:136] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[287:280] : iFIFOMem[279:272];
  assign \$auto$bmuxmap.cc:84:execute$15686 [151:144] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[303:296] : iFIFOMem[295:288];
  assign \$auto$bmuxmap.cc:84:execute$15686 [159:152] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[319:312] : iFIFOMem[311:304];
  assign \$auto$bmuxmap.cc:84:execute$15686 [167:160] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[335:328] : iFIFOMem[327:320];
  assign \$auto$bmuxmap.cc:84:execute$15686 [175:168] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[351:344] : iFIFOMem[343:336];
  assign \$auto$bmuxmap.cc:84:execute$15686 [183:176] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[367:360] : iFIFOMem[359:352];
  assign \$auto$bmuxmap.cc:84:execute$15686 [191:184] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[383:376] : iFIFOMem[375:368];
  assign \$auto$bmuxmap.cc:84:execute$15686 [199:192] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[399:392] : iFIFOMem[391:384];
  assign \$auto$bmuxmap.cc:84:execute$15686 [207:200] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[415:408] : iFIFOMem[407:400];
  assign \$auto$bmuxmap.cc:84:execute$15686 [215:208] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[431:424] : iFIFOMem[423:416];
  assign \$auto$bmuxmap.cc:84:execute$15686 [223:216] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[447:440] : iFIFOMem[439:432];
  assign \$auto$bmuxmap.cc:84:execute$15686 [231:224] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[463:456] : iFIFOMem[455:448];
  assign \$auto$bmuxmap.cc:84:execute$15686 [239:232] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[479:472] : iFIFOMem[471:464];
  assign \$auto$bmuxmap.cc:84:execute$15686 [247:240] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[495:488] : iFIFOMem[487:480];
  assign \$auto$bmuxmap.cc:84:execute$15686 [255:248] = \$34y [0] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) iFIFOMem[511:504] : iFIFOMem[503:496];
  assign \$auto$bmuxmap.cc:84:execute$15719 [7:0] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15686 [15:8] : \$auto$bmuxmap.cc:84:execute$15686 [7:0];
  assign \$auto$bmuxmap.cc:84:execute$15719 [15:8] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15686 [31:24] : \$auto$bmuxmap.cc:84:execute$15686 [23:16];
  assign \$auto$bmuxmap.cc:84:execute$15719 [23:16] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15686 [47:40] : \$auto$bmuxmap.cc:84:execute$15686 [39:32];
  assign \$auto$bmuxmap.cc:84:execute$15719 [31:24] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15686 [63:56] : \$auto$bmuxmap.cc:84:execute$15686 [55:48];
  assign \$auto$bmuxmap.cc:84:execute$15719 [39:32] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15686 [79:72] : \$auto$bmuxmap.cc:84:execute$15686 [71:64];
  assign \$auto$bmuxmap.cc:84:execute$15719 [47:40] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15686 [95:88] : \$auto$bmuxmap.cc:84:execute$15686 [87:80];
  assign \$auto$bmuxmap.cc:84:execute$15719 [55:48] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15686 [111:104] : \$auto$bmuxmap.cc:84:execute$15686 [103:96];
  assign \$auto$bmuxmap.cc:84:execute$15719 [63:56] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15686 [127:120] : \$auto$bmuxmap.cc:84:execute$15686 [119:112];
  assign \$auto$bmuxmap.cc:84:execute$15719 [71:64] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15686 [143:136] : \$auto$bmuxmap.cc:84:execute$15686 [135:128];
  assign \$auto$bmuxmap.cc:84:execute$15719 [79:72] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15686 [159:152] : \$auto$bmuxmap.cc:84:execute$15686 [151:144];
  assign \$auto$bmuxmap.cc:84:execute$15719 [87:80] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15686 [175:168] : \$auto$bmuxmap.cc:84:execute$15686 [167:160];
  assign \$auto$bmuxmap.cc:84:execute$15719 [95:88] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15686 [191:184] : \$auto$bmuxmap.cc:84:execute$15686 [183:176];
  assign \$auto$bmuxmap.cc:84:execute$15719 [103:96] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15686 [207:200] : \$auto$bmuxmap.cc:84:execute$15686 [199:192];
  assign \$auto$bmuxmap.cc:84:execute$15719 [111:104] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15686 [223:216] : \$auto$bmuxmap.cc:84:execute$15686 [215:208];
  assign \$auto$bmuxmap.cc:84:execute$15719 [119:112] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15686 [239:232] : \$auto$bmuxmap.cc:84:execute$15686 [231:224];
  assign \$auto$bmuxmap.cc:84:execute$15719 [127:120] = \$34y [1] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15686 [255:248] : \$auto$bmuxmap.cc:84:execute$15686 [247:240];
  assign \$auto$bmuxmap.cc:84:execute$15736 [7:0] = \$34y [2] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15719 [15:8] : \$auto$bmuxmap.cc:84:execute$15719 [7:0];
  assign \$auto$bmuxmap.cc:84:execute$15736 [15:8] = \$34y [2] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15719 [31:24] : \$auto$bmuxmap.cc:84:execute$15719 [23:16];
  assign \$auto$bmuxmap.cc:84:execute$15736 [23:16] = \$34y [2] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15719 [47:40] : \$auto$bmuxmap.cc:84:execute$15719 [39:32];
  assign \$auto$bmuxmap.cc:84:execute$15736 [31:24] = \$34y [2] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15719 [63:56] : \$auto$bmuxmap.cc:84:execute$15719 [55:48];
  assign \$auto$bmuxmap.cc:84:execute$15736 [39:32] = \$34y [2] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15719 [79:72] : \$auto$bmuxmap.cc:84:execute$15719 [71:64];
  assign \$auto$bmuxmap.cc:84:execute$15736 [47:40] = \$34y [2] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15719 [95:88] : \$auto$bmuxmap.cc:84:execute$15719 [87:80];
  assign \$auto$bmuxmap.cc:84:execute$15736 [55:48] = \$34y [2] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15719 [111:104] : \$auto$bmuxmap.cc:84:execute$15719 [103:96];
  assign \$auto$bmuxmap.cc:84:execute$15736 [63:56] = \$34y [2] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15719 [127:120] : \$auto$bmuxmap.cc:84:execute$15719 [119:112];
  assign \$auto$bmuxmap.cc:84:execute$15745 [7:0] = \$34y [3] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15736 [15:8] : \$auto$bmuxmap.cc:84:execute$15736 [7:0];
  assign \$auto$bmuxmap.cc:84:execute$15745 [15:8] = \$34y [3] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15736 [31:24] : \$auto$bmuxmap.cc:84:execute$15736 [23:16];
  assign \$auto$bmuxmap.cc:84:execute$15745 [23:16] = \$34y [3] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15736 [47:40] : \$auto$bmuxmap.cc:84:execute$15736 [39:32];
  assign \$auto$bmuxmap.cc:84:execute$15745 [31:24] = \$34y [3] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15736 [63:56] : \$auto$bmuxmap.cc:84:execute$15736 [55:48];
  assign \$auto$bmuxmap.cc:84:execute$15750 [7:0] = \$34y [4] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15745 [15:8] : \$auto$bmuxmap.cc:84:execute$15745 [7:0];
  assign \$auto$bmuxmap.cc:84:execute$15750 [15:8] = \$34y [4] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15745 [31:24] : \$auto$bmuxmap.cc:84:execute$15745 [23:16];
  assign \$auto$bmuxmap.cc:84:execute$15753  = \$34y [5] ? (* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" *) \$auto$bmuxmap.cc:84:execute$15750 [15:8] : \$auto$bmuxmap.cc:84:execute$15750 [7:0];
  assign \$auto$demuxmap.cc:63:execute$16071  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h00;
  assign \$auto$demuxmap.cc:63:execute$16074  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h01;
  assign \$auto$demuxmap.cc:63:execute$16077  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h02;
  assign \$auto$demuxmap.cc:63:execute$16080  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h03;
  assign \$auto$demuxmap.cc:63:execute$16083  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h04;
  assign \$auto$demuxmap.cc:63:execute$16086  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h05;
  assign \$auto$demuxmap.cc:63:execute$16089  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h06;
  assign \$auto$demuxmap.cc:63:execute$16092  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h07;
  assign \$auto$demuxmap.cc:63:execute$16095  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h08;
  assign \$auto$demuxmap.cc:63:execute$16098  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h09;
  assign \$auto$demuxmap.cc:63:execute$16101  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h0a;
  assign \$auto$demuxmap.cc:63:execute$16104  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h0b;
  assign \$auto$demuxmap.cc:63:execute$16107  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h0c;
  assign \$auto$demuxmap.cc:63:execute$16110  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h0d;
  assign \$auto$demuxmap.cc:63:execute$16113  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h0e;
  assign \$auto$demuxmap.cc:63:execute$16116  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h0f;
  assign \$auto$demuxmap.cc:63:execute$16119  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h10;
  assign \$auto$demuxmap.cc:63:execute$16122  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h11;
  assign \$auto$demuxmap.cc:63:execute$16125  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h12;
  assign \$auto$demuxmap.cc:63:execute$16128  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h13;
  assign \$auto$demuxmap.cc:63:execute$16131  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h14;
  assign \$auto$demuxmap.cc:63:execute$16134  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h15;
  assign \$auto$demuxmap.cc:63:execute$16137  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h16;
  assign \$auto$demuxmap.cc:63:execute$16140  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h17;
  assign \$auto$demuxmap.cc:63:execute$16143  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h18;
  assign \$auto$demuxmap.cc:63:execute$16146  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h19;
  assign \$auto$demuxmap.cc:63:execute$16149  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h1a;
  assign \$auto$demuxmap.cc:63:execute$16152  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h1b;
  assign \$auto$demuxmap.cc:63:execute$16155  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h1c;
  assign \$auto$demuxmap.cc:63:execute$16158  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h1d;
  assign \$auto$demuxmap.cc:63:execute$16161  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h1e;
  assign \$auto$demuxmap.cc:63:execute$16164  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h1f;
  assign \$auto$demuxmap.cc:63:execute$16167  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h20;
  assign \$auto$demuxmap.cc:63:execute$16170  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h21;
  assign \$auto$demuxmap.cc:63:execute$16173  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h22;
  assign \$auto$demuxmap.cc:63:execute$16176  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h23;
  assign \$auto$demuxmap.cc:63:execute$16179  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h24;
  assign \$auto$demuxmap.cc:63:execute$16182  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h25;
  assign \$auto$demuxmap.cc:63:execute$16185  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h26;
  assign \$auto$demuxmap.cc:63:execute$16188  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h27;
  assign \$auto$demuxmap.cc:63:execute$16191  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h28;
  assign \$auto$demuxmap.cc:63:execute$16194  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h29;
  assign \$auto$demuxmap.cc:63:execute$16197  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h2a;
  assign \$auto$demuxmap.cc:63:execute$16200  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h2b;
  assign \$auto$demuxmap.cc:63:execute$16203  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h2c;
  assign \$auto$demuxmap.cc:63:execute$16206  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h2d;
  assign \$auto$demuxmap.cc:63:execute$16209  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h2e;
  assign \$auto$demuxmap.cc:63:execute$16212  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h2f;
  assign \$auto$demuxmap.cc:63:execute$16215  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h30;
  assign \$auto$demuxmap.cc:63:execute$16218  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h31;
  assign \$auto$demuxmap.cc:63:execute$16221  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h32;
  assign \$auto$demuxmap.cc:63:execute$16224  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h33;
  assign \$auto$demuxmap.cc:63:execute$16227  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h34;
  assign \$auto$demuxmap.cc:63:execute$16230  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h35;
  assign \$auto$demuxmap.cc:63:execute$16233  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h36;
  assign \$auto$demuxmap.cc:63:execute$16236  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h37;
  assign \$auto$demuxmap.cc:63:execute$16239  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h38;
  assign \$auto$demuxmap.cc:63:execute$16242  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h39;
  assign \$auto$demuxmap.cc:63:execute$16245  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h3a;
  assign \$auto$demuxmap.cc:63:execute$16248  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h3b;
  assign \$auto$demuxmap.cc:63:execute$16251  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h3c;
  assign \$auto$demuxmap.cc:63:execute$16254  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h3d;
  assign \$auto$demuxmap.cc:63:execute$16257  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h3e;
  assign \$auto$demuxmap.cc:63:execute$16260  = \$26y [5:0] == (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) 6'h3f;
  assign \$31y [7] = \$auto$demuxmap.cc:63:execute$16071  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [15] = \$auto$demuxmap.cc:63:execute$16074  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [23] = \$auto$demuxmap.cc:63:execute$16077  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [31] = \$auto$demuxmap.cc:63:execute$16080  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [39] = \$auto$demuxmap.cc:63:execute$16083  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [47] = \$auto$demuxmap.cc:63:execute$16086  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [55] = \$auto$demuxmap.cc:63:execute$16089  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [63] = \$auto$demuxmap.cc:63:execute$16092  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [71] = \$auto$demuxmap.cc:63:execute$16095  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [79] = \$auto$demuxmap.cc:63:execute$16098  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [87] = \$auto$demuxmap.cc:63:execute$16101  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [95] = \$auto$demuxmap.cc:63:execute$16104  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [103] = \$auto$demuxmap.cc:63:execute$16107  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [111] = \$auto$demuxmap.cc:63:execute$16110  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [119] = \$auto$demuxmap.cc:63:execute$16113  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [127] = \$auto$demuxmap.cc:63:execute$16116  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [135] = \$auto$demuxmap.cc:63:execute$16119  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [143] = \$auto$demuxmap.cc:63:execute$16122  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [151] = \$auto$demuxmap.cc:63:execute$16125  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [159] = \$auto$demuxmap.cc:63:execute$16128  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [167] = \$auto$demuxmap.cc:63:execute$16131  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [175] = \$auto$demuxmap.cc:63:execute$16134  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [183] = \$auto$demuxmap.cc:63:execute$16137  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [191] = \$auto$demuxmap.cc:63:execute$16140  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [199] = \$auto$demuxmap.cc:63:execute$16143  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [207] = \$auto$demuxmap.cc:63:execute$16146  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [215] = \$auto$demuxmap.cc:63:execute$16149  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [223] = \$auto$demuxmap.cc:63:execute$16152  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [231] = \$auto$demuxmap.cc:63:execute$16155  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [239] = \$auto$demuxmap.cc:63:execute$16158  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [247] = \$auto$demuxmap.cc:63:execute$16161  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [255] = \$auto$demuxmap.cc:63:execute$16164  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [263] = \$auto$demuxmap.cc:63:execute$16167  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [271] = \$auto$demuxmap.cc:63:execute$16170  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [279] = \$auto$demuxmap.cc:63:execute$16173  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [287] = \$auto$demuxmap.cc:63:execute$16176  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [295] = \$auto$demuxmap.cc:63:execute$16179  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [303] = \$auto$demuxmap.cc:63:execute$16182  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [311] = \$auto$demuxmap.cc:63:execute$16185  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [319] = \$auto$demuxmap.cc:63:execute$16188  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [327] = \$auto$demuxmap.cc:63:execute$16191  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [335] = \$auto$demuxmap.cc:63:execute$16194  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [343] = \$auto$demuxmap.cc:63:execute$16197  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [351] = \$auto$demuxmap.cc:63:execute$16200  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [359] = \$auto$demuxmap.cc:63:execute$16203  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [367] = \$auto$demuxmap.cc:63:execute$16206  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [375] = \$auto$demuxmap.cc:63:execute$16209  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [383] = \$auto$demuxmap.cc:63:execute$16212  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [391] = \$auto$demuxmap.cc:63:execute$16215  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [399] = \$auto$demuxmap.cc:63:execute$16218  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [407] = \$auto$demuxmap.cc:63:execute$16221  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [415] = \$auto$demuxmap.cc:63:execute$16224  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [423] = \$auto$demuxmap.cc:63:execute$16227  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [431] = \$auto$demuxmap.cc:63:execute$16230  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [439] = \$auto$demuxmap.cc:63:execute$16233  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [447] = \$auto$demuxmap.cc:63:execute$16236  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [455] = \$auto$demuxmap.cc:63:execute$16239  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [463] = \$auto$demuxmap.cc:63:execute$16242  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [471] = \$auto$demuxmap.cc:63:execute$16245  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [479] = \$auto$demuxmap.cc:63:execute$16248  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [487] = \$auto$demuxmap.cc:63:execute$16251  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [495] = \$auto$demuxmap.cc:63:execute$16254  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [503] = \$auto$demuxmap.cc:63:execute$16257  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  assign \$31y [511] = \$auto$demuxmap.cc:63:execute$16260  ? (* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" *) \$27y  : 1'h0;
  (* src = "rtl/apb_uart/slib_fifo.sv:59.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iWRAddr <= 7'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14796 ) iWRAddr <= \$iWRAddr$17 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:124.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) USAGE <= 6'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14799 ) USAGE <= \$iUSAGE$56 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:59.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iRDAddr <= 7'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14802 ) iRDAddr <= \$iRDAddr$18 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[439:432] <= 8'h00;
    else if (\$25y ) iFIFOMem[439:432] <= \$32y [439:432];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[447:440] <= 8'h00;
    else if (\$25y ) iFIFOMem[447:440] <= \$32y [447:440];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[455:448] <= 8'h00;
    else if (\$25y ) iFIFOMem[455:448] <= \$32y [455:448];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[463:456] <= 8'h00;
    else if (\$25y ) iFIFOMem[463:456] <= \$32y [463:456];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[7:0] <= 8'h00;
    else if (\$25y ) iFIFOMem[7:0] <= \$32y [7:0];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[15:8] <= 8'h00;
    else if (\$25y ) iFIFOMem[15:8] <= \$32y [15:8];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[23:16] <= 8'h00;
    else if (\$25y ) iFIFOMem[23:16] <= \$32y [23:16];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[31:24] <= 8'h00;
    else if (\$25y ) iFIFOMem[31:24] <= \$32y [31:24];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[471:464] <= 8'h00;
    else if (\$25y ) iFIFOMem[471:464] <= \$32y [471:464];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[39:32] <= 8'h00;
    else if (\$25y ) iFIFOMem[39:32] <= \$32y [39:32];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[47:40] <= 8'h00;
    else if (\$25y ) iFIFOMem[47:40] <= \$32y [47:40];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[55:48] <= 8'h00;
    else if (\$25y ) iFIFOMem[55:48] <= \$32y [55:48];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[63:56] <= 8'h00;
    else if (\$25y ) iFIFOMem[63:56] <= \$32y [63:56];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[71:64] <= 8'h00;
    else if (\$25y ) iFIFOMem[71:64] <= \$32y [71:64];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[79:72] <= 8'h00;
    else if (\$25y ) iFIFOMem[79:72] <= \$32y [79:72];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[87:80] <= 8'h00;
    else if (\$25y ) iFIFOMem[87:80] <= \$32y [87:80];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[95:88] <= 8'h00;
    else if (\$25y ) iFIFOMem[95:88] <= \$32y [95:88];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[103:96] <= 8'h00;
    else if (\$25y ) iFIFOMem[103:96] <= \$32y [103:96];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[111:104] <= 8'h00;
    else if (\$25y ) iFIFOMem[111:104] <= \$32y [111:104];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[479:472] <= 8'h00;
    else if (\$25y ) iFIFOMem[479:472] <= \$32y [479:472];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[119:112] <= 8'h00;
    else if (\$25y ) iFIFOMem[119:112] <= \$32y [119:112];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[127:120] <= 8'h00;
    else if (\$25y ) iFIFOMem[127:120] <= \$32y [127:120];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[135:128] <= 8'h00;
    else if (\$25y ) iFIFOMem[135:128] <= \$32y [135:128];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[143:136] <= 8'h00;
    else if (\$25y ) iFIFOMem[143:136] <= \$32y [143:136];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[151:144] <= 8'h00;
    else if (\$25y ) iFIFOMem[151:144] <= \$32y [151:144];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[159:152] <= 8'h00;
    else if (\$25y ) iFIFOMem[159:152] <= \$32y [159:152];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[167:160] <= 8'h00;
    else if (\$25y ) iFIFOMem[167:160] <= \$32y [167:160];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[175:168] <= 8'h00;
    else if (\$25y ) iFIFOMem[175:168] <= \$32y [175:168];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[183:176] <= 8'h00;
    else if (\$25y ) iFIFOMem[183:176] <= \$32y [183:176];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[191:184] <= 8'h00;
    else if (\$25y ) iFIFOMem[191:184] <= \$32y [191:184];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[487:480] <= 8'h00;
    else if (\$25y ) iFIFOMem[487:480] <= \$32y [487:480];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[199:192] <= 8'h00;
    else if (\$25y ) iFIFOMem[199:192] <= \$32y [199:192];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[207:200] <= 8'h00;
    else if (\$25y ) iFIFOMem[207:200] <= \$32y [207:200];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[215:208] <= 8'h00;
    else if (\$25y ) iFIFOMem[215:208] <= \$32y [215:208];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[223:216] <= 8'h00;
    else if (\$25y ) iFIFOMem[223:216] <= \$32y [223:216];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[231:224] <= 8'h00;
    else if (\$25y ) iFIFOMem[231:224] <= \$32y [231:224];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[239:232] <= 8'h00;
    else if (\$25y ) iFIFOMem[239:232] <= \$32y [239:232];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[247:240] <= 8'h00;
    else if (\$25y ) iFIFOMem[247:240] <= \$32y [247:240];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[255:248] <= 8'h00;
    else if (\$25y ) iFIFOMem[255:248] <= \$32y [255:248];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[263:256] <= 8'h00;
    else if (\$25y ) iFIFOMem[263:256] <= \$32y [263:256];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[271:264] <= 8'h00;
    else if (\$25y ) iFIFOMem[271:264] <= \$32y [271:264];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[495:488] <= 8'h00;
    else if (\$25y ) iFIFOMem[495:488] <= \$32y [495:488];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[279:272] <= 8'h00;
    else if (\$25y ) iFIFOMem[279:272] <= \$32y [279:272];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[287:280] <= 8'h00;
    else if (\$25y ) iFIFOMem[287:280] <= \$32y [287:280];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[295:288] <= 8'h00;
    else if (\$25y ) iFIFOMem[295:288] <= \$32y [295:288];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[303:296] <= 8'h00;
    else if (\$25y ) iFIFOMem[303:296] <= \$32y [303:296];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[311:304] <= 8'h00;
    else if (\$25y ) iFIFOMem[311:304] <= \$32y [311:304];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[319:312] <= 8'h00;
    else if (\$25y ) iFIFOMem[319:312] <= \$32y [319:312];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[327:320] <= 8'h00;
    else if (\$25y ) iFIFOMem[327:320] <= \$32y [327:320];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[335:328] <= 8'h00;
    else if (\$25y ) iFIFOMem[335:328] <= \$32y [335:328];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[343:336] <= 8'h00;
    else if (\$25y ) iFIFOMem[343:336] <= \$32y [343:336];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[351:344] <= 8'h00;
    else if (\$25y ) iFIFOMem[351:344] <= \$32y [351:344];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[503:496] <= 8'h00;
    else if (\$25y ) iFIFOMem[503:496] <= \$32y [503:496];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[359:352] <= 8'h00;
    else if (\$25y ) iFIFOMem[359:352] <= \$32y [359:352];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[367:360] <= 8'h00;
    else if (\$25y ) iFIFOMem[367:360] <= \$32y [367:360];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[375:368] <= 8'h00;
    else if (\$25y ) iFIFOMem[375:368] <= \$32y [375:368];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[383:376] <= 8'h00;
    else if (\$25y ) iFIFOMem[383:376] <= \$32y [383:376];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[391:384] <= 8'h00;
    else if (\$25y ) iFIFOMem[391:384] <= \$32y [391:384];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[399:392] <= 8'h00;
    else if (\$25y ) iFIFOMem[399:392] <= \$32y [399:392];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[407:400] <= 8'h00;
    else if (\$25y ) iFIFOMem[407:400] <= \$32y [407:400];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[415:408] <= 8'h00;
    else if (\$25y ) iFIFOMem[415:408] <= \$32y [415:408];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[423:416] <= 8'h00;
    else if (\$25y ) iFIFOMem[423:416] <= \$32y [423:416];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[431:424] <= 8'h00;
    else if (\$25y ) iFIFOMem[431:424] <= \$32y [431:424];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[511:504] <= 8'h00;
    else if (\$25y ) iFIFOMem[511:504] <= \$32y [511:504];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14796  = | { CLEAR, \$25y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14799  = | { CLEAR, \$53y , \$46y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14802  = | { CLEAR, \$13y  };
  assign \$26y [5:0] = ~ iWRAddr[5:0];
  assign \$34y [5:0] = ~ iRDAddr[5:0];
  assign \$auto$rtlil.cc:3092:Mux$15035 [5] = ~ \$53y ;
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 8'h00;
    else Q <= \$36y ;
  (* src = "rtl/apb_uart/slib_fifo.sv:59.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) EMPTY <= 1'h1;
    else EMPTY <= \$19y ;
  assign \$iUSAGE$56  = CLEAR ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_fifo.sv:136.1-136.13|rtl/apb_uart/slib_fifo.sv:133.3-150.10" *) 6'h00 : \$auto$opt_share.cc:222:merge_operators$15033 ;
  assign \$iRDAddr$18  = CLEAR ? (* src = "rtl/apb_uart/slib_fifo.sv:82.11-87.10|rtl/apb_uart/slib_fifo.sv:81.1-87.10" *) 7'h00 : \$14y ;
  assign \$iWRAddr$17  = CLEAR ? (* src = "rtl/apb_uart/slib_fifo.sv:82.11-87.10|rtl/apb_uart/slib_fifo.sv:81.1-87.10" *) 7'h00 : \$9y ;
  assign \$26y [6] = 1'h1;
  assign { \$31y [510:504], \$31y [502:496], \$31y [494:488], \$31y [486:480], \$31y [478:472], \$31y [470:464], \$31y [462:456], \$31y [454:448], \$31y [446:440], \$31y [438:432], \$31y [430:424], \$31y [422:416], \$31y [414:408], \$31y [406:400], \$31y [398:392], \$31y [390:384], \$31y [382:376], \$31y [374:368], \$31y [366:360], \$31y [358:352], \$31y [350:344], \$31y [342:336], \$31y [334:328], \$31y [326:320], \$31y [318:312], \$31y [310:304], \$31y [302:296], \$31y [294:288], \$31y [286:280], \$31y [278:272], \$31y [270:264], \$31y [262:256], \$31y [254:248], \$31y [246:240], \$31y [238:232], \$31y [230:224], \$31y [222:216], \$31y [214:208], \$31y [206:200], \$31y [198:192], \$31y [190:184], \$31y [182:176], \$31y [174:168], \$31y [166:160], \$31y [158:152], \$31y [150:144], \$31y [142:136], \$31y [134:128], \$31y [126:120], \$31y [118:112], \$31y [110:104], \$31y [102:96], \$31y [94:88], \$31y [86:80], \$31y [78:72], \$31y [70:64], \$31y [62:56], \$31y [54:48], \$31y [46:40], \$31y [38:32], \$31y [30:24], \$31y [22:16], \$31y [14:8], \$31y [6:0] } = { \$31y [511], \$31y [511], \$31y [511], \$31y [511], \$31y [511], \$31y [511], \$31y [511], \$31y [503], \$31y [503], \$31y [503], \$31y [503], \$31y [503], \$31y [503], \$31y [503], \$31y [495], \$31y [495], \$31y [495], \$31y [495], \$31y [495], \$31y [495], \$31y [495], \$31y [487], \$31y [487], \$31y [487], \$31y [487], \$31y [487], \$31y [487], \$31y [487], \$31y [479], \$31y [479], \$31y [479], \$31y [479], \$31y [479], \$31y [479], \$31y [479], \$31y [471], \$31y [471], \$31y [471], \$31y [471], \$31y [471], \$31y [471], \$31y [471], \$31y [463], \$31y [463], \$31y [463], \$31y [463], \$31y [463], \$31y [463], \$31y [463], \$31y [455], \$31y [455], \$31y [455], \$31y [455], \$31y [455], \$31y [455], \$31y [455], \$31y [447], \$31y [447], \$31y [447], \$31y [447], \$31y [447], \$31y [447], \$31y [447], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [431], \$31y [431], \$31y [431], \$31y [431], \$31y [431], \$31y [431], \$31y [431], \$31y [423], \$31y [423], \$31y [423], \$31y [423], \$31y [423], \$31y [423], \$31y [423], \$31y [415], \$31y [415], \$31y [415], \$31y [415], \$31y [415], \$31y [415], \$31y [415], \$31y [407], \$31y [407], \$31y [407], \$31y [407], \$31y [407], \$31y [407], \$31y [407], \$31y [399], \$31y [399], \$31y [399], \$31y [399], \$31y [399], \$31y [399], \$31y [399], \$31y [391], \$31y [391], \$31y [391], \$31y [391], \$31y [391], \$31y [391], \$31y [391], \$31y [383], \$31y [383], \$31y [383], \$31y [383], \$31y [383], \$31y [383], \$31y [383], \$31y [375], \$31y [375], \$31y [375], \$31y [375], \$31y [375], \$31y [375], \$31y [375], \$31y [367], \$31y [367], \$31y [367], \$31y [367], \$31y [367], \$31y [367], \$31y [367], \$31y [359], \$31y [359], \$31y [359], \$31y [359], \$31y [359], \$31y [359], \$31y [359], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [343], \$31y [343], \$31y [343], \$31y [343], \$31y [343], \$31y [343], \$31y [343], \$31y [335], \$31y [335], \$31y [335], \$31y [335], \$31y [335], \$31y [335], \$31y [335], \$31y [327], \$31y [327], \$31y [327], \$31y [327], \$31y [327], \$31y [327], \$31y [327], \$31y [319], \$31y [319], \$31y [319], \$31y [319], \$31y [319], \$31y [319], \$31y [319], \$31y [311], \$31y [311], \$31y [311], \$31y [311], \$31y [311], \$31y [311], \$31y [311], \$31y [303], \$31y [303], \$31y [303], \$31y [303], \$31y [303], \$31y [303], \$31y [303], \$31y [295], \$31y [295], \$31y [295], \$31y [295], \$31y [295], \$31y [295], \$31y [295], \$31y [287], \$31y [287], \$31y [287], \$31y [287], \$31y [287], \$31y [287], \$31y [287], \$31y [279], \$31y [279], \$31y [279], \$31y [279], \$31y [279], \$31y [279], \$31y [279], \$31y [271], \$31y [271], \$31y [271], \$31y [271], \$31y [271], \$31y [271], \$31y [271], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [255], \$31y [255], \$31y [255], \$31y [255], \$31y [255], \$31y [255], \$31y [255], \$31y [247], \$31y [247], \$31y [247], \$31y [247], \$31y [247], \$31y [247], \$31y [247], \$31y [239], \$31y [239], \$31y [239], \$31y [239], \$31y [239], \$31y [239], \$31y [239], \$31y [231], \$31y [231], \$31y [231], \$31y [231], \$31y [231], \$31y [231], \$31y [231], \$31y [223], \$31y [223], \$31y [223], \$31y [223], \$31y [223], \$31y [223], \$31y [223], \$31y [215], \$31y [215], \$31y [215], \$31y [215], \$31y [215], \$31y [215], \$31y [215], \$31y [207], \$31y [207], \$31y [207], \$31y [207], \$31y [207], \$31y [207], \$31y [207], \$31y [199], \$31y [199], \$31y [199], \$31y [199], \$31y [199], \$31y [199], \$31y [199], \$31y [191], \$31y [191], \$31y [191], \$31y [191], \$31y [191], \$31y [191], \$31y [191], \$31y [183], \$31y [183], \$31y [183], \$31y [183], \$31y [183], \$31y [183], \$31y [183], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [167], \$31y [167], \$31y [167], \$31y [167], \$31y [167], \$31y [167], \$31y [167], \$31y [159], \$31y [159], \$31y [159], \$31y [159], \$31y [159], \$31y [159], \$31y [159], \$31y [151], \$31y [151], \$31y [151], \$31y [151], \$31y [151], \$31y [151], \$31y [151], \$31y [143], \$31y [143], \$31y [143], \$31y [143], \$31y [143], \$31y [143], \$31y [143], \$31y [135], \$31y [135], \$31y [135], \$31y [135], \$31y [135], \$31y [135], \$31y [135], \$31y [127], \$31y [127], \$31y [127], \$31y [127], \$31y [127], \$31y [127], \$31y [127], \$31y [119], \$31y [119], \$31y [119], \$31y [119], \$31y [119], \$31y [119], \$31y [119], \$31y [111], \$31y [111], \$31y [111], \$31y [111], \$31y [111], \$31y [111], \$31y [111], \$31y [103], \$31y [103], \$31y [103], \$31y [103], \$31y [103], \$31y [103], \$31y [103], \$31y [95], \$31y [95], \$31y [95], \$31y [95], \$31y [95], \$31y [95], \$31y [95], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [79], \$31y [79], \$31y [79], \$31y [79], \$31y [79], \$31y [79], \$31y [79], \$31y [71], \$31y [71], \$31y [71], \$31y [71], \$31y [71], \$31y [71], \$31y [71], \$31y [63], \$31y [63], \$31y [63], \$31y [63], \$31y [63], \$31y [63], \$31y [63], \$31y [55], \$31y [55], \$31y [55], \$31y [55], \$31y [55], \$31y [55], \$31y [55], \$31y [47], \$31y [47], \$31y [47], \$31y [47], \$31y [47], \$31y [47], \$31y [47], \$31y [39], \$31y [39], \$31y [39], \$31y [39], \$31y [39], \$31y [39], \$31y [39], \$31y [31], \$31y [31], \$31y [31], \$31y [31], \$31y [31], \$31y [31], \$31y [31], \$31y [23], \$31y [23], \$31y [23], \$31y [23], \$31y [23], \$31y [23], \$31y [23], \$31y [15], \$31y [15], \$31y [15], \$31y [15], \$31y [15], \$31y [15], \$31y [15], \$31y [7], \$31y [7], \$31y [7], \$31y [7], \$31y [7], \$31y [7], \$31y [7] };
  assign \$34y [6] = 1'h1;
  assign \$auto$rtlil.cc:3092:Mux$15035 [4:0] = { \$auto$rtlil.cc:3092:Mux$15035 [5], \$auto$rtlil.cc:3092:Mux$15035 [5], \$auto$rtlil.cc:3092:Mux$15035 [5], \$auto$rtlil.cc:3092:Mux$15035 [5], 1'h1 };
  assign \$36y  = \$auto$bmuxmap.cc:84:execute$15753 ;
endmodule

(* src = "rtl/apb_uart/slib_input_filter.sv:35.8" *)
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_CTS (CLK, D, Q, RST, CE);
  wire \$14y ;
  wire \$15y ;
  wire \$4y ;
  wire \$5y ;
  wire \$7y ;
  wire \$8y ;
  wire \$9y ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *)
  wire \$Q$16 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *)
  wire \$Q$17 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14869 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14871 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$15038 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$15040 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:38.14" *)
  input CE;
  wire CE;
  (* src = "rtl/apb_uart/slib_input_filter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_input_filter.sv:39.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_input_filter.sv:40.16" *)
  output Q;
  reg Q;
  (* src = "rtl/apb_uart/slib_input_filter.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_input_filter.sv:45.26" *)
  reg [1:0] iCount;
  assign \$14y  = iCount == (* src = "rtl/apb_uart/slib_input_filter.sv:68.16-68.30" *) 2'h2;
  assign \$15y  = ! (* src = "rtl/apb_uart/slib_input_filter.sv:72.25-72.36" *) iCount;
  assign \$4y  = iCount != (* src = "rtl/apb_uart/slib_input_filter.sv:58.37-58.51" *) 2'h2;
  assign \$5y  = D && (* src = "rtl/apb_uart/slib_input_filter.sv:58.20-58.52" *) \$4y ;
  assign \$auto$opt_share.cc:222:merge_operators$15038  = iCount + (* src = "rtl/apb_uart/slib_input_filter.sv:60.31-60.41" *) { \$auto$rtlil.cc:3092:Mux$15040 [1], 1'h1 };
  assign \$7y  = ~ (* src = "rtl/apb_uart/slib_input_filter.sv:62.34-62.44" *) D;
  assign \$8y  = | (* src = "rtl/apb_uart/slib_input_filter.sv:62.50-62.61" *) iCount;
  assign \$9y  = \$7y  && (* src = "rtl/apb_uart/slib_input_filter.sv:62.33-62.62" *) \$8y ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCount <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14871 ) iCount <= \$auto$opt_share.cc:222:merge_operators$15038 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14869  = | { \$5y , \$9y  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14871  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14869 , CE };
  assign \$auto$rtlil.cc:3092:Mux$15040 [1] = ~ \$5y ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 1'h0;
    else Q <= \$Q$17 ;
  assign \$Q$16  = \$15y  ? (* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *) 1'h0 : Q;
  assign \$Q$17  = \$Q$16  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *) \$14y ;
  assign \$auto$rtlil.cc:3092:Mux$15040 [0] = 1'h1;
endmodule

(* src = "rtl/apb_uart/slib_input_filter.sv:35.8" *)
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DCD (CLK, D, Q, RST, CE);
  wire \$14y ;
  wire \$15y ;
  wire \$4y ;
  wire \$5y ;
  wire \$7y ;
  wire \$8y ;
  wire \$9y ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *)
  wire \$Q$16 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *)
  wire \$Q$17 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14874 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14876 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$15043 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$15045 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:38.14" *)
  input CE;
  wire CE;
  (* src = "rtl/apb_uart/slib_input_filter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_input_filter.sv:39.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_input_filter.sv:40.16" *)
  output Q;
  reg Q;
  (* src = "rtl/apb_uart/slib_input_filter.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_input_filter.sv:45.26" *)
  reg [1:0] iCount;
  assign \$14y  = iCount == (* src = "rtl/apb_uart/slib_input_filter.sv:68.16-68.30" *) 2'h2;
  assign \$15y  = ! (* src = "rtl/apb_uart/slib_input_filter.sv:72.25-72.36" *) iCount;
  assign \$4y  = iCount != (* src = "rtl/apb_uart/slib_input_filter.sv:58.37-58.51" *) 2'h2;
  assign \$5y  = D && (* src = "rtl/apb_uart/slib_input_filter.sv:58.20-58.52" *) \$4y ;
  assign \$auto$opt_share.cc:222:merge_operators$15043  = iCount + (* src = "rtl/apb_uart/slib_input_filter.sv:60.31-60.41" *) { \$auto$rtlil.cc:3092:Mux$15045 [1], 1'h1 };
  assign \$7y  = ~ (* src = "rtl/apb_uart/slib_input_filter.sv:62.34-62.44" *) D;
  assign \$8y  = | (* src = "rtl/apb_uart/slib_input_filter.sv:62.50-62.61" *) iCount;
  assign \$9y  = \$7y  && (* src = "rtl/apb_uart/slib_input_filter.sv:62.33-62.62" *) \$8y ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCount <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14876 ) iCount <= \$auto$opt_share.cc:222:merge_operators$15043 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14874  = | { \$5y , \$9y  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14876  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14874 , CE };
  assign \$auto$rtlil.cc:3092:Mux$15045 [1] = ~ \$5y ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 1'h0;
    else Q <= \$Q$17 ;
  assign \$Q$16  = \$15y  ? (* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *) 1'h0 : Q;
  assign \$Q$17  = \$Q$16  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *) \$14y ;
  assign \$auto$rtlil.cc:3092:Mux$15045 [0] = 1'h1;
endmodule

(* src = "rtl/apb_uart/slib_input_filter.sv:35.8" *)
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DSR (CLK, D, Q, RST, CE);
  wire \$14y ;
  wire \$15y ;
  wire \$4y ;
  wire \$5y ;
  wire \$7y ;
  wire \$8y ;
  wire \$9y ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *)
  wire \$Q$16 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *)
  wire \$Q$17 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14879 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14881 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$15048 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$15050 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:38.14" *)
  input CE;
  wire CE;
  (* src = "rtl/apb_uart/slib_input_filter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_input_filter.sv:39.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_input_filter.sv:40.16" *)
  output Q;
  reg Q;
  (* src = "rtl/apb_uart/slib_input_filter.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_input_filter.sv:45.26" *)
  reg [1:0] iCount;
  assign \$14y  = iCount == (* src = "rtl/apb_uart/slib_input_filter.sv:68.16-68.30" *) 2'h2;
  assign \$15y  = ! (* src = "rtl/apb_uart/slib_input_filter.sv:72.25-72.36" *) iCount;
  assign \$4y  = iCount != (* src = "rtl/apb_uart/slib_input_filter.sv:58.37-58.51" *) 2'h2;
  assign \$5y  = D && (* src = "rtl/apb_uart/slib_input_filter.sv:58.20-58.52" *) \$4y ;
  assign \$auto$opt_share.cc:222:merge_operators$15048  = iCount + (* src = "rtl/apb_uart/slib_input_filter.sv:60.31-60.41" *) { \$auto$rtlil.cc:3092:Mux$15050 [1], 1'h1 };
  assign \$7y  = ~ (* src = "rtl/apb_uart/slib_input_filter.sv:62.34-62.44" *) D;
  assign \$8y  = | (* src = "rtl/apb_uart/slib_input_filter.sv:62.50-62.61" *) iCount;
  assign \$9y  = \$7y  && (* src = "rtl/apb_uart/slib_input_filter.sv:62.33-62.62" *) \$8y ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCount <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14881 ) iCount <= \$auto$opt_share.cc:222:merge_operators$15048 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14879  = | { \$5y , \$9y  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14881  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14879 , CE };
  assign \$auto$rtlil.cc:3092:Mux$15050 [1] = ~ \$5y ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 1'h0;
    else Q <= \$Q$17 ;
  assign \$Q$16  = \$15y  ? (* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *) 1'h0 : Q;
  assign \$Q$17  = \$Q$16  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *) \$14y ;
  assign \$auto$rtlil.cc:3092:Mux$15050 [0] = 1'h1;
endmodule

(* src = "rtl/apb_uart/slib_input_filter.sv:35.8" *)
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_RI (CLK, D, Q, RST, CE);
  wire \$14y ;
  wire \$15y ;
  wire \$4y ;
  wire \$5y ;
  wire \$7y ;
  wire \$8y ;
  wire \$9y ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *)
  wire \$Q$16 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *)
  wire \$Q$17 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14884 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14886 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$15053 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$15055 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:38.14" *)
  input CE;
  wire CE;
  (* src = "rtl/apb_uart/slib_input_filter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_input_filter.sv:39.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_input_filter.sv:40.16" *)
  output Q;
  reg Q;
  (* src = "rtl/apb_uart/slib_input_filter.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_input_filter.sv:45.26" *)
  reg [1:0] iCount;
  assign \$14y  = iCount == (* src = "rtl/apb_uart/slib_input_filter.sv:68.16-68.30" *) 2'h2;
  assign \$15y  = ! (* src = "rtl/apb_uart/slib_input_filter.sv:72.25-72.36" *) iCount;
  assign \$4y  = iCount != (* src = "rtl/apb_uart/slib_input_filter.sv:58.37-58.51" *) 2'h2;
  assign \$5y  = D && (* src = "rtl/apb_uart/slib_input_filter.sv:58.20-58.52" *) \$4y ;
  assign \$auto$opt_share.cc:222:merge_operators$15053  = iCount + (* src = "rtl/apb_uart/slib_input_filter.sv:60.31-60.41" *) { \$auto$rtlil.cc:3092:Mux$15055 [1], 1'h1 };
  assign \$7y  = ~ (* src = "rtl/apb_uart/slib_input_filter.sv:62.34-62.44" *) D;
  assign \$8y  = | (* src = "rtl/apb_uart/slib_input_filter.sv:62.50-62.61" *) iCount;
  assign \$9y  = \$7y  && (* src = "rtl/apb_uart/slib_input_filter.sv:62.33-62.62" *) \$8y ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCount <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14886 ) iCount <= \$auto$opt_share.cc:222:merge_operators$15053 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14884  = | { \$5y , \$9y  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14886  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14884 , CE };
  assign \$auto$rtlil.cc:3092:Mux$15055 [1] = ~ \$5y ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 1'h0;
    else Q <= \$Q$17 ;
  assign \$Q$16  = \$15y  ? (* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *) 1'h0 : Q;
  assign \$Q$17  = \$Q$16  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *) \$14y ;
  assign \$auto$rtlil.cc:3092:Mux$15055 [0] = 1'h1;
endmodule

(* src = "rtl/apb_uart/slib_input_filter.sv:35.8" *)
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_IFSB (CLK, D, Q, RST, CE);
  wire \$14y ;
  wire \$15y ;
  wire \$4y ;
  wire \$5y ;
  wire \$7y ;
  wire \$8y ;
  wire \$9y ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *)
  wire \$Q$16 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *)
  wire \$Q$17 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14889 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14891 ;
  wire [2:0] \$auto$opt_share.cc:222:merge_operators$15058 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$15060 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:38.14" *)
  input CE;
  wire CE;
  (* src = "rtl/apb_uart/slib_input_filter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_input_filter.sv:39.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_input_filter.sv:40.16" *)
  output Q;
  reg Q;
  (* src = "rtl/apb_uart/slib_input_filter.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_input_filter.sv:45.26" *)
  reg [2:0] iCount;
  assign \$14y  = iCount == (* src = "rtl/apb_uart/slib_input_filter.sv:68.16-68.30" *) 3'h4;
  assign \$15y  = ! (* src = "rtl/apb_uart/slib_input_filter.sv:72.25-72.36" *) iCount;
  assign \$4y  = iCount != (* src = "rtl/apb_uart/slib_input_filter.sv:58.37-58.51" *) 3'h4;
  assign \$5y  = D && (* src = "rtl/apb_uart/slib_input_filter.sv:58.20-58.52" *) \$4y ;
  assign \$auto$opt_share.cc:222:merge_operators$15058  = iCount + (* src = "rtl/apb_uart/slib_input_filter.sv:60.31-60.41" *) { \$auto$rtlil.cc:3092:Mux$15060 [2], \$auto$rtlil.cc:3092:Mux$15060 [2], 1'h1 };
  assign \$7y  = ~ (* src = "rtl/apb_uart/slib_input_filter.sv:62.34-62.44" *) D;
  assign \$8y  = | (* src = "rtl/apb_uart/slib_input_filter.sv:62.50-62.61" *) iCount;
  assign \$9y  = \$7y  && (* src = "rtl/apb_uart/slib_input_filter.sv:62.33-62.62" *) \$8y ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCount <= 3'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14891 ) iCount <= \$auto$opt_share.cc:222:merge_operators$15058 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14889  = | { \$5y , \$9y  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14891  = & { CE, \$auto$opt_dff.cc:194:make_patterns_logic$14889  };
  assign \$auto$rtlil.cc:3092:Mux$15060 [2] = ~ \$5y ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 1'h0;
    else Q <= \$Q$17 ;
  assign \$Q$16  = \$15y  ? (* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *) 1'h0 : Q;
  assign \$Q$17  = \$Q$16  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *) \$14y ;
  assign \$auto$rtlil.cc:3092:Mux$15060 [1:0] = { \$auto$rtlil.cc:3092:Mux$15060 [2], 1'h1 };
endmodule

(* src = "rtl/apb_uart/slib_input_sync.sv:35.8" *)
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_CTS (CLK, D, Q, RST);
  (* src = "rtl/apb_uart/slib_input_sync.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_input_sync.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_input_sync.sv:39.16" *)
  output Q;
  wire Q;
  (* src = "rtl/apb_uart/slib_input_sync.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_input_sync.sv:43.11" *)
  reg [1:0] iD;
  (* src = "rtl/apb_uart/slib_input_sync.sv:45.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iD <= 2'h0;
    else iD <= { iD[0], D };
  assign Q = iD[1];
endmodule

(* src = "rtl/apb_uart/slib_input_sync.sv:35.8" *)
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DCD (CLK, D, Q, RST);
  (* src = "rtl/apb_uart/slib_input_sync.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_input_sync.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_input_sync.sv:39.16" *)
  output Q;
  wire Q;
  (* src = "rtl/apb_uart/slib_input_sync.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_input_sync.sv:43.11" *)
  reg [1:0] iD;
  (* src = "rtl/apb_uart/slib_input_sync.sv:45.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iD <= 2'h0;
    else iD <= { iD[0], D };
  assign Q = iD[1];
endmodule

(* src = "rtl/apb_uart/slib_input_sync.sv:35.8" *)
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DSR (CLK, D, Q, RST);
  (* src = "rtl/apb_uart/slib_input_sync.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_input_sync.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_input_sync.sv:39.16" *)
  output Q;
  wire Q;
  (* src = "rtl/apb_uart/slib_input_sync.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_input_sync.sv:43.11" *)
  reg [1:0] iD;
  (* src = "rtl/apb_uart/slib_input_sync.sv:45.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iD <= 2'h0;
    else iD <= { iD[0], D };
  assign Q = iD[1];
endmodule

(* src = "rtl/apb_uart/slib_input_sync.sv:35.8" *)
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_RI (CLK, D, Q, RST);
  (* src = "rtl/apb_uart/slib_input_sync.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_input_sync.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_input_sync.sv:39.16" *)
  output Q;
  wire Q;
  (* src = "rtl/apb_uart/slib_input_sync.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_input_sync.sv:43.11" *)
  reg [1:0] iD;
  (* src = "rtl/apb_uart/slib_input_sync.sv:45.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iD <= 2'h0;
    else iD <= { iD[0], D };
  assign Q = iD[1];
endmodule

(* src = "rtl/apb_uart/slib_input_sync.sv:35.8" *)
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_SIN (CLK, D, Q, RST);
  (* src = "rtl/apb_uart/slib_input_sync.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_input_sync.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_input_sync.sv:39.16" *)
  output Q;
  wire Q;
  (* src = "rtl/apb_uart/slib_input_sync.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_input_sync.sv:43.11" *)
  reg [1:0] iD;
  (* src = "rtl/apb_uart/slib_input_sync.sv:45.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iD <= 2'h0;
    else iD <= { iD[0], D };
  assign Q = iD[1];
endmodule

(* src = "rtl/apb_uart/slib_mv_filter.sv:35.8" *)
module \slib_mv_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_MVF (CLK, D, Q, RST, CLEAR, SAMPLE);
  wire \$2y ;
  wire \$5y ;
  wire [4:0] \$6y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14894 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14896 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14898 ;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" *)
  wire [4:0] \$iCounter$11 ;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" *)
  wire \$iQ$12 ;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:57.8-67.13" *)
  wire \$iQ$9 ;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:39.14" *)
  input CLEAR;
  wire CLEAR;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:40.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:41.16" *)
  output Q;
  reg Q;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:38.14" *)
  input SAMPLE;
  wire SAMPLE;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:45.15" *)
  reg [4:0] iCounter;
  assign \$2y  = iCounter >= (* src = "rtl/apb_uart/slib_mv_filter.sv:57.12-57.33" *) 4'ha;
  assign \$5y  = SAMPLE && (* src = "rtl/apb_uart/slib_mv_filter.sv:63.18-63.47" *) D;
  assign \$6y  = iCounter + (* src = "rtl/apb_uart/slib_mv_filter.sv:65.30-65.42" *) 1'h1;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:48.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCounter <= 5'h00;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14898 ) iCounter <= \$iCounter$11 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14894  = | { CLEAR, \$5y , \$2y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14896  = { CLEAR, \$2y  } != 2'h1;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14898  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14896 , \$auto$opt_dff.cc:194:make_patterns_logic$14894  };
  (* src = "rtl/apb_uart/slib_mv_filter.sv:48.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 1'h0;
    else Q <= \$iQ$12 ;
  assign \$iQ$12  = CLEAR ? (* src = "rtl/apb_uart/slib_mv_filter.sv:69.10-73.13|rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" *) 1'h0 : \$iQ$9 ;
  assign \$iCounter$11  = CLEAR ? (* src = "rtl/apb_uart/slib_mv_filter.sv:69.10-73.13|rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" *) 5'h00 : \$6y ;
  assign \$iQ$9  = Q | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_mv_filter.sv:59.13-59.25|rtl/apb_uart/slib_mv_filter.sv:57.8-67.13" *) \$2y ;
endmodule

(* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:10.8" *)
module \soc_ctrl_reg_top$croc_chip.i_croc_soc.i_croc.i_soc_ctrl (clk_i, rst_ni, reg_req_i, reg_rsp_o, reg2hw, hw2reg, devmode_i);
  wire \$11y ;
  wire \$12y ;
  wire \$13y ;
  wire [3:0] \$16y ;
  wire \$18y ;
  wire \$19y ;
  wire \$1y ;
  wire \$23y ;
  wire \$24y ;
  wire \$28y ;
  wire \$29y ;
  wire \$33y ;
  wire \$34y ;
  wire \$38y ;
  wire \$39y ;
  wire \$3y ;
  wire \$41y ;
  wire \$42y ;
  wire \$44y ;
  wire \$47y ;
  wire \$50y ;
  wire \$53y ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13403 ;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:226.15" *)
  wire [4:0] addr_hit;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:43.18" *)
  wire addrmiss;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:72.16" *)
  wire [31:0] bootaddr_qs;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:74.9" *)
  wire bootaddr_we;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:81.9" *)
  wire bootmode_qs;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:83.9" *)
  wire bootmode_we;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:16.15" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:78.16" *)
  wire [31:0] corestatus_qs;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:80.9" *)
  wire corestatus_we;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:26.9" *)
  input devmode_i;
  wire devmode_i;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:75.9" *)
  wire fetchen_qs;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:77.9" *)
  wire fetchen_we;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:22.46" *)
  input [3:0] hw2reg;
  wire [3:0] hw2reg;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:21.46" *)
  output [66:0] reg2hw;
  wire [66:0] reg2hw;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:41.19" *)
  wire reg_error;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:36.19" *)
  wire reg_re;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:18.20" *)
  input [69:0] reg_req_i;
  wire [69:0] reg_req_i;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:19.20" *)
  output [33:0] reg_rsp_o;
  wire [33:0] reg_rsp_o;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:35.19" *)
  wire reg_we;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:17.15" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:84.9" *)
  wire sram_dly_qs;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:86.9" *)
  wire sram_dly_we;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:43.28" *)
  wire wr_err;
  assign reg_we = reg_req_i[0] & (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:56.19-56.58" *) reg_req_i[37];
  assign \$1y  = ~ (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:57.40-57.59" *) reg_req_i[37];
  assign addr_hit[4] = reg_req_i[42:38] == (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:233.20-233.56" *) 5'h10;
  assign \$11y  = | (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:236.42-236.52" *) addr_hit;
  assign \$12y  = ! (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:236.42-236.52" *) \$11y ;
  assign \$13y  = reg_re || (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:236.22-236.38" *) reg_we;
  assign addrmiss = \$13y  & (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:236.21-236.59" *) \$12y ;
  assign \$16y  = ~ (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:241.55-241.62" *) reg_req_i[4:1];
  assign \$18y  = | (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:241.32-241.63" *) \$16y ;
  assign \$19y  = addr_hit[0] & (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:241.17-241.64" *) \$18y ;
  assign reg_re = reg_req_i[0] & (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:57.19-57.59" *) \$1y ;
  assign \$23y  = addr_hit[1] & (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:242.17-242.64" *) \$16y [0];
  assign \$24y  = \$19y  | (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:241.16-242.65" *) \$23y ;
  assign \$28y  = addr_hit[2] & (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:243.17-243.64" *) \$18y ;
  assign \$29y  = \$24y  | (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:241.16-243.65" *) \$28y ;
  assign \$3y  = devmode_i & (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:66.23-66.43" *) addrmiss;
  assign \$33y  = addr_hit[3] & (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:244.17-244.64" *) \$16y [0];
  assign \$34y  = \$29y  | (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:241.16-244.65" *) \$33y ;
  assign \$38y  = addr_hit[4] & (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:245.17-245.64" *) \$16y [0];
  assign \$39y  = \$34y  | (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:241.16-245.65" *) \$38y ;
  assign reg_error = \$3y  | (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:66.22-66.53" *) wr_err;
  assign wr_err = reg_we & (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:240.15-245.66" *) \$39y ;
  assign \$41y  = addr_hit[0] & (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:248.24-248.44" *) reg_we;
  assign \$42y  = ! (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:248.47-248.57" *) reg_error;
  assign bootaddr_we = \$41y  & (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:248.24-248.57" *) \$42y ;
  assign \$44y  = addr_hit[1] & (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:251.23-251.43" *) reg_we;
  assign fetchen_we = \$44y  & (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:251.23-251.56" *) \$42y ;
  assign \$47y  = addr_hit[2] & (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:254.26-254.46" *) reg_we;
  assign corestatus_we = \$47y  & (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:254.26-254.59" *) \$42y ;
  assign \$50y  = addr_hit[3] & (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:257.24-257.44" *) reg_we;
  assign bootmode_we = \$50y  & (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:257.24-257.57" *) \$42y ;
  assign \$53y  = addr_hit[4] & (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:260.24-260.44" *) reg_we;
  assign sram_dly_we = \$53y  & (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:260.24-260.57" *) \$42y ;
  assign addr_hit[0] = ! (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:229.20-229.56" *) reg_req_i[42:38];
  assign addr_hit[1] = reg_req_i[42:38] == (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:230.20-230.55" *) 3'h4;
  assign addr_hit[2] = reg_req_i[42:38] == (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:231.20-231.58" *) 4'h8;
  assign addr_hit[3] = reg_req_i[42:38] == (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:232.20-232.56" *) 4'hc;
  assign \$auto$opt_reduce.cc:137:opt_pmux$13403  = | { addr_hit[4:3], addr_hit[1] };
  function [30:0] \$procmux$12495 ;
    input [30:0] a;
    input [92:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:284.9-284.41|rtl/soc_ctrl/soc_ctrl_reg_top.sv:266.5-290.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$12495  = b[30:0];
      3'b?1?:
        \$procmux$12495  = b[61:31];
      3'b1??:
        \$procmux$12495  = b[92:62];
      default:
        \$procmux$12495  = a;
    endcase
  endfunction
  assign reg_rsp_o[33:3] = \$procmux$12495 (31'h7fffffff, { bootaddr_qs[31:1], corestatus_qs[31:1], 31'h00000000 }, { addr_hit[0], addr_hit[2], \$auto$opt_reduce.cc:137:opt_pmux$13403  });
  function [0:0] \$procmux$12502 ;
    input [0:0] a;
    input [4:0] b;
    input [4:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:284.9-284.41|rtl/soc_ctrl/soc_ctrl_reg_top.sv:266.5-290.12" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        \$procmux$12502  = b[0:0];
      5'b???1?:
        \$procmux$12502  = b[1:1];
      5'b??1??:
        \$procmux$12502  = b[2:2];
      5'b?1???:
        \$procmux$12502  = b[3:3];
      5'b1????:
        \$procmux$12502  = b[4:4];
      default:
        \$procmux$12502  = a;
    endcase
  endfunction
  assign reg_rsp_o[2] = \$procmux$12502 (1'h1, { bootaddr_qs[0], fetchen_qs, corestatus_qs[0], bootmode_qs, sram_dly_qs }, { addr_hit[0], addr_hit[1], addr_hit[2], addr_hit[3], addr_hit[4] });
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:95.5" *)
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr  u_bootaddr (
    .clk_i(clk_i),
    .d(32'd0),
    .de(1'h0),
    .q(reg2hw[66:35]),
    .qs(bootaddr_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[36:5]),
    .we(bootaddr_we)
  );
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:176.5" *)
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode  u_bootmode (
    .clk_i(clk_i),
    .d(hw2reg[1]),
    .de(hw2reg[0]),
    .q(reg2hw[1]),
    .qs(bootmode_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[5]),
    .we(bootmode_we)
  );
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:149.5" *)
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus  u_corestatus (
    .clk_i(clk_i),
    .d(32'd0),
    .de(1'h0),
    .q(reg2hw[33:2]),
    .qs(corestatus_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[36:5]),
    .we(corestatus_we)
  );
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:122.5" *)
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen  u_fetchen (
    .clk_i(clk_i),
    .d(hw2reg[3]),
    .de(hw2reg[2]),
    .q(reg2hw[34]),
    .qs(fetchen_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[5]),
    .we(fetchen_we)
  );
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:203.5" *)
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly  u_sram_dly (
    .clk_i(clk_i),
    .d(1'h0),
    .de(1'h0),
    .q(reg2hw[0]),
    .qs(sram_dly_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[5]),
    .we(sram_dly_we)
  );
  assign reg_rsp_o[1:0] = { reg_error, 1'h1 };
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [2:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 3'h0;
    else reg_q <= { reg_q[1:0], serial_i };
  assign serial_o = reg_q[2];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [2:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 3'h0;
    else reg_q <= { reg_q[1:0], serial_i };
  assign serial_o = reg_q[2];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [2:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 3'h0;
    else reg_q <= { reg_q[1:0], serial_i };
  assign serial_o = reg_q[2];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [2:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 3'h0;
    else reg_q <= { reg_q[1:0], serial_i };
  assign serial_o = reg_q[2];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[0].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[10].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[11].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[12].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[13].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[14].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[15].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[16].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[17].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[18].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[19].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[1].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[20].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[21].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[22].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[23].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[24].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[25].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[26].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[27].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[28].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[29].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[2].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[30].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[31].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[3].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[4].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[5].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[6].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[7].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[8].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[9].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_ext_intr_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "ihp13/tc_clk.sv:9.8" *)
module \tc_clk_inverter$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_tck_inv (clk_i, clk_o);
  (* src = "ihp13/tc_clk.sv:10.18" *)
  input clk_i;
  wire clk_i;
  (* src = "ihp13/tc_clk.sv:11.18" *)
  output clk_o;
  wire clk_o;
  (* keep = 1'h1 *)
  (* src = "ihp13/tc_clk.sv:14.16" *)
  sg13g2_inv_1 i_inv (
    .A(clk_i),
    .Y(clk_o)
  );
endmodule

(* src = "ihp13/tc_clk.sv:33.8" *)
module \tc_clk_mux2$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_dft_tck_mux (clk0_i, clk1_i, clk_sel_i, clk_o);
  (* src = "ihp13/tc_clk.sv:34.18" *)
  input clk0_i;
  wire clk0_i;
  (* src = "ihp13/tc_clk.sv:35.18" *)
  input clk1_i;
  wire clk1_i;
  (* src = "ihp13/tc_clk.sv:37.18" *)
  output clk_o;
  wire clk_o;
  (* src = "ihp13/tc_clk.sv:36.18" *)
  input clk_sel_i;
  wire clk_sel_i;
  (* keep = 1'h1 *)
  (* src = "ihp13/tc_clk.sv:40.17" *)
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

(* src = "ihp13/tc_clk.sv:33.8" *)
module \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_init_no (clk0_i, clk1_i, clk_sel_i, clk_o);
  (* src = "ihp13/tc_clk.sv:34.18" *)
  input clk0_i;
  wire clk0_i;
  (* src = "ihp13/tc_clk.sv:35.18" *)
  input clk1_i;
  wire clk1_i;
  (* src = "ihp13/tc_clk.sv:37.18" *)
  output clk_o;
  wire clk_o;
  (* src = "ihp13/tc_clk.sv:36.18" *)
  input clk_sel_i;
  wire clk_sel_i;
  (* keep = 1'h1 *)
  (* src = "ihp13/tc_clk.sv:40.17" *)
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

(* src = "ihp13/tc_clk.sv:33.8" *)
module \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_n (clk0_i, clk1_i, clk_sel_i, clk_o);
  (* src = "ihp13/tc_clk.sv:34.18" *)
  input clk0_i;
  wire clk0_i;
  (* src = "ihp13/tc_clk.sv:35.18" *)
  input clk1_i;
  wire clk1_i;
  (* src = "ihp13/tc_clk.sv:37.18" *)
  output clk_o;
  wire clk_o;
  (* src = "ihp13/tc_clk.sv:36.18" *)
  input clk_sel_i;
  wire clk_sel_i;
  (* keep = 1'h1 *)
  (* src = "ihp13/tc_clk.sv:40.17" *)
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

(* src = "ihp13/tc_clk.sv:33.8" *)
module \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_no (clk0_i, clk1_i, clk_sel_i, clk_o);
  (* src = "ihp13/tc_clk.sv:34.18" *)
  input clk0_i;
  wire clk0_i;
  (* src = "ihp13/tc_clk.sv:35.18" *)
  input clk1_i;
  wire clk1_i;
  (* src = "ihp13/tc_clk.sv:37.18" *)
  output clk_o;
  wire clk_o;
  (* src = "ihp13/tc_clk.sv:36.18" *)
  input clk_sel_i;
  wire clk_sel_i;
  (* keep = 1'h1 *)
  (* src = "ihp13/tc_clk.sv:40.17" *)
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

(* src = "ihp13/tc_sram_impl.sv:73.8" *)
module \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram (clk_i, rst_ni, impl_i, req_i, we_i, addr_i, wdata_i, be_i, rdata_o, impl_o);
  wire \$101y ;
  wire \$164y ;
  wire \$165y ;
  (* src = "ihp13/tc_sram_impl.sv:100.32" *)
  input [8:0] addr_i;
  wire [8:0] addr_i;
  (* src = "ihp13/tc_sram_impl.sv:102.32" *)
  input [3:0] be_i;
  wire [3:0] be_i;
  (* src = "ihp13/tc_sram_impl.sv:92.32" *)
  input clk_i;
  wire clk_i;
  (* src = "ihp13/tc_sram_impl.sv:223.36" *)
  wire [63:0] \gen_512x32xBx1.bm64 ;
  (* src = "ihp13/tc_sram_impl.sv:223.27" *)
  wire [63:0] \gen_512x32xBx1.rdata64 ;
  (* src = "ihp13/tc_sram_impl.sv:224.18" *)
  reg \gen_512x32xBx1.sel_q ;
  (* src = "ihp13/tc_sram_impl.sv:95.32" *)
  input impl_i;
  wire impl_i;
  (* src = "ihp13/tc_sram_impl.sv:96.32" *)
  output impl_o;
  wire impl_o;
  (* src = "ihp13/tc_sram_impl.sv:104.32" *)
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  (* src = "ihp13/tc_sram_impl.sv:98.32" *)
  input req_i;
  wire req_i;
  (* src = "ihp13/tc_sram_impl.sv:93.32" *)
  input rst_ni;
  wire rst_ni;
  (* src = "ihp13/tc_sram_impl.sv:101.32" *)
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  (* src = "ihp13/tc_sram_impl.sv:99.32" *)
  input we_i;
  wire we_i;
  assign \$101y  = ~ (* src = "ihp13/tc_sram_impl.sv:231.39-231.52" *) addr_i[0];
  assign \gen_512x32xBx1.bm64 [46] = be_i[2] & (* src = "ihp13/tc_sram_impl.sv:231.28-231.52" *) \$101y ;
  assign \gen_512x32xBx1.bm64 [47] = be_i[2] & (* src = "ihp13/tc_sram_impl.sv:233.28-233.51" *) addr_i[0];
  assign \gen_512x32xBx1.bm64 [14] = be_i[0] & (* src = "ihp13/tc_sram_impl.sv:231.28-231.52" *) \$101y ;
  assign \gen_512x32xBx1.bm64 [62] = be_i[3] & (* src = "ihp13/tc_sram_impl.sv:231.28-231.52" *) \$101y ;
  assign \gen_512x32xBx1.bm64 [63] = be_i[3] & (* src = "ihp13/tc_sram_impl.sv:233.28-233.51" *) addr_i[0];
  assign \gen_512x32xBx1.bm64 [15] = be_i[0] & (* src = "ihp13/tc_sram_impl.sv:233.28-233.51" *) addr_i[0];
  assign \$164y  = ~ (* src = "ihp13/tc_sram_impl.sv:248.24-248.29" *) we_i;
  assign \$165y  = req_i & (* src = "ihp13/tc_sram_impl.sv:248.16-248.29" *) \$164y ;
  assign \gen_512x32xBx1.bm64 [30] = be_i[1] & (* src = "ihp13/tc_sram_impl.sv:231.28-231.52" *) \$101y ;
  assign \gen_512x32xBx1.bm64 [31] = be_i[1] & (* src = "ihp13/tc_sram_impl.sv:233.28-233.51" *) addr_i[0];
  (* src = "ihp13/tc_sram_impl.sv:246.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_512x32xBx1.sel_q  <= 1'h0;
    else if (\$165y ) \gen_512x32xBx1.sel_q  <= addr_i[0];
  assign rdata_o[31] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [63] : \gen_512x32xBx1.rdata64 [62];
  assign rdata_o[30] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [61] : \gen_512x32xBx1.rdata64 [60];
  assign rdata_o[29] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [59] : \gen_512x32xBx1.rdata64 [58];
  assign rdata_o[28] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [57] : \gen_512x32xBx1.rdata64 [56];
  assign rdata_o[27] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [55] : \gen_512x32xBx1.rdata64 [54];
  assign rdata_o[26] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [53] : \gen_512x32xBx1.rdata64 [52];
  assign rdata_o[25] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [51] : \gen_512x32xBx1.rdata64 [50];
  assign rdata_o[24] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [49] : \gen_512x32xBx1.rdata64 [48];
  assign rdata_o[23] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [47] : \gen_512x32xBx1.rdata64 [46];
  assign rdata_o[22] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [45] : \gen_512x32xBx1.rdata64 [44];
  assign rdata_o[21] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [43] : \gen_512x32xBx1.rdata64 [42];
  assign rdata_o[20] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [41] : \gen_512x32xBx1.rdata64 [40];
  assign rdata_o[19] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [39] : \gen_512x32xBx1.rdata64 [38];
  assign rdata_o[18] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [37] : \gen_512x32xBx1.rdata64 [36];
  assign rdata_o[17] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [35] : \gen_512x32xBx1.rdata64 [34];
  assign rdata_o[16] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [33] : \gen_512x32xBx1.rdata64 [32];
  assign rdata_o[15] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [31] : \gen_512x32xBx1.rdata64 [30];
  assign rdata_o[14] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [29] : \gen_512x32xBx1.rdata64 [28];
  assign rdata_o[13] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [27] : \gen_512x32xBx1.rdata64 [26];
  assign rdata_o[12] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [25] : \gen_512x32xBx1.rdata64 [24];
  assign rdata_o[11] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [23] : \gen_512x32xBx1.rdata64 [22];
  assign rdata_o[10] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [21] : \gen_512x32xBx1.rdata64 [20];
  assign rdata_o[9] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [19] : \gen_512x32xBx1.rdata64 [18];
  assign rdata_o[8] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [17] : \gen_512x32xBx1.rdata64 [16];
  assign rdata_o[7] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [15] : \gen_512x32xBx1.rdata64 [14];
  assign rdata_o[6] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [13] : \gen_512x32xBx1.rdata64 [12];
  assign rdata_o[5] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [11] : \gen_512x32xBx1.rdata64 [10];
  assign rdata_o[4] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [9] : \gen_512x32xBx1.rdata64 [8];
  assign rdata_o[3] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [7] : \gen_512x32xBx1.rdata64 [6];
  assign rdata_o[2] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [5] : \gen_512x32xBx1.rdata64 [4];
  assign rdata_o[1] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [3] : \gen_512x32xBx1.rdata64 [2];
  assign rdata_o[0] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [1] : \gen_512x32xBx1.rdata64 [0];
  (* src = "ihp13/tc_sram_impl.sv:251.37" *)
  RM_IHPSG13_1P_256x64_c2_bm_bist \gen_512x32xBx1.i_cut  (
    .A_ADDR(addr_i[8:1]),
    .A_BIST_ADDR(8'h00),
    .A_BIST_BM(64'h0000000000000000),
    .A_BIST_CLK(1'h0),
    .A_BIST_DIN(64'h0000000000000000),
    .A_BIST_EN(1'h0),
    .A_BIST_MEN(1'h0),
    .A_BIST_REN(1'h0),
    .A_BIST_WEN(1'h0),
    .A_BM({ \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] }),
    .A_CLK(clk_i),
    .A_DIN({ wdata_i[31], wdata_i[31:30], wdata_i[30:29], wdata_i[29:28], wdata_i[28:27], wdata_i[27:26], wdata_i[26:25], wdata_i[25:24], wdata_i[24:23], wdata_i[23:22], wdata_i[22:21], wdata_i[21:20], wdata_i[20:19], wdata_i[19:18], wdata_i[18:17], wdata_i[17:16], wdata_i[16:15], wdata_i[15:14], wdata_i[14:13], wdata_i[13:12], wdata_i[12:11], wdata_i[11:10], wdata_i[10:9], wdata_i[9:8], wdata_i[8:7], wdata_i[7:6], wdata_i[6:5], wdata_i[5:4], wdata_i[4:3], wdata_i[3:2], wdata_i[2:1], wdata_i[1:0], wdata_i[0] }),
    .A_DLY(impl_i),
    .A_DOUT(\gen_512x32xBx1.rdata64 ),
    .A_MEN(req_i),
    .A_REN(\$164y ),
    .A_WEN(we_i)
  );
  assign { \gen_512x32xBx1.bm64 [61:48], \gen_512x32xBx1.bm64 [45:32], \gen_512x32xBx1.bm64 [29:16], \gen_512x32xBx1.bm64 [13:0] } = { \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] };
  assign impl_o = 1'hx;
endmodule

(* src = "ihp13/tc_sram_impl.sv:73.8" *)
module \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram (clk_i, rst_ni, impl_i, req_i, we_i, addr_i, wdata_i, be_i, rdata_o, impl_o);
  wire \$101y ;
  wire \$164y ;
  wire \$165y ;
  (* src = "ihp13/tc_sram_impl.sv:100.32" *)
  input [8:0] addr_i;
  wire [8:0] addr_i;
  (* src = "ihp13/tc_sram_impl.sv:102.32" *)
  input [3:0] be_i;
  wire [3:0] be_i;
  (* src = "ihp13/tc_sram_impl.sv:92.32" *)
  input clk_i;
  wire clk_i;
  (* src = "ihp13/tc_sram_impl.sv:223.36" *)
  wire [63:0] \gen_512x32xBx1.bm64 ;
  (* src = "ihp13/tc_sram_impl.sv:223.27" *)
  wire [63:0] \gen_512x32xBx1.rdata64 ;
  (* src = "ihp13/tc_sram_impl.sv:224.18" *)
  reg \gen_512x32xBx1.sel_q ;
  (* src = "ihp13/tc_sram_impl.sv:95.32" *)
  input impl_i;
  wire impl_i;
  (* src = "ihp13/tc_sram_impl.sv:96.32" *)
  output impl_o;
  wire impl_o;
  (* src = "ihp13/tc_sram_impl.sv:104.32" *)
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  (* src = "ihp13/tc_sram_impl.sv:98.32" *)
  input req_i;
  wire req_i;
  (* src = "ihp13/tc_sram_impl.sv:93.32" *)
  input rst_ni;
  wire rst_ni;
  (* src = "ihp13/tc_sram_impl.sv:101.32" *)
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  (* src = "ihp13/tc_sram_impl.sv:99.32" *)
  input we_i;
  wire we_i;
  assign \$101y  = ~ (* src = "ihp13/tc_sram_impl.sv:231.39-231.52" *) addr_i[0];
  assign \gen_512x32xBx1.bm64 [46] = be_i[2] & (* src = "ihp13/tc_sram_impl.sv:231.28-231.52" *) \$101y ;
  assign \gen_512x32xBx1.bm64 [47] = be_i[2] & (* src = "ihp13/tc_sram_impl.sv:233.28-233.51" *) addr_i[0];
  assign \gen_512x32xBx1.bm64 [14] = be_i[0] & (* src = "ihp13/tc_sram_impl.sv:231.28-231.52" *) \$101y ;
  assign \gen_512x32xBx1.bm64 [62] = be_i[3] & (* src = "ihp13/tc_sram_impl.sv:231.28-231.52" *) \$101y ;
  assign \gen_512x32xBx1.bm64 [63] = be_i[3] & (* src = "ihp13/tc_sram_impl.sv:233.28-233.51" *) addr_i[0];
  assign \gen_512x32xBx1.bm64 [15] = be_i[0] & (* src = "ihp13/tc_sram_impl.sv:233.28-233.51" *) addr_i[0];
  assign \$164y  = ~ (* src = "ihp13/tc_sram_impl.sv:248.24-248.29" *) we_i;
  assign \$165y  = req_i & (* src = "ihp13/tc_sram_impl.sv:248.16-248.29" *) \$164y ;
  assign \gen_512x32xBx1.bm64 [30] = be_i[1] & (* src = "ihp13/tc_sram_impl.sv:231.28-231.52" *) \$101y ;
  assign \gen_512x32xBx1.bm64 [31] = be_i[1] & (* src = "ihp13/tc_sram_impl.sv:233.28-233.51" *) addr_i[0];
  (* src = "ihp13/tc_sram_impl.sv:246.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_512x32xBx1.sel_q  <= 1'h0;
    else if (\$165y ) \gen_512x32xBx1.sel_q  <= addr_i[0];
  assign rdata_o[31] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [63] : \gen_512x32xBx1.rdata64 [62];
  assign rdata_o[30] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [61] : \gen_512x32xBx1.rdata64 [60];
  assign rdata_o[29] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [59] : \gen_512x32xBx1.rdata64 [58];
  assign rdata_o[28] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [57] : \gen_512x32xBx1.rdata64 [56];
  assign rdata_o[27] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [55] : \gen_512x32xBx1.rdata64 [54];
  assign rdata_o[26] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [53] : \gen_512x32xBx1.rdata64 [52];
  assign rdata_o[25] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [51] : \gen_512x32xBx1.rdata64 [50];
  assign rdata_o[24] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [49] : \gen_512x32xBx1.rdata64 [48];
  assign rdata_o[23] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [47] : \gen_512x32xBx1.rdata64 [46];
  assign rdata_o[22] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [45] : \gen_512x32xBx1.rdata64 [44];
  assign rdata_o[21] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [43] : \gen_512x32xBx1.rdata64 [42];
  assign rdata_o[20] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [41] : \gen_512x32xBx1.rdata64 [40];
  assign rdata_o[19] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [39] : \gen_512x32xBx1.rdata64 [38];
  assign rdata_o[18] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [37] : \gen_512x32xBx1.rdata64 [36];
  assign rdata_o[17] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [35] : \gen_512x32xBx1.rdata64 [34];
  assign rdata_o[16] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [33] : \gen_512x32xBx1.rdata64 [32];
  assign rdata_o[15] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [31] : \gen_512x32xBx1.rdata64 [30];
  assign rdata_o[14] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [29] : \gen_512x32xBx1.rdata64 [28];
  assign rdata_o[13] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [27] : \gen_512x32xBx1.rdata64 [26];
  assign rdata_o[12] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [25] : \gen_512x32xBx1.rdata64 [24];
  assign rdata_o[11] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [23] : \gen_512x32xBx1.rdata64 [22];
  assign rdata_o[10] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [21] : \gen_512x32xBx1.rdata64 [20];
  assign rdata_o[9] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [19] : \gen_512x32xBx1.rdata64 [18];
  assign rdata_o[8] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [17] : \gen_512x32xBx1.rdata64 [16];
  assign rdata_o[7] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [15] : \gen_512x32xBx1.rdata64 [14];
  assign rdata_o[6] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [13] : \gen_512x32xBx1.rdata64 [12];
  assign rdata_o[5] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [11] : \gen_512x32xBx1.rdata64 [10];
  assign rdata_o[4] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [9] : \gen_512x32xBx1.rdata64 [8];
  assign rdata_o[3] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [7] : \gen_512x32xBx1.rdata64 [6];
  assign rdata_o[2] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [5] : \gen_512x32xBx1.rdata64 [4];
  assign rdata_o[1] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [3] : \gen_512x32xBx1.rdata64 [2];
  assign rdata_o[0] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [1] : \gen_512x32xBx1.rdata64 [0];
  (* src = "ihp13/tc_sram_impl.sv:251.37" *)
  RM_IHPSG13_1P_256x64_c2_bm_bist \gen_512x32xBx1.i_cut  (
    .A_ADDR(addr_i[8:1]),
    .A_BIST_ADDR(8'h00),
    .A_BIST_BM(64'h0000000000000000),
    .A_BIST_CLK(1'h0),
    .A_BIST_DIN(64'h0000000000000000),
    .A_BIST_EN(1'h0),
    .A_BIST_MEN(1'h0),
    .A_BIST_REN(1'h0),
    .A_BIST_WEN(1'h0),
    .A_BM({ \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] }),
    .A_CLK(clk_i),
    .A_DIN({ wdata_i[31], wdata_i[31:30], wdata_i[30:29], wdata_i[29:28], wdata_i[28:27], wdata_i[27:26], wdata_i[26:25], wdata_i[25:24], wdata_i[24:23], wdata_i[23:22], wdata_i[22:21], wdata_i[21:20], wdata_i[20:19], wdata_i[19:18], wdata_i[18:17], wdata_i[17:16], wdata_i[16:15], wdata_i[15:14], wdata_i[14:13], wdata_i[13:12], wdata_i[12:11], wdata_i[11:10], wdata_i[10:9], wdata_i[9:8], wdata_i[8:7], wdata_i[7:6], wdata_i[6:5], wdata_i[5:4], wdata_i[4:3], wdata_i[3:2], wdata_i[2:1], wdata_i[1:0], wdata_i[0] }),
    .A_DLY(impl_i),
    .A_DOUT(\gen_512x32xBx1.rdata64 ),
    .A_MEN(req_i),
    .A_REN(\$164y ),
    .A_WEN(we_i)
  );
  assign { \gen_512x32xBx1.bm64 [61:48], \gen_512x32xBx1.bm64 [45:32], \gen_512x32xBx1.bm64 [29:16], \gen_512x32xBx1.bm64 [13:0] } = { \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] };
  assign impl_o = 1'hx;
endmodule

(* src = "rtl/timer_unit/timer_unit.sv:37.8" *)
module \timer_unit$croc_chip.i_croc_soc.i_croc.i_timer (clk_i, rst_ni, ref_clk_i, req_i, addr_i, wdata_i, be_i, wen_i, id_i, gnt_o, r_rdata_o, r_opc_o, r_id_o, r_valid_o, event_lo_i, event_hi_i, irq_lo_o, irq_hi_o, busy_o);
  wire \$103y ;
  wire \$107y ;
  wire \$111y ;
  wire \$113y ;
  wire \$119y ;
  wire \$122y ;
  wire \$126y ;
  wire \$127y ;
  wire \$128y ;
  wire \$131y ;
  wire \$134y ;
  wire \$144y ;
  wire \$145y ;
  wire \$146y ;
  wire \$149y ;
  wire \$14y ;
  wire \$152y ;
  wire \$15y ;
  wire \$163y ;
  wire \$167y ;
  wire \$176y ;
  wire \$196y ;
  wire \$197y ;
  wire \$205y ;
  wire \$209y ;
  wire \$38y ;
  wire \$40y ;
  wire \$44y ;
  wire \$50y ;
  wire \$56y ;
  wire \$58y ;
  wire \$59y ;
  wire \$61y ;
  wire \$63y ;
  wire \$80y ;
  wire \$86y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14912 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14914 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14923 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14925 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14903 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14906 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14909 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14916 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14920 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14927 ;
  wire \$auto$opt_share.cc:222:merge_operators$15061 ;
  wire \$auto$rtlil.cc:3092:Mux$13793 ;
  wire \$auto$rtlil.cc:3092:Mux$13796 ;
  wire \$auto$rtlil.cc:3092:Mux$15063 ;
  wire [31:0] \$procmux$11947_Y ;
  wire \$procmux$11948_CMP ;
  wire \$procmux$11949_CMP ;
  wire \$procmux$11950_CMP ;
  wire \$procmux$11951_CMP ;
  wire \$procmux$11952_CMP ;
  wire \$procmux$11953_CMP ;
  wire \$procmux$11971_Y ;
  wire \$procmux$11981_Y ;
  wire \$procmux$11990_Y ;
  wire \$procmux$12001_Y ;
  wire \$procmux$12007_Y ;
  wire \$procmux$12023_CMP ;
  wire \$procmux$12032_CMP ;
  wire [31:0] \$procmux$12043_Y ;
  wire \$procmux$12044_CMP ;
  wire [31:0] \$procmux$12056_Y ;
  wire \$procmux$12057_CMP ;
  wire \$procmux$12060_Y ;
  wire \$procmux$12065_Y ;
  wire \$procmux$12071_Y ;
  wire \$procmux$12078_Y ;
  wire \$procmux$12088_Y ;
  wire \$procmux$12099_Y ;
  (* unused_bits = "2 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] \$procmux$12110_Y ;
  (* unused_bits = "2 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] \$procmux$12113_Y ;
  wire \$procmux$12134_Y ;
  wire \$procmux$12176_Y ;
  wire \$procmux$12185_Y ;
  wire \$procmux$12194_Y ;
  wire \$procmux$12200_Y ;
  wire \$procmux$12206_Y ;
  wire \$procmux$12223_Y ;
  wire \$procmux$12245_Y ;
  wire \$procmux$12254_Y ;
  wire \$procmux$12263_Y ;
  wire \$procmux$12269_Y ;
  wire \$procmux$12279_Y ;
  wire \$procmux$12313_Y ;
  wire \$procmux$12328_Y ;
  wire \$procmux$12333_Y ;
  wire \$procmux$12336_Y ;
  wire \$procmux$12378_Y ;
  wire \$procmux$12410_Y ;
  (* src = "rtl/timer_unit/timer_unit.sv:48.39" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/timer_unit/timer_unit.sv:51.39" *)
  input [3:0] be_i;
  wire [3:0] be_i;
  (* src = "rtl/timer_unit/timer_unit.sv:66.39" *)
  output busy_o;
  wire busy_o;
  (* src = "rtl/timer_unit/timer_unit.sv:42.39" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/timer_unit/timer_unit.sv:61.39" *)
  input event_hi_i;
  wire event_hi_i;
  (* src = "rtl/timer_unit/timer_unit.sv:60.39" *)
  input event_lo_i;
  wire event_lo_i;
  (* src = "rtl/timer_unit/timer_unit.sv:53.39" *)
  output gnt_o;
  wire gnt_o;
  (* src = "rtl/timer_unit/timer_unit.sv:52.39" *)
  input [2:0] id_i;
  wire [2:0] id_i;
  (* src = "rtl/timer_unit/timer_unit.sv:64.39" *)
  output irq_hi_o;
  wire irq_hi_o;
  (* src = "rtl/timer_unit/timer_unit.sv:63.39" *)
  output irq_lo_o;
  wire irq_lo_o;
  (* src = "rtl/timer_unit/timer_unit.sv:57.39" *)
  output [2:0] r_id_o;
  reg [2:0] r_id_o;
  (* src = "rtl/timer_unit/timer_unit.sv:56.39" *)
  output r_opc_o;
  wire r_opc_o;
  (* src = "rtl/timer_unit/timer_unit.sv:58.39" *)
  output [31:0] r_rdata_o;
  wire [31:0] r_rdata_o;
  (* src = "rtl/timer_unit/timer_unit.sv:55.39" *)
  output r_valid_o;
  reg r_valid_o;
  (* src = "rtl/timer_unit/timer_unit.sv:45.39" *)
  input ref_clk_i;
  wire ref_clk_i;
  (* src = "rtl/timer_unit/timer_unit.sv:47.39" *)
  input req_i;
  wire req_i;
  (* src = "rtl/timer_unit/timer_unit.sv:43.39" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/timer_unit/timer_unit.sv:70.25" *)
  (* unused_bits = "6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  reg [31:0] s_addr;
  (* src = "rtl/timer_unit/timer_unit.sv:80.25" *)
  (* unused_bits = "2 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] s_cfg_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:80.35" *)
  wire [31:0] s_cfg_hi_reg;
  (* src = "rtl/timer_unit/timer_unit.sv:79.25" *)
  (* unused_bits = "2 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] s_cfg_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:79.35" *)
  wire [31:0] s_cfg_lo_reg;
  (* src = "rtl/timer_unit/timer_unit.sv:86.37" *)
  wire s_enable_count_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:86.19" *)
  wire s_enable_count_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:86.83" *)
  wire s_enable_count_prescaler_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:86.55" *)
  wire s_enable_count_prescaler_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:75.19" *)
  reg s_ref_clk0;
  (* src = "rtl/timer_unit/timer_unit.sv:75.31" *)
  reg s_ref_clk1;
  (* src = "rtl/timer_unit/timer_unit.sv:75.43" *)
  reg s_ref_clk2;
  (* src = "rtl/timer_unit/timer_unit.sv:75.55" *)
  reg s_ref_clk3;
  (* src = "rtl/timer_unit/timer_unit.sv:75.67" *)
  wire s_ref_clk_edge;
  (* src = "rtl/timer_unit/timer_unit.sv:75.83" *)
  wire s_ref_clk_edge_del;
  (* src = "rtl/timer_unit/timer_unit.sv:87.36" *)
  wire s_reset_count_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:87.19" *)
  wire s_reset_count_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:87.80" *)
  wire s_reset_count_prescaler_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:87.53" *)
  wire s_reset_count_prescaler_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:73.70" *)
  wire s_reset_timer_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:73.53" *)
  wire s_reset_timer_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:73.36" *)
  wire s_start_timer_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:73.19" *)
  wire s_start_timer_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:88.39" *)
  wire s_target_reached_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:88.19" *)
  wire s_target_reached_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:88.90" *)
  wire s_target_reached_prescaler_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:88.59" *)
  wire s_target_reached_prescaler_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:84.41" *)
  reg [31:0] s_timer_cmp_hi_reg;
  (* src = "rtl/timer_unit/timer_unit.sv:83.41" *)
  reg [31:0] s_timer_cmp_lo_reg;
  (* src = "rtl/timer_unit/timer_unit.sv:82.25" *)
  wire [31:0] s_timer_val_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:81.25" *)
  wire [31:0] s_timer_val_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:69.25" *)
  reg s_wen;
  (* src = "rtl/timer_unit/timer_unit.sv:72.39" *)
  wire s_write_counter_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:72.19" *)
  wire s_write_counter_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:50.39" *)
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  (* src = "rtl/timer_unit/timer_unit.sv:49.39" *)
  input wen_i;
  wire wen_i;
  assign \$103y  = s_cfg_hi_reg[1] | (* src = "rtl/timer_unit/timer_unit.sv:346.7-346.66" *) s_reset_timer_hi;
  assign \$107y  = s_cfg_hi_reg[4] && (* src = "rtl/timer_unit/timer_unit.sv:355.10-355.83" *) s_target_reached_hi;
  assign \$111y  = s_cfg_lo_reg[4] && (* src = "rtl/timer_unit/timer_unit.sv:362.10-362.83" *) s_target_reached_lo;
  assign \$113y  = \$111y  && (* src = "rtl/timer_unit/timer_unit.sv:362.10-362.119" *) s_target_reached_hi;
  assign \$119y  = s_cfg_lo_reg[6] && (* src = "rtl/timer_unit/timer_unit.sv:369.7-369.87" *) s_target_reached_prescaler_lo;
  assign \$122y  = s_cfg_hi_reg[6] && (* src = "rtl/timer_unit/timer_unit.sv:374.7-374.87" *) s_target_reached_prescaler_hi;
  assign \$126y  = ~ (* src = "rtl/timer_unit/timer_unit.sv:392.12-392.51" *) s_cfg_lo_reg[6];
  assign \$127y  = ~ (* src = "rtl/timer_unit/timer_unit.sv:392.55-392.92" *) s_cfg_lo_reg[7];
  assign \$128y  = \$126y  && (* src = "rtl/timer_unit/timer_unit.sv:392.12-392.92" *) \$127y ;
  assign \$131y  = \$126y  && (* src = "rtl/timer_unit/timer_unit.sv:397.14-397.94" *) s_cfg_lo_reg[7];
  assign \$134y  = s_cfg_lo_reg[6] && (* src = "rtl/timer_unit/timer_unit.sv:402.9-402.89" *) s_cfg_lo_reg[7];
  assign \$14y  = ~ (* src = "rtl/timer_unit/timer_unit.sv:180.22-180.28" *) wen_i;
  assign \$144y  = ~ (* src = "rtl/timer_unit/timer_unit.sv:417.12-417.51" *) s_cfg_hi_reg[6];
  assign \$145y  = ~ (* src = "rtl/timer_unit/timer_unit.sv:417.55-417.92" *) s_cfg_hi_reg[7];
  assign \$146y  = \$144y  && (* src = "rtl/timer_unit/timer_unit.sv:417.12-417.92" *) \$145y ;
  assign \$149y  = \$144y  && (* src = "rtl/timer_unit/timer_unit.sv:422.14-422.94" *) s_cfg_hi_reg[7];
  assign \$15y  = req_i && (* src = "rtl/timer_unit/timer_unit.sv:180.13-180.28" *) \$14y ;
  assign \$152y  = s_cfg_hi_reg[6] && (* src = "rtl/timer_unit/timer_unit.sv:427.9-427.89" *) s_cfg_hi_reg[7];
  assign \$163y  = s_cfg_lo_reg[0] && (* src = "rtl/timer_unit/timer_unit.sv:440.7-440.86" *) s_cfg_lo_reg[31];
  assign \$167y  = s_timer_val_lo == (* src = "rtl/timer_unit/timer_unit.sv:445.28-445.58" *) 32'd4294967295;
  assign \$auto$opt_share.cc:222:merge_operators$15061  = \$auto$rtlil.cc:3092:Mux$15063  && (* src = "rtl/timer_unit/timer_unit.sv:450.26-450.82" *) \$167y ;
  assign \$176y  = s_target_reached_prescaler_lo && (* src = "rtl/timer_unit/timer_unit.sv:456.30-456.81" *) s_ref_clk_edge_del;
  assign \$196y  = s_target_reached_hi & (* src = "rtl/timer_unit/timer_unit.sv:476.18-476.62" *) s_cfg_hi_reg[2];
  assign \$197y  = s_target_reached_lo & (* src = "rtl/timer_unit/timer_unit.sv:480.18-480.59" *) s_target_reached_hi;
  assign irq_lo_o = \$auto$rtlil.cc:3092:Mux$13793  & (* src = "rtl/timer_unit/timer_unit.sv:480.18-480.84" *) s_cfg_lo_reg[2];
  assign \$205y  = ~ (* src = "rtl/timer_unit/timer_unit.sv:506.57-506.75" *) s_ref_clk2;
  assign s_ref_clk_edge = s_ref_clk1 & (* src = "rtl/timer_unit/timer_unit.sv:506.30-506.77" *) \$205y ;
  assign \$209y  = ~ (* src = "rtl/timer_unit/timer_unit.sv:507.61-507.79" *) s_ref_clk3;
  assign s_ref_clk_edge_del = s_ref_clk2 & (* src = "rtl/timer_unit/timer_unit.sv:507.34-507.81" *) \$209y ;
  assign busy_o = s_cfg_hi_reg[0] | (* src = "rtl/timer_unit/timer_unit.sv:577.20-577.73" *) s_cfg_lo_reg[0];
  assign \$38y  = event_lo_i && (* src = "rtl/timer_unit/timer_unit.sv:219.8-219.57" *) s_cfg_lo[3];
  assign \$40y  = \$38y  | (* src = "rtl/timer_unit/timer_unit.sv:219.7-219.82" *) s_start_timer_lo;
  assign \$44y  = s_cfg_lo[5] && (* src = "rtl/timer_unit/timer_unit.sv:225.10-225.80" *) s_target_reached_lo;
  assign \$50y  = \$44y  && (* src = "rtl/timer_unit/timer_unit.sv:230.11-230.116" *) s_target_reached_hi;
  assign \$56y  = event_hi_i && (* src = "rtl/timer_unit/timer_unit.sv:236.8-236.57" *) s_cfg_hi[3];
  assign \$58y  = \$56y  | (* src = "rtl/timer_unit/timer_unit.sv:236.7-236.82" *) s_start_timer_hi;
  assign \$59y  = ~ (* src = "rtl/timer_unit/timer_unit.sv:240.14-240.48" *) s_cfg_hi_reg[31];
  assign \$61y  = \$59y  && (* src = "rtl/timer_unit/timer_unit.sv:240.12-240.89" *) s_cfg_hi[5];
  assign \$63y  = \$61y  && (* src = "rtl/timer_unit/timer_unit.sv:240.12-240.124" *) s_target_reached_hi;
  assign \$80y  = r_valid_o && (* src = "rtl/timer_unit/timer_unit.sv:282.13-282.27" *) s_wen;
  assign \$86y  = s_cfg_lo_reg[1] | (* src = "rtl/timer_unit/timer_unit.sv:323.7-323.66" *) s_reset_timer_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:259.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) s_timer_cmp_lo_reg <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14903 ) s_timer_cmp_lo_reg <= wdata_i;
  (* src = "rtl/timer_unit/timer_unit.sv:259.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) s_timer_cmp_hi_reg <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14906 ) s_timer_cmp_hi_reg <= wdata_i;
  reg [27:0] \$auto$ff.cc:266:slice$14908 ;
  (* src = "rtl/timer_unit/timer_unit.sv:259.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14908  <= 28'h0000000;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14909 ) \$auto$ff.cc:266:slice$14908  <= { wdata_i[31:6], wdata_i[4], wdata_i[2] };
  assign { s_cfg_lo_reg[31:6], s_cfg_lo_reg[4], s_cfg_lo_reg[2] } = \$auto$ff.cc:266:slice$14908 ;
  reg \$auto$ff.cc:266:slice$14911 ;
  (* src = "rtl/timer_unit/timer_unit.sv:259.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14911  <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14916 ) \$auto$ff.cc:266:slice$14911  <= s_cfg_lo[1];
  assign s_cfg_lo_reg[1] = \$auto$ff.cc:266:slice$14911 ;
  reg [2:0] \$auto$ff.cc:266:slice$14918 ;
  (* src = "rtl/timer_unit/timer_unit.sv:259.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14918  <= 3'h0;
    else \$auto$ff.cc:266:slice$14918  <= { s_cfg_lo[5], s_cfg_lo[3], s_cfg_lo[0] };
  assign { s_cfg_lo_reg[5], s_cfg_lo_reg[3], s_cfg_lo_reg[0] } = \$auto$ff.cc:266:slice$14918 ;
  reg [27:0] \$auto$ff.cc:266:slice$14919 ;
  (* src = "rtl/timer_unit/timer_unit.sv:259.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14919  <= 28'h0000000;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14920 ) \$auto$ff.cc:266:slice$14919  <= { wdata_i[31:6], wdata_i[4], wdata_i[2] };
  assign { s_cfg_hi_reg[31:6], s_cfg_hi_reg[4], s_cfg_hi_reg[2] } = \$auto$ff.cc:266:slice$14919 ;
  reg \$auto$ff.cc:266:slice$14922 ;
  (* src = "rtl/timer_unit/timer_unit.sv:259.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14922  <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14927 ) \$auto$ff.cc:266:slice$14922  <= s_cfg_hi[1];
  assign s_cfg_hi_reg[1] = \$auto$ff.cc:266:slice$14922 ;
  reg [2:0] \$auto$ff.cc:266:slice$14929 ;
  (* src = "rtl/timer_unit/timer_unit.sv:259.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$14929  <= 3'h0;
    else \$auto$ff.cc:266:slice$14929  <= { s_cfg_hi[5], s_cfg_hi[3], s_cfg_hi[0] };
  assign { s_cfg_hi_reg[5], s_cfg_hi_reg[3], s_cfg_hi_reg[0] } = \$auto$ff.cc:266:slice$14929 ;
  (* src = "rtl/timer_unit/timer_unit.sv:98.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_valid_o <= 1'h0;
    else r_valid_o <= req_i;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14912  = | { s_reset_count_lo, \$15y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14914  = { \$procmux$12057_CMP , s_reset_count_lo, \$15y  } != 3'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14923  = | { s_reset_count_hi, \$15y  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14925  = { \$procmux$12044_CMP , s_reset_count_hi, \$15y  } != 3'h1;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14903  = & { \$procmux$12032_CMP , \$15y  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14906  = & { \$procmux$12023_CMP , \$15y  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14909  = & { \$procmux$12057_CMP , \$15y  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14916  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14914 , \$auto$opt_dff.cc:194:make_patterns_logic$14912  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14920  = & { \$procmux$12044_CMP , \$15y  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14927  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14925 , \$auto$opt_dff.cc:194:make_patterns_logic$14923  };
  assign \$auto$rtlil.cc:3092:Mux$13793  = s_cfg_lo_reg[31] ? \$197y  : s_target_reached_lo;
  assign \$auto$rtlil.cc:3092:Mux$13796  = \$134y  ? \$176y  : s_target_reached_prescaler_lo;
  assign \$auto$rtlil.cc:3092:Mux$15063  = \$131y  ? s_ref_clk_edge_del : \$auto$rtlil.cc:3092:Mux$13796 ;
  (* src = "rtl/timer_unit/timer_unit.sv:142.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_id_o <= 3'h0;
    else r_id_o <= id_i;
  (* src = "rtl/timer_unit/timer_unit.sv:142.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) s_addr <= 32'd0;
    else s_addr <= addr_i;
  (* src = "rtl/timer_unit/timer_unit.sv:488.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) s_ref_clk0 <= 1'h0;
    else s_ref_clk0 <= ref_clk_i;
  (* src = "rtl/timer_unit/timer_unit.sv:488.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) s_ref_clk1 <= 1'h0;
    else s_ref_clk1 <= s_ref_clk0;
  (* src = "rtl/timer_unit/timer_unit.sv:488.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) s_ref_clk2 <= 1'h0;
    else s_ref_clk2 <= s_ref_clk1;
  (* src = "rtl/timer_unit/timer_unit.sv:488.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) s_ref_clk3 <= 1'h0;
    else s_ref_clk3 <= s_ref_clk2;
  (* src = "rtl/timer_unit/timer_unit.sv:142.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) s_wen <= 1'h0;
    else s_wen <= wen_i;
  function [31:0] \$procmux$11947 ;
    input [31:0] a;
    input [191:0] b;
    input [5:0] s;
    (* src = "rtl/timer_unit/timer_unit.sv:303.18-303.49|rtl/timer_unit/timer_unit.sv:285.14-305.21" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$11947  = b[31:0];
      6'b????1?:
        \$procmux$11947  = b[63:32];
      6'b???1??:
        \$procmux$11947  = b[95:64];
      6'b??1???:
        \$procmux$11947  = b[127:96];
      6'b?1????:
        \$procmux$11947  = b[159:128];
      6'b1?????:
        \$procmux$11947  = b[191:160];
      default:
        \$procmux$11947  = a;
    endcase
  endfunction
  assign \$procmux$11947_Y  = \$procmux$11947 (32'd0, { s_cfg_lo_reg, s_cfg_hi_reg, s_timer_val_lo, s_timer_val_hi, s_timer_cmp_lo_reg, s_timer_cmp_hi_reg }, { \$procmux$11953_CMP , \$procmux$11952_CMP , \$procmux$11951_CMP , \$procmux$11950_CMP , \$procmux$11949_CMP , \$procmux$11948_CMP  });
  assign \$procmux$11948_CMP  = s_addr[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:303.18-303.49|rtl/timer_unit/timer_unit.sv:285.14-305.21" *) 5'h14;
  assign \$procmux$11949_CMP  = s_addr[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:300.18-300.49|rtl/timer_unit/timer_unit.sv:285.14-305.21" *) 5'h10;
  assign \$procmux$11950_CMP  = s_addr[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:297.18-297.45|rtl/timer_unit/timer_unit.sv:285.14-305.21" *) 4'hc;
  assign \$procmux$11951_CMP  = s_addr[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:294.18-294.45|rtl/timer_unit/timer_unit.sv:285.14-305.21" *) 4'h8;
  assign \$procmux$11952_CMP  = s_addr[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:291.18-291.43|rtl/timer_unit/timer_unit.sv:285.14-305.21" *) 3'h4;
  assign \$procmux$11953_CMP  = ! (* src = "rtl/timer_unit/timer_unit.sv:288.18-288.43|rtl/timer_unit/timer_unit.sv:285.14-305.21" *) s_addr[5:0];
  assign r_rdata_o = \$80y  ? (* src = "rtl/timer_unit/timer_unit.sv:285.14-305.21|rtl/timer_unit/timer_unit.sv:282.9-307.14" *) \$procmux$11947_Y  : 32'd0;
  assign irq_hi_o = s_cfg_lo_reg[31] ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:474.4-477.7|rtl/timer_unit/timer_unit.sv:473.2-481.7" *) 1'h0 : \$196y ;
  assign s_cfg_hi[1] = s_reset_count_hi ? (* src = "rtl/timer_unit/timer_unit.sv:254.4-254.32|rtl/timer_unit/timer_unit.sv:253.2-254.32" *) 1'h0 : \$procmux$12110_Y [1];
  assign s_cfg_lo[1] = s_reset_count_lo ? (* src = "rtl/timer_unit/timer_unit.sv:250.4-250.32|rtl/timer_unit/timer_unit.sv:249.2-250.32" *) 1'h0 : \$procmux$12113_Y [1];
  assign \$procmux$11971_Y  = \$50y  ? (* src = "rtl/timer_unit/timer_unit.sv:244.11-244.37|rtl/timer_unit/timer_unit.sv:243.7-244.37" *) 1'h0 : \$procmux$12110_Y [0];
  assign \$procmux$11981_Y  = \$63y  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:241.9-241.35|rtl/timer_unit/timer_unit.sv:240.7-245.9" *) 1'h0 : \$procmux$11971_Y ;
  assign s_cfg_hi[0] = \$procmux$11981_Y  | (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:237.4-237.30|rtl/timer_unit/timer_unit.sv:236.2-246.7" *) \$58y ;
  assign \$procmux$11990_Y  = \$50y  ? (* src = "rtl/timer_unit/timer_unit.sv:231.7-231.33|rtl/timer_unit/timer_unit.sv:230.6-231.33" *) 1'h0 : \$procmux$12113_Y [0];
  assign \$procmux$12001_Y  = s_cfg_lo_reg[31] ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:225.5-226.33|rtl/timer_unit/timer_unit.sv:223.7-232.12" *) \$procmux$11990_Y  : \$procmux$12007_Y ;
  assign \$procmux$12007_Y  = \$44y  ? (* src = "rtl/timer_unit/timer_unit.sv:226.7-226.33|rtl/timer_unit/timer_unit.sv:225.5-226.33" *) 1'h0 : \$procmux$12113_Y [0];
  assign s_cfg_lo[0] = \$procmux$12001_Y  | (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:220.4-220.30|rtl/timer_unit/timer_unit.sv:219.2-233.7" *) \$40y ;
  assign \$procmux$12023_CMP  = addr_i[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:201.18-201.47|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) 5'h14;
  assign \$procmux$12032_CMP  = addr_i[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:198.18-198.47|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) 5'h10;
  assign \$procmux$12043_Y  = \$procmux$12044_CMP  ? (* src = "rtl/timer_unit/timer_unit.sv:189.4-189.33|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) wdata_i : { s_cfg_hi_reg[31:2], 1'hx, s_cfg_hi_reg[0] };
  assign \$procmux$12044_CMP  = addr_i[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:189.4-189.33|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) 3'h4;
  assign \$procmux$12056_Y  = \$procmux$12057_CMP  ? (* src = "rtl/timer_unit/timer_unit.sv:186.4-186.33|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) wdata_i : { s_cfg_lo_reg[31:2], 1'hx, s_cfg_lo_reg[0] };
  assign \$procmux$12057_CMP  = ! (* src = "rtl/timer_unit/timer_unit.sv:186.4-186.33|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) addr_i[5:0];
  assign \$procmux$12060_Y  = addr_i[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:213.4-213.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) 6'h24;
  assign \$procmux$12065_Y  = addr_i[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:210.4-210.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) 6'h20;
  assign \$procmux$12071_Y  = addr_i[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:207.4-207.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) 5'h1c;
  assign \$procmux$12078_Y  = addr_i[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:204.4-204.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) 5'h18;
  assign \$procmux$12088_Y  = addr_i[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:195.4-195.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) 4'hc;
  assign \$procmux$12099_Y  = addr_i[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:192.4-192.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) 4'h8;
  assign { s_cfg_hi[31:2], \$procmux$12110_Y [1:0] } = \$15y  ? (* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" *) \$procmux$12043_Y  : { s_cfg_hi_reg[31:2], 1'hx, s_cfg_hi_reg[0] };
  assign { s_cfg_lo[31:2], \$procmux$12113_Y [1:0] } = \$15y  ? (* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" *) \$procmux$12056_Y  : { s_cfg_lo_reg[31:2], 1'hx, s_cfg_lo_reg[0] };
  assign s_reset_timer_hi = \$15y  & (* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" *) \$procmux$12060_Y ;
  assign s_reset_timer_lo = \$15y  & (* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" *) \$procmux$12065_Y ;
  assign s_start_timer_hi = \$15y  & (* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" *) \$procmux$12071_Y ;
  assign s_start_timer_lo = \$15y  & (* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" *) \$procmux$12078_Y ;
  assign s_write_counter_hi = \$15y  & (* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" *) \$procmux$12088_Y ;
  assign s_write_counter_lo = \$15y  & (* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" *) \$procmux$12099_Y ;
  assign \$procmux$12134_Y  = \$134y  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:453.3-457.6|rtl/timer_unit/timer_unit.sv:452.14-463.6" *) s_ref_clk_edge : 1'h1;
  assign \$procmux$12176_Y  = \$131y  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:448.3-451.6|rtl/timer_unit/timer_unit.sv:447.11-463.6" *) s_ref_clk_edge : s_target_reached_prescaler_lo;
  assign \$procmux$12185_Y  = \$131y  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:448.3-451.6|rtl/timer_unit/timer_unit.sv:447.11-463.6" *) \$procmux$12333_Y  : \$procmux$12134_Y ;
  assign \$procmux$12194_Y  = \$128y  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:443.6-446.9|rtl/timer_unit/timer_unit.sv:442.6-463.6" *) \$167y  : \$auto$opt_share.cc:222:merge_operators$15061 ;
  assign \$procmux$12200_Y  = \$procmux$12176_Y  | (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:443.6-446.9|rtl/timer_unit/timer_unit.sv:442.6-463.6" *) \$128y ;
  assign \$procmux$12206_Y  = \$128y  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:443.6-446.9|rtl/timer_unit/timer_unit.sv:442.6-463.6" *) \$procmux$12333_Y  : \$procmux$12185_Y ;
  assign s_enable_count_prescaler_lo = \$163y  ? (* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" *) \$procmux$12206_Y  : \$procmux$12333_Y ;
  assign s_enable_count_hi = \$163y  ? (* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" *) \$procmux$12194_Y  : \$procmux$12279_Y ;
  assign s_enable_count_lo = \$163y  ? (* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" *) \$procmux$12200_Y  : \$procmux$12336_Y ;
  assign \$procmux$12223_Y  = \$152y  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:428.6-431.9|rtl/timer_unit/timer_unit.sv:427.4-436.9" *) s_ref_clk_edge : 1'h1;
  assign \$procmux$12245_Y  = \$149y  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:424.7-424.42|rtl/timer_unit/timer_unit.sv:422.9-436.9" *) s_ref_clk_edge : s_target_reached_prescaler_hi;
  assign \$procmux$12254_Y  = \$149y  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:424.7-424.42|rtl/timer_unit/timer_unit.sv:422.9-436.9" *) 1'h0 : \$procmux$12223_Y ;
  assign \$procmux$12263_Y  = \$procmux$12245_Y  | (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:419.5-419.30|rtl/timer_unit/timer_unit.sv:417.7-436.9" *) \$146y ;
  assign \$procmux$12269_Y  = \$146y  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:419.5-419.30|rtl/timer_unit/timer_unit.sv:417.7-436.9" *) 1'h0 : \$procmux$12254_Y ;
  assign s_enable_count_prescaler_hi = s_cfg_hi_reg[0] & (* src = "rtl/timer_unit/timer_unit.sv:417.7-436.9|rtl/timer_unit/timer_unit.sv:415.2-437.7" *) \$procmux$12269_Y ;
  assign \$procmux$12279_Y  = s_cfg_hi_reg[0] & (* src = "rtl/timer_unit/timer_unit.sv:417.7-436.9|rtl/timer_unit/timer_unit.sv:415.2-437.7" *) \$procmux$12263_Y ;
  assign \$procmux$12313_Y  = \$131y  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:399.7-399.42|rtl/timer_unit/timer_unit.sv:397.9-411.9" *) 1'h0 : \$procmux$12134_Y ;
  assign \$procmux$12328_Y  = \$128y  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:394.5-394.30|rtl/timer_unit/timer_unit.sv:392.7-411.9" *) 1'h0 : \$procmux$12313_Y ;
  assign \$procmux$12333_Y  = s_cfg_lo_reg[0] & (* src = "rtl/timer_unit/timer_unit.sv:392.7-411.9|rtl/timer_unit/timer_unit.sv:390.2-412.7" *) \$procmux$12328_Y ;
  assign \$procmux$12336_Y  = s_cfg_lo_reg[0] & (* src = "rtl/timer_unit/timer_unit.sv:392.7-411.9|rtl/timer_unit/timer_unit.sv:390.2-412.7" *) \$procmux$12200_Y ;
  assign s_reset_count_prescaler_hi = \$103y  | (* src = "rtl/timer_unit/timer_unit.sv:376.7-376.41|rtl/timer_unit/timer_unit.sv:374.2-377.7" *) \$122y ;
  assign s_reset_count_prescaler_lo = \$86y  | (* src = "rtl/timer_unit/timer_unit.sv:371.7-371.41|rtl/timer_unit/timer_unit.sv:369.2-372.7" *) \$119y ;
  assign \$procmux$12378_Y  = s_cfg_lo_reg[31] ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:355.5-358.10|rtl/timer_unit/timer_unit.sv:353.7-366.12" *) \$113y  : \$107y ;
  assign s_reset_count_hi = \$procmux$12378_Y  | (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:347.4-350.7|rtl/timer_unit/timer_unit.sv:346.2-367.14" *) \$103y ;
  assign \$procmux$12410_Y  = s_cfg_lo_reg[31] ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:332.5-335.10|rtl/timer_unit/timer_unit.sv:330.7-343.12" *) \$113y  : \$111y ;
  assign s_reset_count_lo = \$procmux$12410_Y  | (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:324.4-327.7|rtl/timer_unit/timer_unit.sv:323.2-344.7" *) \$86y ;
  (* src = "rtl/timer_unit/timer_unit.sv:561.23" *)
  \timer_unit_counter$croc_chip.i_croc_soc.i_croc.i_timer.counter_hi_i  counter_hi_i (
    .clk_i(clk_i),
    .compare_value_i(s_timer_cmp_hi_reg),
    .counter_value_i(wdata_i),
    .counter_value_o(s_timer_val_hi),
    .enable_count_i(s_enable_count_hi),
    .reset_count_i(s_reset_count_hi),
    .rst_ni(rst_ni),
    .target_reached_o(s_target_reached_hi),
    .write_counter_i(s_write_counter_hi)
  );
  (* src = "rtl/timer_unit/timer_unit.sv:545.23" *)
  \timer_unit_counter$croc_chip.i_croc_soc.i_croc.i_timer.counter_lo_i  counter_lo_i (
    .clk_i(clk_i),
    .compare_value_i(s_timer_cmp_lo_reg),
    .counter_value_i(wdata_i),
    .counter_value_o(s_timer_val_lo),
    .enable_count_i(s_enable_count_lo),
    .reset_count_i(s_reset_count_lo),
    .rst_ni(rst_ni),
    .target_reached_o(s_target_reached_lo),
    .write_counter_i(s_write_counter_lo)
  );
  (* src = "rtl/timer_unit/timer_unit.sv:529.29" *)
  \timer_unit_counter_presc$croc_chip.i_croc_soc.i_croc.i_timer.prescaler_hi_i  prescaler_hi_i (
    .clk_i(clk_i),
    .compare_value_i({ 24'h000000, s_cfg_hi_reg[15:8] }),
    .counter_value_i(32'd0),
    .enable_count_i(s_enable_count_prescaler_hi),
    .reset_count_i(s_reset_count_prescaler_hi),
    .rst_ni(rst_ni),
    .target_reached_o(s_target_reached_prescaler_hi),
    .write_counter_i(1'h0)
  );
  (* src = "rtl/timer_unit/timer_unit.sv:513.29" *)
  \timer_unit_counter_presc$croc_chip.i_croc_soc.i_croc.i_timer.prescaler_lo_i  prescaler_lo_i (
    .clk_i(clk_i),
    .compare_value_i({ 24'h000000, s_cfg_lo_reg[15:8] }),
    .counter_value_i(32'd0),
    .enable_count_i(s_enable_count_prescaler_lo),
    .reset_count_i(s_reset_count_prescaler_lo),
    .rst_ni(rst_ni),
    .target_reached_o(s_target_reached_prescaler_lo),
    .write_counter_i(1'h0)
  );
  assign \$procmux$12110_Y [31:2] = s_cfg_hi[31:2];
  assign \$procmux$12113_Y [31:2] = s_cfg_lo[31:2];
  assign gnt_o = 1'h1;
  assign r_opc_o = 1'h0;
endmodule

(* src = "rtl/timer_unit/timer_unit_counter.sv:13.8" *)
module \timer_unit_counter$croc_chip.i_croc_soc.i_croc.i_timer.counter_hi_i (clk_i, rst_ni, write_counter_i, counter_value_i, reset_count_i, enable_count_i, compare_value_i, target_reached_o, counter_value_o);
  wire \$14y ;
  wire [31:0] \$4y ;
  wire [31:0] \$procmux$10898_Y ;
  wire [31:0] \$procmux$10908_Y ;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:15.24" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:23.24" *)
  input [31:0] compare_value_i;
  wire [31:0] compare_value_i;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:19.24" *)
  input [31:0] counter_value_i;
  wire [31:0] counter_value_i;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:25.24" *)
  output [31:0] counter_value_o;
  reg [31:0] counter_value_o;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:22.24" *)
  input enable_count_i;
  wire enable_count_i;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:21.24" *)
  input reset_count_i;
  wire reset_count_i;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:16.24" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:29.24" *)
  wire [31:0] s_count;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:26.24" *)
  output target_reached_o;
  reg target_reached_o;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:18.24" *)
  input write_counter_i;
  wire write_counter_i;
  assign \$14y  = s_count == (* src = "rtl/timer_unit/timer_unit_counter.sv:65.15-65.41" *) compare_value_i;
  assign \$4y  = counter_value_o + (* src = "rtl/timer_unit/timer_unit_counter.sv:46.15-46.30" *) 1'h1;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:51.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_value_o <= 32'd0;
    else counter_value_o <= s_count;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:60.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) target_reached_o <= 1'h0;
    else target_reached_o <= \$14y ;
  assign \$procmux$10898_Y  = enable_count_i ? (* src = "rtl/timer_unit/timer_unit_counter.sv:46.5-46.31|rtl/timer_unit/timer_unit_counter.sv:45.3-46.31" *) \$4y  : counter_value_o;
  assign \$procmux$10908_Y  = write_counter_i ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit_counter.sv:42.7-42.33|rtl/timer_unit/timer_unit_counter.sv:41.5-47.10" *) counter_value_i : \$procmux$10898_Y ;
  assign s_count = reset_count_i ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit_counter.sv:38.10-38.22|rtl/timer_unit/timer_unit_counter.sv:37.7-48.5" *) 32'd0 : \$procmux$10908_Y ;
endmodule

(* src = "rtl/timer_unit/timer_unit_counter.sv:13.8" *)
module \timer_unit_counter$croc_chip.i_croc_soc.i_croc.i_timer.counter_lo_i (clk_i, rst_ni, write_counter_i, counter_value_i, reset_count_i, enable_count_i, compare_value_i, target_reached_o, counter_value_o);
  wire \$14y ;
  wire [31:0] \$4y ;
  wire [31:0] \$procmux$10920_Y ;
  wire [31:0] \$procmux$10930_Y ;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:15.24" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:23.24" *)
  input [31:0] compare_value_i;
  wire [31:0] compare_value_i;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:19.24" *)
  input [31:0] counter_value_i;
  wire [31:0] counter_value_i;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:25.24" *)
  output [31:0] counter_value_o;
  reg [31:0] counter_value_o;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:22.24" *)
  input enable_count_i;
  wire enable_count_i;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:21.24" *)
  input reset_count_i;
  wire reset_count_i;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:16.24" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:29.24" *)
  wire [31:0] s_count;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:26.24" *)
  output target_reached_o;
  reg target_reached_o;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:18.24" *)
  input write_counter_i;
  wire write_counter_i;
  assign \$14y  = s_count == (* src = "rtl/timer_unit/timer_unit_counter.sv:65.15-65.41" *) compare_value_i;
  assign \$4y  = counter_value_o + (* src = "rtl/timer_unit/timer_unit_counter.sv:46.15-46.30" *) 1'h1;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:51.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_value_o <= 32'd0;
    else counter_value_o <= s_count;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:60.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) target_reached_o <= 1'h0;
    else target_reached_o <= \$14y ;
  assign \$procmux$10920_Y  = enable_count_i ? (* src = "rtl/timer_unit/timer_unit_counter.sv:46.5-46.31|rtl/timer_unit/timer_unit_counter.sv:45.3-46.31" *) \$4y  : counter_value_o;
  assign \$procmux$10930_Y  = write_counter_i ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit_counter.sv:42.7-42.33|rtl/timer_unit/timer_unit_counter.sv:41.5-47.10" *) counter_value_i : \$procmux$10920_Y ;
  assign s_count = reset_count_i ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit_counter.sv:38.10-38.22|rtl/timer_unit/timer_unit_counter.sv:37.7-48.5" *) 32'd0 : \$procmux$10930_Y ;
endmodule

(* src = "rtl/timer_unit/timer_unit_counter_presc.sv:13.8" *)
module \timer_unit_counter_presc$croc_chip.i_croc_soc.i_croc.i_timer.prescaler_hi_i (clk_i, rst_ni, write_counter_i, counter_value_i, reset_count_i, enable_count_i, compare_value_i, target_reached_o, counter_value_o);
  wire \$16y ;
  wire \$3y ;
  wire [31:0] \$6y ;
  wire [31:0] \$procmux$10942_Y ;
  wire [31:0] \$procmux$10952_Y ;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:15.24" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:23.24" *)
  input [31:0] compare_value_i;
  wire [31:0] compare_value_i;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:19.24" *)
  input [31:0] counter_value_i;
  wire [31:0] counter_value_i;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:25.24" *)
  output [31:0] counter_value_o;
  reg [31:0] counter_value_o;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:22.24" *)
  input enable_count_i;
  wire enable_count_i;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:21.24" *)
  input reset_count_i;
  wire reset_count_i;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:16.24" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:29.24" *)
  wire [31:0] s_count;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:26.24" *)
  output target_reached_o;
  reg target_reached_o;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:18.24" *)
  input write_counter_i;
  wire write_counter_i;
  assign \$16y  = s_count == (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:65.15-65.41" *) compare_value_i;
  assign \$3y  = reset_count_i || (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:37.11-37.52" *) target_reached_o;
  assign \$6y  = counter_value_o + (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:46.26-46.41" *) 1'h1;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:51.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_value_o <= 32'd0;
    else counter_value_o <= s_count;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:60.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) target_reached_o <= 1'h0;
    else target_reached_o <= \$16y ;
  assign \$procmux$10942_Y  = enable_count_i ? (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:46.16-46.42|rtl/timer_unit/timer_unit_counter_presc.sv:45.14-46.42" *) \$6y  : counter_value_o;
  assign \$procmux$10952_Y  = write_counter_i ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:42.12-42.38|rtl/timer_unit/timer_unit_counter_presc.sv:41.9-47.12" *) counter_value_i : \$procmux$10942_Y ;
  assign s_count = \$3y  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:38.8-38.20|rtl/timer_unit/timer_unit_counter_presc.sv:37.6-48.9" *) 32'd0 : \$procmux$10952_Y ;
endmodule

(* src = "rtl/timer_unit/timer_unit_counter_presc.sv:13.8" *)
module \timer_unit_counter_presc$croc_chip.i_croc_soc.i_croc.i_timer.prescaler_lo_i (clk_i, rst_ni, write_counter_i, counter_value_i, reset_count_i, enable_count_i, compare_value_i, target_reached_o, counter_value_o);
  wire \$16y ;
  wire \$3y ;
  wire [31:0] \$6y ;
  wire [31:0] \$procmux$10964_Y ;
  wire [31:0] \$procmux$10974_Y ;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:15.24" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:23.24" *)
  input [31:0] compare_value_i;
  wire [31:0] compare_value_i;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:19.24" *)
  input [31:0] counter_value_i;
  wire [31:0] counter_value_i;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:25.24" *)
  output [31:0] counter_value_o;
  reg [31:0] counter_value_o;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:22.24" *)
  input enable_count_i;
  wire enable_count_i;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:21.24" *)
  input reset_count_i;
  wire reset_count_i;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:16.24" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:29.24" *)
  wire [31:0] s_count;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:26.24" *)
  output target_reached_o;
  reg target_reached_o;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:18.24" *)
  input write_counter_i;
  wire write_counter_i;
  assign \$16y  = s_count == (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:65.15-65.41" *) compare_value_i;
  assign \$3y  = reset_count_i || (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:37.11-37.52" *) target_reached_o;
  assign \$6y  = counter_value_o + (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:46.26-46.41" *) 1'h1;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:51.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_value_o <= 32'd0;
    else counter_value_o <= s_count;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:60.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) target_reached_o <= 1'h0;
    else target_reached_o <= \$16y ;
  assign \$procmux$10964_Y  = enable_count_i ? (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:46.16-46.42|rtl/timer_unit/timer_unit_counter_presc.sv:45.14-46.42" *) \$6y  : counter_value_o;
  assign \$procmux$10974_Y  = write_counter_i ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:42.12-42.38|rtl/timer_unit/timer_unit_counter_presc.sv:41.9-47.12" *) counter_value_i : \$procmux$10964_Y ;
  assign s_count = \$3y  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:38.8-38.20|rtl/timer_unit/timer_unit_counter_presc.sv:37.6-48.9" *) 32'd0 : \$procmux$10974_Y ;
endmodule

(* src = "rtl/apb_uart/uart_baudgen.sv:35.8" *)
module \uart_baudgen$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG16 (CLK, RST, CE, CLEAR, DIVIDER, BAUDTICK);
  wire [15:0] \$4y ;
  wire \$7y ;
  (* unused_bits = "16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] \$8y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14932 ;
  (* src = "rtl/apb_uart/uart_baudgen.sv:57.3-65.18" *)
  wire [15:0] \$iCounter$6 ;
  (* src = "rtl/apb_uart/uart_baudgen.sv:67.5-72.18" *)
  wire [15:0] \$iCounter$9 ;
  (* src = "rtl/apb_uart/uart_baudgen.sv:41.16" *)
  output BAUDTICK;
  reg BAUDTICK;
  (* src = "rtl/apb_uart/uart_baudgen.sv:38.14" *)
  input CE;
  wire CE;
  (* src = "rtl/apb_uart/uart_baudgen.sv:39.14" *)
  input CLEAR;
  wire CLEAR;
  (* src = "rtl/apb_uart/uart_baudgen.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/uart_baudgen.sv:40.21" *)
  input [15:0] DIVIDER;
  wire [15:0] DIVIDER;
  (* src = "rtl/apb_uart/uart_baudgen.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/uart_baudgen.sv:45.12" *)
  reg [15:0] iCounter;
  assign \$4y  = iCounter - (* src = "rtl/apb_uart/uart_baudgen.sv:64.19-64.31" *) 1'h1;
  assign \$7y  = ! (* src = "rtl/apb_uart/uart_baudgen.sv:67.9-67.23" *) iCounter;
  assign \$8y [15:0] = DIVIDER - (* src = "rtl/apb_uart/uart_baudgen.sv:70.13-70.35" *) 1'h1;
  (* src = "rtl/apb_uart/uart_baudgen.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCounter <= 16'h0000;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14932 ) iCounter <= \$iCounter$9 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14932  = | { CLEAR, CE, \$7y  };
  (* src = "rtl/apb_uart/uart_baudgen.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) BAUDTICK <= 1'h0;
    else BAUDTICK <= \$7y ;
  assign \$iCounter$9  = \$7y  ? (* src = "rtl/apb_uart/uart_baudgen.sv:68.11-72.18|rtl/apb_uart/uart_baudgen.sv:67.5-72.18" *) \$8y [15:0] : \$iCounter$6 ;
  assign \$iCounter$6  = CLEAR ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_baudgen.sv:60.1-60.131|rtl/apb_uart/uart_baudgen.sv:57.3-65.18" *) 16'h0000 : \$4y ;
endmodule

(* src = "rtl/apb_uart/uart_interrupt.sv:35.8" *)
module \uart_interrupt$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC (CLK, INT, RST, IER, LSR, THI, RDA, CTI, AFE, MSR, IIR);
  wire \$0y ;
  wire \$10y ;
  wire \$11y ;
  wire \$1y ;
  wire \$2y ;
  wire \$7y ;
  wire \$8y ;
  wire \$9y ;
  (* src = "rtl/apb_uart/uart_interrupt.sv:85.13-92.13" *)
  wire [3:0] \$auto$wreduce.cc:514:run$13639 ;
  (* src = "rtl/apb_uart/uart_interrupt.sv:81.13-92.13" *)
  wire [3:0] \$auto$wreduce.cc:514:run$13640 ;
  (* src = "rtl/apb_uart/uart_interrupt.sv:77.13-92.13" *)
  wire [3:0] \$auto$wreduce.cc:514:run$13641 ;
  (* src = "rtl/apb_uart/uart_interrupt.sv:73.13-92.13" *)
  wire [3:0] \$iIIR$23 ;
  (* src = "rtl/apb_uart/uart_interrupt.sv:69.8-92.13" *)
  wire [3:0] \$iIIR$24 ;
  (* src = "rtl/apb_uart/uart_interrupt.sv:43.14" *)
  input AFE;
  wire AFE;
  (* src = "rtl/apb_uart/uart_interrupt.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/uart_interrupt.sv:42.14" *)
  input CTI;
  wire CTI;
  (* src = "rtl/apb_uart/uart_interrupt.sv:38.20" *)
  input [3:0] IER;
  wire [3:0] IER;
  (* src = "rtl/apb_uart/uart_interrupt.sv:45.22" *)
  output [3:0] IIR;
  reg [3:0] IIR;
  (* src = "rtl/apb_uart/uart_interrupt.sv:46.16" *)
  output INT;
  wire INT;
  (* src = "rtl/apb_uart/uart_interrupt.sv:39.20" *)
  input [4:0] LSR;
  wire [4:0] LSR;
  (* src = "rtl/apb_uart/uart_interrupt.sv:44.20" *)
  input [3:0] MSR;
  wire [3:0] MSR;
  (* src = "rtl/apb_uart/uart_interrupt.sv:41.14" *)
  input RDA;
  wire RDA;
  (* src = "rtl/apb_uart/uart_interrupt.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/uart_interrupt.sv:40.14" *)
  input THI;
  wire THI;
  (* src = "rtl/apb_uart/uart_interrupt.sv:52.5" *)
  wire iCTIInterrupt;
  (* src = "rtl/apb_uart/uart_interrupt.sv:54.5" *)
  wire iMSRInterrupt;
  (* src = "rtl/apb_uart/uart_interrupt.sv:51.5" *)
  wire iRDAInterrupt;
  (* src = "rtl/apb_uart/uart_interrupt.sv:50.5" *)
  wire iRLSInterrupt;
  (* src = "rtl/apb_uart/uart_interrupt.sv:53.5" *)
  wire iTHRInterrupt;
  assign \$0y  = LSR[1] | (* src = "rtl/apb_uart/uart_interrupt.sv:56.45-56.60" *) LSR[2];
  assign \$1y  = \$0y  | (* src = "rtl/apb_uart/uart_interrupt.sv:56.44-56.70" *) LSR[3];
  assign \$10y  = \$9y  | (* src = "rtl/apb_uart/uart_interrupt.sv:60.44-60.82" *) MSR[2];
  assign \$11y  = \$10y  | (* src = "rtl/apb_uart/uart_interrupt.sv:60.43-60.92" *) MSR[3];
  assign iMSRInterrupt = IER[3] && (* src = "rtl/apb_uart/uart_interrupt.sv:60.32-60.93" *) \$11y ;
  assign \$2y  = \$1y  | (* src = "rtl/apb_uart/uart_interrupt.sv:56.43-56.80" *) LSR[4];
  assign INT = ~ (* src = "rtl/apb_uart/uart_interrupt.sv:96.23-96.32" *) IIR[0];
  assign iRLSInterrupt = IER[2] && (* src = "rtl/apb_uart/uart_interrupt.sv:56.32-56.81" *) \$2y ;
  assign iRDAInterrupt = IER[0] && (* src = "rtl/apb_uart/uart_interrupt.sv:57.32-57.45" *) RDA;
  assign iCTIInterrupt = IER[0] && (* src = "rtl/apb_uart/uart_interrupt.sv:58.32-58.45" *) CTI;
  assign iTHRInterrupt = IER[1] && (* src = "rtl/apb_uart/uart_interrupt.sv:59.32-59.45" *) THI;
  assign \$7y  = ~ (* src = "rtl/apb_uart/uart_interrupt.sv:60.57-60.62" *) AFE;
  assign \$8y  = MSR[0] && (* src = "rtl/apb_uart/uart_interrupt.sv:60.46-60.62" *) \$7y ;
  assign \$9y  = \$8y  | (* src = "rtl/apb_uart/uart_interrupt.sv:60.45-60.72" *) MSR[1];
  (* src = "rtl/apb_uart/uart_interrupt.sv:62.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) IIR <= 4'h1;
    else IIR <= \$iIIR$24 ;
  assign \$auto$wreduce.cc:514:run$13639 [0] = ~ (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_interrupt.sv:87.13-87.29|rtl/apb_uart/uart_interrupt.sv:85.13-92.13" *) iMSRInterrupt;
  assign \$auto$wreduce.cc:514:run$13640 [1:0] = iTHRInterrupt ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_interrupt.sv:83.13-83.29|rtl/apb_uart/uart_interrupt.sv:81.13-92.13" *) 2'h2 : { 1'h0, \$auto$wreduce.cc:514:run$13639 [0] };
  assign \$auto$wreduce.cc:514:run$13641 [2:0] = iRDAInterrupt ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_interrupt.sv:79.13-79.29|rtl/apb_uart/uart_interrupt.sv:77.13-92.13" *) 3'h4 : { 1'h0, \$auto$wreduce.cc:514:run$13640 [1:0] };
  assign \$iIIR$23  = iCTIInterrupt ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_interrupt.sv:75.13-75.29|rtl/apb_uart/uart_interrupt.sv:73.13-92.13" *) 4'hc : { 1'h0, \$auto$wreduce.cc:514:run$13641 [2:0] };
  assign \$iIIR$24  = iRLSInterrupt ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_interrupt.sv:71.13-71.29|rtl/apb_uart/uart_interrupt.sv:69.8-92.13" *) 4'h6 : \$iIIR$23 ;
  assign \$auto$wreduce.cc:514:run$13639 [3:1] = 3'h0;
  assign \$auto$wreduce.cc:514:run$13640 [3:2] = 2'h0;
  assign \$auto$wreduce.cc:514:run$13641 [3] = 1'h0;
endmodule

(* src = "rtl/apb_uart/uart_receiver.sv:35.8" *)
module \uart_receiver$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX (BI, CLK, SIN, RST, FE, WLS, STB, PEN, EPS, SP, RXCLK, RXCLEAR, PE, DOUT, RXFINISHED);
  wire \$10y ;
  wire \$11y ;
  wire \$17y ;
  wire \$18y ;
  wire \$20y ;
  wire [7:0] \$23y ;
  wire [7:0] \$25y ;
  wire [3:0] \$26y ;
  wire \$31y ;
  wire \$32y ;
  wire \$33y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$37y ;
  wire \$38y ;
  wire \$39y ;
  wire \$40y ;
  wire \$41y ;
  wire \$42y ;
  wire \$43y ;
  wire \$44y ;
  wire \$4y ;
  wire \$5y ;
  wire \$63y ;
  wire \$6y ;
  wire \$76y ;
  wire \$78y ;
  wire \$7y ;
  wire \$82y ;
  wire \$85y ;
  wire \$8y ;
  wire \$91y ;
  wire \$94y ;
  wire \$95y ;
  wire \$96y ;
  wire \$9y ;
  wire \$NState$51 ;
  wire [1:0] \$NState$54 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:181.5-192.18" *)
  wire [2:0] \$NState$55 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:199.7-206.26" *)
  wire [2:0] \$NState$58 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:197.3-211.18" *)
  wire [2:0] \$NState$59 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:216.3-223.18" *)
  wire [2:0] \$NState$61 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:228.3-244.18" *)
  wire [2:0] \$NState$66 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:284.11-287.34" *)
  wire \$PE$84 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:282.9-297.14" *)
  wire \$PE$87 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:279.1-303.18" *)
  wire \$PE$89 ;
  wire \$auto$demuxmap.cc:63:execute$16263 ;
  wire \$auto$demuxmap.cc:63:execute$16266 ;
  wire \$auto$demuxmap.cc:63:execute$16269 ;
  wire \$auto$demuxmap.cc:63:execute$16272 ;
  wire \$auto$demuxmap.cc:63:execute$16275 ;
  wire \$auto$demuxmap.cc:63:execute$16278 ;
  wire \$auto$demuxmap.cc:63:execute$16281 ;
  wire \$auto$demuxmap.cc:63:execute$16284 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14935 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:132.8-145.13" *)
  wire [7:0] \$iDOUT$30 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:132.8-145.13" *)
  wire [3:0] \$iDataCount$29 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:274.3-277.18" *)
  wire \$iParityReceived$79 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:279.1-303.18" *)
  wire \$iParityReceived$88 ;
  wire \$procmux$5287_CMP ;
  wire \$procmux$5334_CMP ;
  wire \$procmux$5355_CMP ;
  (* src = "rtl/apb_uart/uart_receiver.sv:48.16" *)
  output BI;
  wire BI;
  (* src = "rtl/apb_uart/uart_receiver.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/uart_receiver.sv:60.12" *)
  reg [2:0] CState;
  (* src = "rtl/apb_uart/uart_receiver.sv:49.22" *)
  output [7:0] DOUT;
  reg [7:0] DOUT;
  (* src = "rtl/apb_uart/uart_receiver.sv:43.14" *)
  input EPS;
  wire EPS;
  (* src = "rtl/apb_uart/uart_receiver.sv:47.16" *)
  output FE;
  wire FE;
  (* src = "rtl/apb_uart/uart_receiver.sv:60.20" *)
  wire [2:0] NState;
  (* src = "rtl/apb_uart/uart_receiver.sv:46.16" *)
  output PE;
  reg PE;
  (* src = "rtl/apb_uart/uart_receiver.sv:42.14" *)
  input PEN;
  wire PEN;
  (* src = "rtl/apb_uart/uart_receiver.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/uart_receiver.sv:39.14" *)
  input RXCLEAR;
  wire RXCLEAR;
  (* src = "rtl/apb_uart/uart_receiver.sv:38.14" *)
  input RXCLK;
  wire RXCLK;
  (* src = "rtl/apb_uart/uart_receiver.sv:50.16" *)
  output RXFINISHED;
  wire RXFINISHED;
  (* src = "rtl/apb_uart/uart_receiver.sv:45.14" *)
  input SIN;
  wire SIN;
  (* src = "rtl/apb_uart/uart_receiver.sv:44.14" *)
  input SP;
  wire SP;
  (* src = "rtl/apb_uart/uart_receiver.sv:41.14" *)
  input STB;
  wire STB;
  (* src = "rtl/apb_uart/uart_receiver.sv:40.20" *)
  input [1:0] WLS;
  wire [1:0] WLS;
  (* src = "rtl/apb_uart/uart_receiver.sv:61.11" *)
  (* unused_bits = "0 1 2" *)
  wire [3:0] iBaudCount;
  (* src = "rtl/apb_uart/uart_receiver.sv:62.5" *)
  wire iBaudCountClear;
  (* src = "rtl/apb_uart/uart_receiver.sv:63.5" *)
  wire iBaudStep;
  (* src = "rtl/apb_uart/uart_receiver.sv:64.5" *)
  reg iBaudStepD;
  (* src = "rtl/apb_uart/uart_receiver.sv:70.11" *)
  reg [3:0] iDataCount;
  (* src = "rtl/apb_uart/uart_receiver.sv:72.5" *)
  wire iDataCountFinish;
  (* src = "rtl/apb_uart/uart_receiver.sv:71.5" *)
  wire iDataCountInit;
  (* src = "rtl/apb_uart/uart_receiver.sv:66.5" *)
  wire iFSIN;
  (* src = "rtl/apb_uart/uart_receiver.sv:67.5" *)
  wire iFStopBit;
  (* src = "rtl/apb_uart/uart_receiver.sv:65.5" *)
  wire iFilterClear;
  (* src = "rtl/apb_uart/uart_receiver.sv:68.5" *)
  wire iParity;
  (* src = "rtl/apb_uart/uart_receiver.sv:69.5" *)
  reg iParityReceived;
  assign \$10y  = \$9y  ^ (* src = "rtl/apb_uart/uart_receiver.sv:118.13-118.110" *) DOUT[0];
  assign \$11y  = ~ (* src = "rtl/apb_uart/uart_receiver.sv:118.115-118.120" *) EPS;
  assign iParity = \$10y  ^ (* src = "rtl/apb_uart/uart_receiver.sv:118.12-118.120" *) \$11y ;
  assign \$17y  = ~ (* src = "rtl/apb_uart/uart_receiver.sv:140.40-140.65" *) iDataCountFinish;
  assign \$18y  = iBaudStep && (* src = "rtl/apb_uart/uart_receiver.sv:140.18-140.65" *) \$17y ;
  assign iFilterClear = iBaudStepD | (* src = "rtl/apb_uart/uart_receiver.sv:114.31-114.59" *) iBaudCountClear;
  (* src = "rtl/apb_uart/uart_receiver.sv:142.18-142.44" *)
  \$bwmux  #(
    .WIDTH(32'd8)
  ) \$25  (
    .A(DOUT),
    .B({ iFSIN, iFSIN, iFSIN, iFSIN, iFSIN, iFSIN, iFSIN, iFSIN }),
    .S(\$23y ),
    .Y(\$25y )
  );
  assign \$26y  = iDataCount + (* src = "rtl/apb_uart/uart_receiver.sv:143.32-143.46" *) 1'h1;
  assign \$31y  = ! (* src = "rtl/apb_uart/uart_receiver.sv:148.38-148.50" *) WLS;
  assign \$32y  = iDataCount == (* src = "rtl/apb_uart/uart_receiver.sv:148.54-148.69" *) 3'h5;
  assign \$33y  = \$31y  && (* src = "rtl/apb_uart/uart_receiver.sv:148.38-148.69" *) \$32y ;
  assign \$34y  = WLS == (* src = "rtl/apb_uart/uart_receiver.sv:148.74-148.86" *) 1'h1;
  assign \$35y  = iDataCount == (* src = "rtl/apb_uart/uart_receiver.sv:148.90-148.105" *) 3'h6;
  assign \$36y  = \$34y  && (* src = "rtl/apb_uart/uart_receiver.sv:148.74-148.105" *) \$35y ;
  assign \$37y  = \$33y  | (* src = "rtl/apb_uart/uart_receiver.sv:148.37-148.106" *) \$36y ;
  assign \$38y  = WLS == (* src = "rtl/apb_uart/uart_receiver.sv:148.111-148.123" *) 2'h2;
  assign \$39y  = iDataCount == (* src = "rtl/apb_uart/uart_receiver.sv:148.127-148.142" *) 3'h7;
  assign \$4y  = DOUT[7] ^ (* src = "rtl/apb_uart/uart_receiver.sv:118.19-118.38" *) DOUT[6];
  assign \$40y  = \$38y  && (* src = "rtl/apb_uart/uart_receiver.sv:148.111-148.142" *) \$39y ;
  assign \$41y  = \$37y  | (* src = "rtl/apb_uart/uart_receiver.sv:148.36-148.143" *) \$40y ;
  assign \$42y  = WLS == (* src = "rtl/apb_uart/uart_receiver.sv:148.148-148.160" *) 2'h3;
  assign \$43y  = iDataCount == (* src = "rtl/apb_uart/uart_receiver.sv:148.164-148.179" *) 4'h8;
  assign \$44y  = \$42y  && (* src = "rtl/apb_uart/uart_receiver.sv:148.148-148.179" *) \$43y ;
  assign iDataCountFinish = \$41y  | (* src = "rtl/apb_uart/uart_receiver.sv:148.35-148.180" *) \$44y ;
  assign \$5y  = \$4y  ^ (* src = "rtl/apb_uart/uart_receiver.sv:118.18-118.50" *) DOUT[5];
  assign \$6y  = \$5y  ^ (* src = "rtl/apb_uart/uart_receiver.sv:118.17-118.62" *) DOUT[4];
  assign \$63y  = ~ (* src = "rtl/apb_uart/uart_receiver.sv:230.12-230.30" *) iFStopBit;
  assign \$7y  = \$6y  ^ (* src = "rtl/apb_uart/uart_receiver.sv:118.16-118.74" *) DOUT[3];
  assign \$76y  = CState == (* src = "rtl/apb_uart/uart_receiver.sv:274.8-274.21" *) 2'h3;
  assign \$78y  = \$76y  && (* src = "rtl/apb_uart/uart_receiver.sv:274.8-274.43" *) iBaudStep;
  assign \$8y  = \$7y  ^ (* src = "rtl/apb_uart/uart_receiver.sv:118.15-118.86" *) DOUT[2];
  assign \$82y  = EPS ^ (* src = "rtl/apb_uart/uart_receiver.sv:284.17-284.38" *) iParityReceived;
  assign \$85y  = iParity != (* src = "rtl/apb_uart/uart_receiver.sv:292.16-292.42" *) iParityReceived;
  assign \$9y  = \$8y  ^ (* src = "rtl/apb_uart/uart_receiver.sv:118.14-118.98" *) DOUT[1];
  assign \$91y  = CState == (* src = "rtl/apb_uart/uart_receiver.sv:308.57-308.71" *) 3'h4;
  assign FE = \$63y  && (* src = "rtl/apb_uart/uart_receiver.sv:308.34-308.72" *) \$91y ;
  assign \$94y  = ! (* src = "rtl/apb_uart/uart_receiver.sv:309.23-309.43" *) DOUT;
  assign \$95y  = ~ (* src = "rtl/apb_uart/uart_receiver.sv:309.47-309.71" *) iParityReceived;
  assign \$96y  = \$94y  && (* src = "rtl/apb_uart/uart_receiver.sv:309.23-309.71" *) \$95y ;
  assign BI = \$96y  && (* src = "rtl/apb_uart/uart_receiver.sv:309.22-309.100" *) FE;
  assign \$auto$demuxmap.cc:63:execute$16263  = iDataCount[2:0] == (* src = "rtl/apb_uart/uart_receiver.sv:142.18-142.44" *) 3'h0;
  assign \$auto$demuxmap.cc:63:execute$16266  = iDataCount[2:0] == (* src = "rtl/apb_uart/uart_receiver.sv:142.18-142.44" *) 3'h1;
  assign \$auto$demuxmap.cc:63:execute$16269  = iDataCount[2:0] == (* src = "rtl/apb_uart/uart_receiver.sv:142.18-142.44" *) 3'h2;
  assign \$auto$demuxmap.cc:63:execute$16272  = iDataCount[2:0] == (* src = "rtl/apb_uart/uart_receiver.sv:142.18-142.44" *) 3'h3;
  assign \$auto$demuxmap.cc:63:execute$16275  = iDataCount[2:0] == (* src = "rtl/apb_uart/uart_receiver.sv:142.18-142.44" *) 3'h4;
  assign \$auto$demuxmap.cc:63:execute$16278  = iDataCount[2:0] == (* src = "rtl/apb_uart/uart_receiver.sv:142.18-142.44" *) 3'h5;
  assign \$auto$demuxmap.cc:63:execute$16281  = iDataCount[2:0] == (* src = "rtl/apb_uart/uart_receiver.sv:142.18-142.44" *) 3'h6;
  assign \$auto$demuxmap.cc:63:execute$16284  = iDataCount[2:0] == (* src = "rtl/apb_uart/uart_receiver.sv:142.18-142.44" *) 3'h7;
  assign \$23y [0] = \$auto$demuxmap.cc:63:execute$16263  ? (* src = "rtl/apb_uart/uart_receiver.sv:142.18-142.44" *) \$20y  : 1'h0;
  assign \$23y [1] = \$auto$demuxmap.cc:63:execute$16266  ? (* src = "rtl/apb_uart/uart_receiver.sv:142.18-142.44" *) \$20y  : 1'h0;
  assign \$23y [2] = \$auto$demuxmap.cc:63:execute$16269  ? (* src = "rtl/apb_uart/uart_receiver.sv:142.18-142.44" *) \$20y  : 1'h0;
  assign \$23y [3] = \$auto$demuxmap.cc:63:execute$16272  ? (* src = "rtl/apb_uart/uart_receiver.sv:142.18-142.44" *) \$20y  : 1'h0;
  assign \$23y [4] = \$auto$demuxmap.cc:63:execute$16275  ? (* src = "rtl/apb_uart/uart_receiver.sv:142.18-142.44" *) \$20y  : 1'h0;
  assign \$23y [5] = \$auto$demuxmap.cc:63:execute$16278  ? (* src = "rtl/apb_uart/uart_receiver.sv:142.18-142.44" *) \$20y  : 1'h0;
  assign \$23y [6] = \$auto$demuxmap.cc:63:execute$16281  ? (* src = "rtl/apb_uart/uart_receiver.sv:142.18-142.44" *) \$20y  : 1'h0;
  assign \$23y [7] = \$auto$demuxmap.cc:63:execute$16284  ? (* src = "rtl/apb_uart/uart_receiver.sv:142.18-142.44" *) \$20y  : 1'h0;
  (* src = "rtl/apb_uart/uart_receiver.sv:123.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDataCount <= 4'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14935 ) iDataCount <= \$iDataCount$29 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:123.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) DOUT <= 8'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$14935 ) DOUT <= \$iDOUT$30 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14935  = | { iDataCountInit, \$18y  };
  assign \$20y  = ! iDataCount[3];
  assign iDataCountInit = | { \$procmux$5355_CMP , iBaudCountClear };
  (* src = "rtl/apb_uart/uart_receiver.sv:150.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) CState <= 3'h0;
    else CState <= NState;
  (* src = "rtl/apb_uart/uart_receiver.sv:265.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) PE <= 1'h0;
    else PE <= \$PE$89 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iBaudStepD <= 1'h0;
    else iBaudStepD <= iBaudStep;
  (* src = "rtl/apb_uart/uart_receiver.sv:265.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iParityReceived <= 1'h0;
    else iParityReceived <= \$iParityReceived$88 ;
  assign \$iDOUT$30  = iDataCountInit ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_receiver.sv:133.10-137.13|rtl/apb_uart/uart_receiver.sv:132.8-145.13" *) 8'h00 : \$25y ;
  assign \$iDataCount$29  = iDataCountInit ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_receiver.sv:133.10-137.13|rtl/apb_uart/uart_receiver.sv:132.8-145.13" *) 4'h0 : \$26y ;
  assign \$NState$51  = ~ (* src = "rtl/apb_uart/uart_receiver.sv:251.7-251.23|rtl/apb_uart/uart_receiver.sv:249.3-252.18" *) SIN;
  assign \$procmux$5287_CMP  = CState == (* src = "rtl/apb_uart/uart_receiver.sv:249.3-252.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" *) 3'h5;
  assign { \$NState$66 [2], \$NState$66 [0] } = iBaudCount[3] ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_receiver.sv:230.7-239.26|rtl/apb_uart/uart_receiver.sv:228.3-244.18" *) { \$63y , \$63y  } : 2'h2;
  assign \$NState$61 [2:1] = iBaudStep ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_receiver.sv:218.7-218.22|rtl/apb_uart/uart_receiver.sv:216.3-223.18" *) 2'h2 : 2'h1;
  assign \$NState$59  = iDataCountFinish ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_receiver.sv:199.7-206.26|rtl/apb_uart/uart_receiver.sv:197.3-211.18" *) { \$NState$58 [2:1], \$NState$58 [1] } : 3'h2;
  assign \$procmux$5334_CMP  = CState == (* src = "rtl/apb_uart/uart_receiver.sv:197.3-211.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" *) 2'h2;
  assign \$NState$58 [2:1] = PEN ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_receiver.sv:201.11-201.25|rtl/apb_uart/uart_receiver.sv:199.7-206.26" *) 2'h1 : 2'h2;
  assign \$NState$55 [1:0] = iBaudStep ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_receiver.sv:183.7-186.26|rtl/apb_uart/uart_receiver.sv:181.5-192.18" *) { \$NState$54 [1], 1'h0 } : 2'h1;
  assign \$procmux$5355_CMP  = CState == (* src = "rtl/apb_uart/uart_receiver.sv:179.5-193.12|rtl/apb_uart/uart_receiver.sv:166.1-260.8" *) 1'h1;
  assign \$NState$54 [1] = ~ (* src = "rtl/apb_uart/uart_receiver.sv:185.11-185.26|rtl/apb_uart/uart_receiver.sv:183.7-186.26" *) iFSIN;
  assign iBaudCountClear = ! (* src = "rtl/apb_uart/uart_receiver.sv:168.5-176.10|rtl/apb_uart/uart_receiver.sv:166.1-260.8" *) CState;
  assign RXFINISHED = \$91y  & (* src = "rtl/apb_uart/uart_receiver.sv:228.3-244.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" *) iBaudCount[3];
  function [2:0] \$procmux$5398 ;
    input [2:0] a;
    input [17:0] b;
    input [5:0] s;
    (* src = "rtl/apb_uart/uart_receiver.sv:249.3-252.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$5398  = b[2:0];
      6'b????1?:
        \$procmux$5398  = b[5:3];
      6'b???1??:
        \$procmux$5398  = b[8:6];
      6'b??1???:
        \$procmux$5398  = b[11:9];
      6'b?1????:
        \$procmux$5398  = b[14:12];
      6'b1?????:
        \$procmux$5398  = b[17:15];
      default:
        \$procmux$5398  = a;
    endcase
  endfunction
  assign NState = \$procmux$5398 (3'h0, { 2'h0, \$NState$51 , 1'h0, \$NState$55 [1:0], \$NState$59 , \$NState$61 [2:1], \$NState$61 [1], \$NState$66 [2], 1'h0, \$NState$66 [0], \$NState$51 , 1'h0, \$NState$51  }, { iBaudCountClear, \$procmux$5355_CMP , \$procmux$5334_CMP , \$76y , \$91y , \$procmux$5287_CMP  });
  assign \$PE$89  = PEN & (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_receiver.sv:280.11-298.20|rtl/apb_uart/uart_receiver.sv:279.1-303.18" *) \$PE$87 ;
  assign \$PE$87  = SP ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_receiver.sv:284.11-287.34|rtl/apb_uart/uart_receiver.sv:282.9-297.14" *) \$PE$84  : \$85y ;
  assign \$PE$84  = ~ (* src = "rtl/apb_uart/uart_receiver.sv:286.15-286.27|rtl/apb_uart/uart_receiver.sv:284.11-287.34" *) \$82y ;
  assign \$iParityReceived$88  = PEN & (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_receiver.sv:280.11-298.20|rtl/apb_uart/uart_receiver.sv:279.1-303.18" *) \$iParityReceived$79 ;
  assign \$iParityReceived$79  = \$78y  ? (* src = "rtl/apb_uart/uart_receiver.sv:276.7-276.32|rtl/apb_uart/uart_receiver.sv:274.3-277.18" *) iFSIN : iParityReceived;
  (* src = "rtl/apb_uart/uart_receiver.sv:78.27" *)
  \slib_counter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_BRC  RX_BRC (
    .CLEAR(iBaudCountClear),
    .CLK(CLK),
    .D(4'h0),
    .DOWN(1'h0),
    .ENABLE(RXCLK),
    .LOAD(1'h0),
    .OVERFLOW(iBaudStep),
    .Q(iBaudCount),
    .RST(RST)
  );
  (* src = "rtl/apb_uart/uart_receiver.sv:95.31" *)
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_IFSB  RX_IFSB (
    .CE(RXCLK),
    .CLK(CLK),
    .D(SIN),
    .Q(iFStopBit),
    .RST(RST)
  );
  (* src = "rtl/apb_uart/uart_receiver.sv:88.44" *)
  \slib_mv_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_MVF  RX_MVF (
    .CLEAR(iFilterClear),
    .CLK(CLK),
    .D(SIN),
    .Q(iFSIN),
    .RST(RST),
    .SAMPLE(RXCLK)
  );
  assign \$NState$54 [0] = 1'h0;
  assign \$NState$55 [2] = 1'h0;
  assign \$NState$58 [0] = \$NState$58 [1];
  assign \$NState$61 [0] = \$NState$61 [1];
  assign \$NState$66 [1] = 1'h0;
endmodule

(* src = "rtl/apb_uart/uart_transmitter.sv:35.8" *)
module \uart_transmitter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TX (CLK, SOUT, RST, CLEAR, TXCLK, TXSTART, WLS, STB, PEN, EPS, SP, BC, DIN, TXFINISHED);
  wire \$18y ;
  wire \$22y ;
  wire \$26y ;
  wire \$36y ;
  wire \$48y ;
  wire \$49y ;
  wire \$50y ;
  wire \$58y ;
  wire \$59y ;
  wire \$60y ;
  wire \$6y ;
  wire \$7y ;
  wire \$8y ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:152.18-159.23" *)
  wire [3:0] \$NState$20 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:150.13-164.18" *)
  wire [3:0] \$NState$21 ;
  wire [1:0] \$NState$25 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:190.13-204.18" *)
  wire [3:0] \$NState$29 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:249.13-260.18" *)
  wire [3:0] \$NState$42 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14942 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14944 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13453 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:224.18-231.23" *)
  wire \$iSout$34 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:235.18-242.23" *)
  wire \$iSout$37 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:222.13-243.18" *)
  wire \$iSout$38 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:82.13-99.18" *)
  wire \$iTx2$12 ;
  wire \$procmux$5482_CMP ;
  wire \$procmux$5509_CMP ;
  wire \$procmux$5519_CMP ;
  wire \$procmux$5542_CMP ;
  wire \$procmux$5567_CMP ;
  wire \$procmux$5597_CMP ;
  wire \$procmux$5611_CMP ;
  wire \$procmux$5612_CMP ;
  wire \$procmux$5613_CMP ;
  wire \$procmux$5614_CMP ;
  wire \$procmux$5615_CMP ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:46.14" *)
  input BC;
  wire BC;
  (* src = "rtl/apb_uart/uart_transmitter.sv:40.14" *)
  input CLEAR;
  wire CLEAR;
  (* src = "rtl/apb_uart/uart_transmitter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/uart_transmitter.sv:66.12" *)
  reg [3:0] CState;
  (* src = "rtl/apb_uart/uart_transmitter.sv:47.20" *)
  input [7:0] DIN;
  wire [7:0] DIN;
  (* src = "rtl/apb_uart/uart_transmitter.sv:44.14" *)
  input EPS;
  wire EPS;
  (* src = "rtl/apb_uart/uart_transmitter.sv:66.20" *)
  wire [3:0] NState;
  (* src = "rtl/apb_uart/uart_transmitter.sv:43.14" *)
  input PEN;
  wire PEN;
  (* src = "rtl/apb_uart/uart_transmitter.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/uart_transmitter.sv:49.16" *)
  output SOUT;
  wire SOUT;
  (* src = "rtl/apb_uart/uart_transmitter.sv:45.14" *)
  input SP;
  wire SP;
  (* src = "rtl/apb_uart/uart_transmitter.sv:42.14" *)
  input STB;
  wire STB;
  (* src = "rtl/apb_uart/uart_transmitter.sv:38.14" *)
  input TXCLK;
  wire TXCLK;
  (* src = "rtl/apb_uart/uart_transmitter.sv:48.16" *)
  output TXFINISHED;
  reg TXFINISHED;
  (* src = "rtl/apb_uart/uart_transmitter.sv:39.14" *)
  input TXSTART;
  wire TXSTART;
  (* src = "rtl/apb_uart/uart_transmitter.sv:283.15" *)
  wire \TX_PAR.iP40 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:283.21" *)
  wire \TX_PAR.iP50 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:283.27" *)
  wire \TX_PAR.iP60 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:283.33" *)
  wire \TX_PAR.iP70 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:41.20" *)
  input [1:0] WLS;
  wire [1:0] WLS;
  (* src = "rtl/apb_uart/uart_transmitter.sv:297.9" *)
  reg iLast;
  (* src = "rtl/apb_uart/uart_transmitter.sv:69.5" *)
  wire iParity;
  (* src = "rtl/apb_uart/uart_transmitter.sv:68.5" *)
  wire iSout;
  (* src = "rtl/apb_uart/uart_transmitter.sv:67.5" *)
  reg iTx2;
  assign \$18y  = ! (* src = "rtl/apb_uart/uart_transmitter.sv:150.18-150.30" *) WLS;
  assign \$22y  = WLS == (* src = "rtl/apb_uart/uart_transmitter.sv:170.18-170.30" *) 1'h1;
  assign \$26y  = WLS == (* src = "rtl/apb_uart/uart_transmitter.sv:190.18-190.30" *) 2'h2;
  assign \$36y  = ~ (* src = "rtl/apb_uart/uart_transmitter.sv:241.33-241.42" *) iParity;
  assign \$48y  = DIN[4] ^ (* src = "rtl/apb_uart/uart_transmitter.sv:284.16-284.31" *) DIN[3];
  assign \$49y  = \$48y  ^ (* src = "rtl/apb_uart/uart_transmitter.sv:284.16-284.40" *) DIN[2];
  assign \$50y  = \$49y  ^ (* src = "rtl/apb_uart/uart_transmitter.sv:284.16-284.49" *) DIN[1];
  assign \TX_PAR.iP40  = \$50y  ^ (* src = "rtl/apb_uart/uart_transmitter.sv:284.16-284.58" *) DIN[0];
  assign \TX_PAR.iP50  = DIN[5] ^ (* src = "rtl/apb_uart/uart_transmitter.sv:285.16-285.29" *) \TX_PAR.iP40 ;
  assign \TX_PAR.iP60  = DIN[6] ^ (* src = "rtl/apb_uart/uart_transmitter.sv:286.16-286.29" *) \TX_PAR.iP50 ;
  assign \TX_PAR.iP70  = DIN[7] ^ (* src = "rtl/apb_uart/uart_transmitter.sv:287.16-287.29" *) \TX_PAR.iP60 ;
  assign \$58y  = ~ (* src = "rtl/apb_uart/uart_transmitter.sv:308.18-308.31" *) iLast;
  assign \$59y  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:308.35-308.49" *) 4'hb;
  assign \$6y  = \$18y  && (* src = "rtl/apb_uart/uart_transmitter.sv:89.24-89.56" *) STB;
  assign \$60y  = \$58y  && (* src = "rtl/apb_uart/uart_transmitter.sv:308.18-308.49" *) \$59y ;
  assign SOUT = BC ? (* src = "rtl/apb_uart/uart_transmitter.sv:317.23-317.51" *) 1'h0 : iSout;
  assign \$7y  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:89.61-89.76" *) 4'hc;
  assign \$8y  = \$6y  && (* src = "rtl/apb_uart/uart_transmitter.sv:89.23-89.76" *) \$7y ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:72.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iTx2 <= 1'h0;
    else if (TXCLK) iTx2 <= \$iTx2$12 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:72.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) CState <= 4'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$14944 ) CState <= NState;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$14942  = { iTx2, \$8y  } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$14944  = & { \$auto$opt_dff.cc:194:make_patterns_logic$14942 , TXCLK };
  assign \$auto$opt_reduce.cc:137:opt_pmux$13453  = | { \$procmux$5597_CMP , \$7y  };
  (* src = "rtl/apb_uart/uart_transmitter.sv:298.5" *)
  always @(posedge CLK, posedge RST)
    if (RST) TXFINISHED <= 1'h0;
    else TXFINISHED <= \$60y ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:298.5" *)
  always @(posedge CLK, posedge RST)
    if (RST) iLast <= 1'h0;
    else iLast <= \$59y ;
  function [0:0] \$procmux$5450 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/apb_uart/uart_transmitter.sv:292.20-292.36|rtl/apb_uart/uart_transmitter.sv:289.9-294.16" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$5450  = b[0:0];
      3'b?1?:
        \$procmux$5450  = b[1:1];
      3'b1??:
        \$procmux$5450  = b[2:2];
      default:
        \$procmux$5450  = a;
    endcase
  endfunction
  assign iParity = \$procmux$5450 (\TX_PAR.iP70 , { \TX_PAR.iP40 , \TX_PAR.iP50 , \TX_PAR.iP60  }, { \$18y , \$22y , \$26y  });
  assign { \$NState$42 [3], \$NState$42 [0] } = STB ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_transmitter.sv:251.18-251.34|rtl/apb_uart/uart_transmitter.sv:249.13-260.18" *) 2'h2 : { 1'h0, TXSTART };
  assign \$iSout$37  = EPS ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_transmitter.sv:237.23-237.40|rtl/apb_uart/uart_transmitter.sv:235.18-242.23" *) iParity : \$36y ;
  assign \$procmux$5482_CMP  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:221.10-245.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 4'ha;
  assign \$iSout$38  = SP ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_transmitter.sv:224.18-231.23|rtl/apb_uart/uart_transmitter.sv:222.13-243.18" *) \$iSout$34  : \$iSout$37 ;
  assign \$iSout$34  = ~ (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_transmitter.sv:226.23-226.38|rtl/apb_uart/uart_transmitter.sv:224.18-231.23" *) EPS;
  assign \$procmux$5509_CMP  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:208.10-218.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 4'h9;
  assign \$NState$29 [1:0] = \$26y  ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_transmitter.sv:192.18-199.23|rtl/apb_uart/uart_transmitter.sv:190.13-204.18" *) { 1'h1, \$NState$20 [0] } : 2'h1;
  assign \$procmux$5519_CMP  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:188.10-205.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 4'h8;
  assign \$NState$20 [0] = ~ (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_transmitter.sv:194.23-194.37|rtl/apb_uart/uart_transmitter.sv:192.18-199.23" *) PEN;
  assign \$NState$25  = \$22y  ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_transmitter.sv:172.18-179.23|rtl/apb_uart/uart_transmitter.sv:170.13-184.18" *) { 1'h1, \$NState$20 [0] } : 2'h0;
  assign \$procmux$5542_CMP  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:168.10-185.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 3'h7;
  assign { \$NState$21 [3:2], \$NState$21 [0] } = \$18y  ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_transmitter.sv:152.18-159.23|rtl/apb_uart/uart_transmitter.sv:150.13-164.18" *) { 2'h2, \$NState$20 [0] } : 3'h3;
  assign \$procmux$5567_CMP  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:148.10-165.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 3'h6;
  assign \$procmux$5597_CMP  = ! (* src = "rtl/apb_uart/uart_transmitter.sv:110.13-113.18|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) CState;
  function [0:0] \$procmux$5601 ;
    input [0:0] a;
    input [9:0] b;
    input [9:0] s;
    (* src = "rtl/apb_uart/uart_transmitter.sv:221.10-245.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *)
    (* parallel_case *)
    casez (s)
      10'b?????????1:
        \$procmux$5601  = b[0:0];
      10'b????????1?:
        \$procmux$5601  = b[1:1];
      10'b???????1??:
        \$procmux$5601  = b[2:2];
      10'b??????1???:
        \$procmux$5601  = b[3:3];
      10'b?????1????:
        \$procmux$5601  = b[4:4];
      10'b????1?????:
        \$procmux$5601  = b[5:5];
      10'b???1??????:
        \$procmux$5601  = b[6:6];
      10'b??1???????:
        \$procmux$5601  = b[7:7];
      10'b?1????????:
        \$procmux$5601  = b[8:8];
      10'b1?????????:
        \$procmux$5601  = b[9:9];
      default:
        \$procmux$5601  = a;
    endcase
  endfunction
  assign iSout = \$procmux$5601 (1'h1, { 1'h0, DIN[0], DIN[1], DIN[2], DIN[3], DIN[4], DIN[5], DIN[6], DIN[7], \$iSout$38  }, { \$procmux$5615_CMP , \$procmux$5614_CMP , \$procmux$5613_CMP , \$procmux$5612_CMP , \$procmux$5611_CMP , \$procmux$5567_CMP , \$procmux$5542_CMP , \$procmux$5519_CMP , \$procmux$5509_CMP , \$procmux$5482_CMP  });
  assign \$procmux$5611_CMP  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:142.10-145.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 3'h5;
  assign \$procmux$5612_CMP  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:136.10-139.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 3'h4;
  assign \$procmux$5613_CMP  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:130.10-133.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 2'h3;
  assign \$procmux$5614_CMP  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:124.10-127.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 2'h2;
  assign \$procmux$5615_CMP  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:118.10-121.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 1'h1;
  function [3:0] \$procmux$5617 ;
    input [3:0] a;
    input [47:0] b;
    input [11:0] s;
    (* src = "rtl/apb_uart/uart_transmitter.sv:265.8-268.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *)
    (* parallel_case *)
    casez (s)
      12'b???????????1:
        \$procmux$5617  = b[3:0];
      12'b??????????1?:
        \$procmux$5617  = b[7:4];
      12'b?????????1??:
        \$procmux$5617  = b[11:8];
      12'b????????1???:
        \$procmux$5617  = b[15:12];
      12'b???????1????:
        \$procmux$5617  = b[19:16];
      12'b??????1?????:
        \$procmux$5617  = b[23:20];
      12'b?????1??????:
        \$procmux$5617  = b[27:24];
      12'b????1???????:
        \$procmux$5617  = b[31:28];
      12'b???1????????:
        \$procmux$5617  = b[35:32];
      12'b??1?????????:
        \$procmux$5617  = b[39:36];
      12'b?1??????????:
        \$procmux$5617  = b[43:40];
      12'b1???????????:
        \$procmux$5617  = b[47:44];
      default:
        \$procmux$5617  = a;
    endcase
  endfunction
  assign NState = \$procmux$5617 (4'h0, { 20'h23456, \$NState$21 [3:2], 1'h1, \$NState$21 [0], 2'h2, \$NState$25 , 2'h2, \$NState$29 [1:0], 3'h5, \$NState$20 [0], 4'hb, \$NState$42 [3], \$NState$42 [3], 1'h0, \$NState$42 [0], 3'h0, TXSTART }, { \$procmux$5615_CMP , \$procmux$5614_CMP , \$procmux$5613_CMP , \$procmux$5612_CMP , \$procmux$5611_CMP , \$procmux$5567_CMP , \$procmux$5542_CMP , \$procmux$5519_CMP , \$procmux$5509_CMP , \$procmux$5482_CMP , \$59y , \$auto$opt_reduce.cc:137:opt_pmux$13453  });
  assign \$iTx2$12  = iTx2 ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_transmitter.sv:83.15-86.18|rtl/apb_uart/uart_transmitter.sv:82.13-99.18" *) \$8y  : 1'h1;
  assign \$NState$20 [3:1] = 3'h5;
  assign \$NState$21 [1] = 1'h1;
  assign \$NState$29 [3:2] = 2'h2;
  assign \$NState$42 [2:1] = { \$NState$42 [3], 1'h0 };
endmodule

(* src = "rtl/user_domain.sv:8.8" *)
module \user_domain$croc_chip.i_croc_soc.i_user (clk_i, rst_ni, ref_clk_i, testmode_i, user_sbr_obi_req_i, user_sbr_obi_rsp_o, user_mgr_obi_req_o, user_mgr_obi_rsp_i, gpio_in_sync_i, interrupts_o);
  (* src = "rtl/user_domain.sv:46.35" *)
  wire [147:0] all_user_sbr_obi_req;
  (* src = "rtl/user_domain.sv:11.21" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/user_domain.sv:22.38" *)
  input [31:0] gpio_in_sync_i;
  wire [31:0] gpio_in_sync_i;
  (* src = "rtl/user_domain.sv:23.38" *)
  output [3:0] interrupts_o;
  wire [3:0] interrupts_o;
  (* src = "rtl/user_domain.sv:12.21" *)
  input ref_clk_i;
  wire ref_clk_i;
  (* src = "rtl/user_domain.sv:13.21" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/user_domain.sv:14.21" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/user_domain.sv:55.17" *)
  wire [38:0] user_error_obi_rsp;
  (* src = "rtl/user_domain.sv:68.51" *)
  wire user_idx;
  (* src = "rtl/user_domain.sv:19.24" *)
  output [71:0] user_mgr_obi_req_o;
  wire [71:0] user_mgr_obi_req_o;
  (* src = "rtl/user_domain.sv:20.24" *)
  input [36:0] user_mgr_obi_rsp_i;
  wire [36:0] user_mgr_obi_rsp_i;
  (* src = "rtl/user_domain.sv:51.17" *)
  wire [38:0] user_rom_obi_rsp;
  (* src = "rtl/user_domain.sv:16.24" *)
  input [73:0] user_sbr_obi_req_i;
  wire [73:0] user_sbr_obi_req_i;
  (* src = "rtl/user_domain.sv:17.24" *)
  output [38:0] user_sbr_obi_rsp_o;
  wire [38:0] user_sbr_obi_rsp_o;
  (* src = "rtl/user_domain.sv:76.5" *)
  \addr_decode$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs  i_addr_decode_periphs (
    .addr_i(user_sbr_obi_req_i[73:42]),
    .addr_map_i(96'h000000012000000020001000),
    .default_idx_i(1'h0),
    .en_default_idx_i(1'h1),
    .idx_o(user_idx)
  );
  (* src = "rtl/user_domain.sv:92.5" *)
  \obi_demux$croc_chip.i_croc_soc.i_user.i_obi_demux  i_obi_demux (
    .clk_i(clk_i),
    .mgr_ports_req_o(all_user_sbr_obi_req),
    .mgr_ports_rsp_i({ user_rom_obi_rsp, user_error_obi_rsp }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(user_sbr_obi_req_i),
    .sbr_port_rsp_o(user_sbr_obi_rsp_o),
    .sbr_port_select_i(user_idx)
  );
  (* src = "rtl/user_domain.sv:128.5" *)
  \obi_err_sbr$croc_chip.i_croc_soc.i_user.i_user_err  i_user_err (
    .clk_i(clk_i),
    .obi_req_i(all_user_sbr_obi_req[73:0]),
    .obi_rsp_o(user_error_obi_rsp),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/user_domain.sv:114.5" *)
  \user_rom$croc_chip.i_croc_soc.i_user.i_user_rom  i_user_rom (
    .clk_i(clk_i),
    .obi_req_i(all_user_sbr_obi_req[147:74]),
    .obi_rsp_o(user_rom_obi_rsp),
    .rst_ni(rst_ni)
  );
  assign interrupts_o = 4'h0;
  assign user_mgr_obi_req_o = 72'h000000000000000000;
endmodule

(* src = "rtl/user_domain/user_rom.sv:9.8" *)
module \user_rom$croc_chip.i_croc_soc.i_user.i_user_rom (clk_i, rst_ni, obi_req_i, obi_rsp_o);
  wire [31:0] \$auto$proc_rom.cc:154:do_switch$5 ;
  wire [25:0] \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 ;
  wire [25:0] \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 ;
  wire [25:0] \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$a$15279 ;
  wire [25:0] \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$b$15280 ;
  wire [31:0] \$procmux$11917_Y ;
  (* src = "rtl/user_domain/user_rom.sv:18.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/user_domain/user_rom.sv:33.36" *)
  reg [2:0] id_q;
  (* src = "rtl/user_domain/user_rom.sv:29.9" *)
  wire obi_err;
  (* src = "rtl/user_domain/user_rom.sv:23.20" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "rtl/user_domain/user_rom.sv:25.20" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "rtl/user_domain/user_rom.sv:31.16" *)
  reg req_q;
  (* src = "rtl/user_domain/user_rom.sv:20.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/user_domain/user_rom.sv:30.15" *)
  reg we_q;
  (* src = "rtl/user_domain/user_rom.sv:32.28" *)
  reg [2:0] word_addr_q;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) id_q <= 3'h0;
    else id_q <= obi_req_i[4:2];
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) req_q <= 1'h0;
    else req_q <= obi_req_i[0];
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) we_q <= 1'h0;
    else we_q <= obi_req_i[41];
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) word_addr_q <= 3'h0;
    else word_addr_q <= obi_req_i[46:44];
  assign { \$auto$proc_rom.cc:154:do_switch$5 [29:28], \$auto$proc_rom.cc:154:do_switch$5 [26], \$auto$proc_rom.cc:154:do_switch$5 [24], \$auto$proc_rom.cc:154:do_switch$5 [22], \$auto$proc_rom.cc:154:do_switch$5 [27], \$auto$proc_rom.cc:154:do_switch$5 [19:18], \$auto$proc_rom.cc:154:do_switch$5 [25], \$auto$proc_rom.cc:154:do_switch$5 [14], \$auto$proc_rom.cc:154:do_switch$5 [30], \$auto$proc_rom.cc:154:do_switch$5 [12:11], \$auto$proc_rom.cc:154:do_switch$5 [9:8], \$auto$proc_rom.cc:154:do_switch$5 [6:0] } = word_addr_q[2] ? { 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [25], 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [25], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [25], 3'h0, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [25], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [13], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [25], 2'h0, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [13], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [13], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [6], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [25], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [25], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [13], 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [25], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [6] } : { \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [24:23], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [21], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [19], 1'h1, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [22], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [16], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [23], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [24], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [24], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [25], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [11:10], 4'ha, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [22], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [11], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [2:1], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [1] };
  assign { \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [21], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [19], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [16], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [23], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [24], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [25], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [10], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [22], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [11], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [2:1] } = word_addr_q[1] ? { 3'h6, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$b$15280 [25:24], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$b$15280 [25], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$b$15280 [25], 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$b$15280 [24], 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$b$15280 [25] } : { \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$a$15279 [24], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$a$15279 [25:24], 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$a$15279 [24], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$a$15279 [25], 1'h1, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$a$15279 [25], 2'h1, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$a$15279 [24] };
  assign { \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [13], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [25], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [6] } = word_addr_q[1] ? 3'h0 : { \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$b$15280 [24], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$b$15280 [25], 1'h1 };
  assign \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$a$15279 [25:24] = word_addr_q[0] ? 2'h1 : 2'h2;
  assign { \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$b$15280 [24], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$b$15280 [25] } = word_addr_q[0] ? 2'h2 : 2'h1;
  assign { \$procmux$11917_Y [29:28], \$procmux$11917_Y [26], \$procmux$11917_Y [24], \$procmux$11917_Y [22], \$procmux$11917_Y [27], \$procmux$11917_Y [19:18], \$procmux$11917_Y [25], \$procmux$11917_Y [14], \$procmux$11917_Y [30], \$procmux$11917_Y [12:11], \$procmux$11917_Y [9:8], \$procmux$11917_Y [6:0] } = we_q ? (* full_case = 32'd1 *) (* src = "rtl/user_domain/user_rom.sv:66.9-77.16|rtl/user_domain/user_rom.sv:65.7-80.10" *) 22'h000000 : { \$auto$proc_rom.cc:154:do_switch$5 [29:28], \$auto$proc_rom.cc:154:do_switch$5 [26], \$auto$proc_rom.cc:154:do_switch$5 [24], \$auto$proc_rom.cc:154:do_switch$5 [22], \$auto$proc_rom.cc:154:do_switch$5 [27], \$auto$proc_rom.cc:154:do_switch$5 [19:18], \$auto$proc_rom.cc:154:do_switch$5 [25], \$auto$proc_rom.cc:154:do_switch$5 [14], \$auto$proc_rom.cc:154:do_switch$5 [30], \$auto$proc_rom.cc:154:do_switch$5 [12:11], \$auto$proc_rom.cc:154:do_switch$5 [9:8], \$auto$proc_rom.cc:154:do_switch$5 [6:0] };
  assign obi_err = req_q & (* src = "rtl/user_domain/user_rom.sv:65.7-80.10|rtl/user_domain/user_rom.sv:64.5-81.8" *) we_q;
  assign { obi_rsp_o[36:35], obi_rsp_o[33], obi_rsp_o[31], obi_rsp_o[29], obi_rsp_o[34], obi_rsp_o[26:25], obi_rsp_o[32], obi_rsp_o[21], obi_rsp_o[37], obi_rsp_o[19:18], obi_rsp_o[16:15], obi_rsp_o[13:7] } = req_q ? (* src = "rtl/user_domain/user_rom.sv:65.7-80.10|rtl/user_domain/user_rom.sv:64.5-81.8" *) { \$procmux$11917_Y [29:28], \$procmux$11917_Y [26], \$procmux$11917_Y [24], \$procmux$11917_Y [22], \$procmux$11917_Y [27], \$procmux$11917_Y [19:18], \$procmux$11917_Y [25], \$procmux$11917_Y [14], \$procmux$11917_Y [30], \$procmux$11917_Y [12:11], \$procmux$11917_Y [9:8], \$procmux$11917_Y [6:0] } : 22'h000000;
  assign { \$procmux$11917_Y [31], \$procmux$11917_Y [23], \$procmux$11917_Y [21:20], \$procmux$11917_Y [17:15], \$procmux$11917_Y [13], \$procmux$11917_Y [10], \$procmux$11917_Y [7] } = { 3'h0, \$procmux$11917_Y [27], 1'h0, \$procmux$11917_Y [25], 1'h0, \$procmux$11917_Y [30], \$procmux$11917_Y [11], 1'h0 };
  assign \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$b$15280 [23:0] = { \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$b$15280 [25], 2'h1, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$b$15280 [24], 4'hc, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$b$15280 [25:24], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$b$15280 [24], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$b$15280 [25:24], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$b$15280 [25], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$b$15280 [25], 5'h14, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$b$15280 [24], 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$b$15280 [25], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$b$15280 [25] };
  assign { obi_rsp_o[38], obi_rsp_o[30], obi_rsp_o[28:27], obi_rsp_o[24:22], obi_rsp_o[20], obi_rsp_o[17], obi_rsp_o[14], obi_rsp_o[6:0] } = { 3'h0, obi_rsp_o[34], 1'h0, obi_rsp_o[32], 1'h0, obi_rsp_o[37], obi_rsp_o[18], 1'h0, id_q, obi_err, 1'h0, obi_req_i[0], req_q };
  assign \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$a$15279 [23:0] = { 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$a$15279 [25:24], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$a$15279 [24], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$a$15279 [25], 1'h1, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$a$15279 [25:24], 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$a$15279 [24], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$a$15279 [24], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$a$15279 [25], 7'h3a, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$a$15279 [25], 2'h1, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$a$15279 [24], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][1][0]$a$15279 [24] };
  assign { \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [24:14], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [12:7], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [5:0] } = { 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [25], 2'h0, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [25], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [25], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [25], 3'h0, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [25], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [25], 3'h0, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [13], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [13], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [25], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [25], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [13], 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [25], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$b$15277 [6] };
  assign { \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [20], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [18:17], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [15:12], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [9:3], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [0] } = { \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [24], 1'h1, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [22], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [23], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [24], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [24], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [25], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [10], 4'ha, \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [22], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [11], \$memory$auto$proc_rom.cc:155:do_switch$6$rdmux[0][0][0]$a$15276 [1] };
  assign { \$auto$proc_rom.cc:154:do_switch$5 [31], \$auto$proc_rom.cc:154:do_switch$5 [23], \$auto$proc_rom.cc:154:do_switch$5 [21:20], \$auto$proc_rom.cc:154:do_switch$5 [17:15], \$auto$proc_rom.cc:154:do_switch$5 [13], \$auto$proc_rom.cc:154:do_switch$5 [10], \$auto$proc_rom.cc:154:do_switch$5 [7] } = { 3'h0, \$auto$proc_rom.cc:154:do_switch$5 [27], 1'h0, \$auto$proc_rom.cc:154:do_switch$5 [25], 1'h0, \$auto$proc_rom.cc:154:do_switch$5 [30], \$auto$proc_rom.cc:154:do_switch$5 [11], 1'h0 };
endmodule
