/* Generated by Yosys 0.53+101 (git sha1 0b19f628e, aarch64-linux-gnu-g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3) */

(* src = "rtl/common_cells/addr_decode.sv:35.8" *)
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  (* src = "rtl/common_cells/addr_decode.sv:72.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode.sv:74.31" *)
  input [479:0] addr_map_i;
  wire [479:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode.sv:80.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode.sv:78.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode.sv:90.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:84.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:76.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  (* src = "rtl/common_cells/addr_decode.sv:100.5" *)
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

(* src = "rtl/common_cells/addr_decode.sv:35.8" *)
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  (* src = "rtl/common_cells/addr_decode.sv:72.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode.sv:74.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode.sv:80.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode.sv:78.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode.sv:90.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:84.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:76.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  (* src = "rtl/common_cells/addr_decode.sv:100.5" *)
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

(* src = "rtl/common_cells/addr_decode.sv:35.8" *)
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  (* src = "rtl/common_cells/addr_decode.sv:72.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode.sv:74.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode.sv:80.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode.sv:78.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode.sv:90.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:84.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:76.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  (* src = "rtl/common_cells/addr_decode.sv:100.5" *)
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

(* src = "rtl/common_cells/addr_decode.sv:35.8" *)
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  (* src = "rtl/common_cells/addr_decode.sv:72.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode.sv:74.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode.sv:80.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode.sv:78.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode.sv:90.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:84.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:76.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  (* src = "rtl/common_cells/addr_decode.sv:100.5" *)
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

(* src = "rtl/common_cells/addr_decode.sv:35.8" *)
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  (* src = "rtl/common_cells/addr_decode.sv:72.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode.sv:74.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode.sv:80.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode.sv:78.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode.sv:90.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:84.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:76.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  (* src = "rtl/common_cells/addr_decode.sv:100.5" *)
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

(* src = "rtl/common_cells/addr_decode.sv:35.8" *)
module \addr_decode$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  (* src = "rtl/common_cells/addr_decode.sv:72.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode.sv:74.31" *)
  input [95:0] addr_map_i;
  wire [95:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode.sv:80.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode.sv:78.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode.sv:90.31" *)
  input default_idx_i;
  wire default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:84.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode.sv:76.31" *)
  output idx_o;
  wire idx_o;
  (* src = "rtl/common_cells/addr_decode.sv:100.5" *)
  \addr_decode_dync$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

(* src = "rtl/common_cells/addr_decode_dync.sv:40.8" *)
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10 ;
  wire \$100 ;
  wire \$102 ;
  wire \$104 ;
  wire \$106 ;
  wire \$110 ;
  wire \$12 ;
  wire \$14 ;
  wire \$27 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$4 ;
  wire \$50 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$73 ;
  wire \$77 ;
  wire \$79 ;
  wire \$8 ;
  wire \$81 ;
  wire \$83 ;
  wire \$96 ;
  wire \$auto$rtlil.cc:3092:Mux$558 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$559 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$560 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$561 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$562 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$563 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$564 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$25 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$48 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$71 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$94 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$24 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$47 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$70 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$93 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$23 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$46 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$69 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$92 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:77.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:79.31" *)
  input [479:0] addr_map_i;
  wire [479:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:98.31" *)
  input config_ongoing_i;
  wire config_ongoing_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:85.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:83.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:95.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:89.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:81.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  assign \$auto$rtlil.cc:3092:Mux$558  = ~ en_default_idx_i;
  assign \$102  = ! addr_map_i[415:384];
  assign \$104  = \$100  || \$102 ;
  assign \$106  = \$96  && \$104 ;
  assign \$110  = ~ config_ongoing_i;
  assign \$12  = \$8  || \$10 ;
  assign \$auto$rtlil.cc:3092:Mux$564  = config_ongoing_i ? default_idx_i : addr_map_i[450:448];
  assign \$14  = \$4  && \$12 ;
  assign \$auto$rtlil.cc:3092:Mux$559  = en_default_idx_i ? default_idx_i : 3'h0;
  assign \$auto$rtlil.cc:3092:Mux$560  = config_ongoing_i ? default_idx_i : addr_map_i[66:64];
  assign \$27  = addr_i >= addr_map_i[159:128];
  assign \$4  = addr_i >= addr_map_i[63:32];
  assign \$31  = addr_i < addr_map_i[127:96];
  assign \$33  = ! addr_map_i[127:96];
  assign \$35  = \$31  || \$33 ;
  assign \$37  = \$27  && \$35 ;
  assign \$auto$rtlil.cc:3092:Mux$561  = config_ongoing_i ? default_idx_i : addr_map_i[162:160];
  assign \$50  = addr_i >= addr_map_i[255:224];
  assign \$54  = addr_i < addr_map_i[223:192];
  assign \$56  = ! addr_map_i[223:192];
  assign \$58  = \$54  || \$56 ;
  assign \$60  = \$50  && \$58 ;
  assign \$auto$rtlil.cc:3092:Mux$562  = config_ongoing_i ? default_idx_i : addr_map_i[258:256];
  assign \$8  = addr_i < addr_map_i[31:0];
  assign \$73  = addr_i >= addr_map_i[351:320];
  assign \$77  = addr_i < addr_map_i[319:288];
  assign \$79  = ! addr_map_i[319:288];
  assign \$81  = \$77  || \$79 ;
  assign \$83  = \$73  && \$81 ;
  assign \$10  = ! addr_map_i[31:0];
  assign \$auto$rtlil.cc:3092:Mux$563  = config_ongoing_i ? default_idx_i : addr_map_i[354:352];
  assign \$96  = addr_i >= addr_map_i[447:416];
  assign \$100  = addr_i < addr_map_i[415:384];
  assign dec_error_o = \$106  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$94 ;
  assign dec_valid_o = \$106  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$110  : \$dec_valid_o$93 ;
  assign idx_o = \$106  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$564  : \$idx_o$92 ;
  assign \$dec_error_o$94  = \$83  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$71 ;
  assign \$dec_valid_o$93  = \$83  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$110  : \$dec_valid_o$70 ;
  assign \$idx_o$92  = \$83  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$563  : \$idx_o$69 ;
  assign \$dec_error_o$71  = \$60  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$48 ;
  assign \$dec_valid_o$70  = \$60  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$110  : \$dec_valid_o$47 ;
  assign \$idx_o$69  = \$60  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$562  : \$idx_o$46 ;
  assign \$dec_error_o$48  = \$37  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$25 ;
  assign \$dec_valid_o$47  = \$37  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$110  : \$dec_valid_o$24 ;
  assign \$idx_o$46  = \$37  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$561  : \$idx_o$23 ;
  assign \$dec_error_o$25  = \$14  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$rtlil.cc:3092:Mux$558 ;
  assign \$dec_valid_o$24  = \$14  & (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$110 ;
  assign \$idx_o$23  = \$14  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$560  : \$auto$rtlil.cc:3092:Mux$559 ;
endmodule

(* src = "rtl/common_cells/addr_decode_dync.sv:40.8" *)
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$18 ;
  wire \$27 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$4 ;
  wire \$50 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$73 ;
  wire \$77 ;
  wire \$79 ;
  wire \$8 ;
  wire \$81 ;
  wire \$83 ;
  wire \$auto$rtlil.cc:3092:Mux$1295 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1296 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1297 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1298 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1299 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1300 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$25 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$48 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$71 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$24 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$47 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$70 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$23 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$46 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$69 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:77.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:79.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:98.31" *)
  input config_ongoing_i;
  wire config_ongoing_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:85.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:83.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:95.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:89.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:81.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  assign \$auto$rtlil.cc:3092:Mux$1295  = ~ en_default_idx_i;
  assign \$12  = \$8  || \$10 ;
  assign \$14  = \$4  && \$12 ;
  assign \$18  = ~ config_ongoing_i;
  assign \$auto$rtlil.cc:3092:Mux$1296  = en_default_idx_i ? default_idx_i : 3'h0;
  assign \$auto$rtlil.cc:3092:Mux$1297  = config_ongoing_i ? default_idx_i : addr_map_i[66:64];
  assign \$27  = addr_i >= addr_map_i[159:128];
  assign \$4  = addr_i >= addr_map_i[63:32];
  assign \$31  = addr_i < addr_map_i[127:96];
  assign \$33  = ! addr_map_i[127:96];
  assign \$35  = \$31  || \$33 ;
  assign \$37  = \$27  && \$35 ;
  assign \$auto$rtlil.cc:3092:Mux$1298  = config_ongoing_i ? default_idx_i : addr_map_i[162:160];
  assign \$50  = addr_i >= addr_map_i[255:224];
  assign \$54  = addr_i < addr_map_i[223:192];
  assign \$56  = ! addr_map_i[223:192];
  assign \$58  = \$54  || \$56 ;
  assign \$60  = \$50  && \$58 ;
  assign \$auto$rtlil.cc:3092:Mux$1299  = config_ongoing_i ? default_idx_i : addr_map_i[258:256];
  assign \$8  = addr_i < addr_map_i[31:0];
  assign \$73  = addr_i >= addr_map_i[351:320];
  assign \$77  = addr_i < addr_map_i[319:288];
  assign \$79  = ! addr_map_i[319:288];
  assign \$81  = \$77  || \$79 ;
  assign \$83  = \$73  && \$81 ;
  assign \$10  = ! addr_map_i[31:0];
  assign \$auto$rtlil.cc:3092:Mux$1300  = config_ongoing_i ? default_idx_i : addr_map_i[354:352];
  assign dec_error_o = \$83  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$71 ;
  assign dec_valid_o = \$83  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$18  : \$dec_valid_o$70 ;
  assign idx_o = \$83  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$1300  : \$idx_o$69 ;
  assign \$dec_error_o$71  = \$60  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$48 ;
  assign \$dec_valid_o$70  = \$60  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$18  : \$dec_valid_o$47 ;
  assign \$idx_o$69  = \$60  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$1299  : \$idx_o$46 ;
  assign \$dec_error_o$48  = \$37  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$25 ;
  assign \$dec_valid_o$47  = \$37  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$18  : \$dec_valid_o$24 ;
  assign \$idx_o$46  = \$37  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$1298  : \$idx_o$23 ;
  assign \$dec_error_o$25  = \$14  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$rtlil.cc:3092:Mux$1295 ;
  assign \$dec_valid_o$24  = \$14  & (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$18 ;
  assign \$idx_o$23  = \$14  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$1297  : \$auto$rtlil.cc:3092:Mux$1296 ;
endmodule

(* src = "rtl/common_cells/addr_decode_dync.sv:40.8" *)
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$18 ;
  wire \$27 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$4 ;
  wire \$50 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$73 ;
  wire \$77 ;
  wire \$79 ;
  wire \$8 ;
  wire \$81 ;
  wire \$83 ;
  wire \$auto$rtlil.cc:3092:Mux$1303 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1304 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1305 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1306 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1307 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1308 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$25 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$48 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$71 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$24 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$47 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$70 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$23 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$46 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$69 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:77.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:79.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:98.31" *)
  input config_ongoing_i;
  wire config_ongoing_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:85.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:83.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:95.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:89.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:81.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  assign \$auto$rtlil.cc:3092:Mux$1303  = ~ en_default_idx_i;
  assign \$12  = \$8  || \$10 ;
  assign \$14  = \$4  && \$12 ;
  assign \$18  = ~ config_ongoing_i;
  assign \$auto$rtlil.cc:3092:Mux$1304  = en_default_idx_i ? default_idx_i : 3'h0;
  assign \$auto$rtlil.cc:3092:Mux$1305  = config_ongoing_i ? default_idx_i : addr_map_i[66:64];
  assign \$27  = addr_i >= addr_map_i[159:128];
  assign \$4  = addr_i >= addr_map_i[63:32];
  assign \$31  = addr_i < addr_map_i[127:96];
  assign \$33  = ! addr_map_i[127:96];
  assign \$35  = \$31  || \$33 ;
  assign \$37  = \$27  && \$35 ;
  assign \$auto$rtlil.cc:3092:Mux$1306  = config_ongoing_i ? default_idx_i : addr_map_i[162:160];
  assign \$50  = addr_i >= addr_map_i[255:224];
  assign \$54  = addr_i < addr_map_i[223:192];
  assign \$56  = ! addr_map_i[223:192];
  assign \$58  = \$54  || \$56 ;
  assign \$60  = \$50  && \$58 ;
  assign \$auto$rtlil.cc:3092:Mux$1307  = config_ongoing_i ? default_idx_i : addr_map_i[258:256];
  assign \$8  = addr_i < addr_map_i[31:0];
  assign \$73  = addr_i >= addr_map_i[351:320];
  assign \$77  = addr_i < addr_map_i[319:288];
  assign \$79  = ! addr_map_i[319:288];
  assign \$81  = \$77  || \$79 ;
  assign \$83  = \$73  && \$81 ;
  assign \$10  = ! addr_map_i[31:0];
  assign \$auto$rtlil.cc:3092:Mux$1308  = config_ongoing_i ? default_idx_i : addr_map_i[354:352];
  assign dec_error_o = \$83  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$71 ;
  assign dec_valid_o = \$83  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$18  : \$dec_valid_o$70 ;
  assign idx_o = \$83  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$1308  : \$idx_o$69 ;
  assign \$dec_error_o$71  = \$60  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$48 ;
  assign \$dec_valid_o$70  = \$60  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$18  : \$dec_valid_o$47 ;
  assign \$idx_o$69  = \$60  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$1307  : \$idx_o$46 ;
  assign \$dec_error_o$48  = \$37  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$25 ;
  assign \$dec_valid_o$47  = \$37  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$18  : \$dec_valid_o$24 ;
  assign \$idx_o$46  = \$37  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$1306  : \$idx_o$23 ;
  assign \$dec_error_o$25  = \$14  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$rtlil.cc:3092:Mux$1303 ;
  assign \$dec_valid_o$24  = \$14  & (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$18 ;
  assign \$idx_o$23  = \$14  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$1305  : \$auto$rtlil.cc:3092:Mux$1304 ;
endmodule

(* src = "rtl/common_cells/addr_decode_dync.sv:40.8" *)
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$18 ;
  wire \$27 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$4 ;
  wire \$50 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$73 ;
  wire \$77 ;
  wire \$79 ;
  wire \$8 ;
  wire \$81 ;
  wire \$83 ;
  wire \$auto$rtlil.cc:3092:Mux$1311 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1312 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1313 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1314 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1315 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1316 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$25 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$48 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$71 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$24 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$47 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$70 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$23 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$46 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$69 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:77.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:79.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:98.31" *)
  input config_ongoing_i;
  wire config_ongoing_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:85.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:83.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:95.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:89.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:81.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  assign \$auto$rtlil.cc:3092:Mux$1311  = ~ en_default_idx_i;
  assign \$12  = \$8  || \$10 ;
  assign \$14  = \$4  && \$12 ;
  assign \$18  = ~ config_ongoing_i;
  assign \$auto$rtlil.cc:3092:Mux$1312  = en_default_idx_i ? default_idx_i : 3'h0;
  assign \$auto$rtlil.cc:3092:Mux$1313  = config_ongoing_i ? default_idx_i : addr_map_i[66:64];
  assign \$27  = addr_i >= addr_map_i[159:128];
  assign \$4  = addr_i >= addr_map_i[63:32];
  assign \$31  = addr_i < addr_map_i[127:96];
  assign \$33  = ! addr_map_i[127:96];
  assign \$35  = \$31  || \$33 ;
  assign \$37  = \$27  && \$35 ;
  assign \$auto$rtlil.cc:3092:Mux$1314  = config_ongoing_i ? default_idx_i : addr_map_i[162:160];
  assign \$50  = addr_i >= addr_map_i[255:224];
  assign \$54  = addr_i < addr_map_i[223:192];
  assign \$56  = ! addr_map_i[223:192];
  assign \$58  = \$54  || \$56 ;
  assign \$60  = \$50  && \$58 ;
  assign \$auto$rtlil.cc:3092:Mux$1315  = config_ongoing_i ? default_idx_i : addr_map_i[258:256];
  assign \$8  = addr_i < addr_map_i[31:0];
  assign \$73  = addr_i >= addr_map_i[351:320];
  assign \$77  = addr_i < addr_map_i[319:288];
  assign \$79  = ! addr_map_i[319:288];
  assign \$81  = \$77  || \$79 ;
  assign \$83  = \$73  && \$81 ;
  assign \$10  = ! addr_map_i[31:0];
  assign \$auto$rtlil.cc:3092:Mux$1316  = config_ongoing_i ? default_idx_i : addr_map_i[354:352];
  assign dec_error_o = \$83  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$71 ;
  assign dec_valid_o = \$83  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$18  : \$dec_valid_o$70 ;
  assign idx_o = \$83  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$1316  : \$idx_o$69 ;
  assign \$dec_error_o$71  = \$60  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$48 ;
  assign \$dec_valid_o$70  = \$60  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$18  : \$dec_valid_o$47 ;
  assign \$idx_o$69  = \$60  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$1315  : \$idx_o$46 ;
  assign \$dec_error_o$48  = \$37  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$25 ;
  assign \$dec_valid_o$47  = \$37  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$18  : \$dec_valid_o$24 ;
  assign \$idx_o$46  = \$37  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$1314  : \$idx_o$23 ;
  assign \$dec_error_o$25  = \$14  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$rtlil.cc:3092:Mux$1311 ;
  assign \$dec_valid_o$24  = \$14  & (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$18 ;
  assign \$idx_o$23  = \$14  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$1313  : \$auto$rtlil.cc:3092:Mux$1312 ;
endmodule

(* src = "rtl/common_cells/addr_decode_dync.sv:40.8" *)
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$18 ;
  wire \$27 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$4 ;
  wire \$50 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$73 ;
  wire \$77 ;
  wire \$79 ;
  wire \$8 ;
  wire \$81 ;
  wire \$83 ;
  wire \$auto$rtlil.cc:3092:Mux$1319 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1320 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1321 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1322 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1323 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1324 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$25 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$48 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_error_o$71 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$24 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$47 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$dec_valid_o$70 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$23 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$46 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$idx_o$69 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:77.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:79.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:98.31" *)
  input config_ongoing_i;
  wire config_ongoing_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:85.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:83.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:95.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:89.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:81.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  assign \$auto$rtlil.cc:3092:Mux$1319  = ~ en_default_idx_i;
  assign \$12  = \$8  || \$10 ;
  assign \$14  = \$4  && \$12 ;
  assign \$18  = ~ config_ongoing_i;
  assign \$auto$rtlil.cc:3092:Mux$1320  = en_default_idx_i ? default_idx_i : 3'h0;
  assign \$auto$rtlil.cc:3092:Mux$1321  = config_ongoing_i ? default_idx_i : addr_map_i[66:64];
  assign \$27  = addr_i >= addr_map_i[159:128];
  assign \$4  = addr_i >= addr_map_i[63:32];
  assign \$31  = addr_i < addr_map_i[127:96];
  assign \$33  = ! addr_map_i[127:96];
  assign \$35  = \$31  || \$33 ;
  assign \$37  = \$27  && \$35 ;
  assign \$auto$rtlil.cc:3092:Mux$1322  = config_ongoing_i ? default_idx_i : addr_map_i[162:160];
  assign \$50  = addr_i >= addr_map_i[255:224];
  assign \$54  = addr_i < addr_map_i[223:192];
  assign \$56  = ! addr_map_i[223:192];
  assign \$58  = \$54  || \$56 ;
  assign \$60  = \$50  && \$58 ;
  assign \$auto$rtlil.cc:3092:Mux$1323  = config_ongoing_i ? default_idx_i : addr_map_i[258:256];
  assign \$8  = addr_i < addr_map_i[31:0];
  assign \$73  = addr_i >= addr_map_i[351:320];
  assign \$77  = addr_i < addr_map_i[319:288];
  assign \$79  = ! addr_map_i[319:288];
  assign \$81  = \$77  || \$79 ;
  assign \$83  = \$73  && \$81 ;
  assign \$10  = ! addr_map_i[31:0];
  assign \$auto$rtlil.cc:3092:Mux$1324  = config_ongoing_i ? default_idx_i : addr_map_i[354:352];
  assign dec_error_o = \$83  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$71 ;
  assign dec_valid_o = \$83  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$18  : \$dec_valid_o$70 ;
  assign idx_o = \$83  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$1324  : \$idx_o$69 ;
  assign \$dec_error_o$71  = \$60  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$48 ;
  assign \$dec_valid_o$70  = \$60  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$18  : \$dec_valid_o$47 ;
  assign \$idx_o$69  = \$60  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$1323  : \$idx_o$46 ;
  assign \$dec_error_o$48  = \$37  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$dec_error_o$25 ;
  assign \$dec_valid_o$47  = \$37  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$18  : \$dec_valid_o$24 ;
  assign \$idx_o$46  = \$37  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$1322  : \$idx_o$23 ;
  assign \$dec_error_o$25  = \$14  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$rtlil.cc:3092:Mux$1319 ;
  assign \$dec_valid_o$24  = \$14  & (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$18 ;
  assign \$idx_o$23  = \$14  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$1321  : \$auto$rtlil.cc:3092:Mux$1320 ;
endmodule

(* src = "rtl/common_cells/addr_decode_dync.sv:40.8" *)
module \addr_decode_dync$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$18 ;
  wire \$4 ;
  wire \$8 ;
  wire \$auto$rtlil.cc:3092:Mux$811 ;
  wire \$auto$rtlil.cc:3092:Mux$812 ;
  wire \$auto$rtlil.cc:3092:Mux$813 ;
  (* src = "rtl/common_cells/addr_decode_dync.sv:77.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:79.31" *)
  input [95:0] addr_map_i;
  wire [95:0] addr_map_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:98.31" *)
  input config_ongoing_i;
  wire config_ongoing_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:85.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:83.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "rtl/common_cells/addr_decode_dync.sv:95.31" *)
  input default_idx_i;
  wire default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:89.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "rtl/common_cells/addr_decode_dync.sv:81.31" *)
  output idx_o;
  wire idx_o;
  assign \$auto$rtlil.cc:3092:Mux$811  = ~ en_default_idx_i;
  assign \$12  = \$8  || \$10 ;
  assign \$14  = \$4  && \$12 ;
  assign \$18  = ~ config_ongoing_i;
  assign \$auto$rtlil.cc:3092:Mux$812  = en_default_idx_i & default_idx_i;
  assign \$auto$rtlil.cc:3092:Mux$813  = config_ongoing_i ? default_idx_i : addr_map_i[64];
  assign \$4  = addr_i >= addr_map_i[63:32];
  assign \$8  = addr_i < addr_map_i[31:0];
  assign \$10  = ! addr_map_i[31:0];
  assign dec_error_o = \$14  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$rtlil.cc:3092:Mux$811 ;
  assign dec_valid_o = \$14  & (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$18 ;
  assign idx_o = \$14  ? (* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:3092:Mux$813  : \$auto$rtlil.cc:3092:Mux$812 ;
endmodule

(* src = "rtl/apb_uart/apb_uart.sv:35.8" *)
module \apb_uart$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart (CLK, RSTN, PSEL, PENABLE, PWRITE, PADDR, PWDATA, PRDATA, PREADY, PSLVERR, INT, OUT1N, OUT2N, RTSN, DTRN, CTSN, DSRN, DCDN, RIN, SIN, SOUT
);
  wire \$104 ;
  wire \$111 ;
  wire \$118 ;
  wire \$125 ;
  wire \$149 ;
  wire \$155 ;
  wire \$159 ;
  wire \$16 ;
  wire \$161 ;
  wire \$165 ;
  wire \$167 ;
  wire \$171 ;
  wire \$175 ;
  wire \$179 ;
  wire \$18 ;
  wire \$185 ;
  wire \$197 ;
  wire \$201 ;
  wire \$203 ;
  wire \$207 ;
  wire \$209 ;
  wire \$211 ;
  wire [5:0] \$213 ;
  wire \$239 ;
  wire \$241 ;
  wire \$245 ;
  wire \$247 ;
  wire \$249 ;
  wire \$260 ;
  wire \$268 ;
  wire \$28 ;
  wire \$297 ;
  wire \$30 ;
  wire \$303 ;
  wire \$307 ;
  wire \$309 ;
  wire \$32 ;
  wire \$333 ;
  wire \$337 ;
  wire \$339 ;
  wire \$347 ;
  wire \$349 ;
  wire \$353 ;
  wire \$357 ;
  wire \$387 ;
  wire \$396 ;
  wire \$402 ;
  wire \$406 ;
  wire \$41 ;
  wire \$423 ;
  wire \$434 ;
  wire \$436 ;
  wire \$438 ;
  wire \$440 ;
  wire \$449 ;
  wire \$453 ;
  wire \$455 ;
  wire \$464 ;
  wire \$468 ;
  wire \$470 ;
  wire \$479 ;
  wire \$483 ;
  wire \$485 ;
  wire \$496 ;
  wire \$506 ;
  wire \$522 ;
  wire \$540 ;
  wire \$544 ;
  wire \$546 ;
  wire \$548 ;
  wire \$564 ;
  wire \$568 ;
  wire \$570 ;
  wire \$576 ;
  wire \$578 ;
  wire \$580 ;
  wire \$582 ;
  wire \$586 ;
  wire \$588 ;
  wire \$590 ;
  wire \$594 ;
  wire \$598 ;
  wire \$602 ;
  wire \$604 ;
  wire \$61 ;
  wire \$623 ;
  wire \$625 ;
  wire \$627 ;
  wire \$63 ;
  wire \$633 ;
  wire \$635 ;
  wire \$641 ;
  wire \$645 ;
  wire \$649 ;
  wire \$651 ;
  wire \$664 ;
  wire \$666 ;
  wire \$672 ;
  wire \$674 ;
  wire \$715 ;
  wire \$721 ;
  wire \$723 ;
  wire \$733 ;
  wire \$735 ;
  wire \$737 ;
  wire \$748 ;
  wire \$750 ;
  wire \$755 ;
  wire \$757 ;
  wire \$762 ;
  wire \$764 ;
  wire \$769 ;
  wire \$771 ;
  wire \$778 ;
  wire \$83 ;
  wire \$97 ;
  (* src = "rtl/apb_uart/apb_uart.sv:883.13-890.18" *)
  wire [7:0] \$PRDATA[7:0]$783 ;
  (* src = "rtl/apb_uart/apb_uart.sv:895.13-902.18" *)
  wire [7:0] \$PRDATA[7:0]$786 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17270 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17285 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17277 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17290 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16704 ;
  wire [6:0] \$auto$opt_share.cc:222:merge_operators$18438 ;
  wire \$auto$rtlil.cc:2957:Not$17276 ;
  wire [6:0] \$auto$rtlil.cc:3092:Mux$18440 ;
  (* src = "rtl/apb_uart/apb_uart.sv:847.8-850.13" *)
  wire \$iBAUDOUTN$744 ;
  (* src = "rtl/apb_uart/apb_uart.sv:344.18-347.18" *)
  wire \$iCharTimeout$222 ;
  (* src = "rtl/apb_uart/apb_uart.sv:340.13-347.18" *)
  wire \$iCharTimeout$223 ;
  (* src = "rtl/apb_uart/apb_uart.sv:338.8-352.13" *)
  wire \$iCharTimeout$224 ;
  (* src = "rtl/apb_uart/apb_uart.sv:370.8-389.13" *)
  wire \$iFCR_RXFIFOReset$271 ;
  (* src = "rtl/apb_uart/apb_uart.sv:370.8-389.13" *)
  wire \$iFCR_TXFIFOReset$272 ;
  (* src = "rtl/apb_uart/apb_uart.sv:495.8-509.13" *)
  wire [6:0] \$iFECounter$362 ;
  (* src = "rtl/apb_uart/apb_uart.sv:483.13-486.13" *)
  wire \$iLSR_BI$330 ;
  (* src = "rtl/apb_uart/apb_uart.sv:479.8-486.13" *)
  wire \$iLSR_BI$331 ;
  (* src = "rtl/apb_uart/apb_uart.sv:475.13-478.13" *)
  wire \$iLSR_FE$324 ;
  (* src = "rtl/apb_uart/apb_uart.sv:471.8-478.13" *)
  wire \$iLSR_FE$325 ;
  (* src = "rtl/apb_uart/apb_uart.sv:491.13-494.13" *)
  wire \$iLSR_FIFOERR$340 ;
  (* src = "rtl/apb_uart/apb_uart.sv:487.8-494.13" *)
  wire \$iLSR_FIFOERR$341 ;
  (* src = "rtl/apb_uart/apb_uart.sv:459.13-462.13" *)
  wire \$iLSR_OE$312 ;
  (* src = "rtl/apb_uart/apb_uart.sv:455.8-462.13" *)
  wire \$iLSR_OE$313 ;
  (* src = "rtl/apb_uart/apb_uart.sv:467.13-470.13" *)
  wire \$iLSR_PE$318 ;
  (* src = "rtl/apb_uart/apb_uart.sv:463.8-470.13" *)
  wire \$iLSR_PE$319 ;
  (* src = "rtl/apb_uart/apb_uart.sv:591.13-594.13" *)
  wire \$iMSR_TERI$515 ;
  (* src = "rtl/apb_uart/apb_uart.sv:587.8-594.13" *)
  wire \$iMSR_TERI$516 ;
  (* src = "rtl/apb_uart/apb_uart.sv:575.13-578.13" *)
  wire \$iMSR_dCTS$499 ;
  (* src = "rtl/apb_uart/apb_uart.sv:571.8-578.13" *)
  wire \$iMSR_dCTS$500 ;
  (* src = "rtl/apb_uart/apb_uart.sv:599.13-602.13" *)
  wire \$iMSR_dDCD$525 ;
  (* src = "rtl/apb_uart/apb_uart.sv:595.8-602.13" *)
  wire \$iMSR_dDCD$526 ;
  (* src = "rtl/apb_uart/apb_uart.sv:583.13-586.13" *)
  wire \$iMSR_dDSR$509 ;
  (* src = "rtl/apb_uart/apb_uart.sv:579.8-586.13" *)
  wire \$iMSR_dDSR$510 ;
  (* src = "rtl/apb_uart/apb_uart.sv:823.13-826.13" *)
  wire \$iRTS$738 ;
  (* src = "rtl/apb_uart/apb_uart.sv:819.8-826.13" *)
  wire \$iRTS$739 ;
  (* src = "rtl/apb_uart/apb_uart.sv:793.27-794.50" *)
  wire \$iRXFIFOClear$698 ;
  (* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43" *)
  wire \$iRXFIFOClear$699 ;
  (* src = "rtl/apb_uart/apb_uart.sv:787.13-809.21" *)
  wire \$iRXFIFOClear$708 ;
  (* src = "rtl/apb_uart/apb_uart.sv:804.27-805.45" *)
  wire \$iRXFIFOWrite$706 ;
  (* src = "rtl/apb_uart/apb_uart.sv:802.22-805.45" *)
  wire \$iRXFIFOWrite$707 ;
  (* src = "rtl/apb_uart/apb_uart.sv:787.13-809.21" *)
  wire \$iRXFIFOWrite$709 ;
  (* src = "rtl/apb_uart/apb_uart.sv:303.13-306.13" *)
  wire \$iTHRInterrupt$172 ;
  (* src = "rtl/apb_uart/apb_uart.sv:299.8-306.13" *)
  wire \$iTHRInterrupt$173 ;
  (* src = "rtl/apb_uart/apb_uart.sv:740.13-769.20" *)
  wire \$iTXFIFORead$688 ;
  (* src = "rtl/apb_uart/apb_uart.sv:740.13-769.20" *)
  wire \$iTXRunning$690 ;
  (* src = "rtl/apb_uart/apb_uart.sv:740.13-769.20" *)
  wire \$iTXStart$689 ;
  (* src = "rtl/apb_uart/apb_uart.sv:329.8-337.13" *)
  wire [5:0] \$iTimeoutCount$215 ;
  wire \$procmux$13455_Y ;
  wire [1:0] \$procmux$13505_Y ;
  wire \$procmux$13506_CMP ;
  wire \$procmux$13511_CMP ;
  (* src = "rtl/apb_uart/apb_uart.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/apb_uart.sv:51.14" *)
  input CTSN;
  wire CTSN;
  (* src = "rtl/apb_uart/apb_uart.sv:53.14" *)
  input DCDN;
  wire DCDN;
  (* src = "rtl/apb_uart/apb_uart.sv:52.14" *)
  input DSRN;
  wire DSRN;
  (* src = "rtl/apb_uart/apb_uart.sv:50.16" *)
  output DTRN;
  reg DTRN;
  (* src = "rtl/apb_uart/apb_uart.sv:46.16" *)
  output INT;
  wire INT;
  (* src = "rtl/apb_uart/apb_uart.sv:47.16" *)
  output OUT1N;
  reg OUT1N;
  (* src = "rtl/apb_uart/apb_uart.sv:48.16" *)
  output OUT2N;
  reg OUT2N;
  (* src = "rtl/apb_uart/apb_uart.sv:41.20" *)
  input [2:0] PADDR;
  wire [2:0] PADDR;
  (* src = "rtl/apb_uart/apb_uart.sv:39.14" *)
  input PENABLE;
  wire PENABLE;
  (* src = "rtl/apb_uart/apb_uart.sv:43.23" *)
  output [31:0] PRDATA;
  wire [31:0] PRDATA;
  (* src = "rtl/apb_uart/apb_uart.sv:44.16" *)
  output PREADY;
  wire PREADY;
  (* src = "rtl/apb_uart/apb_uart.sv:38.14" *)
  input PSEL;
  wire PSEL;
  (* src = "rtl/apb_uart/apb_uart.sv:45.16" *)
  output PSLVERR;
  wire PSLVERR;
  (* src = "rtl/apb_uart/apb_uart.sv:42.21" *)
  input [31:0] PWDATA;
  wire [31:0] PWDATA;
  (* src = "rtl/apb_uart/apb_uart.sv:40.14" *)
  input PWRITE;
  wire PWRITE;
  (* src = "rtl/apb_uart/apb_uart.sv:54.14" *)
  input RIN;
  wire RIN;
  (* src = "rtl/apb_uart/apb_uart.sv:37.14" *)
  input RSTN;
  wire RSTN;
  (* src = "rtl/apb_uart/apb_uart.sv:49.16" *)
  output RTSN;
  reg RTSN;
  (* src = "rtl/apb_uart/apb_uart.sv:55.14" *)
  input SIN;
  wire SIN;
  (* src = "rtl/apb_uart/apb_uart.sv:56.16" *)
  output SOUT;
  reg SOUT;
  (* src = "rtl/apb_uart/apb_uart.sv:157.5" *)
  reg iBAUDOUTN;
  (* src = "rtl/apb_uart/apb_uart.sv:198.5" *)
  wire iBIRE;
  (* src = "rtl/apb_uart/apb_uart.sv:154.5" *)
  wire iBaudtick16x;
  (* src = "rtl/apb_uart/apb_uart.sv:155.5" *)
  wire iBaudtick2x;
  (* src = "rtl/apb_uart/apb_uart.sv:137.5" *)
  wire iCTSNs;
  (* src = "rtl/apb_uart/apb_uart.sv:141.5" *)
  wire iCTSn;
  (* src = "rtl/apb_uart/apb_uart.sv:146.5" *)
  wire iCTSnFE;
  (* src = "rtl/apb_uart/apb_uart.sv:145.5" *)
  wire iCTSnRE;
  (* src = "rtl/apb_uart/apb_uart.sv:204.5" *)
  reg iCharTimeout;
  (* src = "rtl/apb_uart/apb_uart.sv:139.5" *)
  wire iDCDNs;
  (* src = "rtl/apb_uart/apb_uart.sv:143.5" *)
  wire iDCDn;
  (* src = "rtl/apb_uart/apb_uart.sv:150.5" *)
  wire iDCDnFE;
  (* src = "rtl/apb_uart/apb_uart.sv:149.5" *)
  wire iDCDnRE;
  (* src = "rtl/apb_uart/apb_uart.sv:83.11" *)
  reg [7:0] iDLL;
  (* src = "rtl/apb_uart/apb_uart.sv:71.5" *)
  wire iDLLWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:84.11" *)
  reg [7:0] iDLM;
  (* src = "rtl/apb_uart/apb_uart.sv:72.5" *)
  wire iDLMWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:138.5" *)
  wire iDSRNs;
  (* src = "rtl/apb_uart/apb_uart.sv:142.5" *)
  wire iDSRn;
  (* src = "rtl/apb_uart/apb_uart.sv:148.5" *)
  wire iDSRnFE;
  (* src = "rtl/apb_uart/apb_uart.sv:147.5" *)
  wire iDSRnRE;
  (* src = "rtl/apb_uart/apb_uart.sv:75.5" *)
  wire iFCRWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:106.5" *)
  reg iFCR_FIFO64E;
  (* src = "rtl/apb_uart/apb_uart.sv:102.5" *)
  reg iFCR_FIFOEnable;
  (* src = "rtl/apb_uart/apb_uart.sv:103.5" *)
  reg iFCR_RXFIFOReset;
  (* src = "rtl/apb_uart/apb_uart.sv:107.11" *)
  reg [1:0] iFCR_RXTrigger;
  (* src = "rtl/apb_uart/apb_uart.sv:104.5" *)
  reg iFCR_TXFIFOReset;
  (* src = "rtl/apb_uart/apb_uart.sv:199.11" *)
  reg [6:0] iFECounter;
  (* src = "rtl/apb_uart/apb_uart.sv:201.5" *)
  wire iFEDecrement;
  (* src = "rtl/apb_uart/apb_uart.sv:200.5" *)
  wire iFEIncrement;
  (* src = "rtl/apb_uart/apb_uart.sv:196.5" *)
  wire iFERE;
  (* src = "rtl/apb_uart/apb_uart.sv:85.11" *)
  wire [7:0] iIER;
  (* src = "rtl/apb_uart/apb_uart.sv:73.5" *)
  wire iIERWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:86.11" *)
  wire [7:0] iIIR;
  (* src = "rtl/apb_uart/apb_uart.sv:74.5" *)
  wire iIIRRead;
  (* src = "rtl/apb_uart/apb_uart.sv:101.5" *)
  wire iIIR_FIFO64;
  (* src = "rtl/apb_uart/apb_uart.sv:88.11" *)
  reg [7:0] iLCR;
  (* src = "rtl/apb_uart/apb_uart.sv:76.5" *)
  wire iLCRWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:90.11" *)
  wire [7:0] iLSR;
  (* src = "rtl/apb_uart/apb_uart.sv:78.5" *)
  wire iLSRRead;
  (* src = "rtl/apb_uart/apb_uart.sv:125.5" *)
  reg iLSR_BI;
  (* src = "rtl/apb_uart/apb_uart.sv:121.5" *)
  wire iLSR_DR;
  (* src = "rtl/apb_uart/apb_uart.sv:124.5" *)
  reg iLSR_FE;
  (* src = "rtl/apb_uart/apb_uart.sv:128.5" *)
  reg iLSR_FIFOERR;
  (* src = "rtl/apb_uart/apb_uart.sv:122.5" *)
  reg iLSR_OE;
  (* src = "rtl/apb_uart/apb_uart.sv:123.5" *)
  reg iLSR_PE;
  (* src = "rtl/apb_uart/apb_uart.sv:127.5" *)
  wire iLSR_TEMT;
  (* src = "rtl/apb_uart/apb_uart.sv:126.5" *)
  wire iLSR_THRE;
  (* src = "rtl/apb_uart/apb_uart.sv:205.5" *)
  wire iLSR_THRERE;
  (* src = "rtl/apb_uart/apb_uart.sv:89.11" *)
  wire [7:0] iMCR;
  (* src = "rtl/apb_uart/apb_uart.sv:77.5" *)
  wire iMCRWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:79.5" *)
  wire iMSRRead;
  (* src = "rtl/apb_uart/apb_uart.sv:133.5" *)
  wire iMSR_CTS;
  (* src = "rtl/apb_uart/apb_uart.sv:136.5" *)
  wire iMSR_DCD;
  (* src = "rtl/apb_uart/apb_uart.sv:134.5" *)
  wire iMSR_DSR;
  (* src = "rtl/apb_uart/apb_uart.sv:135.5" *)
  wire iMSR_RI;
  (* src = "rtl/apb_uart/apb_uart.sv:131.5" *)
  reg iMSR_TERI;
  (* src = "rtl/apb_uart/apb_uart.sv:129.5" *)
  reg iMSR_dCTS;
  (* src = "rtl/apb_uart/apb_uart.sv:132.5" *)
  reg iMSR_dDCD;
  (* src = "rtl/apb_uart/apb_uart.sv:130.5" *)
  reg iMSR_dDSR;
  (* src = "rtl/apb_uart/apb_uart.sv:197.5" *)
  wire iPERE;
  (* src = "rtl/apb_uart/apb_uart.sv:69.5" *)
  wire iRBRRead;
  (* src = "rtl/apb_uart/apb_uart.sv:156.5" *)
  wire iRCLK;
  (* src = "rtl/apb_uart/apb_uart.sv:202.5" *)
  wire iRDAInterrupt;
  (* src = "rtl/apb_uart/apb_uart.sv:140.5" *)
  wire iRINs;
  (* src = "rtl/apb_uart/apb_uart.sv:144.5" *)
  wire iRIn;
  (* src = "rtl/apb_uart/apb_uart.sv:152.5" *)
  wire iRInFE;
  (* src = "rtl/apb_uart/apb_uart.sv:151.5" *)
  (* unused_bits = "0" *)
  wire iRInRE;
  (* src = "rtl/apb_uart/apb_uart.sv:68.5" *)
  wire iRST;
  (* src = "rtl/apb_uart/apb_uart.sv:208.5" *)
  reg iRTS;
  (* src = "rtl/apb_uart/apb_uart.sv:195.5" *)
  wire iRXBI;
  (* src = "rtl/apb_uart/apb_uart.sv:192.11" *)
  wire [7:0] iRXData;
  (* src = "rtl/apb_uart/apb_uart.sv:194.5" *)
  wire iRXFE;
  (* src = "rtl/apb_uart/apb_uart.sv:178.5" *)
  wire iRXFIFO16Trigger;
  (* src = "rtl/apb_uart/apb_uart.sv:173.5" *)
  wire iRXFIFO64Full;
  (* src = "rtl/apb_uart/apb_uart.sv:179.5" *)
  wire iRXFIFO64Trigger;
  (* src = "rtl/apb_uart/apb_uart.sv:182.5" *)
  wire iRXFIFOBI;
  (* src = "rtl/apb_uart/apb_uart.sv:167.5" *)
  reg iRXFIFOClear;
  (* src = "rtl/apb_uart/apb_uart.sv:174.12" *)
  reg [10:0] iRXFIFOD;
  (* src = "rtl/apb_uart/apb_uart.sv:170.5" *)
  wire iRXFIFOEmpty;
  (* src = "rtl/apb_uart/apb_uart.sv:181.5" *)
  wire iRXFIFOFE;
  (* src = "rtl/apb_uart/apb_uart.sv:171.5" *)
  wire iRXFIFOFull;
  (* src = "rtl/apb_uart/apb_uart.sv:180.5" *)
  wire iRXFIFOPE;
  (* src = "rtl/apb_uart/apb_uart.sv:175.12" *)
  wire [10:0] iRXFIFOQ;
  (* src = "rtl/apb_uart/apb_uart.sv:177.5" *)
  wire iRXFIFOTrigger;
  (* src = "rtl/apb_uart/apb_uart.sv:176.11" *)
  (* unused_bits = "0" *)
  wire [5:0] iRXFIFOUsage;
  (* src = "rtl/apb_uart/apb_uart.sv:168.5" *)
  reg iRXFIFOWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:190.5" *)
  wire iRXFinished;
  (* src = "rtl/apb_uart/apb_uart.sv:193.5" *)
  wire iRXPE;
  (* src = "rtl/apb_uart/apb_uart.sv:67.5" *)
  wire iRead;
  (* src = "rtl/apb_uart/apb_uart.sv:92.11" *)
  reg [7:0] iSCR;
  (* src = "rtl/apb_uart/apb_uart.sv:80.5" *)
  wire iSCRWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:189.5" *)
  wire iSIN;
  (* src = "rtl/apb_uart/apb_uart.sv:188.5" *)
  wire iSINr;
  (* src = "rtl/apb_uart/apb_uart.sv:183.5" *)
  wire iSOUT;
  (* src = "rtl/apb_uart/apb_uart.sv:206.5" *)
  reg iTHRInterrupt;
  (* src = "rtl/apb_uart/apb_uart.sv:70.5" *)
  wire iTHRWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:81.11" *)
  reg [7:0] iTSR;
  (* src = "rtl/apb_uart/apb_uart.sv:207.5" *)
  wire iTXEnable;
  (* src = "rtl/apb_uart/apb_uart.sv:164.5" *)
  wire iTXFIFO64Full;
  (* src = "rtl/apb_uart/apb_uart.sv:162.5" *)
  wire iTXFIFOFull;
  (* src = "rtl/apb_uart/apb_uart.sv:166.11" *)
  wire [7:0] iTXFIFOQ;
  (* src = "rtl/apb_uart/apb_uart.sv:160.5" *)
  reg iTXFIFORead;
  (* src = "rtl/apb_uart/apb_uart.sv:165.11" *)
  (* unused_bits = "0 1 2 3 5" *)
  wire [5:0] iTXFIFOUsage;
  (* src = "rtl/apb_uart/apb_uart.sv:159.5" *)
  wire iTXFIFOWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:186.5" *)
  wire iTXFinished;
  (* src = "rtl/apb_uart/apb_uart.sv:187.5" *)
  reg iTXRunning;
  (* src = "rtl/apb_uart/apb_uart.sv:184.5" *)
  reg iTXStart;
  (* src = "rtl/apb_uart/apb_uart.sv:203.11" *)
  reg [5:0] iTimeoutCount;
  (* src = "rtl/apb_uart/apb_uart.sv:66.5" *)
  wire iWrite;
  (* src = "rtl/apb_uart/apb_uart.sv:720.18" *)
  reg rx_State;
  (* src = "rtl/apb_uart/apb_uart.sv:721.18" *)
  reg [1:0] tx_State;
  assign \$104  = PADDR == 3'h4;
  assign iMCRWrite = iWrite && \$104 ;
  assign \$111  = PADDR == 3'h5;
  assign iLSRRead = iRead && \$111 ;
  assign \$118  = PADDR == 3'h6;
  assign iMSRRead = iRead && \$118 ;
  assign \$125  = PADDR == 3'h7;
  assign iSCRWrite = iWrite && \$125 ;
  assign \$149  = iLSR_THRERE | iFCR_TXFIFOReset;
  assign \$16  = PSEL && PENABLE;
  assign \$155  = iIERWrite && PWDATA[1];
  assign \$159  = \$155  && iLSR_THRE;
  assign \$161  = \$149  | \$159 ;
  assign \$165  = iIIR[3:1] == 1'h1;
  assign \$167  = iIIRRead && \$165 ;
  assign \$18  = ~ PWRITE;
  assign \$171  = \$167  | iTHRWrite;
  assign \$175  = ~ iFCR_FIFOEnable;
  assign \$179  = \$175  && iLSR_DR;
  assign \$185  = iFCR_FIFOEnable && iRXFIFOTrigger;
  assign iRDAInterrupt = \$179  | \$185 ;
  assign iIIR_FIFO64 = iFCR_FIFOEnable & iFCR_FIFO64E;
  assign iRead = \$16  && \$18 ;
  assign \$197  = iRXFIFOEmpty | iRBRRead;
  assign \$201  = \$197  | iRXFIFOWrite;
  assign \$203  = ~ iRXFIFOEmpty;
  assign \$207  = \$203  && iBaudtick2x;
  assign \$209  = ~ iTimeoutCount[5];
  assign \$211  = \$207  && \$209 ;
  assign \$213  = iTimeoutCount + 1'h1;
  assign \$239  = \$175  && PWDATA[0];
  assign iRST = ~ RSTN;
  assign \$241  = PWDATA[1] | \$239 ;
  assign \$245  = ~ PWDATA[0];
  assign \$247  = iFCR_FIFOEnable && \$245 ;
  assign \$249  = \$241  | \$247 ;
  assign \$260  = PWDATA[2] | \$239 ;
  assign \$268  = \$260  | \$247 ;
  assign \$28  = ! PADDR;
  assign \$30  = iRead && \$28 ;
  assign \$297  = \$179  && iRXFinished;
  assign \$303  = iFCR_FIFOEnable && iRXFIFOFull;
  assign \$307  = \$303  && iRXFinished;
  assign \$309  = \$297  | \$307 ;
  assign \$32  = ~ iLCR[7];
  assign iRBRRead = \$30  && \$32 ;
  assign \$333  = | iFECounter;
  assign \$337  = ! iRXFIFOQ[10:8];
  assign \$339  = iRXFIFOEmpty | \$337 ;
  assign \$347  = ~ iFEDecrement;
  assign \$349  = iFEIncrement && \$347 ;
  assign \$auto$opt_share.cc:222:merge_operators$18438  = iFECounter + { \$auto$rtlil.cc:3092:Mux$18440 [6], \$auto$rtlil.cc:3092:Mux$18440 [6], \$auto$rtlil.cc:3092:Mux$18440 [6], \$auto$rtlil.cc:3092:Mux$18440 [6], \$auto$rtlil.cc:3092:Mux$18440 [6], \$auto$rtlil.cc:3092:Mux$18440 [6], 1'h1 };
  assign \$353  = ~ iFEIncrement;
  assign \$357  = \$353  && iFEDecrement;
  assign iRXFIFOPE = \$203  && iRXFIFOQ[8];
  assign iRXFIFOFE = \$203  && iRXFIFOQ[9];
  assign iRXFIFOBI = \$203  && iRXFIFOQ[10];
  assign \$387  = | iRXFIFOD[10:8];
  assign iFEIncrement = iRXFIFOWrite && \$387 ;
  assign \$396  = \$333  && \$203 ;
  assign \$41  = iWrite && \$28 ;
  assign \$402  = iPERE | iFERE;
  assign \$406  = \$402  | iBIRE;
  assign iFEDecrement = \$396  && \$406 ;
  assign iLSR[7] = iFCR_FIFOEnable && iLSR_FIFOERR;
  assign iLSR_DR = \$203  | iRXFIFOWrite;
  assign \$423  = ~ iTXRunning;
  assign iLSR_TEMT = \$423  && iLSR_THRE;
  assign \$434  = iMCR[4] && iRTS;
  assign \$436  = ~ iMCR[4];
  assign \$438  = ~ iCTSn;
  assign \$440  = \$436  && \$438 ;
  assign iTHRWrite = \$41  && \$32 ;
  assign iMSR_CTS = \$434  | \$440 ;
  assign \$449  = iMCR[4] && iMCR[0];
  assign \$453  = ~ iDSRn;
  assign \$455  = \$436  && \$453 ;
  assign iMSR_DSR = \$449  | \$455 ;
  assign \$464  = iMCR[4] && iMCR[2];
  assign \$468  = ~ iRIn;
  assign \$470  = \$436  && \$468 ;
  assign iMSR_RI = \$464  | \$470 ;
  assign \$479  = iMCR[4] && iMCR[3];
  assign \$483  = ~ iDCDn;
  assign \$485  = \$436  && \$483 ;
  assign iMSR_DCD = \$479  | \$485 ;
  assign \$496  = iCTSnRE | iCTSnFE;
  assign \$506  = iDSRnRE | iDSRnFE;
  assign \$522  = iDCDnRE | iDCDnFE;
  assign iTXFIFOFull = iFCR_FIFO64E ? iTXFIFO64Full : iTXFIFOUsage[4];
  assign \$540  = \$175  && iLSR_THRE;
  assign \$544  = ~ iTXFIFOFull;
  assign \$546  = iFCR_FIFOEnable && \$544 ;
  assign \$548  = \$540  | \$546 ;
  assign iDLLWrite = \$41  && iLCR[7];
  assign iTXFIFOWrite = \$548  && iTHRWrite;
  assign iRXFIFOFull = iFCR_FIFO64E ? iRXFIFO64Full : iRXFIFOUsage[4];
  assign \$564  = ! iFCR_RXTrigger;
  assign \$568  = \$564  && \$203 ;
  assign \$570  = iFCR_RXTrigger == 1'h1;
  assign \$576  = iRXFIFOUsage[2] | iRXFIFOUsage[3];
  assign \$578  = \$570  && \$576 ;
  assign \$580  = \$568  | \$578 ;
  assign \$582  = iFCR_RXTrigger == 2'h2;
  assign \$586  = \$582  && iRXFIFOUsage[3];
  assign \$588  = \$580  | \$586 ;
  assign \$590  = iFCR_RXTrigger == 2'h3;
  assign \$594  = \$590  && iRXFIFOUsage[3];
  assign \$598  = \$594  && iRXFIFOUsage[2];
  assign \$61  = PADDR == 1'h1;
  assign \$602  = \$598  && iRXFIFOUsage[1];
  assign \$604  = \$588  | \$602 ;
  assign iRXFIFO16Trigger = \$604  | iRXFIFOUsage[4];
  assign \$63  = iWrite && \$61 ;
  assign \$623  = iRXFIFOUsage[4] | iRXFIFOUsage[5];
  assign \$625  = \$570  && \$623 ;
  assign \$627  = \$568  | \$625 ;
  assign \$633  = \$582  && iRXFIFOUsage[5];
  assign \$635  = \$627  | \$633 ;
  assign \$641  = \$590  && iRXFIFOUsage[5];
  assign \$645  = \$641  && iRXFIFOUsage[4];
  assign \$649  = \$645  && iRXFIFOUsage[3];
  assign \$651  = \$635  | \$649 ;
  assign iRXFIFO64Trigger = \$651  | iRXFIFO64Full;
  assign iRXFIFOTrigger = iFCR_FIFO64E ? iRXFIFO64Trigger : iRXFIFO16Trigger;
  assign iDLMWrite = \$63  && iLCR[7];
  assign iSIN = iMCR[4] ? iSOUT : iSINr;
  assign \$664  = ~ iLSR_THRE;
  assign \$666  = ~ iMCR[5];
  assign \$672  = iMCR[5] && iMSR_CTS;
  assign \$674  = \$666  | \$672 ;
  assign iTXEnable = \$664  && \$674 ;
  assign \$715  = ~ iMCR[1];
  assign \$721  = iMCR[5] && iRXFIFOTrigger;
  assign \$723  = \$715  | \$721 ;
  assign \$733  = iMCR[5] && iRXFIFOEmpty;
  assign \$735  = \$666  | \$733 ;
  assign \$737  = iMCR[1] && \$735 ;
  assign \$748  = ~ iMCR[2];
  assign \$750  = iMCR[4] | \$748 ;
  assign \$755  = ~ iMCR[3];
  assign \$757  = iMCR[4] | \$755 ;
  assign \$762  = ~ iRTS;
  assign \$764  = iMCR[4] | \$762 ;
  assign \$769  = ~ iMCR[0];
  assign iIERWrite = \$63  && \$32 ;
  assign \$771  = iMCR[4] | \$769 ;
  assign \$778  = iMCR[4] | iSOUT;
  assign iWrite = \$16  && PWRITE;
  assign \$83  = PADDR == 2'h2;
  assign iIIRRead = iRead && \$83 ;
  assign iFCRWrite = iWrite && \$83 ;
  assign \$97  = PADDR == 2'h3;
  assign iLCRWrite = iWrite && \$97 ;
  (* src = "rtl/apb_uart/apb_uart.sv:320.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iTimeoutCount <= 6'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17270 ) iTimeoutCount <= \$iTimeoutCount$215 ;
  (* src = "rtl/apb_uart/apb_uart.sv:724.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iTSR <= 8'h00;
    else if (\$iTXFIFORead$688 ) iTSR <= iTXFIFOQ;
  (* src = "rtl/apb_uart/apb_uart.sv:614.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iSCR <= 8'h00;
    else if (iSCRWrite) iSCR <= PWDATA[7:0];
  (* src = "rtl/apb_uart/apb_uart.sv:773.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iRXFIFOD <= 11'h000;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17277 ) iRXFIFOD <= { iRXBI, iRXFE, iRXPE, iRXData };
  reg [5:0] \$auto$ff.cc:266:slice$17279 ;
  (* src = "rtl/apb_uart/apb_uart.sv:422.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) \$auto$ff.cc:266:slice$17279  <= 6'h00;
    else if (iMCRWrite) \$auto$ff.cc:266:slice$17279  <= PWDATA[5:0];
  assign iMCR[5:0] = \$auto$ff.cc:266:slice$17279 ;
  (* src = "rtl/apb_uart/apb_uart.sv:400.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iLCR <= 8'h00;
    else if (iLCRWrite) iLCR <= PWDATA[7:0];
  reg [3:0] \$auto$ff.cc:266:slice$17282 ;
  (* src = "rtl/apb_uart/apb_uart.sv:254.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) \$auto$ff.cc:266:slice$17282  <= 4'h0;
    else if (iIERWrite) \$auto$ff.cc:266:slice$17282  <= PWDATA[3:0];
  assign iIER[3:0] = \$auto$ff.cc:266:slice$17282 ;
  (* src = "rtl/apb_uart/apb_uart.sv:443.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iFECounter <= 7'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17285 ) iFECounter <= \$iFECounter$362 ;
  (* src = "rtl/apb_uart/apb_uart.sv:355.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iFCR_RXTrigger <= 2'h0;
    else if (iFCRWrite) iFCR_RXTrigger <= PWDATA[7:6];
  (* src = "rtl/apb_uart/apb_uart.sv:355.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iFCR_FIFOEnable <= 1'h0;
    else if (iFCRWrite) iFCR_FIFOEnable <= PWDATA[0];
  (* src = "rtl/apb_uart/apb_uart.sv:355.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iFCR_FIFO64E <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17290 ) iFCR_FIFO64E <= PWDATA[5];
  (* src = "rtl/apb_uart/apb_uart.sv:234.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iDLM <= 8'h00;
    else if (iDLMWrite) iDLM <= PWDATA[7:0];
  (* src = "rtl/apb_uart/apb_uart.sv:234.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iDLL <= 8'h01;
    else if (iDLLWrite) iDLL <= PWDATA[7:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17270  = | { \$211 , \$201  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17285  = | { iRXFIFOClear, \$357 , \$349  };
  assign \$auto$rtlil.cc:2957:Not$17276  = ~ rx_State;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17277  = & { \$auto$rtlil.cc:2957:Not$17276 , iRXFinished };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17290  = & { iLCR[7], iFCRWrite };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16704  = | { \$iTXRunning$690 , \$iTXFIFORead$688  };
  assign \$auto$rtlil.cc:3092:Mux$18440 [6] = ~ \$349 ;
  (* src = "rtl/apb_uart/apb_uart.sv:829.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) DTRN <= 1'h1;
    else DTRN <= \$771 ;
  (* src = "rtl/apb_uart/apb_uart.sv:829.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) OUT1N <= 1'h1;
    else OUT1N <= \$750 ;
  (* src = "rtl/apb_uart/apb_uart.sv:829.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) OUT2N <= 1'h1;
    else OUT2N <= \$757 ;
  (* src = "rtl/apb_uart/apb_uart.sv:829.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) RTSN <= 1'h1;
    else RTSN <= \$764 ;
  (* src = "rtl/apb_uart/apb_uart.sv:829.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) SOUT <= 1'h1;
    else SOUT <= \$778 ;
  (* src = "rtl/apb_uart/apb_uart.sv:829.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iBAUDOUTN <= 1'h1;
    else iBAUDOUTN <= \$iBAUDOUTN$744 ;
  (* src = "rtl/apb_uart/apb_uart.sv:320.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iCharTimeout <= 1'h0;
    else iCharTimeout <= \$iCharTimeout$224 ;
  (* src = "rtl/apb_uart/apb_uart.sv:355.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iFCR_RXFIFOReset <= 1'h0;
    else iFCR_RXFIFOReset <= \$iFCR_RXFIFOReset$271 ;
  (* src = "rtl/apb_uart/apb_uart.sv:355.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iFCR_TXFIFOReset <= 1'h0;
    else iFCR_TXFIFOReset <= \$iFCR_TXFIFOReset$272 ;
  (* src = "rtl/apb_uart/apb_uart.sv:443.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iLSR_BI <= 1'h0;
    else iLSR_BI <= \$iLSR_BI$331 ;
  (* src = "rtl/apb_uart/apb_uart.sv:443.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iLSR_FE <= 1'h0;
    else iLSR_FE <= \$iLSR_FE$325 ;
  (* src = "rtl/apb_uart/apb_uart.sv:443.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iLSR_FIFOERR <= 1'h0;
    else iLSR_FIFOERR <= \$iLSR_FIFOERR$341 ;
  (* src = "rtl/apb_uart/apb_uart.sv:443.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iLSR_OE <= 1'h0;
    else iLSR_OE <= \$iLSR_OE$313 ;
  (* src = "rtl/apb_uart/apb_uart.sv:443.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iLSR_PE <= 1'h0;
    else iLSR_PE <= \$iLSR_PE$319 ;
  (* src = "rtl/apb_uart/apb_uart.sv:561.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iMSR_TERI <= 1'h0;
    else iMSR_TERI <= \$iMSR_TERI$516 ;
  (* src = "rtl/apb_uart/apb_uart.sv:561.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iMSR_dCTS <= 1'h0;
    else iMSR_dCTS <= \$iMSR_dCTS$500 ;
  (* src = "rtl/apb_uart/apb_uart.sv:561.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iMSR_dDCD <= 1'h0;
    else iMSR_dDCD <= \$iMSR_dDCD$526 ;
  (* src = "rtl/apb_uart/apb_uart.sv:561.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iMSR_dDSR <= 1'h0;
    else iMSR_dDSR <= \$iMSR_dDSR$510 ;
  (* src = "rtl/apb_uart/apb_uart.sv:812.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iRTS <= 1'h0;
    else iRTS <= \$iRTS$739 ;
  (* src = "rtl/apb_uart/apb_uart.sv:773.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iRXFIFOClear <= 1'h0;
    else iRXFIFOClear <= \$iRXFIFOClear$708 ;
  (* src = "rtl/apb_uart/apb_uart.sv:773.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iRXFIFOWrite <= 1'h0;
    else iRXFIFOWrite <= \$iRXFIFOWrite$709 ;
  (* src = "rtl/apb_uart/apb_uart.sv:292.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iTHRInterrupt <= 1'h0;
    else iTHRInterrupt <= \$iTHRInterrupt$173 ;
  (* src = "rtl/apb_uart/apb_uart.sv:724.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iTXFIFORead <= 1'h0;
    else iTXFIFORead <= \$iTXFIFORead$688 ;
  (* src = "rtl/apb_uart/apb_uart.sv:724.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iTXRunning <= 1'h0;
    else iTXRunning <= \$iTXRunning$690 ;
  (* src = "rtl/apb_uart/apb_uart.sv:724.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iTXStart <= 1'h0;
    else iTXStart <= \$iTXStart$689 ;
  (* src = "rtl/apb_uart/apb_uart.sv:773.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) rx_State <= 1'h0;
    else rx_State <= \$procmux$13455_Y ;
  (* src = "rtl/apb_uart/apb_uart.sv:724.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) tx_State <= 2'h0;
    else tx_State <= \$procmux$13505_Y ;
  assign \$PRDATA[7:0]$786  = iLCR[7] ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:897.18-897.38|rtl/apb_uart/apb_uart.sv:895.13-902.18" *) iDLM : { 4'h0, iIER[3:0] };
  function [7:0] \$procmux$13382 ;
    input [7:0] a;
    input [55:0] b;
    input [6:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/apb_uart/apb_uart.sv:932.13-932.33|rtl/apb_uart/apb_uart.sv:880.7-940.14" *)
    (* parallel_case *)
    casez (s)
      7'b??????1:
        \$procmux$13382  = b[7:0];
      7'b?????1?:
        \$procmux$13382  = b[15:8];
      7'b????1??:
        \$procmux$13382  = b[23:16];
      7'b???1???:
        \$procmux$13382  = b[31:24];
      7'b??1????:
        \$procmux$13382  = b[39:32];
      7'b?1?????:
        \$procmux$13382  = b[47:40];
      7'b1??????:
        \$procmux$13382  = b[55:48];
      default:
        \$procmux$13382  = a;
    endcase
  endfunction
  assign PRDATA[7:0] = \$procmux$13382 (\$PRDATA[7:0]$783 , { \$PRDATA[7:0]$786 , iFCR_FIFOEnable, iFCR_FIFOEnable, iIIR_FIFO64, 1'h0, iIIR[3:0], iLCR, 2'h0, iMCR[5:0], iLSR[7], iLSR_TEMT, iLSR_THRE, iLSR_BI, iLSR_FE, iLSR_PE, iLSR_OE, iLSR_DR, iMSR_DCD, iMSR_RI, iMSR_DSR, iMSR_CTS, iMSR_dDCD, iMSR_TERI, iMSR_dDSR, iMSR_dCTS, iSCR }, { \$61 , \$83 , \$97 , \$104 , \$111 , \$118 , \$125  });
  assign \$PRDATA[7:0]$783  = iLCR[7] ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:885.18-885.38|rtl/apb_uart/apb_uart.sv:883.13-890.18" *) iDLL : iRXFIFOQ[7:0];
  assign \$iBAUDOUTN$744  = ~ (* src = "rtl/apb_uart/apb_uart.sv:849.13-849.32|rtl/apb_uart/apb_uart.sv:847.8-850.13" *) iBaudtick16x;
  assign \$iRTS$738  = iRTS | (* src = "rtl/apb_uart/apb_uart.sv:825.13-825.27|rtl/apb_uart/apb_uart.sv:823.13-826.13" *) \$737 ;
  assign \$iRTS$739  = \$723  ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:821.13-821.27|rtl/apb_uart/apb_uart.sv:819.8-826.13" *) 1'h0 : \$iRTS$738 ;
  assign \$iRXFIFOWrite$706  = ~ (* src = "rtl/apb_uart/apb_uart.sv:805.24-805.45|rtl/apb_uart/apb_uart.sv:804.27-805.45" *) iRXFIFOFull;
  assign \$iRXFIFOWrite$707  = iFCR_FIFOEnable ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:803.24-803.45|rtl/apb_uart/apb_uart.sv:802.22-805.45" *) \$iRXFIFOWrite$706  : 1'h1;
  assign \$procmux$13455_Y  = rx_State ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:801.19-807.22|rtl/apb_uart/apb_uart.sv:787.13-809.21" *) 1'h0 : iRXFinished;
  assign \$iRXFIFOClear$698  = iFCR_FIFOEnable ? (* src = "rtl/apb_uart/apb_uart.sv:794.29-794.50|rtl/apb_uart/apb_uart.sv:793.27-794.50" *) iFCR_RXFIFOReset : 1'h1;
  assign \$iRXFIFOClear$699  = iRXFinished ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:791.24-796.27|rtl/apb_uart/apb_uart.sv:790.22-798.43" *) \$iRXFIFOClear$698  : iFCR_RXFIFOReset;
  assign \$iRXFIFOWrite$709  = rx_State & (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:801.19-807.22|rtl/apb_uart/apb_uart.sv:787.13-809.21" *) \$iRXFIFOWrite$707 ;
  assign \$iRXFIFOClear$708  = rx_State ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43|rtl/apb_uart/apb_uart.sv:787.13-809.21" *) iFCR_RXFIFOReset : \$iRXFIFOClear$699 ;
  assign \$iTXRunning$690  = tx_State == (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:759.19-766.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" *) 2'h2;
  function [1:0] \$procmux$13505 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/apb_uart/apb_uart.sv:767.31-767.50|rtl/apb_uart/apb_uart.sv:740.13-769.20" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$13505  = b[1:0];
      3'b?1?:
        \$procmux$13505  = b[3:2];
      3'b1??:
        \$procmux$13505  = b[5:4];
      default:
        \$procmux$13505  = a;
    endcase
  endfunction
  assign \$procmux$13505_Y  = \$procmux$13505 ({ 1'h0, iTXEnable }, { 3'h5, iTXFinished, 2'h0 }, { \$iTXFIFORead$688 , \$iTXRunning$690 , \$procmux$13506_CMP  });
  assign \$procmux$13506_CMP  = tx_State == (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:767.31-767.50|rtl/apb_uart/apb_uart.sv:740.13-769.20" *) 2'h3;
  assign \$iTXFIFORead$688  = tx_State == (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:752.19-757.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" *) 1'h1;
  assign \$procmux$13511_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:743.22-749.43|rtl/apb_uart/apb_uart.sv:740.13-769.20" *) tx_State;
  function [0:0] \$procmux$13534 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/apb_uart/apb_uart.sv:759.19-766.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$13534  = b[0:0];
      2'b1?:
        \$procmux$13534  = b[1:1];
      default:
        \$procmux$13534  = a;
    endcase
  endfunction
  assign \$iTXStart$689  = \$procmux$13534 (1'h0, { iTXEnable, 1'h1 }, { \$procmux$13511_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16704  });
  assign \$iMSR_dDCD$525  = iMSRRead ? (* src = "rtl/apb_uart/apb_uart.sv:601.13-601.32|rtl/apb_uart/apb_uart.sv:599.13-602.13" *) 1'h0 : iMSR_dDCD;
  assign \$iMSR_dDCD$526  = \$iMSR_dDCD$525  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:597.13-597.32|rtl/apb_uart/apb_uart.sv:595.8-602.13" *) \$522 ;
  assign \$iMSR_TERI$515  = iMSRRead ? (* src = "rtl/apb_uart/apb_uart.sv:593.13-593.32|rtl/apb_uart/apb_uart.sv:591.13-594.13" *) 1'h0 : iMSR_TERI;
  assign \$iMSR_TERI$516  = \$iMSR_TERI$515  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:589.13-589.32|rtl/apb_uart/apb_uart.sv:587.8-594.13" *) iRInFE;
  assign \$iMSR_dDSR$509  = iMSRRead ? (* src = "rtl/apb_uart/apb_uart.sv:585.13-585.32|rtl/apb_uart/apb_uart.sv:583.13-586.13" *) 1'h0 : iMSR_dDSR;
  assign \$iMSR_dDSR$510  = \$iMSR_dDSR$509  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:581.13-581.32|rtl/apb_uart/apb_uart.sv:579.8-586.13" *) \$506 ;
  assign \$iMSR_dCTS$499  = iMSRRead ? (* src = "rtl/apb_uart/apb_uart.sv:577.13-577.32|rtl/apb_uart/apb_uart.sv:575.13-578.13" *) 1'h0 : iMSR_dCTS;
  assign \$iMSR_dCTS$500  = \$iMSR_dCTS$499  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:573.13-573.32|rtl/apb_uart/apb_uart.sv:571.8-578.13" *) \$496 ;
  assign \$iFECounter$362  = iRXFIFOClear ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:497.13-497.29|rtl/apb_uart/apb_uart.sv:495.8-509.13" *) 7'h00 : \$auto$opt_share.cc:222:merge_operators$18438 ;
  assign \$iLSR_FIFOERR$340  = \$339  ? (* src = "rtl/apb_uart/apb_uart.sv:493.13-493.35|rtl/apb_uart/apb_uart.sv:491.13-494.13" *) 1'h0 : iLSR_FIFOERR;
  assign \$iLSR_FIFOERR$341  = \$iLSR_FIFOERR$340  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:489.13-489.35|rtl/apb_uart/apb_uart.sv:487.8-494.13" *) \$333 ;
  assign \$iLSR_BI$330  = iLSRRead ? (* src = "rtl/apb_uart/apb_uart.sv:485.13-485.30|rtl/apb_uart/apb_uart.sv:483.13-486.13" *) 1'h0 : iLSR_BI;
  assign \$iLSR_BI$331  = \$iLSR_BI$330  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:481.13-481.30|rtl/apb_uart/apb_uart.sv:479.8-486.13" *) iBIRE;
  assign \$iLSR_FE$324  = iLSRRead ? (* src = "rtl/apb_uart/apb_uart.sv:477.13-477.30|rtl/apb_uart/apb_uart.sv:475.13-478.13" *) 1'h0 : iLSR_FE;
  assign \$iLSR_FE$325  = \$iLSR_FE$324  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:473.13-473.30|rtl/apb_uart/apb_uart.sv:471.8-478.13" *) iFERE;
  assign \$iLSR_PE$318  = iLSRRead ? (* src = "rtl/apb_uart/apb_uart.sv:469.13-469.30|rtl/apb_uart/apb_uart.sv:467.13-470.13" *) 1'h0 : iLSR_PE;
  assign \$iLSR_PE$319  = \$iLSR_PE$318  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:465.13-465.30|rtl/apb_uart/apb_uart.sv:463.8-470.13" *) iPERE;
  assign \$iLSR_OE$312  = iLSRRead ? (* src = "rtl/apb_uart/apb_uart.sv:461.13-461.30|rtl/apb_uart/apb_uart.sv:459.13-462.13" *) 1'h0 : iLSR_OE;
  assign \$iLSR_OE$313  = \$iLSR_OE$312  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:457.13-457.30|rtl/apb_uart/apb_uart.sv:455.8-462.13" *) \$309 ;
  assign \$iFCR_TXFIFOReset$272  = iFCRWrite & (* src = "rtl/apb_uart/apb_uart.sv:371.10-389.13|rtl/apb_uart/apb_uart.sv:370.8-389.13" *) \$268 ;
  assign \$iFCR_RXFIFOReset$271  = iFCRWrite & (* src = "rtl/apb_uart/apb_uart.sv:371.10-389.13|rtl/apb_uart/apb_uart.sv:370.8-389.13" *) \$249 ;
  assign \$iCharTimeout$224  = iFCR_FIFOEnable & (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:340.13-347.18|rtl/apb_uart/apb_uart.sv:338.8-352.13" *) \$iCharTimeout$223 ;
  assign \$iCharTimeout$222  = iCharTimeout | (* src = "rtl/apb_uart/apb_uart.sv:346.18-346.40|rtl/apb_uart/apb_uart.sv:344.18-347.18" *) iTimeoutCount[5];
  assign \$iCharTimeout$223  = iRBRRead ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:342.18-342.40|rtl/apb_uart/apb_uart.sv:340.13-347.18" *) 1'h0 : \$iCharTimeout$222 ;
  assign \$iTimeoutCount$215  = \$201  ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:332.13-332.72|rtl/apb_uart/apb_uart.sv:329.8-337.13" *) 6'h00 : \$213 ;
  assign \$iTHRInterrupt$172  = \$171  ? (* src = "rtl/apb_uart/apb_uart.sv:305.13-305.36|rtl/apb_uart/apb_uart.sv:303.13-306.13" *) 1'h0 : iTHRInterrupt;
  assign \$iTHRInterrupt$173  = \$iTHRInterrupt$172  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/apb_uart.sv:301.13-301.36|rtl/apb_uart/apb_uart.sv:299.8-306.13" *) \$161 ;
  (* src = "rtl/apb_uart/apb_uart.sv:630.14" *)
  \uart_baudgen$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG16  UART_BG16 (
    .BAUDTICK(iBaudtick16x),
    .CE(1'h1),
    .CLEAR(1'h0),
    .CLK(CLK),
    .DIVIDER({ iDLM, iDLL }),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:637.29" *)
  \slib_clock_div$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG2  UART_BG2 (
    .CE(iBaudtick16x),
    .CLK(CLK),
    .Q(iBaudtick2x),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:517.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BIDET  UART_BIDET (
    .CLK(CLK),
    .D(iRXFIFOBI),
    .RE(iBIRE),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:536.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_CTS  UART_ED_CTS (
    .CLK(CLK),
    .D(iMSR_CTS),
    .FE(iCTSnFE),
    .RE(iCTSnRE),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:554.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DCD  UART_ED_DCD (
    .CLK(CLK),
    .D(iMSR_DCD),
    .FE(iDCDnFE),
    .RE(iDCDnRE),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:542.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DSR  UART_ED_DSR (
    .CLK(CLK),
    .D(iMSR_DSR),
    .FE(iDSRnFE),
    .RE(iDSRnRE),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:548.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_RI  UART_ED_RI (
    .CLK(CLK),
    .D(iMSR_RI),
    .FE(iRInFE),
    .RE(iRInRE),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:516.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_FEDET  UART_FEDET (
    .CLK(CLK),
    .D(iRXFIFOFE),
    .RE(iFERE),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:229.31" *)
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_CTS  UART_IF_CTS (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iCTSNs),
    .Q(iCTSn),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:231.31" *)
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DCD  UART_IF_DCD (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iDCDNs),
    .Q(iDCDn),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:230.31" *)
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DSR  UART_IF_DSR (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iDSRNs),
    .Q(iDSRn),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:232.31" *)
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_RI  UART_IF_RI (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iRINs),
    .Q(iRIn),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:273.16" *)
  \uart_interrupt$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC  UART_IIC (
    .AFE(iMCR[5]),
    .CLK(CLK),
    .CTI(iCharTimeout),
    .IER(iIER[3:0]),
    .IIR(iIIR[3:0]),
    .INT(INT),
    .LSR({ iLSR_BI, iLSR_FE, iLSR_PE, iLSR_OE, iLSR_DR }),
    .MSR({ iMSR_dDCD, iMSR_TERI, iMSR_dDSR, iMSR_dCTS }),
    .RDA(iRDAInterrupt),
    .RST(iRST),
    .THI(iTHRInterrupt)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:285.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC_THRE_ED  UART_IIC_THRE_ED (
    .CLK(CLK),
    .D(iLSR_THRE),
    .RE(iLSR_THRERE),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:225.17" *)
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_CTS  UART_IS_CTS (
    .CLK(CLK),
    .D(CTSN),
    .Q(iCTSNs),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:227.17" *)
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DCD  UART_IS_DCD (
    .CLK(CLK),
    .D(DCDN),
    .Q(iDCDNs),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:226.17" *)
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DSR  UART_IS_DSR (
    .CLK(CLK),
    .D(DSRN),
    .Q(iDSRNs),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:228.17" *)
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_RI  UART_IS_RI (
    .CLK(CLK),
    .D(RIN),
    .Q(iRINs),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:224.17" *)
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_SIN  UART_IS_SIN (
    .CLK(CLK),
    .D(SIN),
    .Q(iSINr),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:515.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_PEDET  UART_PEDET (
    .CLK(CLK),
    .D(iRXFIFOPE),
    .RE(iPERE),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:642.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RCLK  UART_RCLK (
    .CLK(CLK),
    .D(iBAUDOUTN),
    .RE(iRCLK),
    .RST(iRST)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:697.15" *)
  \uart_receiver$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX  UART_RX (
    .BI(iRXBI),
    .CLK(CLK),
    .DOUT(iRXData),
    .EPS(iLCR[4]),
    .FE(iRXFE),
    .PE(iRXPE),
    .PEN(iLCR[3]),
    .RST(iRST),
    .RXCLEAR(1'h0),
    .RXCLK(iRCLK),
    .RXFINISHED(iRXFinished),
    .SIN(iSIN),
    .SP(iLCR[5]),
    .STB(iLCR[2]),
    .WLS(iLCR[1:0])
  );
  (* src = "rtl/apb_uart/apb_uart.sv:663.37" *)
  \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RXFF  UART_RXFF (
    .CLEAR(iRXFIFOClear),
    .CLK(CLK),
    .D(iRXFIFOD),
    .EMPTY(iRXFIFOEmpty),
    .FULL(iRXFIFO64Full),
    .Q(iRXFIFOQ),
    .READ(iRBRRead),
    .RST(iRST),
    .USAGE(iRXFIFOUsage),
    .WRITE(iRXFIFOWrite)
  );
  (* src = "rtl/apb_uart/apb_uart.sv:681.18" *)
  \uart_transmitter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TX  UART_TX (
    .BC(iLCR[6]),
    .CLEAR(1'h0),
    .CLK(CLK),
    .DIN(iTSR),
    .EPS(iLCR[4]),
    .PEN(iLCR[3]),
    .RST(iRST),
    .SOUT(iSOUT),
    .SP(iLCR[5]),
    .STB(iLCR[2]),
    .TXCLK(iBaudtick2x),
    .TXFINISHED(iTXFinished),
    .TXSTART(iTXStart),
    .WLS(iLCR[1:0])
  );
  (* src = "rtl/apb_uart/apb_uart.sv:648.36" *)
  \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TXFF  UART_TXFF (
    .CLEAR(iFCR_TXFIFOReset),
    .CLK(CLK),
    .D(PWDATA[7:0]),
    .EMPTY(iLSR_THRE),
    .FULL(iTXFIFO64Full),
    .Q(iTXFIFOQ),
    .READ(iTXFIFORead),
    .RST(iRST),
    .USAGE(iTXFIFOUsage),
    .WRITE(iTXFIFOWrite)
  );
  assign \$auto$rtlil.cc:3092:Mux$18440 [5:0] = { \$auto$rtlil.cc:3092:Mux$18440 [6], \$auto$rtlil.cc:3092:Mux$18440 [6], \$auto$rtlil.cc:3092:Mux$18440 [6], \$auto$rtlil.cc:3092:Mux$18440 [6], \$auto$rtlil.cc:3092:Mux$18440 [6], 1'h1 };
  assign PRDATA[31:8] = 24'h000000;
  assign PREADY = 1'h1;
  assign PSLVERR = 1'h0;
  assign iIER[7:4] = 4'h0;
  assign iIIR[7:4] = { iFCR_FIFOEnable, iFCR_FIFOEnable, iIIR_FIFO64, 1'h0 };
  assign iLSR[6:0] = { iLSR_TEMT, iLSR_THRE, iLSR_BI, iLSR_FE, iLSR_PE, iLSR_OE, iLSR_DR };
  assign iMCR[7:6] = 2'h0;
endmodule

(* src = "rtl/common_cells/cdc_2phase_clearable.sv:54.8" *)
module \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req (src_rst_ni, src_clk_i, src_clear_i, src_data_i, src_valid_i, src_ready_o, dst_rst_ni, dst_clk_i, dst_clear_i, dst_clear_pending_o, dst_data_o, dst_valid_o, dst_ready_i, src_clear_pending_o);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$3 ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:88.35" *)
  wire async_ack;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:89.31" *)
  wire [40:0] async_data;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:87.35" *)
  wire async_req;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:69.16" *)
  input dst_clear_i;
  wire dst_clear_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:70.16" *)
  output dst_clear_pending_o;
  wire dst_clear_pending_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:68.16" *)
  input dst_clk_i;
  wire dst_clk_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:71.16" *)
  output [40:0] dst_data_o;
  wire [40:0] dst_data_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:73.16" *)
  input dst_ready_i;
  wire dst_ready_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:67.16" *)
  input dst_rst_ni;
  wire dst_rst_ni;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:72.16" *)
  output dst_valid_o;
  wire dst_valid_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:81.16" *)
  reg s_dst_clear_ack_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:80.16" *)
  wire s_dst_clear_req;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:84.16" *)
  reg s_dst_isolate_ack_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:82.16" *)
  wire s_dst_valid;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:76.16" *)
  reg s_src_clear_ack_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:75.16" *)
  wire s_src_clear_req;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:79.16" *)
  reg s_src_isolate_ack_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:77.16" *)
  wire s_src_ready;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:61.16" *)
  input src_clear_i;
  wire src_clear_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:62.16" *)
  output src_clear_pending_o;
  wire src_clear_pending_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:60.16" *)
  input src_clk_i;
  wire src_clk_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:63.16" *)
  input [40:0] src_data_i;
  wire [40:0] src_data_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:65.16" *)
  output src_ready_o;
  wire src_ready_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:59.16" *)
  input src_rst_ni;
  wire src_rst_ni;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:64.16" *)
  input src_valid_i;
  wire src_valid_i;
  assign \$1  = ! src_clear_pending_o;
  assign \$11  = dst_ready_i & \$13 ;
  assign \$13  = ! dst_clear_pending_o;
  assign dst_valid_o = s_dst_valid & \$13 ;
  assign \$3  = src_valid_i & \$1 ;
  assign src_ready_o = s_src_ready & \$1 ;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:172.3" *)
  always @(posedge dst_clk_i, negedge dst_rst_ni)
    if (!dst_rst_ni) s_dst_clear_ack_q <= 1'h0;
    else s_dst_clear_ack_q <= s_dst_clear_req;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:172.3" *)
  always @(posedge dst_clk_i, negedge dst_rst_ni)
    if (!dst_rst_ni) s_dst_isolate_ack_q <= 1'h0;
    else s_dst_isolate_ack_q <= dst_clear_pending_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:162.3" *)
  always @(posedge src_clk_i, negedge src_rst_ni)
    if (!src_rst_ni) s_src_clear_ack_q <= 1'h0;
    else s_src_clear_ack_q <= s_src_clear_req;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:162.3" *)
  always @(posedge src_clk_i, negedge src_rst_ni)
    if (!src_rst_ni) s_src_isolate_ack_q <= 1'h0;
    else s_src_isolate_ack_q <= src_clear_pending_o;
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:143.5" *)
  \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr  i_cdc_reset_ctrlr (
    .a_clear_ack_i(s_src_clear_ack_q),
    .a_clear_i(src_clear_i),
    .a_clear_o(s_src_clear_req),
    .a_clk_i(src_clk_i),
    .a_isolate_ack_i(s_src_isolate_ack_q),
    .a_isolate_o(src_clear_pending_o),
    .a_rst_ni(src_rst_ni),
    .b_clear_ack_i(s_dst_clear_ack_q),
    .b_clear_i(dst_clear_i),
    .b_clear_o(s_dst_clear_req),
    .b_clk_i(dst_clk_i),
    .b_isolate_ack_i(s_dst_isolate_ack_q),
    .b_isolate_o(dst_clear_pending_o),
    .b_rst_ni(dst_rst_ni)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:125.5" *)
  \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst  i_dst (
    .async_ack_o(async_ack),
    .async_data_i(async_data),
    .async_req_i(async_req),
    .clear_i(s_dst_clear_req),
    .clk_i(dst_clk_i),
    .data_o(dst_data_o),
    .ready_i(\$11 ),
    .rst_ni(dst_rst_ni),
    .valid_o(s_dst_valid)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:106.5" *)
  \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src  i_src (
    .async_ack_i(async_ack),
    .async_data_o(async_data),
    .async_req_o(async_req),
    .clear_i(s_src_clear_req),
    .clk_i(src_clk_i),
    .data_i(src_data_i),
    .ready_o(s_src_ready),
    .rst_ni(src_rst_ni),
    .valid_i(\$3 )
  );
endmodule

(* src = "rtl/common_cells/cdc_2phase_clearable.sv:54.8" *)
module \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp (src_rst_ni, src_clk_i, src_clear_i, src_data_i, src_valid_i, src_ready_o, dst_rst_ni, dst_clk_i, dst_clear_i, dst_clear_pending_o, dst_data_o, dst_valid_o, dst_ready_i, src_clear_pending_o);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$3 ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:88.35" *)
  wire async_ack;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:89.31" *)
  wire [33:0] async_data;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:87.35" *)
  wire async_req;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:69.16" *)
  input dst_clear_i;
  wire dst_clear_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:70.16" *)
  output dst_clear_pending_o;
  wire dst_clear_pending_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:68.16" *)
  input dst_clk_i;
  wire dst_clk_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:71.16" *)
  output [33:0] dst_data_o;
  wire [33:0] dst_data_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:73.16" *)
  input dst_ready_i;
  wire dst_ready_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:67.16" *)
  input dst_rst_ni;
  wire dst_rst_ni;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:72.16" *)
  output dst_valid_o;
  wire dst_valid_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:81.16" *)
  reg s_dst_clear_ack_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:80.16" *)
  wire s_dst_clear_req;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:84.16" *)
  reg s_dst_isolate_ack_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:82.16" *)
  wire s_dst_valid;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:76.16" *)
  reg s_src_clear_ack_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:75.16" *)
  wire s_src_clear_req;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:79.16" *)
  reg s_src_isolate_ack_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:77.16" *)
  wire s_src_ready;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:61.16" *)
  input src_clear_i;
  wire src_clear_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:62.16" *)
  output src_clear_pending_o;
  wire src_clear_pending_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:60.16" *)
  input src_clk_i;
  wire src_clk_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:63.16" *)
  input [33:0] src_data_i;
  wire [33:0] src_data_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:65.16" *)
  output src_ready_o;
  wire src_ready_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:59.16" *)
  input src_rst_ni;
  wire src_rst_ni;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:64.16" *)
  input src_valid_i;
  wire src_valid_i;
  assign \$1  = ! src_clear_pending_o;
  assign \$11  = dst_ready_i & \$13 ;
  assign \$13  = ! dst_clear_pending_o;
  assign dst_valid_o = s_dst_valid & \$13 ;
  assign \$3  = src_valid_i & \$1 ;
  assign src_ready_o = s_src_ready & \$1 ;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:172.3" *)
  always @(posedge dst_clk_i, negedge dst_rst_ni)
    if (!dst_rst_ni) s_dst_clear_ack_q <= 1'h0;
    else s_dst_clear_ack_q <= s_dst_clear_req;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:172.3" *)
  always @(posedge dst_clk_i, negedge dst_rst_ni)
    if (!dst_rst_ni) s_dst_isolate_ack_q <= 1'h0;
    else s_dst_isolate_ack_q <= dst_clear_pending_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:162.3" *)
  always @(posedge src_clk_i, negedge src_rst_ni)
    if (!src_rst_ni) s_src_clear_ack_q <= 1'h0;
    else s_src_clear_ack_q <= s_src_clear_req;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:162.3" *)
  always @(posedge src_clk_i, negedge src_rst_ni)
    if (!src_rst_ni) s_src_isolate_ack_q <= 1'h0;
    else s_src_isolate_ack_q <= src_clear_pending_o;
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:143.5" *)
  \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr  i_cdc_reset_ctrlr (
    .a_clear_ack_i(s_src_clear_ack_q),
    .a_clear_i(src_clear_i),
    .a_clear_o(s_src_clear_req),
    .a_clk_i(src_clk_i),
    .a_isolate_ack_i(s_src_isolate_ack_q),
    .a_isolate_o(src_clear_pending_o),
    .a_rst_ni(src_rst_ni),
    .b_clear_ack_i(s_dst_clear_ack_q),
    .b_clear_i(dst_clear_i),
    .b_clear_o(s_dst_clear_req),
    .b_clk_i(dst_clk_i),
    .b_isolate_ack_i(s_dst_isolate_ack_q),
    .b_isolate_o(dst_clear_pending_o),
    .b_rst_ni(dst_rst_ni)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:125.5" *)
  \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst  i_dst (
    .async_ack_o(async_ack),
    .async_data_i(async_data),
    .async_req_i(async_req),
    .clear_i(s_dst_clear_req),
    .clk_i(dst_clk_i),
    .data_o(dst_data_o),
    .ready_i(\$11 ),
    .rst_ni(dst_rst_ni),
    .valid_o(s_dst_valid)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:106.5" *)
  \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src  i_src (
    .async_ack_i(async_ack),
    .async_data_o(async_data),
    .async_req_o(async_req),
    .clear_i(s_src_clear_req),
    .clk_i(src_clk_i),
    .data_i(src_data_i),
    .ready_o(s_src_ready),
    .rst_ni(src_rst_ni),
    .valid_i(\$3 )
  );
endmodule

(* src = "rtl/common_cells/cdc_2phase_clearable.sv:269.8" *)
module \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst (clk_i, rst_ni, data_o, clear_i, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$11 ;
  wire \$13 ;
  wire \$2 ;
  wire \$4 ;
  wire \$9 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17298 ;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.8" *)
  wire ack_dst_d;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.19" *)
  wire ack_dst_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:280.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:281.16" *)
  input [40:0] async_data_i;
  wire [40:0] async_data_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:279.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:275.16" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:274.16" *)
  input clk_i;
  wire clk_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:288.5" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40" *)
  wire [40:0] data_dst_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:288.17" *)
  wire [40:0] data_dst_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:276.16" *)
  output [40:0] data_o;
  reg [40:0] data_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:278.16" *)
  input ready_i;
  wire ready_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.30" *)
  wire req_synced;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.42" *)
  reg req_synced_q1;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:273.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:277.16" *)
  output valid_o;
  wire valid_o;
  assign \$2  = valid_o && ready_i;
  assign \$11  = ! valid_o;
  assign \$13  = \$9  && \$11 ;
  assign valid_o = async_ack_o != req_synced_q1;
  assign \$4  = ~ async_ack_o;
  assign \$9  = req_synced != req_synced_q1;
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$13 ) data_o[33:32] <= async_data_i[33:32];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$13 ) data_o[31:0] <= async_data_i[31:0];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$13 ) data_o[40:34] <= async_data_i[40:34];
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:322.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17298 ) async_ack_o <= ack_dst_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17298  = | { clear_i, \$2  };
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:322.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) req_synced_q1 <= 1'h0;
    else req_synced_q1 <= req_synced;
  assign data_dst_d = \$13  ? (* keep = "true" *) (* src = "rtl/common_cells/cdc_2phase_clearable.sv:316.7-316.33|rtl/common_cells/cdc_2phase_clearable.sv:315.5-317.8" *) async_data_i : data_o;
  assign ack_dst_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "rtl/common_cells/cdc_2phase_clearable.sv:305.7-305.24|rtl/common_cells/cdc_2phase_clearable.sv:304.5-308.8" *) 1'h0 : \$4 ;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:294.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_dst_q = data_o;
endmodule

(* src = "rtl/common_cells/cdc_2phase_clearable.sv:269.8" *)
module \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst (clk_i, rst_ni, data_o, clear_i, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$11 ;
  wire \$13 ;
  wire \$2 ;
  wire \$4 ;
  wire \$9 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17303 ;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.8" *)
  wire ack_dst_d;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.19" *)
  wire ack_dst_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:280.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:281.16" *)
  input [33:0] async_data_i;
  wire [33:0] async_data_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:279.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:275.16" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:274.16" *)
  input clk_i;
  wire clk_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:288.5" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" *)
  wire [33:0] data_dst_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:288.17" *)
  wire [33:0] data_dst_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:276.16" *)
  output [33:0] data_o;
  reg [33:0] data_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:278.16" *)
  input ready_i;
  wire ready_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.30" *)
  wire req_synced;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.42" *)
  reg req_synced_q1;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:273.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:277.16" *)
  output valid_o;
  wire valid_o;
  assign \$2  = valid_o && ready_i;
  assign \$11  = ! valid_o;
  assign \$13  = \$9  && \$11 ;
  assign valid_o = async_ack_o != req_synced_q1;
  assign \$4  = ~ async_ack_o;
  assign \$9  = req_synced != req_synced_q1;
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$13 ) data_o[1:0] <= async_data_i[1:0];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$13 ) data_o[33:2] <= async_data_i[33:2];
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:322.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17303 ) async_ack_o <= ack_dst_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17303  = | { clear_i, \$2  };
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:322.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) req_synced_q1 <= 1'h0;
    else req_synced_q1 <= req_synced;
  assign data_dst_d = \$13  ? (* keep = "true" *) (* src = "rtl/common_cells/cdc_2phase_clearable.sv:316.7-316.33|rtl/common_cells/cdc_2phase_clearable.sv:315.5-317.8" *) async_data_i : data_o;
  assign ack_dst_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "rtl/common_cells/cdc_2phase_clearable.sv:305.7-305.24|rtl/common_cells/cdc_2phase_clearable.sv:304.5-308.8" *) 1'h0 : \$4 ;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:294.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_dst_q = data_o;
endmodule

(* src = "rtl/common_cells/cdc_2phase_clearable.sv:199.8" *)
module \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src (clk_i, rst_ni, data_i, clear_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$2 ;
  wire \$4 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17306 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17311 ;
  wire \$auto$rtlil.cc:2957:Not$17310 ;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" *)
  wire [40:0] \$data_src_d$6 ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.32" *)
  wire ack_synced;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:210.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:211.16" *)
  output [40:0] async_data_o;
  reg [40:0] async_data_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:209.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:205.16" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:204.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:206.16" *)
  input [40:0] data_i;
  wire [40:0] data_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:217.5" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40" *)
  wire [40:0] data_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:217.17" *)
  wire [40:0] data_src_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:208.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.21" *)
  wire req_src_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:203.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:207.16" *)
  input valid_i;
  wire valid_i;
  assign \$2  = valid_i && ready_o;
  assign ready_o = async_req_o == ack_synced;
  assign \$4  = ~ async_req_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:245.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17306 ) async_req_o <= req_src_d;
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$opt_dff.cc:219:make_patterns_logic$17311 ) async_data_o[33:32] <= data_i[33:32];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$opt_dff.cc:219:make_patterns_logic$17311 ) async_data_o[31:0] <= data_i[31:0];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$opt_dff.cc:219:make_patterns_logic$17311 ) async_data_o[40:34] <= data_i[40:34];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17306  = | { clear_i, \$2  };
  assign \$auto$rtlil.cc:2957:Not$17310  = ~ clear_i;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17311  = & { \$auto$rtlil.cc:2957:Not$17310 , \$2  };
  assign \$data_src_d$6  = \$2  ? (* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.38-240.8|rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" *) data_i : async_data_o;
  assign req_src_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" *) 1'h0 : \$4 ;
  assign data_src_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" *) async_data_o : \$data_src_d$6 ;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:222.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "rtl/common_cells/cdc_2phase_clearable.sv:199.8" *)
module \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src (clk_i, rst_ni, data_i, clear_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$2 ;
  wire \$4 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17324 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17329 ;
  wire \$auto$rtlil.cc:2957:Not$17328 ;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" *)
  wire [33:0] \$data_src_d$6 ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.32" *)
  wire ack_synced;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:210.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:211.16" *)
  output [33:0] async_data_o;
  reg [33:0] async_data_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:209.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:205.16" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:204.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:206.16" *)
  input [33:0] data_i;
  wire [33:0] data_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:217.5" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" *)
  wire [33:0] data_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:217.17" *)
  wire [33:0] data_src_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:208.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.21" *)
  wire req_src_q;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:203.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:207.16" *)
  input valid_i;
  wire valid_i;
  assign \$2  = valid_i && ready_o;
  assign ready_o = async_req_o == ack_synced;
  assign \$4  = ~ async_req_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:245.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17324 ) async_req_o <= req_src_d;
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$opt_dff.cc:219:make_patterns_logic$17329 ) async_data_o[1:0] <= data_i[1:0];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$opt_dff.cc:219:make_patterns_logic$17329 ) async_data_o[33:2] <= data_i[33:2];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17324  = | { clear_i, \$2  };
  assign \$auto$rtlil.cc:2957:Not$17328  = ~ clear_i;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17329  = & { \$auto$rtlil.cc:2957:Not$17328 , \$2  };
  assign \$data_src_d$6  = \$2  ? (* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.38-240.8|rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" *) data_i : async_data_o;
  assign req_src_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" *) 1'h0 : \$4 ;
  assign data_src_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" *) async_data_o : \$data_src_d$6 ;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_2phase_clearable.sv:222.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "rtl/common_cells/cdc_4phase.sv:205.8" *)
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17337 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17339 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17341 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17343 ;
  wire \$procmux$2274_CMP ;
  wire \$procmux$2285_CMP ;
  wire \$procmux$2299_CMP ;
  wire [1:0] \$procmux$2304_Y ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:221.10" *)
  wire ack_dst_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:221.21" *)
  wire ack_dst_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:216.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:217.16" *)
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:215.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:211.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:212.16" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:214.16" *)
  input ready_i;
  wire ready_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:223.10" *)
  wire req_synced;
  (* src = "rtl/common_cells/cdc_4phase.sv:210.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_4phase.sv:231.11" *)
  wire [1:0] state_d;
  (* src = "rtl/common_cells/cdc_4phase.sv:231.20" *)
  reg [1:0] state_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:213.16" *)
  output valid_o;
  wire valid_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:284.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17343 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17337  = { \$procmux$2285_CMP , ready_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17339  = { \$procmux$2299_CMP , req_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17341  = { \$procmux$2274_CMP , req_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17343  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17337 , \$auto$opt_dff.cc:194:make_patterns_logic$17341 , \$auto$opt_dff.cc:194:make_patterns_logic$17339  };
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:293.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else async_ack_o <= ack_dst_d;
  assign \$procmux$2274_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 2'h2;
  assign \$procmux$2285_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 1'h1;
  function [1:0] \$procmux$2294 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$2294  = b[1:0];
      2'b1?:
        \$procmux$2294  = b[3:2];
      default:
        \$procmux$2294  = a;
    endcase
  endfunction
  assign state_d = \$procmux$2294 (2'h0, { \$procmux$2304_Y , 2'h2 }, { \$procmux$2299_CMP , \$procmux$2285_CMP  });
  assign \$procmux$2299_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) state_q;
  assign \$procmux$2304_Y  = ready_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:255.13-255.41|rtl/common_cells/cdc_4phase.sv:254.11-258.14" *) 2'h2 : 2'h1;
  function [0:0] \$procmux$2329 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$2329  = b[0:0];
      2'b1?:
        \$procmux$2329  = b[1:1];
      default:
        \$procmux$2329  = a;
    endcase
  endfunction
  assign valid_o = \$procmux$2329 (1'h0, { req_synced, 1'h1 }, { \$procmux$2299_CMP , \$procmux$2285_CMP  });
  function [0:0] \$procmux$2335 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$2335  = b[0:0];
      2'b1?:
        \$procmux$2335  = b[1:1];
      default:
        \$procmux$2335  = a;
    endcase
  endfunction
  assign ack_dst_d = \$procmux$2335 (1'h0, { ready_i, req_synced }, { \$procmux$2285_CMP , \$procmux$2274_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_4phase.sv:236.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_o = async_data_i;
endmodule

(* src = "rtl/common_cells/cdc_4phase.sv:205.8" *)
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17346 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17348 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17350 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17352 ;
  wire \$procmux$2125_CMP ;
  wire \$procmux$2136_CMP ;
  wire \$procmux$2150_CMP ;
  wire [1:0] \$procmux$2155_Y ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:221.10" *)
  wire ack_dst_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:221.21" *)
  wire ack_dst_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:216.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:217.16" *)
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:215.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:211.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:212.16" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:214.16" *)
  input ready_i;
  wire ready_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:223.10" *)
  wire req_synced;
  (* src = "rtl/common_cells/cdc_4phase.sv:210.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_4phase.sv:231.11" *)
  wire [1:0] state_d;
  (* src = "rtl/common_cells/cdc_4phase.sv:231.20" *)
  reg [1:0] state_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:213.16" *)
  output valid_o;
  wire valid_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:284.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17352 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17346  = { \$procmux$2136_CMP , ready_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17348  = { \$procmux$2150_CMP , req_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17350  = { \$procmux$2125_CMP , req_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17352  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17350 , \$auto$opt_dff.cc:194:make_patterns_logic$17348 , \$auto$opt_dff.cc:194:make_patterns_logic$17346  };
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:293.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else async_ack_o <= ack_dst_d;
  assign \$procmux$2125_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 2'h2;
  assign \$procmux$2136_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 1'h1;
  function [1:0] \$procmux$2145 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$2145  = b[1:0];
      2'b1?:
        \$procmux$2145  = b[3:2];
      default:
        \$procmux$2145  = a;
    endcase
  endfunction
  assign state_d = \$procmux$2145 (2'h0, { \$procmux$2155_Y , 2'h2 }, { \$procmux$2150_CMP , \$procmux$2136_CMP  });
  assign \$procmux$2150_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) state_q;
  assign \$procmux$2155_Y  = ready_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:255.13-255.41|rtl/common_cells/cdc_4phase.sv:254.11-258.14" *) 2'h2 : 2'h1;
  function [0:0] \$procmux$2180 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$2180  = b[0:0];
      2'b1?:
        \$procmux$2180  = b[1:1];
      default:
        \$procmux$2180  = a;
    endcase
  endfunction
  assign valid_o = \$procmux$2180 (1'h0, { req_synced, 1'h1 }, { \$procmux$2150_CMP , \$procmux$2136_CMP  });
  function [0:0] \$procmux$2186 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$2186  = b[0:0];
      2'b1?:
        \$procmux$2186  = b[1:1];
      default:
        \$procmux$2186  = a;
    endcase
  endfunction
  assign ack_dst_d = \$procmux$2186 (1'h0, { ready_i, req_synced }, { \$procmux$2136_CMP , \$procmux$2125_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_4phase.sv:236.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_o = async_data_i;
endmodule

(* src = "rtl/common_cells/cdc_4phase.sv:205.8" *)
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17355 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17357 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17359 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17361 ;
  wire \$procmux$1976_CMP ;
  wire \$procmux$1987_CMP ;
  wire \$procmux$2001_CMP ;
  wire [1:0] \$procmux$2006_Y ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:221.10" *)
  wire ack_dst_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:221.21" *)
  wire ack_dst_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:216.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:217.16" *)
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:215.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:211.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:212.16" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:214.16" *)
  input ready_i;
  wire ready_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:223.10" *)
  wire req_synced;
  (* src = "rtl/common_cells/cdc_4phase.sv:210.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_4phase.sv:231.11" *)
  wire [1:0] state_d;
  (* src = "rtl/common_cells/cdc_4phase.sv:231.20" *)
  reg [1:0] state_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:213.16" *)
  output valid_o;
  wire valid_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:284.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17361 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17355  = { \$procmux$1987_CMP , ready_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17357  = { \$procmux$2001_CMP , req_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17359  = { \$procmux$1976_CMP , req_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17361  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17355 , \$auto$opt_dff.cc:194:make_patterns_logic$17357 , \$auto$opt_dff.cc:194:make_patterns_logic$17359  };
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:293.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else async_ack_o <= ack_dst_d;
  assign \$procmux$1976_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 2'h2;
  assign \$procmux$1987_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 1'h1;
  function [1:0] \$procmux$1996 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1996  = b[1:0];
      2'b1?:
        \$procmux$1996  = b[3:2];
      default:
        \$procmux$1996  = a;
    endcase
  endfunction
  assign state_d = \$procmux$1996 (2'h0, { \$procmux$2006_Y , 2'h2 }, { \$procmux$2001_CMP , \$procmux$1987_CMP  });
  assign \$procmux$2001_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) state_q;
  assign \$procmux$2006_Y  = ready_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:255.13-255.41|rtl/common_cells/cdc_4phase.sv:254.11-258.14" *) 2'h2 : 2'h1;
  function [0:0] \$procmux$2031 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$2031  = b[0:0];
      2'b1?:
        \$procmux$2031  = b[1:1];
      default:
        \$procmux$2031  = a;
    endcase
  endfunction
  assign valid_o = \$procmux$2031 (1'h0, { req_synced, 1'h1 }, { \$procmux$2001_CMP , \$procmux$1987_CMP  });
  function [0:0] \$procmux$2037 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$2037  = b[0:0];
      2'b1?:
        \$procmux$2037  = b[1:1];
      default:
        \$procmux$2037  = a;
    endcase
  endfunction
  assign ack_dst_d = \$procmux$2037 (1'h0, { ready_i, req_synced }, { \$procmux$1987_CMP , \$procmux$1976_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_4phase.sv:236.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_o = async_data_i;
endmodule

(* src = "rtl/common_cells/cdc_4phase.sv:205.8" *)
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17364 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17366 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17368 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17370 ;
  wire \$procmux$1827_CMP ;
  wire \$procmux$1838_CMP ;
  wire \$procmux$1852_CMP ;
  wire [1:0] \$procmux$1857_Y ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:221.10" *)
  wire ack_dst_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:221.21" *)
  wire ack_dst_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:216.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:217.16" *)
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:215.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:211.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:212.16" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:214.16" *)
  input ready_i;
  wire ready_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:223.10" *)
  wire req_synced;
  (* src = "rtl/common_cells/cdc_4phase.sv:210.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_4phase.sv:231.11" *)
  wire [1:0] state_d;
  (* src = "rtl/common_cells/cdc_4phase.sv:231.20" *)
  reg [1:0] state_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:213.16" *)
  output valid_o;
  wire valid_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:284.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17370 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17364  = { \$procmux$1838_CMP , ready_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17366  = { \$procmux$1852_CMP , req_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17368  = { \$procmux$1827_CMP , req_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17370  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17364 , \$auto$opt_dff.cc:194:make_patterns_logic$17366 , \$auto$opt_dff.cc:194:make_patterns_logic$17368  };
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:293.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else async_ack_o <= ack_dst_d;
  assign \$procmux$1827_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 2'h2;
  assign \$procmux$1838_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 1'h1;
  function [1:0] \$procmux$1847 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1847  = b[1:0];
      2'b1?:
        \$procmux$1847  = b[3:2];
      default:
        \$procmux$1847  = a;
    endcase
  endfunction
  assign state_d = \$procmux$1847 (2'h0, { \$procmux$1857_Y , 2'h2 }, { \$procmux$1852_CMP , \$procmux$1838_CMP  });
  assign \$procmux$1852_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) state_q;
  assign \$procmux$1857_Y  = ready_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:255.13-255.41|rtl/common_cells/cdc_4phase.sv:254.11-258.14" *) 2'h2 : 2'h1;
  function [0:0] \$procmux$1882 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1882  = b[0:0];
      2'b1?:
        \$procmux$1882  = b[1:1];
      default:
        \$procmux$1882  = a;
    endcase
  endfunction
  assign valid_o = \$procmux$1882 (1'h0, { req_synced, 1'h1 }, { \$procmux$1852_CMP , \$procmux$1838_CMP  });
  function [0:0] \$procmux$1888 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1888  = b[0:0];
      2'b1?:
        \$procmux$1888  = b[1:1];
      default:
        \$procmux$1888  = a;
    endcase
  endfunction
  assign ack_dst_d = \$procmux$1888 (1'h0, { ready_i, req_synced }, { \$procmux$1838_CMP , \$procmux$1827_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_4phase.sv:236.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_o = async_data_i;
endmodule

(* src = "rtl/common_cells/cdc_4phase.sv:92.8" *)
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17376 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17378 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17380 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17373 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17382 ;
  (* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" *)
  wire [1:0] \$data_src_d$3 ;
  wire \$procmux$2343_CMP ;
  wire \$procmux$2345_Y ;
  wire \$procmux$2359_CMP ;
  wire \$procmux$2373_CMP ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:114.10" *)
  wire ack_synced;
  (* src = "rtl/common_cells/cdc_4phase.sv:105.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:106.16" *)
  output [1:0] async_data_o;
  reg [1:0] async_data_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:104.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:100.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:101.16" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:112.5" *)
  (* unused_bits = "0 1" *)
  wire [1:0] data_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:112.17" *)
  wire [1:0] data_src_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:103.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:110.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:110.21" *)
  wire req_src_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:99.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_4phase.sv:117.11" *)
  wire [1:0] state_d;
  (* src = "rtl/common_cells/cdc_4phase.sv:117.20" *)
  reg [1:0] state_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:102.16" *)
  input valid_i;
  wire valid_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_data_o <= 2'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17373 ) async_data_o <= data_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:172.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17382 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17376  = { \$procmux$2373_CMP , valid_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17378  = { \$procmux$2359_CMP , ack_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17380  = { \$procmux$2343_CMP , ack_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17373  = & { \$procmux$2373_CMP , valid_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17382  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17376 , \$auto$opt_dff.cc:194:make_patterns_logic$17378 , \$auto$opt_dff.cc:194:make_patterns_logic$17380  };
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h1;
    else async_req_o <= req_src_d;
  assign \$procmux$2343_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 2'h2;
  assign \$procmux$2359_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 1'h1;
  assign \$procmux$2345_Y  = ~ (* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" *) ack_synced;
  function [1:0] \$procmux$2368 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$2368  = b[1:0];
      2'b1?:
        \$procmux$2368  = b[3:2];
      default:
        \$procmux$2368  = a;
    endcase
  endfunction
  assign state_d = \$procmux$2368 (2'h0, 4'h6, { \$procmux$2373_CMP , \$procmux$2359_CMP  });
  assign \$procmux$2373_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) state_q;
  assign \$data_src_d$3  = valid_i ? (* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" *) data_i : async_data_o;
  assign ready_o = \$procmux$2343_CMP  & (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$procmux$2345_Y ;
  assign data_src_d = \$procmux$2373_CMP  ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$data_src_d$3  : async_data_o;
  function [0:0] \$procmux$2415 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$2415  = b[0:0];
      2'b1?:
        \$procmux$2415  = b[1:1];
      default:
        \$procmux$2415  = a;
    endcase
  endfunction
  assign req_src_d = \$procmux$2415 (1'h0, { valid_i, \$procmux$2345_Y  }, { \$procmux$2373_CMP , \$procmux$2359_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_4phase.sv:122.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "rtl/common_cells/cdc_4phase.sv:92.8" *)
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17388 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17390 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17392 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17385 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17394 ;
  (* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" *)
  wire [1:0] \$data_src_d$3 ;
  wire \$procmux$2194_CMP ;
  wire \$procmux$2196_Y ;
  wire \$procmux$2210_CMP ;
  wire \$procmux$2224_CMP ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:114.10" *)
  wire ack_synced;
  (* src = "rtl/common_cells/cdc_4phase.sv:105.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:106.16" *)
  output [1:0] async_data_o;
  reg [1:0] async_data_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:104.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:100.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:101.16" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:112.5" *)
  (* unused_bits = "0 1" *)
  wire [1:0] data_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:112.17" *)
  wire [1:0] data_src_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:103.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:110.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:110.21" *)
  wire req_src_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:99.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_4phase.sv:117.11" *)
  wire [1:0] state_d;
  (* src = "rtl/common_cells/cdc_4phase.sv:117.20" *)
  reg [1:0] state_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:102.16" *)
  input valid_i;
  wire valid_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_data_o <= 2'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17385 ) async_data_o <= data_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:172.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17394 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17388  = { \$procmux$2224_CMP , valid_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17390  = { \$procmux$2210_CMP , ack_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17392  = { \$procmux$2194_CMP , ack_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17385  = & { \$procmux$2224_CMP , valid_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17394  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17388 , \$auto$opt_dff.cc:194:make_patterns_logic$17390 , \$auto$opt_dff.cc:194:make_patterns_logic$17392  };
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h1;
    else async_req_o <= req_src_d;
  assign \$procmux$2194_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 2'h2;
  assign \$procmux$2210_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 1'h1;
  assign \$procmux$2196_Y  = ~ (* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" *) ack_synced;
  function [1:0] \$procmux$2219 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$2219  = b[1:0];
      2'b1?:
        \$procmux$2219  = b[3:2];
      default:
        \$procmux$2219  = a;
    endcase
  endfunction
  assign state_d = \$procmux$2219 (2'h0, 4'h6, { \$procmux$2224_CMP , \$procmux$2210_CMP  });
  assign \$procmux$2224_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) state_q;
  assign \$data_src_d$3  = valid_i ? (* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" *) data_i : async_data_o;
  assign ready_o = \$procmux$2194_CMP  & (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$procmux$2196_Y ;
  assign data_src_d = \$procmux$2224_CMP  ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$data_src_d$3  : async_data_o;
  function [0:0] \$procmux$2266 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$2266  = b[0:0];
      2'b1?:
        \$procmux$2266  = b[1:1];
      default:
        \$procmux$2266  = a;
    endcase
  endfunction
  assign req_src_d = \$procmux$2266 (1'h0, { valid_i, \$procmux$2196_Y  }, { \$procmux$2224_CMP , \$procmux$2210_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_4phase.sv:122.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "rtl/common_cells/cdc_4phase.sv:92.8" *)
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17400 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17402 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17404 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17397 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17406 ;
  (* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" *)
  wire [1:0] \$data_src_d$3 ;
  wire \$procmux$2045_CMP ;
  wire \$procmux$2047_Y ;
  wire \$procmux$2061_CMP ;
  wire \$procmux$2075_CMP ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:114.10" *)
  wire ack_synced;
  (* src = "rtl/common_cells/cdc_4phase.sv:105.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:106.16" *)
  output [1:0] async_data_o;
  reg [1:0] async_data_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:104.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:100.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:101.16" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:112.5" *)
  (* unused_bits = "0 1" *)
  wire [1:0] data_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:112.17" *)
  wire [1:0] data_src_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:103.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:110.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:110.21" *)
  wire req_src_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:99.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_4phase.sv:117.11" *)
  wire [1:0] state_d;
  (* src = "rtl/common_cells/cdc_4phase.sv:117.20" *)
  reg [1:0] state_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:102.16" *)
  input valid_i;
  wire valid_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_data_o <= 2'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17397 ) async_data_o <= data_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:172.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17406 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17400  = { \$procmux$2075_CMP , valid_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17402  = { \$procmux$2061_CMP , ack_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17404  = { \$procmux$2045_CMP , ack_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17397  = & { \$procmux$2075_CMP , valid_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17406  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17400 , \$auto$opt_dff.cc:194:make_patterns_logic$17402 , \$auto$opt_dff.cc:194:make_patterns_logic$17404  };
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h1;
    else async_req_o <= req_src_d;
  assign \$procmux$2045_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 2'h2;
  assign \$procmux$2061_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 1'h1;
  assign \$procmux$2047_Y  = ~ (* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" *) ack_synced;
  function [1:0] \$procmux$2070 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$2070  = b[1:0];
      2'b1?:
        \$procmux$2070  = b[3:2];
      default:
        \$procmux$2070  = a;
    endcase
  endfunction
  assign state_d = \$procmux$2070 (2'h0, 4'h6, { \$procmux$2075_CMP , \$procmux$2061_CMP  });
  assign \$procmux$2075_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) state_q;
  assign \$data_src_d$3  = valid_i ? (* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" *) data_i : async_data_o;
  assign ready_o = \$procmux$2045_CMP  & (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$procmux$2047_Y ;
  assign data_src_d = \$procmux$2075_CMP  ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$data_src_d$3  : async_data_o;
  function [0:0] \$procmux$2117 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$2117  = b[0:0];
      2'b1?:
        \$procmux$2117  = b[1:1];
      default:
        \$procmux$2117  = a;
    endcase
  endfunction
  assign req_src_d = \$procmux$2117 (1'h0, { valid_i, \$procmux$2047_Y  }, { \$procmux$2075_CMP , \$procmux$2061_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_4phase.sv:122.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "rtl/common_cells/cdc_4phase.sv:92.8" *)
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17412 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17414 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17416 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17409 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17418 ;
  (* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" *)
  wire [1:0] \$data_src_d$3 ;
  wire \$procmux$1896_CMP ;
  wire \$procmux$1898_Y ;
  wire \$procmux$1912_CMP ;
  wire \$procmux$1926_CMP ;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:114.10" *)
  wire ack_synced;
  (* src = "rtl/common_cells/cdc_4phase.sv:105.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:106.16" *)
  output [1:0] async_data_o;
  reg [1:0] async_data_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:104.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "rtl/common_cells/cdc_4phase.sv:100.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:101.16" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:112.5" *)
  (* unused_bits = "0 1" *)
  wire [1:0] data_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:112.17" *)
  wire [1:0] data_src_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:103.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:110.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:110.21" *)
  wire req_src_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:99.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/cdc_4phase.sv:117.11" *)
  wire [1:0] state_d;
  (* src = "rtl/common_cells/cdc_4phase.sv:117.20" *)
  reg [1:0] state_q;
  (* src = "rtl/common_cells/cdc_4phase.sv:102.16" *)
  input valid_i;
  wire valid_i;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_data_o <= 2'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17409 ) async_data_o <= data_i;
  (* src = "rtl/common_cells/cdc_4phase.sv:172.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17418 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17412  = { \$procmux$1926_CMP , valid_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17414  = { \$procmux$1912_CMP , ack_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17416  = { \$procmux$1896_CMP , ack_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17409  = & { \$procmux$1926_CMP , valid_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17418  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17412 , \$auto$opt_dff.cc:194:make_patterns_logic$17414 , \$auto$opt_dff.cc:194:make_patterns_logic$17416  };
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h1;
    else async_req_o <= req_src_d;
  assign \$procmux$1896_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 2'h2;
  assign \$procmux$1912_CMP  = state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 1'h1;
  assign \$procmux$1898_Y  = ~ (* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" *) ack_synced;
  function [1:0] \$procmux$1921 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1921  = b[1:0];
      2'b1?:
        \$procmux$1921  = b[3:2];
      default:
        \$procmux$1921  = a;
    endcase
  endfunction
  assign state_d = \$procmux$1921 (2'h0, 4'h6, { \$procmux$1926_CMP , \$procmux$1912_CMP  });
  assign \$procmux$1926_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) state_q;
  assign \$data_src_d$3  = valid_i ? (* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" *) data_i : async_data_o;
  assign ready_o = \$procmux$1896_CMP  & (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$procmux$1898_Y ;
  assign data_src_d = \$procmux$1926_CMP  ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$data_src_d$3  : async_data_o;
  function [0:0] \$procmux$1968 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1968  = b[0:0];
      2'b1?:
        \$procmux$1968  = b[1:1];
      default:
        \$procmux$1968  = a;
    endcase
  endfunction
  assign req_src_d = \$procmux$1968 (1'h0, { valid_i, \$procmux$1898_Y  }, { \$procmux$1926_CMP , \$procmux$1912_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_4phase.sv:122.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "rtl/common_cells/cdc_reset_ctrlr.sv:109.8" *)
module \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr (a_clk_i, a_rst_ni, a_clear_i, a_clear_o, a_clear_ack_i, a_isolate_o, a_isolate_ack_i, b_clk_i, b_rst_ni, b_clear_i, b_clear_o, b_clear_ack_i, b_isolate_o, b_isolate_ack_i);
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:125.15" *)
  input a_clear_ack_i;
  wire a_clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:123.16" *)
  input a_clear_i;
  wire a_clear_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:124.16" *)
  output a_clear_o;
  wire a_clear_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:121.16" *)
  input a_clk_i;
  wire a_clk_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:127.16" *)
  input a_isolate_ack_i;
  wire a_isolate_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:126.16" *)
  output a_isolate_o;
  wire a_isolate_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:122.16" *)
  input a_rst_ni;
  wire a_rst_ni;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:143.31" *)
  wire async_a2b_ack;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:141.21" *)
  wire [1:0] async_a2b_next_phase;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:139.16" *)
  wire async_a2b_req;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:139.31" *)
  wire async_b2a_ack;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:145.21" *)
  wire [1:0] async_b2a_next_phase;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:143.16" *)
  wire async_b2a_req;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:133.16" *)
  input b_clear_ack_i;
  wire b_clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:131.16" *)
  input b_clear_i;
  wire b_clear_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:132.16" *)
  output b_clear_o;
  wire b_clear_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:129.16" *)
  input b_clk_i;
  wire b_clk_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:135.16" *)
  input b_isolate_ack_i;
  wire b_isolate_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:134.16" *)
  output b_isolate_o;
  wire b_isolate_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:130.16" *)
  input b_rst_ni;
  wire b_rst_ni;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:150.5" *)
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a  i_cdc_reset_ctrlr_half_a (
    .async_ack_i(async_b2a_ack),
    .async_ack_o(async_a2b_ack),
    .async_next_phase_i(async_b2a_next_phase),
    .async_next_phase_o(async_a2b_next_phase),
    .async_req_i(async_b2a_req),
    .async_req_o(async_a2b_req),
    .clear_ack_i(a_clear_ack_i),
    .clear_i(a_clear_i),
    .clear_o(a_clear_o),
    .clk_i(a_clk_i),
    .isolate_ack_i(a_isolate_ack_i),
    .isolate_o(a_isolate_o),
    .rst_ni(a_rst_ni)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:169.5" *)
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b  i_cdc_reset_ctrlr_half_b (
    .async_ack_i(async_a2b_ack),
    .async_ack_o(async_b2a_ack),
    .async_next_phase_i(async_a2b_next_phase),
    .async_next_phase_o(async_b2a_next_phase),
    .async_req_i(async_a2b_req),
    .async_req_o(async_b2a_req),
    .clear_ack_i(b_clear_ack_i),
    .clear_i(b_clear_i),
    .clear_o(b_clear_o),
    .clk_i(b_clk_i),
    .isolate_ack_i(b_isolate_ack_i),
    .isolate_o(b_isolate_o),
    .rst_ni(b_rst_ni)
  );
endmodule

(* src = "rtl/common_cells/cdc_reset_ctrlr.sv:109.8" *)
module \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr (a_clk_i, a_rst_ni, a_clear_i, a_clear_o, a_clear_ack_i, a_isolate_o, a_isolate_ack_i, b_clk_i, b_rst_ni, b_clear_i, b_clear_o, b_clear_ack_i, b_isolate_o, b_isolate_ack_i);
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:125.15" *)
  input a_clear_ack_i;
  wire a_clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:123.16" *)
  input a_clear_i;
  wire a_clear_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:124.16" *)
  output a_clear_o;
  wire a_clear_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:121.16" *)
  input a_clk_i;
  wire a_clk_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:127.16" *)
  input a_isolate_ack_i;
  wire a_isolate_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:126.16" *)
  output a_isolate_o;
  wire a_isolate_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:122.16" *)
  input a_rst_ni;
  wire a_rst_ni;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:143.31" *)
  wire async_a2b_ack;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:141.21" *)
  wire [1:0] async_a2b_next_phase;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:139.16" *)
  wire async_a2b_req;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:139.31" *)
  wire async_b2a_ack;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:145.21" *)
  wire [1:0] async_b2a_next_phase;
  (* keep = "true" *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:143.16" *)
  wire async_b2a_req;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:133.16" *)
  input b_clear_ack_i;
  wire b_clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:131.16" *)
  input b_clear_i;
  wire b_clear_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:132.16" *)
  output b_clear_o;
  wire b_clear_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:129.16" *)
  input b_clk_i;
  wire b_clk_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:135.16" *)
  input b_isolate_ack_i;
  wire b_isolate_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:134.16" *)
  output b_isolate_o;
  wire b_isolate_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:130.16" *)
  input b_rst_ni;
  wire b_rst_ni;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:150.5" *)
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a  i_cdc_reset_ctrlr_half_a (
    .async_ack_i(async_b2a_ack),
    .async_ack_o(async_a2b_ack),
    .async_next_phase_i(async_b2a_next_phase),
    .async_next_phase_o(async_a2b_next_phase),
    .async_req_i(async_b2a_req),
    .async_req_o(async_a2b_req),
    .clear_ack_i(a_clear_ack_i),
    .clear_i(a_clear_i),
    .clear_o(a_clear_o),
    .clk_i(a_clk_i),
    .isolate_ack_i(a_isolate_ack_i),
    .isolate_o(a_isolate_o),
    .rst_ni(a_rst_ni)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:169.5" *)
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b  i_cdc_reset_ctrlr_half_b (
    .async_ack_i(async_a2b_ack),
    .async_ack_o(async_b2a_ack),
    .async_next_phase_i(async_a2b_next_phase),
    .async_next_phase_o(async_b2a_next_phase),
    .async_req_i(async_a2b_req),
    .async_req_o(async_b2a_req),
    .clear_ack_i(b_clear_ack_i),
    .clear_i(b_clear_i),
    .clear_o(b_clear_o),
    .clk_i(b_clk_i),
    .isolate_ack_i(b_isolate_ack_i),
    .isolate_o(b_isolate_o),
    .rst_ni(b_rst_ni)
  );
endmodule

(* src = "rtl/common_cells/cdc_reset_ctrlr.sv:187.8" *)
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$10 ;
  wire \$3 ;
  wire \$31 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17422 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17424 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17426 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17428 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17430 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17432 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17434 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17436 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17438 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17440 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16706 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16708 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16714 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16718 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16720 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16724 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18413 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18415 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *)
  wire [3:0] \$initiator_state_d$12 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *)
  wire [3:0] \$initiator_state_d$13 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *)
  wire [3:0] \$initiator_state_d$6 ;
  wire \$procmux$3301_Y ;
  wire \$procmux$3302_CMP ;
  wire \$procmux$3303_CMP ;
  wire \$procmux$3304_CMP ;
  wire \$procmux$3305_CMP ;
  wire \$procmux$3336_Y ;
  wire \$procmux$3337_CMP ;
  wire \$procmux$3338_CMP ;
  wire \$procmux$3339_CMP ;
  wire \$procmux$3340_CMP ;
  wire \$procmux$3352_Y ;
  wire \$procmux$3365_CMP ;
  wire \$procmux$3371_CMP ;
  wire \$procmux$3378_CMP ;
  wire \$procmux$3386_CMP ;
  wire \$procmux$3401_CMP ;
  wire \$procmux$3436_CMP ;
  wire \$procmux$3447_CMP ;
  wire \$procmux$3465_CMP ;
  wire \$procmux$3516_CMP ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:209.30" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:212.30" *)
  output async_ack_o;
  wire async_ack_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:210.30" *)
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:207.30" *)
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:211.30" *)
  input async_req_i;
  wire async_req_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:208.30" *)
  output async_req_o;
  wire async_req_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:205.30" *)
  input clear_ack_i;
  wire clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:201.30" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:204.30" *)
  output clear_o;
  wire clear_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:199.30" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:263.30" *)
  wire initiator_clear_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:259.30" *)
  wire [1:0] initiator_clear_seq_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:262.30" *)
  wire initiator_isolate_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:261.30" *)
  wire initiator_phase_transition_ack;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:260.30" *)
  wire initiator_phase_transition_req;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.21" *)
  wire [3:0] initiator_state_d;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.40" *)
  reg [3:0] initiator_state_q;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:203.30" *)
  input isolate_ack_i;
  wire isolate_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:202.30" *)
  output isolate_o;
  wire isolate_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:419.9" *)
  wire receiver_clear_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:418.9" *)
  wire receiver_isolate_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:415.21" *)
  wire [1:0] receiver_next_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.29" *)
  wire receiver_phase_ack;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:414.21" *)
  reg [1:0] receiver_phase_q;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.9" *)
  wire receiver_phase_req;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:200.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$3  = initiator_phase_transition_ack && isolate_ack_i;
  assign \$31  = receiver_phase_req && receiver_phase_ack;
  assign clear_o = initiator_clear_out || receiver_clear_out;
  assign isolate_o = initiator_isolate_out || receiver_isolate_out;
  assign \$10  = initiator_phase_transition_ack && clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:438.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) receiver_phase_q <= 2'h0;
    else if (\$31 ) receiver_phase_q <= receiver_next_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:371.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) initiator_state_q <= 4'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17440 ) initiator_state_q <= initiator_state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17422  = { \$procmux$3465_CMP , initiator_phase_transition_ack, isolate_ack_i, \$3  } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17424  = { \$procmux$3401_CMP , initiator_phase_transition_ack, clear_ack_i, \$10  } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17426  = { \$procmux$3516_CMP , clear_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17428  = { \$procmux$3447_CMP , isolate_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17430  = { \$procmux$3386_CMP , clear_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17432  = { \$procmux$3365_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17434  = { \$procmux$3371_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17436  = { \$procmux$3378_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17438  = { \$procmux$3436_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17440  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17422 , \$auto$opt_dff.cc:194:make_patterns_logic$17424 , \$auto$opt_dff.cc:194:make_patterns_logic$17426 , \$auto$opt_dff.cc:194:make_patterns_logic$17428 , \$auto$opt_dff.cc:194:make_patterns_logic$17434 , \$auto$opt_dff.cc:194:make_patterns_logic$17436 , \$auto$opt_dff.cc:194:make_patterns_logic$17438 , \$auto$opt_dff.cc:194:make_patterns_logic$17432 , \$auto$opt_dff.cc:194:make_patterns_logic$17430  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16706  = | { \$procmux$3304_CMP , \$procmux$3303_CMP , \$procmux$3302_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16708  = | { \$procmux$3340_CMP , \$procmux$3339_CMP , \$procmux$3337_CMP  };
  assign initiator_isolate_out = | { \$procmux$3465_CMP , \$procmux$3447_CMP , \$procmux$3436_CMP , \$procmux$3401_CMP , \$procmux$3386_CMP , \$procmux$3378_CMP , \$procmux$3371_CMP , \$procmux$3365_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16714  = | { \$procmux$3339_CMP , \$procmux$3338_CMP , \$procmux$3337_CMP  };
  assign initiator_phase_transition_req = | { \$procmux$3465_CMP , \$procmux$3436_CMP , \$procmux$3401_CMP , \$procmux$3378_CMP , \$procmux$3371_CMP , \$procmux$3365_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16718  = | { \$procmux$3340_CMP , \$procmux$3337_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16720  = | { \$procmux$3305_CMP , \$procmux$3304_CMP , \$procmux$3302_CMP  };
  assign initiator_clear_out = | { \$procmux$3401_CMP , \$procmux$3386_CMP , \$procmux$3378_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16724  = | { \$procmux$3465_CMP , \$procmux$3447_CMP , \$procmux$3436_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$18413  = | { \$procmux$3386_CMP , \$procmux$3378_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$18415  = | { \$procmux$3447_CMP , \$procmux$3436_CMP  };
  assign \$procmux$3301_Y  = ~ (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) \$auto$opt_reduce.cc:137:opt_pmux$16720 ;
  assign \$procmux$3302_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h3;
  assign \$procmux$3303_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h2;
  assign \$procmux$3304_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 1'h1;
  assign \$procmux$3305_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) receiver_phase_q;
  assign receiver_clear_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$procmux$3336_Y  : \$procmux$3301_Y ;
  assign receiver_isolate_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$opt_reduce.cc:137:opt_pmux$16714  : \$auto$opt_reduce.cc:137:opt_pmux$16706 ;
  assign receiver_phase_ack = receiver_phase_req & (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$procmux$3352_Y ;
  assign \$procmux$3336_Y  = ~ (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) \$auto$opt_reduce.cc:137:opt_pmux$16708 ;
  assign \$procmux$3337_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h3;
  assign \$procmux$3338_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h2;
  assign \$procmux$3339_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 1'h1;
  assign \$procmux$3340_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) receiver_next_phase;
  function [0:0] \$procmux$3352 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$3352  = b[0:0];
      2'b1?:
        \$procmux$3352  = b[1:1];
      default:
        \$procmux$3352  = a;
    endcase
  endfunction
  assign \$procmux$3352_Y  = \$procmux$3352 (isolate_ack_i, { clear_ack_i, 1'h1 }, { \$procmux$3338_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16718  });
  assign \$procmux$3365_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 4'h8;
  assign \$procmux$3371_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h7;
  assign \$procmux$3378_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h5;
  assign \$procmux$3386_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h6;
  assign \$procmux$3401_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h4;
  assign \$initiator_state_d$12 [1:0] = initiator_phase_transition_ack ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *) 2'h2 : 2'h1;
  assign \$initiator_state_d$13 [1:0] = \$10  ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *) 2'h3 : \$initiator_state_d$12 [1:0];
  assign \$procmux$3436_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h2;
  assign \$procmux$3447_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h3;
  assign \$procmux$3465_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 1'h1;
  assign \$initiator_state_d$6 [2:0] = \$3  ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *) 3'h4 : { 2'h1, initiator_phase_transition_ack };
  function [3:0] \$procmux$3499 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$3499  = b[3:0];
      6'b????1?:
        \$procmux$3499  = b[7:4];
      6'b???1??:
        \$procmux$3499  = b[11:8];
      6'b??1???:
        \$procmux$3499  = b[15:12];
      6'b?1????:
        \$procmux$3499  = b[19:16];
      6'b1?????:
        \$procmux$3499  = b[23:20];
      default:
        \$procmux$3499  = a;
    endcase
  endfunction
  assign initiator_state_d = \$procmux$3499 (4'h1, { 1'h0, \$initiator_state_d$6 [2:0], 6'h11, \$initiator_state_d$13 [1:0], 12'h780 }, { \$procmux$3465_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18415 , \$procmux$3401_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18413 , \$procmux$3371_CMP , \$procmux$3365_CMP  });
  assign \$procmux$3516_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) initiator_state_q;
  function [1:0] \$procmux$3581 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$3581  = b[1:0];
      3'b?1?:
        \$procmux$3581  = b[3:2];
      3'b1??:
        \$procmux$3581  = b[5:4];
      default:
        \$procmux$3581  = a;
    endcase
  endfunction
  assign initiator_clear_seq_phase = \$procmux$3581 (2'h0, 6'h1b, { \$auto$opt_reduce.cc:137:opt_pmux$16724 , initiator_clear_out, \$procmux$3371_CMP  });
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:427.5" *)
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:398.5" *)
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$initiator_state_d$12 [3:2] = 2'h1;
  assign \$initiator_state_d$13 [3:2] = 2'h1;
  assign \$initiator_state_d$6 [3] = 1'h0;
endmodule

(* src = "rtl/common_cells/cdc_reset_ctrlr.sv:187.8" *)
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$10 ;
  wire \$3 ;
  wire \$31 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17444 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17446 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17448 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17450 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17452 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17454 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17456 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17458 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17460 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17462 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16726 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16728 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16734 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16738 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16740 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16744 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18417 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18419 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *)
  wire [3:0] \$initiator_state_d$12 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *)
  wire [3:0] \$initiator_state_d$13 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *)
  wire [3:0] \$initiator_state_d$6 ;
  wire \$procmux$3007_Y ;
  wire \$procmux$3008_CMP ;
  wire \$procmux$3009_CMP ;
  wire \$procmux$3010_CMP ;
  wire \$procmux$3011_CMP ;
  wire \$procmux$3042_Y ;
  wire \$procmux$3043_CMP ;
  wire \$procmux$3044_CMP ;
  wire \$procmux$3045_CMP ;
  wire \$procmux$3046_CMP ;
  wire \$procmux$3058_Y ;
  wire \$procmux$3071_CMP ;
  wire \$procmux$3077_CMP ;
  wire \$procmux$3084_CMP ;
  wire \$procmux$3092_CMP ;
  wire \$procmux$3107_CMP ;
  wire \$procmux$3142_CMP ;
  wire \$procmux$3153_CMP ;
  wire \$procmux$3171_CMP ;
  wire \$procmux$3222_CMP ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:209.30" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:212.30" *)
  output async_ack_o;
  wire async_ack_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:210.30" *)
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:207.30" *)
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:211.30" *)
  input async_req_i;
  wire async_req_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:208.30" *)
  output async_req_o;
  wire async_req_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:205.30" *)
  input clear_ack_i;
  wire clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:201.30" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:204.30" *)
  output clear_o;
  wire clear_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:199.30" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:263.30" *)
  wire initiator_clear_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:259.30" *)
  wire [1:0] initiator_clear_seq_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:262.30" *)
  wire initiator_isolate_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:261.30" *)
  wire initiator_phase_transition_ack;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:260.30" *)
  wire initiator_phase_transition_req;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.21" *)
  wire [3:0] initiator_state_d;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.40" *)
  reg [3:0] initiator_state_q;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:203.30" *)
  input isolate_ack_i;
  wire isolate_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:202.30" *)
  output isolate_o;
  wire isolate_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:419.9" *)
  wire receiver_clear_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:418.9" *)
  wire receiver_isolate_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:415.21" *)
  wire [1:0] receiver_next_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.29" *)
  wire receiver_phase_ack;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:414.21" *)
  reg [1:0] receiver_phase_q;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.9" *)
  wire receiver_phase_req;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:200.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$3  = initiator_phase_transition_ack && isolate_ack_i;
  assign \$31  = receiver_phase_req && receiver_phase_ack;
  assign clear_o = initiator_clear_out || receiver_clear_out;
  assign isolate_o = initiator_isolate_out || receiver_isolate_out;
  assign \$10  = initiator_phase_transition_ack && clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:438.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) receiver_phase_q <= 2'h0;
    else if (\$31 ) receiver_phase_q <= receiver_next_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:371.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) initiator_state_q <= 4'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17462 ) initiator_state_q <= initiator_state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17444  = { \$procmux$3171_CMP , initiator_phase_transition_ack, isolate_ack_i, \$3  } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17446  = { \$procmux$3107_CMP , initiator_phase_transition_ack, clear_ack_i, \$10  } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17448  = { \$procmux$3222_CMP , clear_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17450  = { \$procmux$3153_CMP , isolate_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17452  = { \$procmux$3092_CMP , clear_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17454  = { \$procmux$3071_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17456  = { \$procmux$3077_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17458  = { \$procmux$3084_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17460  = { \$procmux$3142_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17462  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17444 , \$auto$opt_dff.cc:194:make_patterns_logic$17446 , \$auto$opt_dff.cc:194:make_patterns_logic$17448 , \$auto$opt_dff.cc:194:make_patterns_logic$17450 , \$auto$opt_dff.cc:194:make_patterns_logic$17452 , \$auto$opt_dff.cc:194:make_patterns_logic$17454 , \$auto$opt_dff.cc:194:make_patterns_logic$17456 , \$auto$opt_dff.cc:194:make_patterns_logic$17458 , \$auto$opt_dff.cc:194:make_patterns_logic$17460  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16726  = | { \$procmux$3010_CMP , \$procmux$3009_CMP , \$procmux$3008_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16728  = | { \$procmux$3046_CMP , \$procmux$3045_CMP , \$procmux$3043_CMP  };
  assign initiator_isolate_out = | { \$procmux$3171_CMP , \$procmux$3153_CMP , \$procmux$3142_CMP , \$procmux$3107_CMP , \$procmux$3092_CMP , \$procmux$3084_CMP , \$procmux$3077_CMP , \$procmux$3071_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16734  = | { \$procmux$3045_CMP , \$procmux$3044_CMP , \$procmux$3043_CMP  };
  assign initiator_phase_transition_req = | { \$procmux$3171_CMP , \$procmux$3142_CMP , \$procmux$3107_CMP , \$procmux$3084_CMP , \$procmux$3077_CMP , \$procmux$3071_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16738  = | { \$procmux$3046_CMP , \$procmux$3043_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16740  = | { \$procmux$3011_CMP , \$procmux$3010_CMP , \$procmux$3008_CMP  };
  assign initiator_clear_out = | { \$procmux$3107_CMP , \$procmux$3092_CMP , \$procmux$3084_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16744  = | { \$procmux$3171_CMP , \$procmux$3153_CMP , \$procmux$3142_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$18417  = | { \$procmux$3092_CMP , \$procmux$3084_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$18419  = | { \$procmux$3153_CMP , \$procmux$3142_CMP  };
  assign \$procmux$3007_Y  = ~ (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) \$auto$opt_reduce.cc:137:opt_pmux$16740 ;
  assign \$procmux$3008_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h3;
  assign \$procmux$3009_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h2;
  assign \$procmux$3010_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 1'h1;
  assign \$procmux$3011_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) receiver_phase_q;
  assign receiver_clear_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$procmux$3042_Y  : \$procmux$3007_Y ;
  assign receiver_isolate_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$opt_reduce.cc:137:opt_pmux$16734  : \$auto$opt_reduce.cc:137:opt_pmux$16726 ;
  assign receiver_phase_ack = receiver_phase_req & (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$procmux$3058_Y ;
  assign \$procmux$3042_Y  = ~ (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) \$auto$opt_reduce.cc:137:opt_pmux$16728 ;
  assign \$procmux$3043_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h3;
  assign \$procmux$3044_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h2;
  assign \$procmux$3045_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 1'h1;
  assign \$procmux$3046_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) receiver_next_phase;
  function [0:0] \$procmux$3058 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$3058  = b[0:0];
      2'b1?:
        \$procmux$3058  = b[1:1];
      default:
        \$procmux$3058  = a;
    endcase
  endfunction
  assign \$procmux$3058_Y  = \$procmux$3058 (isolate_ack_i, { clear_ack_i, 1'h1 }, { \$procmux$3044_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16738  });
  assign \$procmux$3071_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 4'h8;
  assign \$procmux$3077_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h7;
  assign \$procmux$3084_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h5;
  assign \$procmux$3092_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h6;
  assign \$procmux$3107_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h4;
  assign \$initiator_state_d$12 [1:0] = initiator_phase_transition_ack ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *) 2'h2 : 2'h1;
  assign \$initiator_state_d$13 [1:0] = \$10  ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *) 2'h3 : \$initiator_state_d$12 [1:0];
  assign \$procmux$3142_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h2;
  assign \$procmux$3153_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h3;
  assign \$procmux$3171_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 1'h1;
  assign \$initiator_state_d$6 [2:0] = \$3  ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *) 3'h4 : { 2'h1, initiator_phase_transition_ack };
  function [3:0] \$procmux$3205 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$3205  = b[3:0];
      6'b????1?:
        \$procmux$3205  = b[7:4];
      6'b???1??:
        \$procmux$3205  = b[11:8];
      6'b??1???:
        \$procmux$3205  = b[15:12];
      6'b?1????:
        \$procmux$3205  = b[19:16];
      6'b1?????:
        \$procmux$3205  = b[23:20];
      default:
        \$procmux$3205  = a;
    endcase
  endfunction
  assign initiator_state_d = \$procmux$3205 (4'h1, { 1'h0, \$initiator_state_d$6 [2:0], 6'h11, \$initiator_state_d$13 [1:0], 12'h780 }, { \$procmux$3171_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18419 , \$procmux$3107_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18417 , \$procmux$3077_CMP , \$procmux$3071_CMP  });
  assign \$procmux$3222_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) initiator_state_q;
  function [1:0] \$procmux$3287 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$3287  = b[1:0];
      3'b?1?:
        \$procmux$3287  = b[3:2];
      3'b1??:
        \$procmux$3287  = b[5:4];
      default:
        \$procmux$3287  = a;
    endcase
  endfunction
  assign initiator_clear_seq_phase = \$procmux$3287 (2'h0, 6'h1b, { \$auto$opt_reduce.cc:137:opt_pmux$16744 , initiator_clear_out, \$procmux$3077_CMP  });
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:427.5" *)
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:398.5" *)
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$initiator_state_d$12 [3:2] = 2'h1;
  assign \$initiator_state_d$13 [3:2] = 2'h1;
  assign \$initiator_state_d$6 [3] = 1'h0;
endmodule

(* src = "rtl/common_cells/cdc_reset_ctrlr.sv:187.8" *)
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$10 ;
  wire \$3 ;
  wire \$31 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17466 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17468 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17470 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17472 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17474 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17476 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17478 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17480 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17482 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17484 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16746 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16748 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16754 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16758 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16760 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16764 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18421 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18423 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *)
  wire [3:0] \$initiator_state_d$12 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *)
  wire [3:0] \$initiator_state_d$13 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *)
  wire [3:0] \$initiator_state_d$6 ;
  wire \$procmux$2713_Y ;
  wire \$procmux$2714_CMP ;
  wire \$procmux$2715_CMP ;
  wire \$procmux$2716_CMP ;
  wire \$procmux$2717_CMP ;
  wire \$procmux$2748_Y ;
  wire \$procmux$2749_CMP ;
  wire \$procmux$2750_CMP ;
  wire \$procmux$2751_CMP ;
  wire \$procmux$2752_CMP ;
  wire \$procmux$2764_Y ;
  wire \$procmux$2777_CMP ;
  wire \$procmux$2783_CMP ;
  wire \$procmux$2790_CMP ;
  wire \$procmux$2798_CMP ;
  wire \$procmux$2813_CMP ;
  wire \$procmux$2848_CMP ;
  wire \$procmux$2859_CMP ;
  wire \$procmux$2877_CMP ;
  wire \$procmux$2928_CMP ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:209.30" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:212.30" *)
  output async_ack_o;
  wire async_ack_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:210.30" *)
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:207.30" *)
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:211.30" *)
  input async_req_i;
  wire async_req_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:208.30" *)
  output async_req_o;
  wire async_req_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:205.30" *)
  input clear_ack_i;
  wire clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:201.30" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:204.30" *)
  output clear_o;
  wire clear_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:199.30" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:263.30" *)
  wire initiator_clear_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:259.30" *)
  wire [1:0] initiator_clear_seq_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:262.30" *)
  wire initiator_isolate_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:261.30" *)
  wire initiator_phase_transition_ack;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:260.30" *)
  wire initiator_phase_transition_req;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.21" *)
  wire [3:0] initiator_state_d;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.40" *)
  reg [3:0] initiator_state_q;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:203.30" *)
  input isolate_ack_i;
  wire isolate_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:202.30" *)
  output isolate_o;
  wire isolate_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:419.9" *)
  wire receiver_clear_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:418.9" *)
  wire receiver_isolate_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:415.21" *)
  wire [1:0] receiver_next_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.29" *)
  wire receiver_phase_ack;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:414.21" *)
  reg [1:0] receiver_phase_q;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.9" *)
  wire receiver_phase_req;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:200.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$3  = initiator_phase_transition_ack && isolate_ack_i;
  assign \$31  = receiver_phase_req && receiver_phase_ack;
  assign clear_o = initiator_clear_out || receiver_clear_out;
  assign isolate_o = initiator_isolate_out || receiver_isolate_out;
  assign \$10  = initiator_phase_transition_ack && clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:438.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) receiver_phase_q <= 2'h0;
    else if (\$31 ) receiver_phase_q <= receiver_next_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:371.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) initiator_state_q <= 4'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17484 ) initiator_state_q <= initiator_state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17466  = { \$procmux$2877_CMP , initiator_phase_transition_ack, isolate_ack_i, \$3  } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17468  = { \$procmux$2813_CMP , initiator_phase_transition_ack, clear_ack_i, \$10  } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17470  = { \$procmux$2928_CMP , clear_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17472  = { \$procmux$2859_CMP , isolate_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17474  = { \$procmux$2798_CMP , clear_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17476  = { \$procmux$2777_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17478  = { \$procmux$2783_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17480  = { \$procmux$2790_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17482  = { \$procmux$2848_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17484  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17466 , \$auto$opt_dff.cc:194:make_patterns_logic$17468 , \$auto$opt_dff.cc:194:make_patterns_logic$17470 , \$auto$opt_dff.cc:194:make_patterns_logic$17472 , \$auto$opt_dff.cc:194:make_patterns_logic$17474 , \$auto$opt_dff.cc:194:make_patterns_logic$17476 , \$auto$opt_dff.cc:194:make_patterns_logic$17478 , \$auto$opt_dff.cc:194:make_patterns_logic$17480 , \$auto$opt_dff.cc:194:make_patterns_logic$17482  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16746  = | { \$procmux$2716_CMP , \$procmux$2715_CMP , \$procmux$2714_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16748  = | { \$procmux$2752_CMP , \$procmux$2751_CMP , \$procmux$2749_CMP  };
  assign initiator_isolate_out = | { \$procmux$2877_CMP , \$procmux$2859_CMP , \$procmux$2848_CMP , \$procmux$2813_CMP , \$procmux$2798_CMP , \$procmux$2790_CMP , \$procmux$2783_CMP , \$procmux$2777_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16754  = | { \$procmux$2751_CMP , \$procmux$2750_CMP , \$procmux$2749_CMP  };
  assign initiator_phase_transition_req = | { \$procmux$2877_CMP , \$procmux$2848_CMP , \$procmux$2813_CMP , \$procmux$2790_CMP , \$procmux$2783_CMP , \$procmux$2777_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16758  = | { \$procmux$2752_CMP , \$procmux$2749_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16760  = | { \$procmux$2717_CMP , \$procmux$2716_CMP , \$procmux$2714_CMP  };
  assign initiator_clear_out = | { \$procmux$2813_CMP , \$procmux$2798_CMP , \$procmux$2790_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16764  = | { \$procmux$2877_CMP , \$procmux$2859_CMP , \$procmux$2848_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$18421  = | { \$procmux$2798_CMP , \$procmux$2790_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$18423  = | { \$procmux$2859_CMP , \$procmux$2848_CMP  };
  assign \$procmux$2713_Y  = ~ (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) \$auto$opt_reduce.cc:137:opt_pmux$16760 ;
  assign \$procmux$2714_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h3;
  assign \$procmux$2715_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h2;
  assign \$procmux$2716_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 1'h1;
  assign \$procmux$2717_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) receiver_phase_q;
  assign receiver_clear_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$procmux$2748_Y  : \$procmux$2713_Y ;
  assign receiver_isolate_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$opt_reduce.cc:137:opt_pmux$16754  : \$auto$opt_reduce.cc:137:opt_pmux$16746 ;
  assign receiver_phase_ack = receiver_phase_req & (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$procmux$2764_Y ;
  assign \$procmux$2748_Y  = ~ (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) \$auto$opt_reduce.cc:137:opt_pmux$16748 ;
  assign \$procmux$2749_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h3;
  assign \$procmux$2750_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h2;
  assign \$procmux$2751_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 1'h1;
  assign \$procmux$2752_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) receiver_next_phase;
  function [0:0] \$procmux$2764 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$2764  = b[0:0];
      2'b1?:
        \$procmux$2764  = b[1:1];
      default:
        \$procmux$2764  = a;
    endcase
  endfunction
  assign \$procmux$2764_Y  = \$procmux$2764 (isolate_ack_i, { clear_ack_i, 1'h1 }, { \$procmux$2750_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16758  });
  assign \$procmux$2777_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 4'h8;
  assign \$procmux$2783_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h7;
  assign \$procmux$2790_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h5;
  assign \$procmux$2798_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h6;
  assign \$procmux$2813_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h4;
  assign \$initiator_state_d$12 [1:0] = initiator_phase_transition_ack ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *) 2'h2 : 2'h1;
  assign \$initiator_state_d$13 [1:0] = \$10  ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *) 2'h3 : \$initiator_state_d$12 [1:0];
  assign \$procmux$2848_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h2;
  assign \$procmux$2859_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h3;
  assign \$procmux$2877_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 1'h1;
  assign \$initiator_state_d$6 [2:0] = \$3  ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *) 3'h4 : { 2'h1, initiator_phase_transition_ack };
  function [3:0] \$procmux$2911 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$2911  = b[3:0];
      6'b????1?:
        \$procmux$2911  = b[7:4];
      6'b???1??:
        \$procmux$2911  = b[11:8];
      6'b??1???:
        \$procmux$2911  = b[15:12];
      6'b?1????:
        \$procmux$2911  = b[19:16];
      6'b1?????:
        \$procmux$2911  = b[23:20];
      default:
        \$procmux$2911  = a;
    endcase
  endfunction
  assign initiator_state_d = \$procmux$2911 (4'h1, { 1'h0, \$initiator_state_d$6 [2:0], 6'h11, \$initiator_state_d$13 [1:0], 12'h780 }, { \$procmux$2877_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18423 , \$procmux$2813_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18421 , \$procmux$2783_CMP , \$procmux$2777_CMP  });
  assign \$procmux$2928_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) initiator_state_q;
  function [1:0] \$procmux$2993 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$2993  = b[1:0];
      3'b?1?:
        \$procmux$2993  = b[3:2];
      3'b1??:
        \$procmux$2993  = b[5:4];
      default:
        \$procmux$2993  = a;
    endcase
  endfunction
  assign initiator_clear_seq_phase = \$procmux$2993 (2'h0, 6'h1b, { \$auto$opt_reduce.cc:137:opt_pmux$16764 , initiator_clear_out, \$procmux$2783_CMP  });
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:427.5" *)
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:398.5" *)
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$initiator_state_d$12 [3:2] = 2'h1;
  assign \$initiator_state_d$13 [3:2] = 2'h1;
  assign \$initiator_state_d$6 [3] = 1'h0;
endmodule

(* src = "rtl/common_cells/cdc_reset_ctrlr.sv:187.8" *)
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$10 ;
  wire \$3 ;
  wire \$31 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17488 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17490 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17492 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17494 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17496 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17498 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17500 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17502 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17504 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17506 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16766 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16768 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16774 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16778 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16780 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16784 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18425 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18427 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *)
  wire [3:0] \$initiator_state_d$12 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *)
  wire [3:0] \$initiator_state_d$13 ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *)
  wire [3:0] \$initiator_state_d$6 ;
  wire \$procmux$2419_Y ;
  wire \$procmux$2420_CMP ;
  wire \$procmux$2421_CMP ;
  wire \$procmux$2422_CMP ;
  wire \$procmux$2423_CMP ;
  wire \$procmux$2454_Y ;
  wire \$procmux$2455_CMP ;
  wire \$procmux$2456_CMP ;
  wire \$procmux$2457_CMP ;
  wire \$procmux$2458_CMP ;
  wire \$procmux$2470_Y ;
  wire \$procmux$2483_CMP ;
  wire \$procmux$2489_CMP ;
  wire \$procmux$2496_CMP ;
  wire \$procmux$2504_CMP ;
  wire \$procmux$2519_CMP ;
  wire \$procmux$2554_CMP ;
  wire \$procmux$2565_CMP ;
  wire \$procmux$2583_CMP ;
  wire \$procmux$2634_CMP ;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:209.30" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:212.30" *)
  output async_ack_o;
  wire async_ack_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:210.30" *)
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:207.30" *)
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:211.30" *)
  input async_req_i;
  wire async_req_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:208.30" *)
  output async_req_o;
  wire async_req_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:205.30" *)
  input clear_ack_i;
  wire clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:201.30" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:204.30" *)
  output clear_o;
  wire clear_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:199.30" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:263.30" *)
  wire initiator_clear_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:259.30" *)
  wire [1:0] initiator_clear_seq_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:262.30" *)
  wire initiator_isolate_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:261.30" *)
  wire initiator_phase_transition_ack;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:260.30" *)
  wire initiator_phase_transition_req;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.21" *)
  wire [3:0] initiator_state_d;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.40" *)
  reg [3:0] initiator_state_q;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:203.30" *)
  input isolate_ack_i;
  wire isolate_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:202.30" *)
  output isolate_o;
  wire isolate_o;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:419.9" *)
  wire receiver_clear_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:418.9" *)
  wire receiver_isolate_out;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:415.21" *)
  wire [1:0] receiver_next_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.29" *)
  wire receiver_phase_ack;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:414.21" *)
  reg [1:0] receiver_phase_q;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.9" *)
  wire receiver_phase_req;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:200.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$3  = initiator_phase_transition_ack && isolate_ack_i;
  assign \$31  = receiver_phase_req && receiver_phase_ack;
  assign clear_o = initiator_clear_out || receiver_clear_out;
  assign isolate_o = initiator_isolate_out || receiver_isolate_out;
  assign \$10  = initiator_phase_transition_ack && clear_ack_i;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:438.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) receiver_phase_q <= 2'h0;
    else if (\$31 ) receiver_phase_q <= receiver_next_phase;
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:371.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) initiator_state_q <= 4'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17506 ) initiator_state_q <= initiator_state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17488  = { \$procmux$2583_CMP , initiator_phase_transition_ack, isolate_ack_i, \$3  } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17490  = { \$procmux$2519_CMP , initiator_phase_transition_ack, clear_ack_i, \$10  } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17492  = { \$procmux$2634_CMP , clear_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17494  = { \$procmux$2565_CMP , isolate_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17496  = { \$procmux$2504_CMP , clear_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17498  = { \$procmux$2483_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17500  = { \$procmux$2489_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17502  = { \$procmux$2496_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17504  = { \$procmux$2554_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17506  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17492 , \$auto$opt_dff.cc:194:make_patterns_logic$17488 , \$auto$opt_dff.cc:194:make_patterns_logic$17490 , \$auto$opt_dff.cc:194:make_patterns_logic$17494 , \$auto$opt_dff.cc:194:make_patterns_logic$17496 , \$auto$opt_dff.cc:194:make_patterns_logic$17498 , \$auto$opt_dff.cc:194:make_patterns_logic$17500 , \$auto$opt_dff.cc:194:make_patterns_logic$17502 , \$auto$opt_dff.cc:194:make_patterns_logic$17504  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16766  = | { \$procmux$2422_CMP , \$procmux$2421_CMP , \$procmux$2420_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16768  = | { \$procmux$2458_CMP , \$procmux$2457_CMP , \$procmux$2455_CMP  };
  assign initiator_isolate_out = | { \$procmux$2583_CMP , \$procmux$2565_CMP , \$procmux$2554_CMP , \$procmux$2519_CMP , \$procmux$2504_CMP , \$procmux$2496_CMP , \$procmux$2489_CMP , \$procmux$2483_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16774  = | { \$procmux$2457_CMP , \$procmux$2456_CMP , \$procmux$2455_CMP  };
  assign initiator_phase_transition_req = | { \$procmux$2583_CMP , \$procmux$2554_CMP , \$procmux$2519_CMP , \$procmux$2496_CMP , \$procmux$2489_CMP , \$procmux$2483_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16778  = | { \$procmux$2458_CMP , \$procmux$2455_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16780  = | { \$procmux$2423_CMP , \$procmux$2422_CMP , \$procmux$2420_CMP  };
  assign initiator_clear_out = | { \$procmux$2519_CMP , \$procmux$2504_CMP , \$procmux$2496_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16784  = | { \$procmux$2583_CMP , \$procmux$2565_CMP , \$procmux$2554_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$18425  = | { \$procmux$2504_CMP , \$procmux$2496_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$18427  = | { \$procmux$2565_CMP , \$procmux$2554_CMP  };
  assign \$procmux$2419_Y  = ~ (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) \$auto$opt_reduce.cc:137:opt_pmux$16780 ;
  assign \$procmux$2420_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h3;
  assign \$procmux$2421_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h2;
  assign \$procmux$2422_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 1'h1;
  assign \$procmux$2423_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) receiver_phase_q;
  assign receiver_clear_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$procmux$2454_Y  : \$procmux$2419_Y ;
  assign receiver_isolate_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$opt_reduce.cc:137:opt_pmux$16774  : \$auto$opt_reduce.cc:137:opt_pmux$16766 ;
  assign receiver_phase_ack = receiver_phase_req & (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$procmux$2470_Y ;
  assign \$procmux$2454_Y  = ~ (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) \$auto$opt_reduce.cc:137:opt_pmux$16768 ;
  assign \$procmux$2455_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h3;
  assign \$procmux$2456_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h2;
  assign \$procmux$2457_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 1'h1;
  assign \$procmux$2458_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) receiver_next_phase;
  function [0:0] \$procmux$2470 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$2470  = b[0:0];
      2'b1?:
        \$procmux$2470  = b[1:1];
      default:
        \$procmux$2470  = a;
    endcase
  endfunction
  assign \$procmux$2470_Y  = \$procmux$2470 (isolate_ack_i, { clear_ack_i, 1'h1 }, { \$procmux$2456_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16778  });
  assign \$procmux$2483_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 4'h8;
  assign \$procmux$2489_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h7;
  assign \$procmux$2496_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h5;
  assign \$procmux$2504_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h6;
  assign \$procmux$2519_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h4;
  assign \$initiator_state_d$12 [1:0] = initiator_phase_transition_ack ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *) 2'h2 : 2'h1;
  assign \$initiator_state_d$13 [1:0] = \$10  ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *) 2'h3 : \$initiator_state_d$12 [1:0];
  assign \$procmux$2554_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h2;
  assign \$procmux$2565_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h3;
  assign \$procmux$2583_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 1'h1;
  assign \$initiator_state_d$6 [2:0] = \$3  ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *) 3'h4 : { 2'h1, initiator_phase_transition_ack };
  function [3:0] \$procmux$2617 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$2617  = b[3:0];
      6'b????1?:
        \$procmux$2617  = b[7:4];
      6'b???1??:
        \$procmux$2617  = b[11:8];
      6'b??1???:
        \$procmux$2617  = b[15:12];
      6'b?1????:
        \$procmux$2617  = b[19:16];
      6'b1?????:
        \$procmux$2617  = b[23:20];
      default:
        \$procmux$2617  = a;
    endcase
  endfunction
  assign initiator_state_d = \$procmux$2617 (4'h1, { 1'h0, \$initiator_state_d$6 [2:0], 6'h11, \$initiator_state_d$13 [1:0], 12'h780 }, { \$procmux$2583_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18427 , \$procmux$2519_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18425 , \$procmux$2489_CMP , \$procmux$2483_CMP  });
  assign \$procmux$2634_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) initiator_state_q;
  function [1:0] \$procmux$2699 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$2699  = b[1:0];
      3'b?1?:
        \$procmux$2699  = b[3:2];
      3'b1??:
        \$procmux$2699  = b[5:4];
      default:
        \$procmux$2699  = a;
    endcase
  endfunction
  assign initiator_clear_seq_phase = \$procmux$2699 (2'h0, 6'h1b, { \$auto$opt_reduce.cc:137:opt_pmux$16784 , initiator_clear_out, \$procmux$2489_CMP  });
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:427.5" *)
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/cdc_reset_ctrlr.sv:398.5" *)
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$initiator_state_d$12 [3:2] = 2'h1;
  assign \$initiator_state_d$13 [3:2] = 2'h1;
  assign \$initiator_state_d$6 [3] = 1'h0;
endmodule

(* src = "rtl/core_wrap.sv:8.8" *)
module \core_wrap$croc_chip.i_croc_soc.i_croc.i_core_wrap (clk_i, rst_ni, ref_clk_i, core_busy_o, test_enable_i, irqs_i, timer0_irq_i, boot_addr_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_be_o, data_addr_o, data_wdata_o
, data_rdata_i, data_err_i, debug_req_i, fetch_enable_i);
  (* src = "rtl/core_wrap.sv:17.23" *)
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  (* src = "rtl/core_wrap.sv:9.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/core_wrap.sv:44.23" *)
  output core_busy_o;
  wire core_busy_o;
  (* src = "rtl/core_wrap.sv:33.23" *)
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  (* src = "rtl/core_wrap.sv:32.23" *)
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  (* src = "rtl/core_wrap.sv:36.23" *)
  input data_err_i;
  wire data_err_i;
  (* src = "rtl/core_wrap.sv:29.23" *)
  input data_gnt_i;
  wire data_gnt_i;
  (* src = "rtl/core_wrap.sv:35.23" *)
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  (* src = "rtl/core_wrap.sv:28.23" *)
  output data_req_o;
  wire data_req_o;
  (* src = "rtl/core_wrap.sv:30.23" *)
  input data_rvalid_i;
  wire data_rvalid_i;
  (* src = "rtl/core_wrap.sv:34.23" *)
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  (* src = "rtl/core_wrap.sv:31.23" *)
  output data_we_o;
  wire data_we_o;
  (* src = "rtl/core_wrap.sv:39.23" *)
  input debug_req_i;
  wire debug_req_i;
  (* src = "rtl/core_wrap.sv:42.23" *)
  input fetch_enable_i;
  wire fetch_enable_i;
  (* src = "rtl/core_wrap.sv:23.23" *)
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  (* src = "rtl/core_wrap.sv:25.23" *)
  input instr_err_i;
  wire instr_err_i;
  (* src = "rtl/core_wrap.sv:21.23" *)
  input instr_gnt_i;
  wire instr_gnt_i;
  (* src = "rtl/core_wrap.sv:24.23" *)
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  (* src = "rtl/core_wrap.sv:20.23" *)
  output instr_req_o;
  wire instr_req_o;
  (* src = "rtl/core_wrap.sv:22.23" *)
  input instr_rvalid_i;
  wire instr_rvalid_i;
  (* src = "rtl/core_wrap.sv:14.22" *)
  input [15:0] irqs_i;
  wire [15:0] irqs_i;
  (* src = "rtl/core_wrap.sv:11.16" *)
  input ref_clk_i;
  wire ref_clk_i;
  (* src = "rtl/core_wrap.sv:10.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/core_wrap.sv:12.16" *)
  input test_enable_i;
  wire test_enable_i;
  (* src = "rtl/core_wrap.sv:15.15" *)
  input timer0_irq_i;
  wire timer0_irq_i;
  (* src = "rtl/core_wrap.sv:68.5" *)
  \cve2_core$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex  i_ibex (
    .boot_addr_i({ boot_addr_i[31:8], 8'h00 }),
    .clk_i(clk_i),
    .core_busy_o(core_busy_o),
    .data_addr_o(data_addr_o),
    .data_be_o(data_be_o),
    .data_err_i(data_err_i),
    .data_gnt_i(data_gnt_i),
    .data_rdata_i(data_rdata_i),
    .data_req_o(data_req_o),
    .data_rvalid_i(data_rvalid_i),
    .data_wdata_o(data_wdata_o),
    .data_we_o(data_we_o),
    .debug_req_i(debug_req_i),
    .fetch_enable_i(fetch_enable_i),
    .hart_id_i(32'd0),
    .instr_addr_o(instr_addr_o),
    .instr_err_i(instr_err_i),
    .instr_gnt_i(instr_gnt_i),
    .instr_rdata_i(instr_rdata_i),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .irq_external_i(1'h0),
    .irq_fast_i(irqs_i),
    .irq_nm_i(1'h0),
    .irq_software_i(1'h0),
    .irq_timer_i(timer0_irq_i),
    .rst_ni(rst_ni),
    .test_en_i(test_enable_i)
  );
endmodule

(* top =  1  *)
(* src = "rtl/croc_chip.sv:8.8" *)
module croc_chip(clk_i, rst_ni, ref_clk_i, jtag_tck_i, jtag_trst_ni, jtag_tms_i, jtag_tdi_i, jtag_tdo_o, uart_rx_i, uart_tx_o, fetch_en_i, status_o, gpio0_io, gpio1_io, gpio2_io, gpio3_io, gpio4_io, gpio5_io, gpio6_io, gpio7_io, gpio8_io
, gpio9_io, gpio10_io, gpio11_io, gpio12_io, gpio13_io, gpio14_io, gpio15_io, gpio16_io, gpio17_io, gpio18_io, gpio19_io, gpio20_io, gpio21_io, gpio22_io, gpio23_io, gpio24_io, gpio25_io, gpio26_io, gpio27_io, gpio28_io, gpio29_io
, gpio30_io, gpio31_io, unused0_o, unused1_o, unused2_o, unused3_o);
  (* src = "rtl/croc_chip.sv:9.15" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/croc_chip.sv:22.15" *)
  input fetch_en_i;
  wire fetch_en_i;
  (* src = "rtl/croc_chip.sv:25.15" *)
  inout gpio0_io;
  wire gpio0_io;
  (* src = "rtl/croc_chip.sv:35.15" *)
  inout gpio10_io;
  wire gpio10_io;
  (* src = "rtl/croc_chip.sv:36.15" *)
  inout gpio11_io;
  wire gpio11_io;
  (* src = "rtl/croc_chip.sv:37.15" *)
  inout gpio12_io;
  wire gpio12_io;
  (* src = "rtl/croc_chip.sv:38.15" *)
  inout gpio13_io;
  wire gpio13_io;
  (* src = "rtl/croc_chip.sv:39.15" *)
  inout gpio14_io;
  wire gpio14_io;
  (* src = "rtl/croc_chip.sv:40.15" *)
  inout gpio15_io;
  wire gpio15_io;
  (* src = "rtl/croc_chip.sv:41.15" *)
  inout gpio16_io;
  wire gpio16_io;
  (* src = "rtl/croc_chip.sv:42.15" *)
  inout gpio17_io;
  wire gpio17_io;
  (* src = "rtl/croc_chip.sv:43.15" *)
  inout gpio18_io;
  wire gpio18_io;
  (* src = "rtl/croc_chip.sv:44.15" *)
  inout gpio19_io;
  wire gpio19_io;
  (* src = "rtl/croc_chip.sv:26.15" *)
  inout gpio1_io;
  wire gpio1_io;
  (* src = "rtl/croc_chip.sv:45.15" *)
  inout gpio20_io;
  wire gpio20_io;
  (* src = "rtl/croc_chip.sv:46.15" *)
  inout gpio21_io;
  wire gpio21_io;
  (* src = "rtl/croc_chip.sv:47.15" *)
  inout gpio22_io;
  wire gpio22_io;
  (* src = "rtl/croc_chip.sv:48.15" *)
  inout gpio23_io;
  wire gpio23_io;
  (* src = "rtl/croc_chip.sv:49.15" *)
  inout gpio24_io;
  wire gpio24_io;
  (* src = "rtl/croc_chip.sv:50.15" *)
  inout gpio25_io;
  wire gpio25_io;
  (* src = "rtl/croc_chip.sv:51.15" *)
  inout gpio26_io;
  wire gpio26_io;
  (* src = "rtl/croc_chip.sv:52.15" *)
  inout gpio27_io;
  wire gpio27_io;
  (* src = "rtl/croc_chip.sv:53.15" *)
  inout gpio28_io;
  wire gpio28_io;
  (* src = "rtl/croc_chip.sv:54.15" *)
  inout gpio29_io;
  wire gpio29_io;
  (* src = "rtl/croc_chip.sv:27.15" *)
  inout gpio2_io;
  wire gpio2_io;
  (* src = "rtl/croc_chip.sv:55.15" *)
  inout gpio30_io;
  wire gpio30_io;
  (* src = "rtl/croc_chip.sv:56.15" *)
  inout gpio31_io;
  wire gpio31_io;
  (* src = "rtl/croc_chip.sv:28.15" *)
  inout gpio3_io;
  wire gpio3_io;
  (* src = "rtl/croc_chip.sv:29.15" *)
  inout gpio4_io;
  wire gpio4_io;
  (* src = "rtl/croc_chip.sv:30.15" *)
  inout gpio5_io;
  wire gpio5_io;
  (* src = "rtl/croc_chip.sv:31.15" *)
  inout gpio6_io;
  wire gpio6_io;
  (* src = "rtl/croc_chip.sv:32.15" *)
  inout gpio7_io;
  wire gpio7_io;
  (* src = "rtl/croc_chip.sv:33.15" *)
  inout gpio8_io;
  wire gpio8_io;
  (* src = "rtl/croc_chip.sv:34.15" *)
  inout gpio9_io;
  wire gpio9_io;
  (* src = "rtl/croc_chip.sv:13.15" *)
  input jtag_tck_i;
  wire jtag_tck_i;
  (* src = "rtl/croc_chip.sv:16.15" *)
  input jtag_tdi_i;
  wire jtag_tdi_i;
  (* src = "rtl/croc_chip.sv:17.15" *)
  output jtag_tdo_o;
  wire jtag_tdo_o;
  (* src = "rtl/croc_chip.sv:15.15" *)
  input jtag_tms_i;
  wire jtag_tms_i;
  (* src = "rtl/croc_chip.sv:14.15" *)
  input jtag_trst_ni;
  wire jtag_trst_ni;
  (* src = "rtl/croc_chip.sv:11.15" *)
  input ref_clk_i;
  wire ref_clk_i;
  (* src = "rtl/croc_chip.sv:10.15" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/croc_chip.sv:62.11" *)
  wire soc_clk_i;
  (* src = "rtl/croc_chip.sv:73.11" *)
  wire soc_fetch_en_i;
  (* src = "rtl/croc_chip.sv:78.27" *)
  wire [31:0] soc_gpio_i;
  (* src = "rtl/croc_chip.sv:79.27" *)
  wire [31:0] soc_gpio_o;
  (* src = "rtl/croc_chip.sv:80.27" *)
  wire [31:0] soc_gpio_out_en_o;
  (* src = "rtl/croc_chip.sv:67.11" *)
  wire soc_jtag_tck_i;
  (* src = "rtl/croc_chip.sv:70.11" *)
  wire soc_jtag_tdi_i;
  (* src = "rtl/croc_chip.sv:71.11" *)
  wire soc_jtag_tdo_o;
  (* src = "rtl/croc_chip.sv:69.11" *)
  wire soc_jtag_tms_i;
  (* src = "rtl/croc_chip.sv:68.11" *)
  wire soc_jtag_trst_ni;
  (* src = "rtl/croc_chip.sv:64.11" *)
  wire soc_ref_clk_i;
  (* src = "rtl/croc_chip.sv:63.11" *)
  wire soc_rst_ni;
  (* src = "rtl/croc_chip.sv:74.11" *)
  wire soc_status_o;
  (* src = "rtl/croc_chip.sv:93.70" *)
  wire soc_uart_rx_i;
  (* src = "rtl/croc_chip.sv:94.70" *)
  wire soc_uart_tx_o;
  (* src = "rtl/croc_chip.sv:23.15" *)
  output status_o;
  wire status_o;
  (* src = "rtl/croc_chip.sv:19.15" *)
  input uart_rx_i;
  wire uart_rx_i;
  (* src = "rtl/croc_chip.sv:20.15" *)
  output uart_tx_o;
  wire uart_tx_o;
  (* src = "rtl/croc_chip.sv:57.15" *)
  output unused0_o;
  wire unused0_o;
  (* src = "rtl/croc_chip.sv:58.15" *)
  output unused1_o;
  wire unused1_o;
  (* src = "rtl/croc_chip.sv:59.15" *)
  output unused2_o;
  wire unused2_o;
  (* src = "rtl/croc_chip.sv:60.15" *)
  output unused3_o;
  wire unused3_o;
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_chip.sv:159.3" *)
  \croc_soc$croc_chip.i_croc_soc  i_croc_soc (
    .clk_i(soc_clk_i),
    .fetch_en_i(soc_fetch_en_i),
    .gpio_i(soc_gpio_i),
    .gpio_o(soc_gpio_o),
    .gpio_out_en_o(soc_gpio_out_en_o),
    .jtag_tck_i(soc_jtag_tck_i),
    .jtag_tdi_i(soc_jtag_tdi_i),
    .jtag_tdo_o(soc_jtag_tdo_o),
    .jtag_tms_i(soc_jtag_tms_i),
    .jtag_trst_ni(soc_jtag_trst_ni),
    .ref_clk_i(soc_ref_clk_i),
    .rst_ni(soc_rst_ni),
    .status_o(soc_status_o),
    .testmode_i(1'h0),
    .uart_rx_i(soc_uart_rx_i),
    .uart_tx_o(soc_uart_tx_o)
  );
  (* src = "rtl/croc_chip.sv:82.27" *)
  sg13g2_IOPadIn pad_clk_i (
    .p2c(soc_clk_i),
    .pad(clk_i)
  );
  (* src = "rtl/croc_chip.sv:96.27" *)
  sg13g2_IOPadIn pad_fetch_en_i (
    .p2c(soc_fetch_en_i),
    .pad(fetch_en_i)
  );
  (* src = "rtl/croc_chip.sv:99.27" *)
  sg13g2_IOPadInOut30mA pad_gpio0_io (
    .c2p(soc_gpio_o[0]),
    .c2p_en(soc_gpio_out_en_o[0]),
    .p2c(soc_gpio_i[0]),
    .pad(gpio0_io)
  );
  (* src = "rtl/croc_chip.sv:109.27" *)
  sg13g2_IOPadInOut30mA pad_gpio10_io (
    .c2p(soc_gpio_o[10]),
    .c2p_en(soc_gpio_out_en_o[10]),
    .p2c(soc_gpio_i[10]),
    .pad(gpio10_io)
  );
  (* src = "rtl/croc_chip.sv:110.27" *)
  sg13g2_IOPadInOut30mA pad_gpio11_io (
    .c2p(soc_gpio_o[11]),
    .c2p_en(soc_gpio_out_en_o[11]),
    .p2c(soc_gpio_i[11]),
    .pad(gpio11_io)
  );
  (* src = "rtl/croc_chip.sv:111.27" *)
  sg13g2_IOPadInOut30mA pad_gpio12_io (
    .c2p(soc_gpio_o[12]),
    .c2p_en(soc_gpio_out_en_o[12]),
    .p2c(soc_gpio_i[12]),
    .pad(gpio12_io)
  );
  (* src = "rtl/croc_chip.sv:112.27" *)
  sg13g2_IOPadInOut30mA pad_gpio13_io (
    .c2p(soc_gpio_o[13]),
    .c2p_en(soc_gpio_out_en_o[13]),
    .p2c(soc_gpio_i[13]),
    .pad(gpio13_io)
  );
  (* src = "rtl/croc_chip.sv:113.27" *)
  sg13g2_IOPadInOut30mA pad_gpio14_io (
    .c2p(soc_gpio_o[14]),
    .c2p_en(soc_gpio_out_en_o[14]),
    .p2c(soc_gpio_i[14]),
    .pad(gpio14_io)
  );
  (* src = "rtl/croc_chip.sv:114.27" *)
  sg13g2_IOPadInOut30mA pad_gpio15_io (
    .c2p(soc_gpio_o[15]),
    .c2p_en(soc_gpio_out_en_o[15]),
    .p2c(soc_gpio_i[15]),
    .pad(gpio15_io)
  );
  (* src = "rtl/croc_chip.sv:115.27" *)
  sg13g2_IOPadInOut30mA pad_gpio16_io (
    .c2p(soc_gpio_o[16]),
    .c2p_en(soc_gpio_out_en_o[16]),
    .p2c(soc_gpio_i[16]),
    .pad(gpio16_io)
  );
  (* src = "rtl/croc_chip.sv:116.27" *)
  sg13g2_IOPadInOut30mA pad_gpio17_io (
    .c2p(soc_gpio_o[17]),
    .c2p_en(soc_gpio_out_en_o[17]),
    .p2c(soc_gpio_i[17]),
    .pad(gpio17_io)
  );
  (* src = "rtl/croc_chip.sv:117.27" *)
  sg13g2_IOPadInOut30mA pad_gpio18_io (
    .c2p(soc_gpio_o[18]),
    .c2p_en(soc_gpio_out_en_o[18]),
    .p2c(soc_gpio_i[18]),
    .pad(gpio18_io)
  );
  (* src = "rtl/croc_chip.sv:118.27" *)
  sg13g2_IOPadInOut30mA pad_gpio19_io (
    .c2p(soc_gpio_o[19]),
    .c2p_en(soc_gpio_out_en_o[19]),
    .p2c(soc_gpio_i[19]),
    .pad(gpio19_io)
  );
  (* src = "rtl/croc_chip.sv:100.27" *)
  sg13g2_IOPadInOut30mA pad_gpio1_io (
    .c2p(soc_gpio_o[1]),
    .c2p_en(soc_gpio_out_en_o[1]),
    .p2c(soc_gpio_i[1]),
    .pad(gpio1_io)
  );
  (* src = "rtl/croc_chip.sv:119.27" *)
  sg13g2_IOPadInOut30mA pad_gpio20_io (
    .c2p(soc_gpio_o[20]),
    .c2p_en(soc_gpio_out_en_o[20]),
    .p2c(soc_gpio_i[20]),
    .pad(gpio20_io)
  );
  (* src = "rtl/croc_chip.sv:120.27" *)
  sg13g2_IOPadInOut30mA pad_gpio21_io (
    .c2p(soc_gpio_o[21]),
    .c2p_en(soc_gpio_out_en_o[21]),
    .p2c(soc_gpio_i[21]),
    .pad(gpio21_io)
  );
  (* src = "rtl/croc_chip.sv:121.27" *)
  sg13g2_IOPadInOut30mA pad_gpio22_io (
    .c2p(soc_gpio_o[22]),
    .c2p_en(soc_gpio_out_en_o[22]),
    .p2c(soc_gpio_i[22]),
    .pad(gpio22_io)
  );
  (* src = "rtl/croc_chip.sv:122.27" *)
  sg13g2_IOPadInOut30mA pad_gpio23_io (
    .c2p(soc_gpio_o[23]),
    .c2p_en(soc_gpio_out_en_o[23]),
    .p2c(soc_gpio_i[23]),
    .pad(gpio23_io)
  );
  (* src = "rtl/croc_chip.sv:123.27" *)
  sg13g2_IOPadInOut30mA pad_gpio24_io (
    .c2p(soc_gpio_o[24]),
    .c2p_en(soc_gpio_out_en_o[24]),
    .p2c(soc_gpio_i[24]),
    .pad(gpio24_io)
  );
  (* src = "rtl/croc_chip.sv:124.27" *)
  sg13g2_IOPadInOut30mA pad_gpio25_io (
    .c2p(soc_gpio_o[25]),
    .c2p_en(soc_gpio_out_en_o[25]),
    .p2c(soc_gpio_i[25]),
    .pad(gpio25_io)
  );
  (* src = "rtl/croc_chip.sv:125.27" *)
  sg13g2_IOPadInOut30mA pad_gpio26_io (
    .c2p(soc_gpio_o[26]),
    .c2p_en(soc_gpio_out_en_o[26]),
    .p2c(soc_gpio_i[26]),
    .pad(gpio26_io)
  );
  (* src = "rtl/croc_chip.sv:126.27" *)
  sg13g2_IOPadInOut30mA pad_gpio27_io (
    .c2p(soc_gpio_o[27]),
    .c2p_en(soc_gpio_out_en_o[27]),
    .p2c(soc_gpio_i[27]),
    .pad(gpio27_io)
  );
  (* src = "rtl/croc_chip.sv:127.27" *)
  sg13g2_IOPadInOut30mA pad_gpio28_io (
    .c2p(soc_gpio_o[28]),
    .c2p_en(soc_gpio_out_en_o[28]),
    .p2c(soc_gpio_i[28]),
    .pad(gpio28_io)
  );
  (* src = "rtl/croc_chip.sv:128.27" *)
  sg13g2_IOPadInOut30mA pad_gpio29_io (
    .c2p(soc_gpio_o[29]),
    .c2p_en(soc_gpio_out_en_o[29]),
    .p2c(soc_gpio_i[29]),
    .pad(gpio29_io)
  );
  (* src = "rtl/croc_chip.sv:101.27" *)
  sg13g2_IOPadInOut30mA pad_gpio2_io (
    .c2p(soc_gpio_o[2]),
    .c2p_en(soc_gpio_out_en_o[2]),
    .p2c(soc_gpio_i[2]),
    .pad(gpio2_io)
  );
  (* src = "rtl/croc_chip.sv:129.27" *)
  sg13g2_IOPadInOut30mA pad_gpio30_io (
    .c2p(soc_gpio_o[30]),
    .c2p_en(soc_gpio_out_en_o[30]),
    .p2c(soc_gpio_i[30]),
    .pad(gpio30_io)
  );
  (* src = "rtl/croc_chip.sv:130.27" *)
  sg13g2_IOPadInOut30mA pad_gpio31_io (
    .c2p(soc_gpio_o[31]),
    .c2p_en(soc_gpio_out_en_o[31]),
    .p2c(soc_gpio_i[31]),
    .pad(gpio31_io)
  );
  (* src = "rtl/croc_chip.sv:102.27" *)
  sg13g2_IOPadInOut30mA pad_gpio3_io (
    .c2p(soc_gpio_o[3]),
    .c2p_en(soc_gpio_out_en_o[3]),
    .p2c(soc_gpio_i[3]),
    .pad(gpio3_io)
  );
  (* src = "rtl/croc_chip.sv:103.27" *)
  sg13g2_IOPadInOut30mA pad_gpio4_io (
    .c2p(soc_gpio_o[4]),
    .c2p_en(soc_gpio_out_en_o[4]),
    .p2c(soc_gpio_i[4]),
    .pad(gpio4_io)
  );
  (* src = "rtl/croc_chip.sv:104.27" *)
  sg13g2_IOPadInOut30mA pad_gpio5_io (
    .c2p(soc_gpio_o[5]),
    .c2p_en(soc_gpio_out_en_o[5]),
    .p2c(soc_gpio_i[5]),
    .pad(gpio5_io)
  );
  (* src = "rtl/croc_chip.sv:105.27" *)
  sg13g2_IOPadInOut30mA pad_gpio6_io (
    .c2p(soc_gpio_o[6]),
    .c2p_en(soc_gpio_out_en_o[6]),
    .p2c(soc_gpio_i[6]),
    .pad(gpio6_io)
  );
  (* src = "rtl/croc_chip.sv:106.27" *)
  sg13g2_IOPadInOut30mA pad_gpio7_io (
    .c2p(soc_gpio_o[7]),
    .c2p_en(soc_gpio_out_en_o[7]),
    .p2c(soc_gpio_i[7]),
    .pad(gpio7_io)
  );
  (* src = "rtl/croc_chip.sv:107.27" *)
  sg13g2_IOPadInOut30mA pad_gpio8_io (
    .c2p(soc_gpio_o[8]),
    .c2p_en(soc_gpio_out_en_o[8]),
    .p2c(soc_gpio_i[8]),
    .pad(gpio8_io)
  );
  (* src = "rtl/croc_chip.sv:108.27" *)
  sg13g2_IOPadInOut30mA pad_gpio9_io (
    .c2p(soc_gpio_o[9]),
    .c2p_en(soc_gpio_out_en_o[9]),
    .p2c(soc_gpio_i[9]),
    .pad(gpio9_io)
  );
  (* src = "rtl/croc_chip.sv:87.27" *)
  sg13g2_IOPadIn pad_jtag_tck_i (
    .p2c(soc_jtag_tck_i),
    .pad(jtag_tck_i)
  );
  (* src = "rtl/croc_chip.sv:90.27" *)
  sg13g2_IOPadIn pad_jtag_tdi_i (
    .p2c(soc_jtag_tdi_i),
    .pad(jtag_tdi_i)
  );
  (* src = "rtl/croc_chip.sv:91.27" *)
  sg13g2_IOPadOut16mA pad_jtag_tdo_o (
    .c2p(soc_jtag_tdo_o),
    .pad(jtag_tdo_o)
  );
  (* src = "rtl/croc_chip.sv:89.27" *)
  sg13g2_IOPadIn pad_jtag_tms_i (
    .p2c(soc_jtag_tms_i),
    .pad(jtag_tms_i)
  );
  (* src = "rtl/croc_chip.sv:88.27" *)
  sg13g2_IOPadIn pad_jtag_trst_ni (
    .p2c(soc_jtag_trst_ni),
    .pad(jtag_trst_ni)
  );
  (* src = "rtl/croc_chip.sv:84.27" *)
  sg13g2_IOPadIn pad_ref_clk_i (
    .p2c(soc_ref_clk_i),
    .pad(ref_clk_i)
  );
  (* src = "rtl/croc_chip.sv:83.27" *)
  sg13g2_IOPadIn pad_rst_ni (
    .p2c(soc_rst_ni),
    .pad(rst_ni)
  );
  (* src = "rtl/croc_chip.sv:97.27" *)
  sg13g2_IOPadOut16mA pad_status_o (
    .c2p(soc_status_o),
    .pad(status_o)
  );
  (* src = "rtl/croc_chip.sv:93.27" *)
  sg13g2_IOPadIn pad_uart_rx_i (
    .p2c(soc_uart_rx_i),
    .pad(uart_rx_i)
  );
  (* src = "rtl/croc_chip.sv:94.27" *)
  sg13g2_IOPadOut16mA pad_uart_tx_o (
    .c2p(soc_uart_tx_o),
    .pad(uart_tx_o)
  );
  (* src = "rtl/croc_chip.sv:131.25" *)
  sg13g2_IOPadOut16mA pad_unused0_o (
    .c2p(soc_status_o),
    .pad(unused0_o)
  );
  (* src = "rtl/croc_chip.sv:132.25" *)
  sg13g2_IOPadOut16mA pad_unused1_o (
    .c2p(soc_status_o),
    .pad(unused1_o)
  );
  (* src = "rtl/croc_chip.sv:133.25" *)
  sg13g2_IOPadOut16mA pad_unused2_o (
    .c2p(soc_status_o),
    .pad(unused2_o)
  );
  (* src = "rtl/croc_chip.sv:134.25" *)
  sg13g2_IOPadOut16mA pad_unused3_o (
    .c2p(soc_status_o),
    .pad(unused3_o)
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:136.46" *)
  sg13g2_IOPadVdd pad_vdd0 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:137.46" *)
  sg13g2_IOPadVdd pad_vdd1 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:138.46" *)
  sg13g2_IOPadVdd pad_vdd2 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:139.46" *)
  sg13g2_IOPadVdd pad_vdd3 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:146.48" *)
  sg13g2_IOPadIOVdd pad_vddio0 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:147.48" *)
  sg13g2_IOPadIOVdd pad_vddio1 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:148.48" *)
  sg13g2_IOPadIOVdd pad_vddio2 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:149.48" *)
  sg13g2_IOPadIOVdd pad_vddio3 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:141.46" *)
  sg13g2_IOPadVss pad_vss0 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:142.46" *)
  sg13g2_IOPadVss pad_vss1 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:143.46" *)
  sg13g2_IOPadVss pad_vss2 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:144.46" *)
  sg13g2_IOPadVss pad_vss3 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:151.48" *)
  sg13g2_IOPadIOVss pad_vssio0 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:152.48" *)
  sg13g2_IOPadIOVss pad_vssio1 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:153.48" *)
  sg13g2_IOPadIOVss pad_vssio2 (
  );
  (* keep = "true" *)
  (* src = "rtl/croc_chip.sv:154.48" *)
  sg13g2_IOPadIOVss pad_vssio3 (
  );
endmodule

(* src = "rtl/croc_domain.sv:8.8" *)
module \croc_domain$croc_chip.i_croc_soc.i_croc (clk_i, rst_ni, ref_clk_i, jtag_tck_i, jtag_trst_ni, jtag_tms_i, jtag_tdi_i, jtag_tdo_o, uart_rx_i, uart_tx_o, fetch_en_i, testmode_i, gpio_i, gpio_o, gpio_out_en_o, gpio_in_sync_o, user_sbr_obi_req_o, user_sbr_obi_rsp_i, user_mgr_obi_req_i, user_mgr_obi_rsp_o, interrupts_i
, core_busy_o);
  wire \$2 ;
  wire \$6 ;
  wire \$8 ;
  (* src = "rtl/croc_domain.sv:133.34" *)
  (* unused_bits = "75 149 223 371" *)
  wire [443:0] all_periph_obi_req;
  (* src = "rtl/croc_domain.sv:134.34" *)
  wire [233:0] all_periph_obi_rsp;
  (* src = "rtl/croc_domain.sv:97.34" *)
  wire [369:0] all_sbr_obi_req;
  (* src = "rtl/croc_domain.sv:98.34" *)
  wire [194:0] all_sbr_obi_rsp;
  (* src = "rtl/croc_domain.sv:11.21" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/croc_domain.sv:43.16" *)
  output core_busy_o;
  wire core_busy_o;
  (* src = "rtl/croc_domain.sv:82.17" *)
  wire [71:0] core_data_obi_req;
  (* src = "rtl/croc_domain.sv:83.17" *)
  (* unused_bits = "2 4" *)
  wire [36:0] core_data_obi_rsp;
  (* src = "rtl/croc_domain.sv:73.17" *)
  wire [71:0] core_instr_obi_req;
  (* src = "rtl/croc_domain.sv:74.17" *)
  (* unused_bits = "2 4" *)
  wire [36:0] core_instr_obi_rsp;
  (* src = "rtl/croc_domain.sv:88.17" *)
  wire [71:0] dbg_req_obi_req;
  (* src = "rtl/croc_domain.sv:89.17" *)
  (* unused_bits = "2 4" *)
  wire [36:0] dbg_req_obi_rsp;
  (* src = "rtl/croc_domain.sv:50.9" *)
  wire debug_req;
  (* src = "rtl/croc_domain.sv:228.17" *)
  wire [40:0] dmi_req;
  (* src = "rtl/croc_domain.sv:227.35" *)
  wire dmi_req_ready;
  (* src = "rtl/croc_domain.sv:227.20" *)
  wire dmi_req_valid;
  (* src = "rtl/croc_domain.sv:229.18" *)
  wire [33:0] dmi_resp;
  (* src = "rtl/croc_domain.sv:227.66" *)
  wire dmi_resp_ready;
  (* src = "rtl/croc_domain.sv:227.50" *)
  wire dmi_resp_valid;
  (* src = "rtl/croc_domain.sv:227.9" *)
  wire dmi_rst_n;
  (* src = "rtl/croc_domain.sv:138.17" *)
  wire [38:0] error_obi_rsp;
  (* src = "rtl/croc_domain.sv:15.21" *)
  input fetch_en_i;
  wire fetch_en_i;
  (* src = "rtl/croc_domain.sv:51.9" *)
  wire fetch_enable;
  (* src = "rtl/croc_domain.sv:347.39" *)
  wire [3:0] \gen_sram_bank[0].bank_be ;
  (* src = "rtl/croc_domain.sv:344.37" *)
  (* unused_bits = "0 1 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] \gen_sram_bank[0].bank_byte_addr ;
  (* src = "rtl/croc_domain.sv:346.49" *)
  wire [31:0] \gen_sram_bank[0].bank_rdata ;
  (* src = "rtl/croc_domain.sv:343.11" *)
  wire \gen_sram_bank[0].bank_req ;
  (* src = "rtl/croc_domain.sv:346.37" *)
  wire [31:0] \gen_sram_bank[0].bank_wdata ;
  (* src = "rtl/croc_domain.sv:343.21" *)
  wire \gen_sram_bank[0].bank_we ;
  (* src = "rtl/croc_domain.sv:347.39" *)
  wire [3:0] \gen_sram_bank[1].bank_be ;
  (* src = "rtl/croc_domain.sv:344.37" *)
  (* unused_bits = "0 1 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] \gen_sram_bank[1].bank_byte_addr ;
  (* src = "rtl/croc_domain.sv:346.49" *)
  wire [31:0] \gen_sram_bank[1].bank_rdata ;
  (* src = "rtl/croc_domain.sv:343.11" *)
  wire \gen_sram_bank[1].bank_req ;
  (* src = "rtl/croc_domain.sv:346.37" *)
  wire [31:0] \gen_sram_bank[1].bank_wdata ;
  (* src = "rtl/croc_domain.sv:343.21" *)
  wire \gen_sram_bank[1].bank_we ;
  (* src = "rtl/croc_domain.sv:26.32" *)
  input [31:0] gpio_i;
  wire [31:0] gpio_i;
  (* src = "rtl/croc_domain.sv:30.32" *)
  output [31:0] gpio_in_sync_o;
  wire [31:0] gpio_in_sync_o;
  (* src = "rtl/croc_domain.sv:56.9" *)
  wire gpio_irq;
  (* src = "rtl/croc_domain.sv:27.32" *)
  output [31:0] gpio_o;
  wire [31:0] gpio_o;
  (* src = "rtl/croc_domain.sv:154.17" *)
  wire [38:0] gpio_obi_rsp;
  (* src = "rtl/croc_domain.sv:28.32" *)
  output [31:0] gpio_out_en_o;
  wire [31:0] gpio_out_en_o;
  (* src = "rtl/croc_domain.sv:42.38" *)
  input [3:0] interrupts_i;
  wire [3:0] interrupts_i;
  (* src = "rtl/croc_domain.sv:17.21" *)
  input jtag_tck_i;
  wire jtag_tck_i;
  (* src = "rtl/croc_domain.sv:18.21" *)
  input jtag_tdi_i;
  wire jtag_tdi_i;
  (* src = "rtl/croc_domain.sv:19.21" *)
  output jtag_tdo_o;
  wire jtag_tdo_o;
  (* src = "rtl/croc_domain.sv:20.21" *)
  input jtag_tms_i;
  wire jtag_tms_i;
  (* src = "rtl/croc_domain.sv:21.21" *)
  input jtag_trst_ni;
  wire jtag_trst_ni;
  (* src = "rtl/croc_domain.sv:418.50" *)
  wire [2:0] periph_idx;
  (* src = "rtl/croc_domain.sv:13.21" *)
  input ref_clk_i;
  wire ref_clk_i;
  (* src = "rtl/croc_domain.sv:12.21" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/croc_domain.sv:502.39" *)
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" *)
  wire [66:0] soc_ctrl_reg2hw;
  (* src = "rtl/croc_domain.sv:470.13" *)
  wire [69:0] soc_ctrl_reg_req;
  (* src = "rtl/croc_domain.sv:471.13" *)
  wire [33:0] soc_ctrl_reg_rsp;
  (* src = "rtl/croc_domain.sv:14.21" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/croc_domain.sv:57.9" *)
  wire timer0_irq0;
  (* src = "rtl/croc_domain.sv:58.9" *)
  wire timer0_irq1;
  (* src = "rtl/croc_domain.sv:55.9" *)
  wire uart_irq;
  (* src = "rtl/croc_domain.sv:524.13" *)
  wire [69:0] uart_reg_req;
  (* src = "rtl/croc_domain.sv:525.13" *)
  wire [33:0] uart_reg_rsp;
  (* src = "rtl/croc_domain.sv:23.21" *)
  input uart_rx_i;
  wire uart_rx_i;
  (* src = "rtl/croc_domain.sv:24.21" *)
  output uart_tx_o;
  wire uart_tx_o;
  (* src = "rtl/croc_domain.sv:39.24" *)
  input [71:0] user_mgr_obi_req_i;
  wire [71:0] user_mgr_obi_req_i;
  (* src = "rtl/croc_domain.sv:40.24" *)
  output [36:0] user_mgr_obi_rsp_o;
  wire [36:0] user_mgr_obi_rsp_o;
  (* src = "rtl/croc_domain.sv:35.24" *)
  output [73:0] user_sbr_obi_req_o;
  wire [73:0] user_sbr_obi_req_o;
  (* src = "rtl/croc_domain.sv:36.24" *)
  input [38:0] user_sbr_obi_rsp_i;
  wire [38:0] user_sbr_obi_rsp_i;
  (* src = "rtl/croc_domain.sv:112.17" *)
  wire [38:0] xbar_error_obi_rsp;
  (* src = "rtl/croc_domain.sv:108.17" *)
  wire [38:0] xbar_periph_obi_rsp;
  assign \$2  = ~ all_periph_obi_req[189];
  assign fetch_enable = soc_ctrl_reg2hw[34] | fetch_en_i;
  assign \$6  = ~ all_periph_obi_req[263];
  assign \$8  = ~ all_periph_obi_req[411];
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_domain.sv:377.7" *)
  \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram  \gen_sram_bank[0].i_sram  (
    .addr_i(\gen_sram_bank[0].bank_byte_addr [10:2]),
    .be_i(\gen_sram_bank[0].bank_be ),
    .clk_i(clk_i),
    .impl_i(soc_ctrl_reg2hw[0]),
    .rdata_o(\gen_sram_bank[0].bank_rdata ),
    .req_i(\gen_sram_bank[0].bank_req ),
    .rst_ni(rst_ni),
    .wdata_i(\gen_sram_bank[0].bank_wdata ),
    .we_i(\gen_sram_bank[0].bank_we )
  );
  (* src = "rtl/croc_domain.sv:353.7" *)
  \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram_shim  \gen_sram_bank[0].i_sram_shim  (
    .addr_o(\gen_sram_bank[0].bank_byte_addr ),
    .be_o(\gen_sram_bank[0].bank_be ),
    .clk_i(clk_i),
    .gnt_i(1'h1),
    .obi_req_i(all_sbr_obi_req[221:148]),
    .obi_rsp_o(all_sbr_obi_rsp[116:78]),
    .rdata_i(\gen_sram_bank[0].bank_rdata ),
    .req_o(\gen_sram_bank[0].bank_req ),
    .rst_ni(rst_ni),
    .wdata_o(\gen_sram_bank[0].bank_wdata ),
    .we_o(\gen_sram_bank[0].bank_we )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_domain.sv:377.7" *)
  \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram  \gen_sram_bank[1].i_sram  (
    .addr_i(\gen_sram_bank[1].bank_byte_addr [10:2]),
    .be_i(\gen_sram_bank[1].bank_be ),
    .clk_i(clk_i),
    .impl_i(soc_ctrl_reg2hw[0]),
    .rdata_o(\gen_sram_bank[1].bank_rdata ),
    .req_i(\gen_sram_bank[1].bank_req ),
    .rst_ni(rst_ni),
    .wdata_i(\gen_sram_bank[1].bank_wdata ),
    .we_i(\gen_sram_bank[1].bank_we )
  );
  (* src = "rtl/croc_domain.sv:353.7" *)
  \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram_shim  \gen_sram_bank[1].i_sram_shim  (
    .addr_o(\gen_sram_bank[1].bank_byte_addr ),
    .be_o(\gen_sram_bank[1].bank_be ),
    .clk_i(clk_i),
    .gnt_i(1'h1),
    .obi_req_i(all_sbr_obi_req[295:222]),
    .obi_rsp_o(all_sbr_obi_rsp[155:117]),
    .rdata_i(\gen_sram_bank[1].bank_rdata ),
    .req_o(\gen_sram_bank[1].bank_req ),
    .rst_ni(rst_ni),
    .wdata_o(\gen_sram_bank[1].bank_wdata ),
    .we_o(\gen_sram_bank[1].bank_we )
  );
  (* src = "rtl/croc_domain.sv:426.5" *)
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs  i_addr_decode_periphs (
    .addr_i(all_sbr_obi_req[147:116]),
    .addr_map_i(480'h000000010000000000040000000000020300000003001000000000030300200003003000000000040300500003006000000000050300a0000300b000),
    .default_idx_i(3'h0),
    .en_default_idx_i(1'h1),
    .idx_o(periph_idx)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_domain.sv:179.5" *)
  \core_wrap$croc_chip.i_croc_soc.i_croc.i_core_wrap  i_core_wrap (
    .boot_addr_i(soc_ctrl_reg2hw[66:35]),
    .clk_i(clk_i),
    .core_busy_o(core_busy_o),
    .data_addr_o(core_data_obi_req[71:40]),
    .data_be_o(core_data_obi_req[38:35]),
    .data_err_i(core_data_obi_rsp[3]),
    .data_gnt_i(core_data_obi_rsp[1]),
    .data_rdata_i(core_data_obi_rsp[36:5]),
    .data_req_o(core_data_obi_req[0]),
    .data_rvalid_i(core_data_obi_rsp[0]),
    .data_wdata_o(core_data_obi_req[34:3]),
    .data_we_o(core_data_obi_req[39]),
    .debug_req_i(debug_req),
    .fetch_enable_i(fetch_enable),
    .instr_addr_o(core_instr_obi_req[71:40]),
    .instr_err_i(core_instr_obi_rsp[3]),
    .instr_gnt_i(core_instr_obi_rsp[1]),
    .instr_rdata_i(core_instr_obi_rsp[36:5]),
    .instr_req_o(core_instr_obi_req[0]),
    .instr_rvalid_i(core_instr_obi_rsp[0]),
    .irqs_i({ 9'h000, interrupts_i, gpio_irq, uart_irq, timer0_irq1 }),
    .ref_clk_i(ref_clk_i),
    .rst_ni(rst_ni),
    .test_enable_i(testmode_i),
    .timer0_irq_i(timer0_irq0)
  );
  (* src = "rtl/croc_domain.sv:258.5" *)
  \dm_obi_top$croc_chip.i_croc_soc.i_croc.i_dm_top  i_dm_top (
    .clk_i(clk_i),
    .debug_req_o(debug_req),
    .dmi_req_i(dmi_req),
    .dmi_req_ready_o(dmi_req_ready),
    .dmi_req_valid_i(dmi_req_valid),
    .dmi_resp_o(dmi_resp),
    .dmi_resp_ready_i(dmi_resp_ready),
    .dmi_resp_valid_o(dmi_resp_valid),
    .dmi_rst_ni(dmi_rst_n),
    .hartinfo_i(32'd2171776),
    .master_addr_o(dbg_req_obi_req[71:40]),
    .master_be_o(dbg_req_obi_req[38:35]),
    .master_err_i(dbg_req_obi_rsp[3]),
    .master_gnt_i(dbg_req_obi_rsp[1]),
    .master_other_err_i(1'h0),
    .master_rdata_i(dbg_req_obi_rsp[36:5]),
    .master_req_o(dbg_req_obi_req[0]),
    .master_rvalid_i(dbg_req_obi_rsp[0]),
    .master_wdata_o(dbg_req_obi_req[34:3]),
    .master_we_o(dbg_req_obi_req[39]),
    .rst_ni(rst_ni),
    .slave_addr_i(all_periph_obi_req[147:116]),
    .slave_aid_i(all_periph_obi_req[78:76]),
    .slave_be_i(all_periph_obi_req[114:111]),
    .slave_gnt_o(all_periph_obi_rsp[40]),
    .slave_rdata_o(all_periph_obi_rsp[77:46]),
    .slave_req_i(all_periph_obi_req[74]),
    .slave_rid_o(all_periph_obi_rsp[45:43]),
    .slave_rvalid_o(all_periph_obi_rsp[39]),
    .slave_wdata_i(all_periph_obi_req[110:79]),
    .slave_we_i(all_periph_obi_req[115]),
    .testmode_i(testmode_i),
    .unavailable_i(1'h0)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_domain.sv:233.5" *)
  \dmi_jtag$croc_chip.i_croc_soc.i_croc.i_dmi_jtag  i_dmi_jtag (
    .clk_i(clk_i),
    .dmi_req_o(dmi_req),
    .dmi_req_ready_i(dmi_req_ready),
    .dmi_req_valid_o(dmi_req_valid),
    .dmi_resp_i(dmi_resp),
    .dmi_resp_ready_o(dmi_resp_ready),
    .dmi_resp_valid_i(dmi_resp_valid),
    .dmi_rst_no(dmi_rst_n),
    .rst_ni(rst_ni),
    .tck_i(jtag_tck_i),
    .td_i(jtag_tdi_i),
    .td_o(jtag_tdo_o),
    .testmode_i(testmode_i),
    .tms_i(jtag_tms_i),
    .trst_ni(jtag_trst_ni)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_domain.sv:584.5" *)
  \gpio$croc_chip.i_croc_soc.i_croc.i_gpio  i_gpio (
    .clk_i(clk_i),
    .gpio_i(gpio_i),
    .gpio_in_sync_o(gpio_in_sync_o),
    .gpio_o(gpio_o),
    .gpio_out_en_o(gpio_out_en_o),
    .interrupt_o(gpio_irq),
    .obi_req_i(all_periph_obi_req[369:296]),
    .obi_rsp_o(gpio_obi_rsp),
    .rst_ni(rst_ni)
  );
  (* src = "rtl/croc_domain.sv:323.5" *)
  \obi_xbar$croc_chip.i_croc_soc.i_croc.i_main_xbar  i_main_xbar (
    .addr_map_i(384'h000000042000000080000000000000031000080010001000000000021000000010000800000000010000000010000000),
    .clk_i(clk_i),
    .default_idx_i(12'h000),
    .en_default_idx_i(4'hf),
    .mgr_ports_req_o(all_sbr_obi_req),
    .mgr_ports_rsp_i({ user_sbr_obi_rsp_i, all_sbr_obi_rsp[155:78], xbar_periph_obi_rsp, xbar_error_obi_rsp }),
    .rst_ni(rst_ni),
    .sbr_ports_req_i({ core_instr_obi_req[71:40], 39'h3c00000000, core_instr_obi_req[0], core_data_obi_req[71:3], 2'h0, core_data_obi_req[0], dbg_req_obi_req[71:3], 2'h0, dbg_req_obi_req[0], user_mgr_obi_req_i }),
    .sbr_ports_rsp_o({ core_instr_obi_rsp, core_data_obi_rsp, dbg_req_obi_rsp, user_mgr_obi_rsp_o }),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/croc_domain.sv:442.5" *)
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_obi_demux  i_obi_demux (
    .clk_i(clk_i),
    .mgr_ports_req_o(all_periph_obi_req),
    .mgr_ports_rsp_i({ all_periph_obi_rsp[233:199], 2'h0, all_periph_obi_rsp[196:195], gpio_obi_rsp, all_periph_obi_rsp[155:120], 1'h0, all_periph_obi_rsp[118:81], 1'h0, all_periph_obi_rsp[79:43], 2'h0, all_periph_obi_rsp[40:39], error_obi_rsp }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(all_sbr_obi_req[147:74]),
    .sbr_port_rsp_o(xbar_periph_obi_rsp),
    .sbr_port_select_i(periph_idx)
  );
  (* src = "rtl/croc_domain.sv:461.5" *)
  \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_periph_err  i_periph_err (
    .clk_i(clk_i),
    .obi_req_i(all_periph_obi_req[73:0]),
    .obi_rsp_o(error_obi_rsp),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_domain.sv:513.5" *)
  \soc_ctrl_reg_top$croc_chip.i_croc_soc.i_croc.i_soc_ctrl  i_soc_ctrl (
    .clk_i(clk_i),
    .devmode_i(1'h0),
    .hw2reg(4'h0),
    .reg2hw(soc_ctrl_reg2hw),
    .reg_req_i(soc_ctrl_reg_req),
    .reg_rsp_o(soc_ctrl_reg_rsp),
    .rst_ni(rst_ni)
  );
  (* src = "rtl/croc_domain.sv:480.5" *)
  \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl_translate  i_soc_ctrl_translate (
    .add_i(all_periph_obi_req[221:190]),
    .be_i(all_periph_obi_req[188:185]),
    .clk_i(clk_i),
    .gnt_o(all_periph_obi_rsp[79]),
    .id_i(all_periph_obi_req[152:150]),
    .r_id_o(all_periph_obi_rsp[84:82]),
    .r_opc_o(all_periph_obi_rsp[81]),
    .r_rdata_o(all_periph_obi_rsp[116:85]),
    .r_valid_o(all_periph_obi_rsp[78]),
    .reg_req_o(soc_ctrl_reg_req),
    .reg_rsp_i(soc_ctrl_reg_rsp),
    .req_i(all_periph_obi_req[148]),
    .rst_ni(rst_ni),
    .wdata_i(all_periph_obi_req[184:153]),
    .wen_i(\$2 )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_domain.sv:599.5" *)
  \timer_unit$croc_chip.i_croc_soc.i_croc.i_timer  i_timer (
    .addr_i(all_periph_obi_req[443:412]),
    .be_i(all_periph_obi_req[410:407]),
    .clk_i(clk_i),
    .event_hi_i(1'h0),
    .event_lo_i(1'h0),
    .gnt_o(all_periph_obi_rsp[196]),
    .id_i(all_periph_obi_req[374:372]),
    .irq_hi_o(timer0_irq1),
    .irq_lo_o(timer0_irq0),
    .r_id_o(all_periph_obi_rsp[201:199]),
    .r_rdata_o(all_periph_obi_rsp[233:202]),
    .r_valid_o(all_periph_obi_rsp[195]),
    .ref_clk_i(ref_clk_i),
    .req_i(all_periph_obi_req[370]),
    .rst_ni(rst_ni),
    .wdata_i(all_periph_obi_req[406:375]),
    .wen_i(\$8 )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_domain.sv:559.5" *)
  \reg_uart_wrap$croc_chip.i_croc_soc.i_croc.i_uart  i_uart (
    .clk_i(clk_i),
    .cts_ni(1'h0),
    .dcd_ni(1'h0),
    .dsr_ni(1'h0),
    .intr_o(uart_irq),
    .reg_req_i(uart_reg_req),
    .reg_rsp_o(uart_reg_rsp),
    .rin_ni(1'h0),
    .rst_ni(rst_ni),
    .sin_i(uart_rx_i),
    .sout_o(uart_tx_o)
  );
  (* src = "rtl/croc_domain.sv:534.5" *)
  \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_uart_translate  i_uart_translate (
    .add_i(all_periph_obi_req[295:264]),
    .be_i(all_periph_obi_req[262:259]),
    .clk_i(clk_i),
    .gnt_o(all_periph_obi_rsp[118]),
    .id_i(all_periph_obi_req[226:224]),
    .r_id_o(all_periph_obi_rsp[123:121]),
    .r_opc_o(all_periph_obi_rsp[120]),
    .r_rdata_o(all_periph_obi_rsp[155:124]),
    .r_valid_o(all_periph_obi_rsp[117]),
    .reg_req_o(uart_reg_req),
    .reg_rsp_i(uart_reg_rsp),
    .req_i(all_periph_obi_req[222]),
    .rst_ni(rst_ni),
    .wdata_i(all_periph_obi_req[258:227]),
    .wen_i(\$6 )
  );
  (* src = "rtl/croc_domain.sv:404.5" *)
  \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_xbar_err  i_xbar_err (
    .clk_i(clk_i),
    .obi_req_i(all_sbr_obi_req[73:0]),
    .obi_rsp_o(xbar_error_obi_rsp),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign dbg_req_obi_req[2:1] = 2'h0;
  assign core_instr_obi_req[39:1] = 39'h3c00000000;
  assign core_data_obi_req[2:1] = 2'h0;
  assign { all_sbr_obi_rsp[194:156], all_sbr_obi_rsp[77:0] } = { user_sbr_obi_rsp_i, xbar_periph_obi_rsp, xbar_error_obi_rsp };
  assign { all_periph_obi_rsp[198:197], all_periph_obi_rsp[194:156], all_periph_obi_rsp[119], all_periph_obi_rsp[80], all_periph_obi_rsp[42:41], all_periph_obi_rsp[38:0] } = { 2'h0, gpio_obi_rsp, 4'h0, error_obi_rsp };
  assign user_sbr_obi_req_o = all_sbr_obi_req[369:296];
endmodule

(* src = "rtl/croc_soc.sv:8.8" *)
module \croc_soc$croc_chip.i_croc_soc (clk_i, rst_ni, ref_clk_i, jtag_tck_i, jtag_trst_ni, jtag_tms_i, jtag_tdi_i, jtag_tdo_o, uart_rx_i, uart_tx_o, fetch_en_i, status_o, testmode_i, gpio_i, gpio_o, gpio_out_en_o);
  (* src = "rtl/croc_soc.sv:11.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/croc_soc.sv:15.16" *)
  input fetch_en_i;
  wire fetch_en_i;
  (* src = "rtl/croc_soc.sv:27.32" *)
  input [31:0] gpio_i;
  wire [31:0] gpio_i;
  (* src = "rtl/croc_soc.sv:61.23" *)
  wire [31:0] gpio_in_sync;
  (* src = "rtl/croc_soc.sv:28.32" *)
  output [31:0] gpio_o;
  wire [31:0] gpio_o;
  (* src = "rtl/croc_soc.sv:29.32" *)
  output [31:0] gpio_out_en_o;
  wire [31:0] gpio_out_en_o;
  (* src = "rtl/croc_soc.sv:60.29" *)
  wire [3:0] interrupts;
  (* src = "rtl/croc_soc.sv:18.16" *)
  input jtag_tck_i;
  wire jtag_tck_i;
  (* src = "rtl/croc_soc.sv:19.16" *)
  input jtag_tdi_i;
  wire jtag_tdi_i;
  (* src = "rtl/croc_soc.sv:20.16" *)
  output jtag_tdo_o;
  wire jtag_tdo_o;
  (* src = "rtl/croc_soc.sv:21.16" *)
  input jtag_tms_i;
  wire jtag_tms_i;
  (* src = "rtl/croc_soc.sv:22.16" *)
  input jtag_trst_ni;
  wire jtag_trst_ni;
  (* src = "rtl/croc_soc.sv:13.16" *)
  input ref_clk_i;
  wire ref_clk_i;
  (* src = "rtl/croc_soc.sv:12.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/croc_soc.sv:16.16" *)
  output status_o;
  wire status_o;
  (* src = "rtl/croc_soc.sv:32.23" *)
  wire synced_fetch_en;
  (* src = "rtl/croc_soc.sv:32.9" *)
  wire synced_rst_n;
  (* src = "rtl/croc_soc.sv:14.16" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/croc_soc.sv:24.16" *)
  input uart_rx_i;
  wire uart_rx_i;
  (* src = "rtl/croc_soc.sv:25.16" *)
  output uart_tx_o;
  wire uart_tx_o;
  (* src = "rtl/croc_soc.sv:57.15" *)
  wire [71:0] user_mgr_obi_req;
  (* src = "rtl/croc_soc.sv:58.15" *)
  wire [36:0] user_mgr_obi_rsp;
  (* src = "rtl/croc_soc.sv:53.15" *)
  wire [73:0] user_sbr_obi_req;
  (* src = "rtl/croc_soc.sv:54.15" *)
  wire [38:0] user_sbr_obi_rsp;
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_soc.sv:65.3" *)
  \croc_domain$croc_chip.i_croc_soc.i_croc  i_croc (
    .clk_i(clk_i),
    .core_busy_o(status_o),
    .fetch_en_i(synced_fetch_en),
    .gpio_i(gpio_i),
    .gpio_in_sync_o(gpio_in_sync),
    .gpio_o(gpio_o),
    .gpio_out_en_o(gpio_out_en_o),
    .interrupts_i(interrupts),
    .jtag_tck_i(jtag_tck_i),
    .jtag_tdi_i(jtag_tdi_i),
    .jtag_tdo_o(jtag_tdo_o),
    .jtag_tms_i(jtag_tms_i),
    .jtag_trst_ni(jtag_trst_ni),
    .ref_clk_i(ref_clk_i),
    .rst_ni(synced_rst_n),
    .testmode_i(testmode_i),
    .uart_rx_i(uart_rx_i),
    .uart_tx_o(uart_tx_o),
    .user_mgr_obi_req_i(user_mgr_obi_req),
    .user_mgr_obi_rsp_o(user_mgr_obi_rsp),
    .user_sbr_obi_req_o(user_sbr_obi_req),
    .user_sbr_obi_rsp_i(user_sbr_obi_rsp)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_soc.sv:45.7" *)
  \sync$croc_chip.i_croc_soc.i_ext_intr_sync  i_ext_intr_sync (
    .clk_i(clk_i),
    .rst_ni(synced_rst_n),
    .serial_i(fetch_en_i),
    .serial_o(synced_fetch_en)
  );
  (* src = "rtl/croc_soc.sv:34.10" *)
  \rstgen$croc_chip.i_croc_soc.i_rstgen  i_rstgen (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .rst_no(synced_rst_n),
    .test_mode_i(testmode_i)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/croc_soc.sv:99.3" *)
  \user_domain$croc_chip.i_croc_soc.i_user  i_user (
    .clk_i(clk_i),
    .gpio_in_sync_i(gpio_in_sync),
    .interrupts_o(interrupts),
    .ref_clk_i(ref_clk_i),
    .rst_ni(synced_rst_n),
    .testmode_i(testmode_i),
    .user_mgr_obi_req_o(user_mgr_obi_req),
    .user_mgr_obi_rsp_i(user_mgr_obi_rsp),
    .user_sbr_obi_req_i(user_sbr_obi_req),
    .user_sbr_obi_rsp_o(user_sbr_obi_rsp)
  );
endmodule

(* src = "rtl/cve2/cve2_alu.sv:9.8" *)
module \cve2_alu$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.ex_block_i.alu_i (multdiv_operand_a_i, multdiv_operand_b_i, imd_val_we_o, imd_val_d_o, imd_val_q_i, instr_first_cycle_i, operator_i, operand_a_i, operand_b_i, multdiv_sel_i, adder_result_o, adder_result_ext_o, result_o, comparison_result_o, is_equal_result_o);
  wire \$16 ;
  wire \$20 ;
  wire \$22 ;
  wire \$26 ;
  wire \$28 ;
  wire \$58 ;
  wire \$74 ;
  wire \$76 ;
  wire \$80 ;
  wire \$82 ;
  wire [5:0] \$auto$wreduce.cc:514:run$16931 ;
  wire [7:0] \$procmux$3889_CMP ;
  wire \$procmux$3889_CTRL ;
  wire [4:0] \$procmux$3890_CMP ;
  wire \$procmux$3890_CTRL ;
  wire [4:0] \$procmux$3891_CMP ;
  wire \$procmux$3891_CTRL ;
  wire \$procmux$3892_CTRL ;
  wire [5:0] \$procmux$3917_CMP ;
  wire \$procmux$3917_CTRL ;
  wire [3:0] \$procmux$3918_CMP ;
  wire \$procmux$3918_CTRL ;
  (* src = "rtl/cve2/cve2_alu.sv:52.16" *)
  wire [32:0] adder_in_a;
  (* src = "rtl/cve2/cve2_alu.sv:52.28" *)
  wire [32:0] adder_in_b;
  (* src = "rtl/cve2/cve2_alu.sv:51.16" *)
  wire adder_op_b_negate;
  (* src = "rtl/cve2/cve2_alu.sv:28.29" *)
  output [33:0] adder_result_ext_o;
  wire [33:0] adder_result_ext_o;
  (* src = "rtl/cve2/cve2_alu.sv:27.29" *)
  output [31:0] adder_result_o;
  wire [31:0] adder_result_o;
  (* src = "rtl/cve2/cve2_alu.sv:362.9" *)
  wire bwlogic_and;
  (* src = "rtl/cve2/cve2_alu.sv:365.16" *)
  wire [31:0] bwlogic_and_result;
  (* src = "rtl/cve2/cve2_alu.sv:361.9" *)
  wire bwlogic_or;
  (* src = "rtl/cve2/cve2_alu.sv:364.16" *)
  wire [31:0] bwlogic_or_result;
  (* src = "rtl/cve2/cve2_alu.sv:367.16" *)
  wire [31:0] bwlogic_result;
  (* src = "rtl/cve2/cve2_alu.sv:366.16" *)
  wire [31:0] bwlogic_xor_result;
  (* src = "rtl/cve2/cve2_alu.sv:117.9" *)
  wire cmp_signed;
  (* src = "rtl/cve2/cve2_alu.sv:31.29" *)
  output comparison_result_o;
  wire comparison_result_o;
  (* src = "rtl/cve2/cve2_alu.sv:24.29" *)
  output [63:0] imd_val_d_o;
  wire [63:0] imd_val_d_o;
  (* src = "rtl/cve2/cve2_alu.sv:23.29" *)
  input [63:0] imd_val_q_i;
  wire [63:0] imd_val_q_i;
  (* src = "rtl/cve2/cve2_alu.sv:25.29" *)
  output [1:0] imd_val_we_o;
  wire [1:0] imd_val_we_o;
  (* src = "rtl/cve2/cve2_alu.sv:16.29" *)
  input instr_first_cycle_i;
  wire instr_first_cycle_i;
  (* src = "rtl/cve2/cve2_alu.sv:32.29" *)
  output is_equal_result_o;
  wire is_equal_result_o;
  (* src = "rtl/cve2/cve2_alu.sv:116.9" *)
  wire is_greater_equal;
  (* src = "rtl/cve2/cve2_alu.sv:18.29" *)
  input [32:0] multdiv_operand_a_i;
  wire [32:0] multdiv_operand_a_i;
  (* src = "rtl/cve2/cve2_alu.sv:19.29" *)
  input [32:0] multdiv_operand_b_i;
  wire [32:0] multdiv_operand_b_i;
  (* src = "rtl/cve2/cve2_alu.sv:21.29" *)
  input multdiv_sel_i;
  wire multdiv_sel_i;
  (* src = "rtl/cve2/cve2_alu.sv:13.29" *)
  input [31:0] operand_a_i;
  wire [31:0] operand_a_i;
  (* src = "rtl/cve2/cve2_alu.sv:14.29" *)
  input [31:0] operand_b_i;
  wire [31:0] operand_b_i;
  (* src = "rtl/cve2/cve2_alu.sv:37.16" *)
  wire [32:0] operand_b_neg;
  (* src = "rtl/cve2/cve2_alu.sv:12.29" *)
  input [6:0] operator_i;
  wire [6:0] operator_i;
  (* src = "rtl/cve2/cve2_alu.sv:30.29" *)
  output [31:0] result_o;
  wire [31:0] result_o;
  wire [4:0] shift_amt;
  wire [4:0] shift_amt_compl;
  (* src = "rtl/cve2/cve2_alu.sv:244.15" *)
  wire shift_arith;
  (* src = "rtl/cve2/cve2_alu.sv:242.15" *)
  wire shift_left;
  (* src = "rtl/cve2/cve2_alu.sv:250.23" *)
  wire [31:0] shift_operand;
  (* src = "rtl/cve2/cve2_alu.sv:254.23" *)
  wire [31:0] shift_result;
  wire [31:0] shift_result_ext;
  assign is_equal_result_o = ! adder_result_ext_o[32:1];
  assign \$16  = operand_a_i[31] ^ operand_b_i[31];
  assign \$20  = ~ adder_result_ext_o[32];
  assign \$22  = operand_a_i[31] ^ cmp_signed;
  assign \$26  = ~ is_equal_result_o;
  assign \$28  = ~ is_greater_equal;
  assign shift_amt_compl = 1'h0 - operand_b_i[4:0];
  assign shift_amt = instr_first_cycle_i ? operand_b_i[4:0] : shift_amt_compl;
  assign shift_arith = operator_i == 4'h8;
  assign shift_operand = shift_left ? { operand_a_i[0], operand_a_i[1], operand_a_i[2], operand_a_i[3], operand_a_i[4], operand_a_i[5], operand_a_i[6], operand_a_i[7], operand_a_i[8], operand_a_i[9], operand_a_i[10], operand_a_i[11], operand_a_i[12], operand_a_i[13], operand_a_i[14], operand_a_i[15], operand_a_i[16], operand_a_i[17], operand_a_i[18], operand_a_i[19], operand_a_i[20], operand_a_i[21], operand_a_i[22], operand_a_i[23], operand_a_i[24], operand_a_i[25], operand_a_i[26], operand_a_i[27], operand_a_i[28], operand_a_i[29], operand_a_i[30], operand_a_i[31] } : operand_a_i;
  assign \$58  = shift_arith & shift_operand[31];
  assign shift_result_ext = $signed({ \$58 , shift_operand }) >>> shift_amt;
  assign shift_result = shift_left ? { shift_result_ext[0], shift_result_ext[1], shift_result_ext[2], shift_result_ext[3], shift_result_ext[4], shift_result_ext[5], shift_result_ext[6], shift_result_ext[7], shift_result_ext[8], shift_result_ext[9], shift_result_ext[10], shift_result_ext[11], shift_result_ext[12], shift_result_ext[13], shift_result_ext[14], shift_result_ext[15], shift_result_ext[16], shift_result_ext[17], shift_result_ext[18], shift_result_ext[19], shift_result_ext[20], shift_result_ext[21], shift_result_ext[22], shift_result_ext[23], shift_result_ext[24], shift_result_ext[25], shift_result_ext[26], shift_result_ext[27], shift_result_ext[28], shift_result_ext[29], shift_result_ext[30], shift_result_ext[31] } : shift_result_ext;
  assign bwlogic_or_result = operand_a_i | operand_b_i;
  assign bwlogic_and_result = operand_a_i & operand_b_i;
  assign bwlogic_xor_result = operand_a_i ^ operand_b_i;
  assign \$74  = operator_i == 2'h3;
  assign \$76  = operator_i == 3'h6;
  assign bwlogic_or = \$74  | \$76 ;
  assign \$80  = operator_i == 3'h4;
  assign adder_result_ext_o = adder_in_a + adder_in_b;
  assign \$82  = operator_i == 3'h7;
  assign bwlogic_and = \$80  | \$82 ;
  assign operand_b_neg[32:1] = ~ operand_b_i;
  function [31:0] \$procmux$3888 ;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$3888  = b[31:0];
      4'b??1?:
        \$procmux$3888  = b[63:32];
      4'b?1??:
        \$procmux$3888  = b[95:64];
      4'b1???:
        \$procmux$3888  = b[127:96];
      default:
        \$procmux$3888  = a;
    endcase
  endfunction
  assign result_o = \$procmux$3888 (32'd0, { bwlogic_result, adder_result_ext_o[32:1], shift_result, 31'h00000000, comparison_result_o }, { \$procmux$3892_CTRL , \$procmux$3891_CTRL , \$procmux$3890_CTRL , \$procmux$3889_CTRL  });
  assign \$procmux$3889_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) \$procmux$3889_CMP ;
  assign \$procmux$3889_CMP [0] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h1d;
  assign \$procmux$3889_CMP [1] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h1e;
  assign \$procmux$3889_CMP [2] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h1b;
  assign \$procmux$3889_CMP [3] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h1c;
  assign \$procmux$3889_CMP [4] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h19;
  assign \$procmux$3889_CMP [5] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h1a;
  assign \$procmux$3889_CMP [6] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 6'h2b;
  assign \$procmux$3889_CMP [7] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 6'h2c;
  assign \$procmux$3890_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) { \$procmux$3890_CMP [4:3], \$procmux$3890_CMP [1], shift_arith, shift_left };
  assign shift_left = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 4'ha;
  assign \$procmux$3890_CMP [1] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 4'h9;
  assign \$procmux$3890_CMP [3] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 4'hc;
  assign \$procmux$3890_CMP [4] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 4'hb;
  assign \$procmux$3891_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) \$procmux$3891_CMP ;
  assign \$procmux$3891_CMP [0] = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) operator_i;
  assign \$procmux$3891_CMP [1] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 1'h1;
  assign \$procmux$3891_CMP [2] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h16;
  assign \$procmux$3891_CMP [3] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h17;
  assign \$procmux$3891_CMP [4] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h18;
  assign \$procmux$3892_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1326.27-1326.53|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) { \$auto$wreduce.cc:514:run$16931 [1:0], \$82 , \$76 , \$80 , \$74  };
  assign \$auto$wreduce.cc:514:run$16931 [0] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1326.27-1326.53|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 2'h2;
  assign \$auto$wreduce.cc:514:run$16931 [1] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:1326.27-1326.53|rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 3'h5;
  function [31:0] \$procmux$3894 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_alu.sv:394.20-394.56|rtl/cve2/cve2_alu.sv:392.5-396.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$3894  = b[31:0];
      2'b1?:
        \$procmux$3894  = b[63:32];
      default:
        \$procmux$3894  = a;
    endcase
  endfunction
  assign bwlogic_result = \$procmux$3894 (bwlogic_xor_result, { bwlogic_or_result, bwlogic_and_result }, { bwlogic_or, bwlogic_and });
  function [0:0] \$procmux$3916 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$3916  = b[0:0];
      3'b?1?:
        \$procmux$3916  = b[1:1];
      3'b1??:
        \$procmux$3916  = b[2:2];
      default:
        \$procmux$3916  = a;
    endcase
  endfunction
  assign comparison_result_o = \$procmux$3916 (is_equal_result_o, { \$26 , is_greater_equal, \$28  }, { \$procmux$3889_CMP [1], \$procmux$3918_CTRL , \$procmux$3917_CTRL  });
  assign \$procmux$3917_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" *) { \$procmux$3917_CMP [3:2], \$procmux$3889_CMP [7:4] };
  assign \$procmux$3917_CMP [2] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" *) 5'h1f;
  assign \$procmux$3917_CMP [3] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" *) 6'h20;
  assign \$procmux$3918_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:164.27-164.57|rtl/cve2/cve2_alu.sv:160.5-170.12" *) { \$procmux$3918_CMP [3:2], \$procmux$3889_CMP [3:2] };
  assign \$procmux$3918_CMP [2] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:164.27-164.57|rtl/cve2/cve2_alu.sv:160.5-170.12" *) 6'h21;
  assign \$procmux$3918_CMP [3] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:164.27-164.57|rtl/cve2/cve2_alu.sv:160.5-170.12" *) 6'h22;
  assign is_greater_equal = \$16  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:138.7-138.53|rtl/cve2/cve2_alu.sv:137.5-141.8" *) \$22  : \$20 ;
  assign cmp_signed = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:126.16-126.34|rtl/cve2/cve2_alu.sv:120.5-129.12" *) { \$procmux$3918_CMP [2], \$procmux$3917_CMP [2], \$procmux$3889_CMP [6], \$procmux$3889_CMP [4], \$procmux$3889_CMP [2] };
  function [32:0] \$procmux$3927 ;
    input [32:0] a;
    input [65:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_alu.sv:99.26-99.53|rtl/cve2/cve2_alu.sv:97.5-101.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$3927  = b[32:0];
      2'b1?:
        \$procmux$3927  = b[65:33];
      default:
        \$procmux$3927  = a;
    endcase
  endfunction
  assign adder_in_b = \$procmux$3927 ({ operand_b_i, 1'h0 }, { multdiv_operand_b_i, operand_b_neg[32:1], 1'h1 }, { multdiv_sel_i, adder_op_b_negate });
  assign adder_in_a = multdiv_sel_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:89.26-89.67|rtl/cve2/cve2_alu.sv:85.5-91.12" *) multdiv_operand_a_i : { operand_a_i, 1'h1 };
  assign adder_op_b_negate = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_alu.sv:72.27-72.52|rtl/cve2/cve2_alu.sv:60.5-80.12" *) { \$procmux$3918_CMP [3:2], \$procmux$3917_CMP [3:2], \$procmux$3891_CMP [1], \$procmux$3889_CMP  };
  assign adder_result_o = adder_result_ext_o[32:1];
  assign \$procmux$3918_CMP [1:0] = \$procmux$3889_CMP [3:2];
  assign { \$procmux$3917_CMP [5:4], \$procmux$3917_CMP [1:0] } = \$procmux$3889_CMP [7:4];
  assign imd_val_d_o = 64'h0000000000000000;
  assign imd_val_we_o = 2'h0;
  assign { \$procmux$3890_CMP [2], \$procmux$3890_CMP [0] } = { shift_arith, shift_left };
  assign operand_b_neg[0] = 1'h1;
  assign \$auto$wreduce.cc:514:run$16931 [5:2] = { \$82 , \$80 , \$76 , \$74  };
endmodule

(* src = "rtl/cve2/cve2_compressed_decoder.sv:16.8" *)
module \cve2_compressed_decoder$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.compressed_decoder_i (clk_i, rst_ni, valid_i, instr_i, instr_o, is_compressed_o, illegal_instr_o);
  wire \$12 ;
  wire \$2 ;
  wire \$27 ;
  wire \$32 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" *)
  wire [31:0] \$auto$wreduce.cc:514:run$16936 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:240.17-246.20" *)
  wire [31:0] \$auto$wreduce.cc:514:run$16937 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:235.15-247.18" *)
  wire [31:0] \$auto$wreduce.cc:514:run$16938 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" *)
  wire [31:0] \$auto$wreduce.cc:514:run$16939 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *)
  wire \$illegal_instr_o$18 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *)
  wire \$illegal_instr_o$20 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" *)
  wire \$illegal_instr_o$22 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" *)
  wire \$illegal_instr_o$37 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" *)
  wire \$illegal_instr_o$45 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *)
  wire \$illegal_instr_o$47 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" *)
  wire \$illegal_instr_o$5 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:114.13-118.16" *)
  wire [31:0] \$instr_o$10 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *)
  wire [31:0] \$instr_o$17 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *)
  wire [31:0] \$instr_o$19 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" *)
  wire [31:0] \$instr_o$21 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" *)
  wire [31:0] \$instr_o$4 ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *)
  wire [31:0] \$instr_o$46 ;
  wire \$procmux$6895_CMP ;
  wire \$procmux$6897_CMP ;
  wire \$procmux$6985_CMP ;
  wire \$procmux$6996_CMP ;
  wire [3:0] \$procmux$7001_CMP ;
  wire \$procmux$7001_CTRL ;
  wire \$procmux$7013_CMP ;
  wire [3:0] \$procmux$7026_CMP ;
  wire \$procmux$7028_CMP ;
  wire \$procmux$7032_CMP ;
  wire \$procmux$7038_CMP ;
  wire \$procmux$7039_CMP ;
  wire \$procmux$7040_CMP ;
  wire \$procmux$7041_CMP ;
  wire \$procmux$7054_CMP ;
  wire [1:0] \$procmux$7056_CMP ;
  wire \$procmux$7056_CTRL ;
  wire \$procmux$7110_CTRL ;
  wire \$procmux$7117_CTRL ;
  wire \$procmux$7143_CMP ;
  wire \$procmux$7148_CTRL ;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:17.23" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:23.23" *)
  output illegal_instr_o;
  wire illegal_instr_o;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:20.23" *)
  input [31:0] instr_i;
  wire [31:0] instr_i;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:21.23" *)
  output [31:0] instr_o;
  wire [31:0] instr_o;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:22.23" *)
  output is_compressed_o;
  wire is_compressed_o;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:18.23" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_compressed_decoder.sv:19.23" *)
  input valid_i;
  wire valid_i;
  assign \$2  = ! instr_i[12:5];
  assign \$12  = ! { instr_i[12], instr_i[6:2] };
  assign \$27  = ! instr_i[11:7];
  assign \$32  = | instr_i[6:2];
  assign is_compressed_o = instr_i[1:0] != 2'h3;
  assign \$7  = ~ instr_i[15];
  assign \$9  = instr_i[11:7] == 2'h2;
  assign { \$auto$wreduce.cc:514:run$16937 [19:15], \$auto$wreduce.cc:514:run$16937 [20], \$auto$wreduce.cc:514:run$16937 [7] } = \$27  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:242.19-242.47|rtl/cve2/cve2_compressed_decoder.sv:240.17-246.20" *) 7'h02 : { instr_i[11:7], 2'h1 };
  assign \$procmux$6895_CMP  = instr_i[15:13] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) 3'h4;
  assign \$procmux$6897_CMP  = instr_i[1:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" *) 2'h2;
  assign { \$auto$wreduce.cc:514:run$16938 [24:15], \$auto$wreduce.cc:514:run$16938 [11:6], \$auto$wreduce.cc:514:run$16938 [4], \$auto$wreduce.cc:514:run$16938 [2] } = \$32  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:238.17-238.97|rtl/cve2/cve2_compressed_decoder.sv:235.15-247.18" *) { instr_i[6:2], instr_i[11:7], instr_i[11:7], 3'h2 } : { 4'h0, \$auto$wreduce.cc:514:run$16937 [20:15], 4'h0, \$auto$wreduce.cc:514:run$16937 [7], 1'h1, \$auto$wreduce.cc:514:run$16937 [20], \$auto$wreduce.cc:514:run$16937 [7] };
  assign { \$auto$wreduce.cc:514:run$16939 [24:15], \$auto$wreduce.cc:514:run$16939 [11:6], \$auto$wreduce.cc:514:run$16939 [4], \$auto$wreduce.cc:514:run$16939 [2] } = instr_i[12] ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18|rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" *) { \$auto$wreduce.cc:514:run$16938 [24:15], \$auto$wreduce.cc:514:run$16938 [11:6], \$auto$wreduce.cc:514:run$16938 [4], \$auto$wreduce.cc:514:run$16938 [2] } : { \$auto$wreduce.cc:514:run$16936 [24:15], \$auto$wreduce.cc:514:run$16936 [11:6], \$auto$wreduce.cc:514:run$16936 [4], \$auto$wreduce.cc:514:run$16936 [6] };
  assign { \$auto$wreduce.cc:514:run$16936 [24:15], \$auto$wreduce.cc:514:run$16936 [11:7], \$auto$wreduce.cc:514:run$16936 [4], \$auto$wreduce.cc:514:run$16936 [6] } = \$32  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:228.17-228.88|rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" *) { instr_i[6:2], 5'h00, instr_i[11:7], 2'h2 } : { 5'h00, instr_i[11:7], 7'h01 };
  assign \$illegal_instr_o$37  = \$32  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:228.17-228.88|rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" *) 1'h0 : \$27 ;
  assign \$illegal_instr_o$45  = instr_i[12] ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18|rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" *) 1'h0 : \$illegal_instr_o$37 ;
  assign \$procmux$6985_CMP  = instr_i[15:13] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:216.19-221.14|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) 2'h2;
  assign \$procmux$6996_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:209.19-214.14|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) instr_i[15:13];
  function [0:0] \$procmux$7000 ;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$7000  = b[0:0];
      4'b??1?:
        \$procmux$7000  = b[1:1];
      4'b?1??:
        \$procmux$7000  = b[2:2];
      4'b1???:
        \$procmux$7000  = b[3:3];
      default:
        \$procmux$7000  = a;
    endcase
  endfunction
  assign \$illegal_instr_o$47  = \$procmux$7000 (1'h0, { instr_i[12], \$27 , \$illegal_instr_o$45 , 1'h1 }, { \$procmux$6996_CMP , \$procmux$6985_CMP , \$procmux$6895_CMP , \$procmux$7001_CTRL  });
  assign \$procmux$7001_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) \$procmux$7001_CMP ;
  assign \$procmux$7001_CMP [0] = instr_i[15:13] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) 1'h1;
  assign \$procmux$7001_CMP [1] = instr_i[15:13] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) 2'h3;
  assign \$procmux$7001_CMP [2] = instr_i[15:13] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) 3'h5;
  assign \$procmux$7001_CMP [3] = instr_i[15:13] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) 3'h7;
  function [31:0] \$procmux$7012 ;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:253.13-254.62|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$7012  = b[31:0];
      4'b??1?:
        \$procmux$7012  = b[63:32];
      4'b?1??:
        \$procmux$7012  = b[95:64];
      4'b1???:
        \$procmux$7012  = b[127:96];
      default:
        \$procmux$7012  = a;
    endcase
  endfunction
  assign \$instr_o$46  = \$procmux$7012 (instr_i, { 7'h00, instr_i[6:2], instr_i[11:7], 3'h1, instr_i[11:7], 11'h130, instr_i[3:2], instr_i[12], instr_i[6:4], 10'h012, instr_i[11:7], 14'h0180, \$auto$wreduce.cc:514:run$16939 [24:15], 3'h0, \$auto$wreduce.cc:514:run$16939 [11:6], 1'h1, \$auto$wreduce.cc:514:run$16939 [4], 1'h0, \$auto$wreduce.cc:514:run$16939 [2], 6'h30, instr_i[8:7], instr_i[12], instr_i[6:2], 8'h12, instr_i[11:9], 9'h023 }, { \$procmux$6996_CMP , \$procmux$6985_CMP , \$procmux$6895_CMP , \$procmux$7013_CMP  });
  assign \$procmux$7013_CMP  = instr_i[15:13] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:253.13-254.62|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) 3'h6;
  assign \$illegal_instr_o$18  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) \$procmux$7026_CMP ;
  assign \$procmux$7026_CMP [0] = { instr_i[12], instr_i[6:5] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) 3'h4;
  assign \$procmux$7026_CMP [1] = { instr_i[12], instr_i[6:5] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) 3'h5;
  assign \$procmux$7026_CMP [2] = { instr_i[12], instr_i[6:5] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) 3'h6;
  assign \$procmux$7026_CMP [3] = { instr_i[12], instr_i[6:5] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) 3'h7;
  assign \$procmux$7028_CMP  = instr_i[11:10] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *) 2'h3;
  assign \$procmux$7032_CMP  = instr_i[1:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" *) 1'h1;
  function [28:0] \$procmux$7037 ;
    input [28:0] a;
    input [115:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:163.21-164.66|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$7037  = b[28:0];
      4'b??1?:
        \$procmux$7037  = b[57:29];
      4'b?1??:
        \$procmux$7037  = b[86:58];
      4'b1???:
        \$procmux$7037  = b[115:87];
      default:
        \$procmux$7037  = a;
    endcase
  endfunction
  assign { \$instr_o$17 [31:10], \$instr_o$17 [6:0] } = \$procmux$7037 ({ instr_i[31:10], instr_i[6:0] }, { 9'h081, instr_i[4:2], 2'h1, instr_i[9:7], 21'h016601, instr_i[4:2], 2'h1, instr_i[9:7], 21'h116601, instr_i[4:2], 2'h1, instr_i[9:7], 21'h196601, instr_i[4:2], 2'h1, instr_i[9:7], 12'heb3 }, { \$procmux$7041_CMP , \$procmux$7040_CMP , \$procmux$7039_CMP , \$procmux$7038_CMP  });
  assign \$procmux$7038_CMP  = { instr_i[12], instr_i[6:5] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:163.21-164.66|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) 2'h3;
  assign \$procmux$7039_CMP  = { instr_i[12], instr_i[6:5] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:157.21-158.66|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) 2'h2;
  assign \$procmux$7040_CMP  = { instr_i[12], instr_i[6:5] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:151.21-152.66|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) 1'h1;
  assign \$procmux$7041_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:145.21-146.74|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) { instr_i[12], instr_i[6:5] };
  function [28:0] \$procmux$7052 ;
    input [28:0] a;
    input [57:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$7052  = b[28:0];
      2'b1?:
        \$procmux$7052  = b[57:29];
      default:
        \$procmux$7052  = a;
    endcase
  endfunction
  assign { \$instr_o$19 [31:10], \$instr_o$19 [6:0] } = \$procmux$7052 ({ 1'h0, instr_i[10], 5'h00, instr_i[6:2], 2'h1, instr_i[9:7], 12'ha93 }, { instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], 2'h1, instr_i[9:7], 12'he93, \$instr_o$17 [31:10], \$instr_o$17 [6:0] }, { \$procmux$7054_CMP , \$procmux$7028_CMP  });
  assign \$procmux$7054_CMP  = instr_i[11:10] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:137.17-138.74|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *) 2'h2;
  assign \$procmux$7056_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *) \$procmux$7056_CMP ;
  assign \$procmux$7056_CMP [0] = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *) instr_i[11:10];
  assign \$procmux$7056_CMP [1] = instr_i[11:10] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *) 1'h1;
  function [0:0] \$procmux$7078 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$7078  = b[0:0];
      2'b1?:
        \$procmux$7078  = b[1:1];
      default:
        \$procmux$7078  = a;
    endcase
  endfunction
  assign \$illegal_instr_o$20  = \$procmux$7078 (1'h0, { instr_i[12], \$illegal_instr_o$18  }, { \$procmux$7056_CTRL , \$procmux$7028_CMP  });
  assign { \$instr_o$10 [28:23], \$instr_o$10 [16:7], \$instr_o$10 [5] } = \$9  ? (* src = "rtl/cve2/cve2_compressed_decoder.sv:116.15-117.83|rtl/cve2/cve2_compressed_decoder.sv:114.13-118.16" *) { instr_i[4:3], instr_i[5], instr_i[2], instr_i[6], 12'h404 } : { instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], instr_i[11:7], 1'h1 };
  function [31:0] \$procmux$7109 ;
    input [31:0] a;
    input [159:0] b;
    input [4:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:191.13-193.54|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        \$procmux$7109  = b[31:0];
      5'b???1?:
        \$procmux$7109  = b[63:32];
      5'b??1??:
        \$procmux$7109  = b[95:64];
      5'b?1???:
        \$procmux$7109  = b[127:96];
      5'b1????:
        \$procmux$7109  = b[159:128];
      default:
        \$procmux$7109  = a;
    endcase
  endfunction
  assign \$instr_o$21  = \$procmux$7109 ({ instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], instr_i[11:7], 3'h0, instr_i[11:7], 7'h13 }, { instr_i[12], instr_i[8], instr_i[10:9], instr_i[6], instr_i[7], instr_i[2], instr_i[11], instr_i[5:3], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], 4'h0, \$7 , 7'h6f, instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], 8'h00, instr_i[11:7], 7'h13, instr_i[12], instr_i[12], instr_i[12], \$instr_o$10 [28:23], \$instr_o$10 [23], \$instr_o$10 [23], \$instr_o$10 [23], \$instr_o$10 [23], \$instr_o$10 [23], \$instr_o$10 [23], \$instr_o$10 [16:7], 1'h0, \$instr_o$10 [5], 2'h2, \$instr_o$10 [5], 2'h3, \$instr_o$19 [31:10], instr_i[9:7], \$instr_o$19 [6:0], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:5], instr_i[2], 7'h01, instr_i[9:7], 2'h0, instr_i[13], instr_i[11:10], instr_i[4:3], instr_i[12], 7'h63 }, { \$procmux$7117_CTRL , \$procmux$6985_CMP , \$procmux$7001_CMP [1], \$procmux$6895_CMP , \$procmux$7110_CTRL  });
  assign \$procmux$7110_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:191.13-193.54|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" *) { \$procmux$7013_CMP , \$procmux$7001_CMP [3] };
  assign \$procmux$7117_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:97.13-99.77|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" *) { \$procmux$7001_CMP [2], \$procmux$7001_CMP [0] };
  function [0:0] \$procmux$7125 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$7125  = b[0:0];
      2'b1?:
        \$procmux$7125  = b[1:1];
      default:
        \$procmux$7125  = a;
    endcase
  endfunction
  assign \$illegal_instr_o$22  = \$procmux$7125 (1'h0, { \$12 , \$illegal_instr_o$20  }, { \$procmux$7001_CMP [1], \$procmux$6895_CMP  });
  assign \$procmux$7143_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" *) instr_i[1:0];
  function [0:0] \$procmux$7147 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:71.13-71.36|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$7147  = b[0:0];
      2'b1?:
        \$procmux$7147  = b[1:1];
      default:
        \$procmux$7147  = a;
    endcase
  endfunction
  assign \$illegal_instr_o$5  = \$procmux$7147 (1'h0, { \$2 , 1'h1 }, { \$procmux$6996_CMP , \$procmux$7148_CTRL  });
  assign \$procmux$7148_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_compressed_decoder.sv:71.13-71.36|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" *) { \$procmux$7001_CMP , \$procmux$6895_CMP  };
  function [31:0] \$procmux$7157 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:61.13-63.47|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$7157  = b[31:0];
      3'b?1?:
        \$procmux$7157  = b[63:32];
      3'b1??:
        \$procmux$7157  = b[95:64];
      default:
        \$procmux$7157  = a;
    endcase
  endfunction
  assign \$instr_o$4  = \$procmux$7157 (instr_i, { 2'h0, instr_i[10:7], instr_i[12:11], instr_i[5], instr_i[6], 12'h041, instr_i[4:2], 12'h260, instr_i[5], instr_i[12:10], instr_i[6], 4'h1, instr_i[9:7], 5'h09, instr_i[4:2], 12'h060, instr_i[5], instr_i[12], 2'h1, instr_i[4:2], 2'h1, instr_i[9:7], 3'h2, instr_i[11:10], instr_i[6], 9'h023 }, { \$procmux$6996_CMP , \$procmux$6985_CMP , \$procmux$7013_CMP  });
  function [0:0] \$procmux$7166 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$7166  = b[0:0];
      3'b?1?:
        \$procmux$7166  = b[1:1];
      3'b1??:
        \$procmux$7166  = b[2:2];
      default:
        \$procmux$7166  = a;
    endcase
  endfunction
  assign illegal_instr_o = \$procmux$7166 (1'h0, { \$illegal_instr_o$5 , \$illegal_instr_o$22 , \$illegal_instr_o$47  }, { \$procmux$7143_CMP , \$procmux$7032_CMP , \$procmux$6897_CMP  });
  function [31:0] \$procmux$7174 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$7174  = b[31:0];
      3'b?1?:
        \$procmux$7174  = b[63:32];
      3'b1??:
        \$procmux$7174  = b[95:64];
      default:
        \$procmux$7174  = a;
    endcase
  endfunction
  assign instr_o = \$procmux$7174 (instr_i, { \$instr_o$4 , \$instr_o$21 , \$instr_o$46  }, { \$procmux$7143_CMP , \$procmux$7032_CMP , \$procmux$6897_CMP  });
  assign { \$auto$wreduce.cc:514:run$16936 [31:25], \$auto$wreduce.cc:514:run$16936 [14:12], \$auto$wreduce.cc:514:run$16936 [5], \$auto$wreduce.cc:514:run$16936 [3:0] } = { 12'h002, \$auto$wreduce.cc:514:run$16936 [6], 2'h3 };
  assign { \$auto$wreduce.cc:514:run$16937 [31:21], \$auto$wreduce.cc:514:run$16937 [14:8], \$auto$wreduce.cc:514:run$16937 [6:0] } = { 20'h00003, \$auto$wreduce.cc:514:run$16937 [20], 1'h0, \$auto$wreduce.cc:514:run$16937 [7], 2'h3 };
  assign { \$auto$wreduce.cc:514:run$16938 [31:25], \$auto$wreduce.cc:514:run$16938 [14:12], \$auto$wreduce.cc:514:run$16938 [5], \$auto$wreduce.cc:514:run$16938 [3], \$auto$wreduce.cc:514:run$16938 [1:0] } = 14'h000b;
  assign { \$auto$wreduce.cc:514:run$16939 [31:25], \$auto$wreduce.cc:514:run$16939 [14:12], \$auto$wreduce.cc:514:run$16939 [5], \$auto$wreduce.cc:514:run$16939 [3], \$auto$wreduce.cc:514:run$16939 [1:0] } = 14'h000b;
  assign { \$instr_o$10 [31:29], \$instr_o$10 [22:17], \$instr_o$10 [6], \$instr_o$10 [4:0] } = { instr_i[12], instr_i[12], instr_i[12], \$instr_o$10 [23], \$instr_o$10 [23], \$instr_o$10 [23], \$instr_o$10 [23], \$instr_o$10 [23], \$instr_o$10 [23], 3'h2, \$instr_o$10 [5], 2'h3 };
  assign \$instr_o$17 [9:7] = instr_i[9:7];
  assign \$instr_o$19 [9:7] = instr_i[9:7];
endmodule

(* src = "rtl/cve2/cve2_controller.sv:12.8" *)
module \cve2_controller$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.controller_i (clk_i, rst_ni, irqs_i, instr_req_o, debug_req_i, fetch_enable_i, irq_nm_i, ctrl_busy_o, instr_valid_i, instr_is_compressed_i, instr_valid_clear_o, id_in_ready_o, pc_set_o, pc_mux_o, exc_pc_mux_o, exc_cause_o, instr_fetch_err_i, instr_fetch_err_plus2_i, pc_id_i, csr_save_if_o, csr_save_id_o
, csr_restore_mret_id_o, csr_restore_dret_id_o, csr_save_cause_o, csr_mtval_o, priv_mode_i, csr_mstatus_tw_i, lsu_addr_last_i, csr_mstatus_mie_i, irq_pending_i, nmi_mode_o, debug_mode_o, debug_cause_o, debug_csr_save_o, debug_single_step_i, debug_ebreakm_i, debug_ebreaku_i, trigger_match_i, perf_jump_o, perf_tbranch_o, instr_i, illegal_insn_i
, ecall_insn_i, mret_insn_i, dret_insn_i, wfi_insn_i, ebrk_insn_i, csr_pipe_flush_i, instr_compressed_i, controller_run_o, load_err_i, store_err_i, branch_set_i, jump_set_i, stall_id_i, flush_id_o);
  wire \$102 ;
  wire \$104 ;
  wire \$106 ;
  wire \$108 ;
  wire \$110 ;
  wire \$135 ;
  wire \$137 ;
  wire \$139 ;
  wire \$141 ;
  wire \$152 ;
  wire \$157 ;
  wire \$159 ;
  wire \$161 ;
  wire \$164 ;
  wire \$166 ;
  wire \$168 ;
  wire \$170 ;
  wire \$172 ;
  wire \$180 ;
  wire \$182 ;
  wire \$184 ;
  wire \$19 ;
  wire \$198 ;
  wire \$200 ;
  wire \$206 ;
  wire \$208 ;
  wire \$21 ;
  wire [31:0] \$211 ;
  wire \$215 ;
  wire \$218 ;
  wire \$23 ;
  wire \$260 ;
  wire \$262 ;
  wire \$264 ;
  wire \$27 ;
  wire \$29 ;
  wire \$290 ;
  wire \$292 ;
  wire \$294 ;
  wire \$296 ;
  wire \$300 ;
  wire \$302 ;
  wire \$31 ;
  wire \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$49 ;
  wire \$51 ;
  wire \$81 ;
  wire \$84 ;
  wire \$92 ;
  wire \$96 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17509 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17511 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17513 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17515 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17520 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17522 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17526 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17531 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17533 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17535 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17517 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17528 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17537 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16786 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16788 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16792 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16796 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16798 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16800 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18429 ;
  wire \$auto$rtlil.cc:3092:Mux$1604 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1607 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1608 ;
  (* src = "rtl/cve2/cve2_controller.sv:670.20-672.14" *)
  wire [3:0] \$auto$wreduce.cc:514:run$16941 ;
  (* src = "rtl/cve2/cve2_controller.sv:665.20-672.14" *)
  wire [3:0] \$auto$wreduce.cc:514:run$16942 ;
  (* src = "rtl/cve2/cve2_controller.sv:509.20-513.14" *)
  wire [6:0] \$auto$wreduce.cc:514:run$16943 ;
  (* src = "rtl/cve2/cve2_controller.sv:507.20-513.14" *)
  wire [6:0] \$auto$wreduce.cc:514:run$16944 ;
  (* src = "rtl/cve2/cve2_controller.sv:500.20-513.14" *)
  wire [6:0] \$auto$wreduce.cc:514:run$16945 ;
  (* src = "rtl/cve2/cve2_controller.sv:497.11-513.14" *)
  wire [6:0] \$auto$wreduce.cc:514:run$16946 ;
  (* src = "rtl/cve2/cve2_controller.sv:614.15-644.18" *)
  wire [6:0] \$auto$wreduce.cc:514:run$16947 ;
  (* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" *)
  wire [6:0] \$auto$wreduce.cc:514:run$16948 ;
  (* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire [6:0] \$auto$wreduce.cc:514:run$16949 ;
  (* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" *)
  wire [31:0] \$csr_mtval_o$231 ;
  (* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire [31:0] \$csr_mtval_o$258 ;
  (* src = "rtl/cve2/cve2_controller.sv:658.11-672.14" *)
  wire \$csr_restore_dret_id_o$245 ;
  (* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire \$csr_restore_dret_id_o$256 ;
  (* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire \$csr_restore_mret_id_o$255 ;
  (* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" *)
  wire \$csr_save_cause_o$230 ;
  (* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire \$csr_save_cause_o$257 ;
  (* src = "rtl/cve2/cve2_controller.sv:417.9-422.12" *)
  wire [3:0] \$ctrl_fsm_ns$147 ;
  (* src = "rtl/cve2/cve2_controller.sv:441.9-450.12" *)
  wire [3:0] \$ctrl_fsm_ns$149 ;
  (* src = "rtl/cve2/cve2_controller.sv:472.20-481.14" *)
  wire [3:0] \$ctrl_fsm_ns$173 ;
  (* src = "rtl/cve2/cve2_controller.sv:466.11-481.14" *)
  wire [3:0] \$ctrl_fsm_ns$175 ;
  (* src = "rtl/cve2/cve2_controller.sv:465.9-482.12" *)
  wire [3:0] \$ctrl_fsm_ns$177 ;
  (* src = "rtl/cve2/cve2_controller.sv:614.15-644.18" *)
  wire [3:0] \$ctrl_fsm_ns$219 ;
  (* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" *)
  wire [3:0] \$ctrl_fsm_ns$225 ;
  (* src = "rtl/cve2/cve2_controller.sv:658.11-672.14" *)
  wire [3:0] \$ctrl_fsm_ns$239 ;
  (* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire [3:0] \$ctrl_fsm_ns$246 ;
  (* src = "rtl/cve2/cve2_controller.sv:689.9-691.12" *)
  wire [3:0] \$ctrl_fsm_ns$265 ;
  (* src = "rtl/cve2/cve2_controller.sv:534.18-538.12" *)
  wire [2:0] \$debug_cause_o$195 ;
  (* src = "rtl/cve2/cve2_controller.sv:532.9-538.12" *)
  wire [2:0] \$debug_cause_o$196 ;
  (* src = "rtl/cve2/cve2_controller.sv:237.16-245.10" *)
  wire \$ebrk_insn_prio$64 ;
  (* src = "rtl/cve2/cve2_controller.sv:235.16-245.10" *)
  wire \$ebrk_insn_prio$69 ;
  (* src = "rtl/cve2/cve2_controller.sv:235.16-245.10" *)
  wire \$ecall_insn_prio$68 ;
  (* src = "rtl/cve2/cve2_controller.sv:490.9-514.12" *)
  wire [6:0] \$exc_cause_o$192 ;
  (* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire [1:0] \$exc_pc_mux_o$252 ;
  (* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire \$flush_id$249 ;
  (* src = "rtl/cve2/cve2_controller.sv:417.9-422.12" *)
  wire \$halt_if$148 ;
  (* src = "rtl/cve2/cve2_controller.sv:472.20-481.14" *)
  wire \$halt_if$174 ;
  (* src = "rtl/cve2/cve2_controller.sv:466.11-481.14" *)
  wire \$halt_if$176 ;
  (* src = "rtl/cve2/cve2_controller.sv:465.9-482.12" *)
  wire \$halt_if$178 ;
  (* src = "rtl/cve2/cve2_controller.sv:241.16-245.10" *)
  wire \$load_err_prio$59 ;
  (* src = "rtl/cve2/cve2_controller.sv:239.16-245.10" *)
  wire \$load_err_prio$62 ;
  (* src = "rtl/cve2/cve2_controller.sv:237.16-245.10" *)
  wire \$load_err_prio$66 ;
  (* src = "rtl/cve2/cve2_controller.sv:235.16-245.10" *)
  wire \$load_err_prio$71 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$115 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$116 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$117 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$118 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$119 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$120 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$121 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$122 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$123 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$124 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$125 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$126 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$127 ;
  (* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$mfip_id$128 ;
  (* src = "rtl/cve2/cve2_controller.sv:497.11-513.14" *)
  wire \$nmi_mode_d$188 ;
  (* src = "rtl/cve2/cve2_controller.sv:658.11-672.14" *)
  wire [2:0] \$pc_mux_o$243 ;
  (* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire [2:0] \$pc_mux_o$251 ;
  (* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire \$pc_set_o$250 ;
  (* src = "rtl/cve2/cve2_controller.sv:452.9-457.12" *)
  wire \$perf_jump_o$154 ;
  (* src = "rtl/cve2/cve2_controller.sv:452.9-457.12" *)
  wire \$perf_tbranch_o$155 ;
  wire \$procmux$3947_CMP ;
  wire \$procmux$4375_CMP ;
  wire \$procmux$4403_CMP ;
  wire \$procmux$4432_CMP ;
  wire \$procmux$4696_CMP ;
  wire \$procmux$4752_CMP ;
  wire \$procmux$4787_CMP ;
  wire \$procmux$4788_CMP ;
  wire \$procmux$4790_CMP ;
  wire \$procmux$5239_Y ;
  wire \$procmux$5274_Y ;
  wire \$procmux$5310_Y ;
  (* src = "rtl/cve2/cve2_controller.sv:58.33" *)
  input branch_set_i;
  wire branch_set_i;
  (* src = "rtl/cve2/cve2_controller.sv:14.33" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_controller.sv:41.33" *)
  output controller_run_o;
  wire controller_run_o;
  (* src = "rtl/cve2/cve2_controller.sv:63.33" *)
  input csr_mstatus_mie_i;
  wire csr_mstatus_mie_i;
  (* src = "rtl/cve2/cve2_controller.sv:87.33" *)
  input csr_mstatus_tw_i;
  wire csr_mstatus_tw_i;
  (* src = "rtl/cve2/cve2_controller.sv:85.33" *)
  output [31:0] csr_mtval_o;
  wire [31:0] csr_mtval_o;
  (* src = "rtl/cve2/cve2_controller.sv:150.9" *)
  wire csr_pipe_flush;
  (* src = "rtl/cve2/cve2_controller.sv:27.33" *)
  input csr_pipe_flush_i;
  wire csr_pipe_flush_i;
  (* src = "rtl/cve2/cve2_controller.sv:83.33" *)
  output csr_restore_dret_id_o;
  wire csr_restore_dret_id_o;
  (* src = "rtl/cve2/cve2_controller.sv:82.33" *)
  output csr_restore_mret_id_o;
  wire csr_restore_mret_id_o;
  (* src = "rtl/cve2/cve2_controller.sv:84.33" *)
  output csr_save_cause_o;
  wire csr_save_cause_o;
  (* src = "rtl/cve2/cve2_controller.sv:81.33" *)
  output csr_save_id_o;
  wire csr_save_id_o;
  (* src = "rtl/cve2/cve2_controller.sv:80.33" *)
  output csr_save_if_o;
  wire csr_save_if_o;
  (* src = "rtl/cve2/cve2_controller.sv:18.33" *)
  output ctrl_busy_o;
  wire ctrl_busy_o;
  (* src = "rtl/cve2/cve2_controller.sv:107.14" *)
  reg [3:0] ctrl_fsm_cs;
  (* src = "rtl/cve2/cve2_controller.sv:107.27" *)
  wire [3:0] ctrl_fsm_ns;
  (* src = "rtl/cve2/cve2_controller.sv:72.33" *)
  output [2:0] debug_cause_o;
  wire [2:0] debug_cause_o;
  (* src = "rtl/cve2/cve2_controller.sv:73.33" *)
  output debug_csr_save_o;
  wire debug_csr_save_o;
  (* src = "rtl/cve2/cve2_controller.sv:76.33" *)
  input debug_ebreakm_i;
  wire debug_ebreakm_i;
  (* src = "rtl/cve2/cve2_controller.sv:77.33" *)
  input debug_ebreaku_i;
  wire debug_ebreaku_i;
  (* src = "rtl/cve2/cve2_controller.sv:110.23" *)
  wire debug_mode_d;
  (* src = "rtl/cve2/cve2_controller.sv:74.33" *)
  output debug_mode_o;
  reg debug_mode_o;
  (* src = "rtl/cve2/cve2_controller.sv:71.33" *)
  input debug_req_i;
  wire debug_req_i;
  (* src = "rtl/cve2/cve2_controller.sv:75.33" *)
  input debug_single_step_i;
  wire debug_single_step_i;
  (* src = "rtl/cve2/cve2_controller.sv:135.9" *)
  wire do_single_step_d;
  (* src = "rtl/cve2/cve2_controller.sv:136.9" *)
  reg do_single_step_q;
  (* src = "rtl/cve2/cve2_controller.sv:147.9" *)
  wire dret_insn;
  (* src = "rtl/cve2/cve2_controller.sv:24.33" *)
  input dret_insn_i;
  wire dret_insn_i;
  (* src = "rtl/cve2/cve2_controller.sv:140.9" *)
  wire ebreak_into_debug;
  (* src = "rtl/cve2/cve2_controller.sv:149.9" *)
  wire ebrk_insn;
  (* src = "rtl/cve2/cve2_controller.sv:26.33" *)
  input ebrk_insn_i;
  wire ebrk_insn_i;
  (* src = "rtl/cve2/cve2_controller.sv:121.9" *)
  wire ebrk_insn_prio;
  (* src = "rtl/cve2/cve2_controller.sv:145.9" *)
  wire ecall_insn;
  (* src = "rtl/cve2/cve2_controller.sv:22.33" *)
  input ecall_insn_i;
  wire ecall_insn_i;
  (* src = "rtl/cve2/cve2_controller.sv:120.9" *)
  wire ecall_insn_prio;
  (* src = "rtl/cve2/cve2_controller.sv:139.9" *)
  wire enter_debug_mode;
  (* src = "rtl/cve2/cve2_controller.sv:137.9" *)
  wire enter_debug_mode_prio_d;
  (* src = "rtl/cve2/cve2_controller.sv:138.9" *)
  reg enter_debug_mode_prio_q;
  (* src = "rtl/cve2/cve2_controller.sv:50.33" *)
  output [6:0] exc_cause_o;
  wire [6:0] exc_cause_o;
  (* src = "rtl/cve2/cve2_controller.sv:49.33" *)
  output [1:0] exc_pc_mux_o;
  wire [1:0] exc_pc_mux_o;
  (* src = "rtl/cve2/cve2_controller.sv:113.20" *)
  wire exc_req_d;
  (* src = "rtl/cve2/cve2_controller.sv:131.9" *)
  wire exc_req_lsu;
  (* src = "rtl/cve2/cve2_controller.sv:113.9" *)
  reg exc_req_q;
  (* src = "rtl/cve2/cve2_controller.sv:17.33" *)
  input fetch_enable_i;
  wire fetch_enable_i;
  (* src = "rtl/cve2/cve2_controller.sv:91.33" *)
  output flush_id_o;
  wire flush_id_o;
  (* src = "rtl/cve2/cve2_controller.sv:126.9" *)
  wire halt_if;
  (* src = "rtl/cve2/cve2_controller.sv:141.9" *)
  wire handle_irq;
  (* src = "rtl/cve2/cve2_controller.sv:40.33" *)
  output id_in_ready_o;
  wire id_in_ready_o;
  (* src = "rtl/cve2/cve2_controller.sv:129.9" *)
  wire illegal_dret;
  (* src = "rtl/cve2/cve2_controller.sv:114.25" *)
  wire illegal_insn_d;
  (* src = "rtl/cve2/cve2_controller.sv:21.33" *)
  input illegal_insn_i;
  wire illegal_insn_i;
  (* src = "rtl/cve2/cve2_controller.sv:119.9" *)
  wire illegal_insn_prio;
  (* src = "rtl/cve2/cve2_controller.sv:114.9" *)
  reg illegal_insn_q;
  (* src = "rtl/cve2/cve2_controller.sv:130.9" *)
  wire illegal_umode;
  (* src = "rtl/cve2/cve2_controller.sv:32.33" *)
  input [15:0] instr_compressed_i;
  wire [15:0] instr_compressed_i;
  (* src = "rtl/cve2/cve2_controller.sv:151.9" *)
  wire instr_fetch_err;
  (* src = "rtl/cve2/cve2_controller.sv:34.33" *)
  input instr_fetch_err_i;
  wire instr_fetch_err_i;
  (* src = "rtl/cve2/cve2_controller.sv:35.33" *)
  input instr_fetch_err_plus2_i;
  wire instr_fetch_err_plus2_i;
  (* src = "rtl/cve2/cve2_controller.sv:31.33" *)
  input [31:0] instr_i;
  wire [31:0] instr_i;
  (* src = "rtl/cve2/cve2_controller.sv:33.33" *)
  input instr_is_compressed_i;
  wire instr_is_compressed_i;
  (* src = "rtl/cve2/cve2_controller.sv:45.33" *)
  output instr_req_o;
  wire instr_req_o;
  (* src = "rtl/cve2/cve2_controller.sv:39.33" *)
  output instr_valid_clear_o;
  wire instr_valid_clear_o;
  (* src = "rtl/cve2/cve2_controller.sv:30.33" *)
  input instr_valid_i;
  wire instr_valid_i;
  (* src = "rtl/cve2/cve2_controller.sv:67.33" *)
  input irq_nm_i;
  wire irq_nm_i;
  (* src = "rtl/cve2/cve2_controller.sv:64.33" *)
  input irq_pending_i;
  wire irq_pending_i;
  (* src = "rtl/cve2/cve2_controller.sv:65.33" *)
  input [18:0] irqs_i;
  wire [18:0] irqs_i;
  (* src = "rtl/cve2/cve2_controller.sv:60.33" *)
  input jump_set_i;
  wire jump_set_i;
  (* src = "rtl/cve2/cve2_controller.sv:54.33" *)
  input load_err_i;
  wire load_err_i;
  (* src = "rtl/cve2/cve2_controller.sv:123.9" *)
  wire load_err_prio;
  (* src = "rtl/cve2/cve2_controller.sv:111.9" *)
  reg load_err_q;
  (* src = "rtl/cve2/cve2_controller.sv:53.33" *)
  input [31:0] lsu_addr_last_i;
  wire [31:0] lsu_addr_last_i;
  (* src = "rtl/cve2/cve2_controller.sv:142.15" *)
  wire [3:0] mfip_id;
  (* src = "rtl/cve2/cve2_controller.sv:146.9" *)
  wire mret_insn;
  (* src = "rtl/cve2/cve2_controller.sv:23.33" *)
  input mret_insn_i;
  wire mret_insn_i;
  (* src = "rtl/cve2/cve2_controller.sv:109.21" *)
  wire nmi_mode_d;
  (* src = "rtl/cve2/cve2_controller.sv:68.33" *)
  output nmi_mode_o;
  reg nmi_mode_o;
  (* src = "rtl/cve2/cve2_controller.sv:36.33" *)
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  (* src = "rtl/cve2/cve2_controller.sv:47.33" *)
  output [2:0] pc_mux_o;
  wire [2:0] pc_mux_o;
  (* src = "rtl/cve2/cve2_controller.sv:46.33" *)
  output pc_set_o;
  wire pc_set_o;
  (* src = "rtl/cve2/cve2_controller.sv:94.33" *)
  output perf_jump_o;
  wire perf_jump_o;
  (* src = "rtl/cve2/cve2_controller.sv:96.33" *)
  output perf_tbranch_o;
  wire perf_tbranch_o;
  (* src = "rtl/cve2/cve2_controller.sv:86.33" *)
  input [1:0] priv_mode_i;
  wire [1:0] priv_mode_i;
  (* src = "rtl/cve2/cve2_controller.sv:127.9" *)
  wire retain_id;
  (* src = "rtl/cve2/cve2_controller.sv:15.33" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_controller.sv:132.9" *)
  wire special_req;
  (* src = "rtl/cve2/cve2_controller.sv:134.9" *)
  wire special_req_flush_only;
  (* src = "rtl/cve2/cve2_controller.sv:133.9" *)
  wire special_req_pc_change;
  (* src = "rtl/cve2/cve2_controller.sv:90.33" *)
  input stall_id_i;
  wire stall_id_i;
  (* src = "rtl/cve2/cve2_controller.sv:55.33" *)
  input store_err_i;
  wire store_err_i;
  (* src = "rtl/cve2/cve2_controller.sv:122.9" *)
  wire store_err_prio;
  (* src = "rtl/cve2/cve2_controller.sv:112.9" *)
  reg store_err_q;
  (* src = "rtl/cve2/cve2_controller.sv:78.33" *)
  input trigger_match_i;
  wire trigger_match_i;
  (* src = "rtl/cve2/cve2_controller.sv:148.9" *)
  wire wfi_insn;
  (* src = "rtl/cve2/cve2_controller.sv:25.33" *)
  input wfi_insn_i;
  wire wfi_insn_i;
  assign ecall_insn = ecall_insn_i & instr_valid_i;
  assign csr_pipe_flush = csr_pipe_flush_i & instr_valid_i;
  assign ebreak_into_debug = \$215  ? debug_ebreakm_i : \$auto$rtlil.cc:3092:Mux$1604 ;
  assign \$102  = ~ debug_mode_o;
  assign \$104  = ~ nmi_mode_o;
  assign \$106  = \$102  & \$104 ;
  assign \$108  = irq_pending_i & csr_mstatus_mie_i;
  assign \$110  = irq_nm_i | \$108 ;
  assign handle_irq = \$106  & \$110 ;
  assign instr_fetch_err = instr_fetch_err_i & instr_valid_i;
  assign \$135  = irq_nm_i || irq_pending_i;
  assign \$137  = \$135  || debug_req_i;
  assign \$139  = \$137  || debug_mode_o;
  assign \$141  = \$139  || debug_single_step_i;
  assign \$152  = branch_set_i || jump_set_i;
  assign \$157  = enter_debug_mode || handle_irq;
  assign \$159  = stall_id_i || instr_valid_i;
  assign illegal_dret = dret_insn & \$102 ;
  assign \$161  = \$157  && \$159 ;
  assign \$164  = ! stall_id_i;
  assign \$166  = ! special_req;
  assign \$168  = \$164  && \$166 ;
  assign \$170  = ! instr_valid_i;
  assign \$172  = \$168  && \$170 ;
  assign \$180  = ! nmi_mode_o;
  assign \$19  = priv_mode_i != 2'h3;
  assign \$182  = irq_nm_i && \$180 ;
  assign \$184  = | irqs_i[15:0];
  assign \$198  = ! debug_mode_o;
  assign \$200  = ebreak_into_debug && \$198 ;
  assign mret_insn = mret_insn_i & instr_valid_i;
  assign \$21  = csr_mstatus_tw_i & wfi_insn;
  assign \$206  = exc_req_q || store_err_q;
  assign \$208  = \$206  || load_err_q;
  assign \$211 [31:1] = pc_id_i[31:1] + 1'h1;
  assign \$auto$rtlil.cc:3092:Mux$1607 [31:1] = instr_fetch_err_plus2_i ? \$211 [31:1] : pc_id_i[31:1];
  assign \$auto$rtlil.cc:3092:Mux$1608  = instr_is_compressed_i ? { 16'h0000, instr_compressed_i } : instr_i;
  assign \$215  = priv_mode_i == 2'h3;
  assign \$218  = debug_mode_o | ebreak_into_debug;
  assign \$23  = mret_insn | \$21 ;
  assign illegal_umode = \$19  & \$23 ;
  assign \$260  = ebrk_insn_prio && ebreak_into_debug;
  assign \$27  = illegal_insn_i | illegal_dret;
  assign \$262  = ! \$260 ;
  assign \$264  = enter_debug_mode_prio_q && \$262 ;
  assign \$29  = \$27  | illegal_umode;
  assign \$290  = ~ stall_id_i;
  assign \$292  = ~ halt_if;
  assign \$294  = \$290  & \$292 ;
  assign \$296  = ~ retain_id;
  assign id_in_ready_o = \$294  & \$296 ;
  assign \$300  = stall_id_i | retain_id;
  assign \$31  = ctrl_fsm_cs != 3'h6;
  assign \$302  = ~ \$300 ;
  assign instr_valid_clear_o = \$302  | flush_id_o;
  assign illegal_insn_d = \$29  & \$31 ;
  assign \$35  = ecall_insn | ebrk_insn;
  assign \$37  = \$35  | illegal_insn_d;
  assign \$39  = \$37  | instr_fetch_err;
  assign dret_insn = dret_insn_i & instr_valid_i;
  assign exc_req_d = \$39  & \$31 ;
  assign exc_req_lsu = store_err_i | load_err_i;
  assign special_req_flush_only = wfi_insn | csr_pipe_flush;
  assign \$49  = mret_insn | dret_insn;
  assign \$51  = \$49  | exc_req_d;
  assign special_req_pc_change = \$51  | exc_req_lsu;
  assign special_req = special_req_pc_change | special_req_flush_only;
  assign wfi_insn = wfi_insn_i & instr_valid_i;
  assign ebrk_insn = ebrk_insn_i & instr_valid_i;
  assign \$81  = \$102  & debug_single_step_i;
  assign do_single_step_d = instr_valid_i ? \$81  : do_single_step_q;
  assign \$84  = debug_req_i | do_single_step_d;
  assign enter_debug_mode_prio_d = \$84  & \$102 ;
  assign \$92  = trigger_match_i & \$102 ;
  assign enter_debug_mode = enter_debug_mode_prio_d | \$92 ;
  assign \$96  = ! priv_mode_i;
  assign \$auto$rtlil.cc:3092:Mux$1604  = \$96  & debug_ebreaku_i;
  (* src = "rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) nmi_mode_o <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17517 ) nmi_mode_o <= nmi_mode_d;
  (* src = "rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) debug_mode_o <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17528 ) debug_mode_o <= debug_mode_d;
  (* src = "rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) ctrl_fsm_cs <= 4'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17537 ) ctrl_fsm_cs <= ctrl_fsm_ns;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17509  = { \$procmux$3947_CMP , mret_insn, \$208  } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17511  = { \$procmux$3947_CMP , \$208  } != 2'h3;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17513  = { \$procmux$4432_CMP , handle_irq } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17515  = | { \$procmux$4432_CMP , \$procmux$3947_CMP  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17520  = { \$procmux$3947_CMP , dret_insn, mret_insn, \$208  } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17522  = { \$procmux$3947_CMP , mret_insn, \$208  } != 3'h6;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17526  = | { \$auto$opt_reduce.cc:137:opt_pmux$16788 , \$procmux$3947_CMP  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17531  = { \$procmux$4790_CMP , fetch_enable_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17533  = { \$procmux$4752_CMP , \$141  } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17535  = { \$procmux$4696_CMP , handle_irq, enter_debug_mode, id_in_ready_o } != 4'h8;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17517  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17515 , \$auto$opt_dff.cc:194:make_patterns_logic$17513 , \$auto$opt_dff.cc:194:make_patterns_logic$17511 , \$auto$opt_dff.cc:194:make_patterns_logic$17509  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17528  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17526 , \$auto$opt_dff.cc:194:make_patterns_logic$17511 , \$auto$opt_dff.cc:194:make_patterns_logic$17520 , \$auto$opt_dff.cc:194:make_patterns_logic$17522  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17537  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17531 , \$auto$opt_dff.cc:194:make_patterns_logic$17533 , \$auto$opt_dff.cc:194:make_patterns_logic$17535  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16788  = | { \$procmux$4403_CMP , \$procmux$4375_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16786  = | { \$procmux$4432_CMP , \$procmux$4403_CMP , \$procmux$4375_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16792  = | { \$procmux$4790_CMP , \$procmux$4788_CMP , \$procmux$4403_CMP , \$procmux$4375_CMP  };
  assign instr_req_o = | { \$procmux$4788_CMP , \$procmux$4696_CMP , \$procmux$4432_CMP , \$procmux$4403_CMP , \$procmux$4375_CMP , \$procmux$3947_CMP , controller_run_o };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16796  = | { load_err_prio, store_err_prio };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16798  = | { \$procmux$4787_CMP , \$procmux$4752_CMP , \$procmux$4403_CMP , \$procmux$4375_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16800  = | { \$procmux$4787_CMP , \$procmux$4752_CMP , \$procmux$3947_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$18429  = | { \$procmux$4788_CMP , \$procmux$4752_CMP  };
  (* src = "rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) do_single_step_q <= 1'h0;
    else do_single_step_q <= do_single_step_d;
  (* src = "rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) enter_debug_mode_prio_q <= 1'h0;
    else enter_debug_mode_prio_q <= enter_debug_mode_prio_d;
  (* src = "rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) exc_req_q <= 1'h0;
    else exc_req_q <= exc_req_d;
  (* src = "rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) illegal_insn_q <= 1'h0;
    else illegal_insn_q <= illegal_insn_d;
  (* src = "rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) load_err_q <= 1'h0;
    else load_err_q <= load_err_i;
  (* src = "rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) store_err_q <= 1'h0;
    else store_err_q <= store_err_i;
  assign \$ctrl_fsm_ns$265  = \$264  ? (* src = "rtl/cve2/cve2_controller.sv:690.11-690.38|rtl/cve2/cve2_controller.sv:689.9-691.12" *) 4'h8 : \$ctrl_fsm_ns$246 ;
  assign \$procmux$3947_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) 3'h6;
  assign { \$auto$wreduce.cc:514:run$16941 [1], \$auto$wreduce.cc:514:run$16941 [2] } = wfi_insn ? (* src = "rtl/cve2/cve2_controller.sv:671.13-671.48|rtl/cve2/cve2_controller.sv:670.20-672.14" *) 2'h2 : 2'h1;
  assign { \$auto$wreduce.cc:514:run$16942 [1], \$auto$wreduce.cc:514:run$16942 [2] } = dret_insn ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:665.35-670.14|rtl/cve2/cve2_controller.sv:665.20-672.14" *) 2'h1 : { \$auto$wreduce.cc:514:run$16941 [1], \$auto$wreduce.cc:514:run$16941 [2] };
  assign \$pc_mux_o$243 [2:1] = mret_insn ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" *) 2'h1 : { dret_insn, 1'h0 };
  assign \$csr_restore_dret_id_o$245  = mret_insn ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" *) 1'h0 : dret_insn;
  assign { \$ctrl_fsm_ns$239 [1], \$ctrl_fsm_ns$239 [2] } = mret_insn ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" *) 2'h1 : { \$auto$wreduce.cc:514:run$16942 [1], \$auto$wreduce.cc:514:run$16942 [2] };
  assign \$pc_mux_o$251  = \$208  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" *) 3'h2 : { \$pc_mux_o$243 [2:1], \$pc_mux_o$243 [1] };
  assign \$pc_set_o$250  = \$208  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" *) \$csr_save_cause_o$230  : \$49 ;
  assign \$ctrl_fsm_ns$246  = \$208  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" *) { \$ctrl_fsm_ns$225 [3:2], 2'h1 } : { 1'h0, \$ctrl_fsm_ns$239 [2:1], \$ctrl_fsm_ns$239 [2] };
  assign \$auto$wreduce.cc:514:run$16947 [1] = ~ (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:614.53-633.18|rtl/cve2/cve2_controller.sv:614.15-644.18" *) \$218 ;
  assign \$ctrl_fsm_ns$219 [3:2] = \$218  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:614.53-633.18|rtl/cve2/cve2_controller.sv:614.15-644.18" *) 2'h2 : 2'h1;
  function [31:0] \$procmux$4216 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:650.28-653.16|rtl/cve2/cve2_controller.sv:600.11-655.18" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$4216  = b[31:0];
      3'b?1?:
        \$procmux$4216  = b[63:32];
      3'b1??:
        \$procmux$4216  = b[95:64];
      default:
        \$procmux$4216  = a;
    endcase
  endfunction
  assign \$csr_mtval_o$231  = \$procmux$4216 (32'd0, { \$auto$rtlil.cc:3092:Mux$1607 [31:1], pc_id_i[0], \$auto$rtlil.cc:3092:Mux$1608 , lsu_addr_last_i }, { instr_fetch_err, illegal_insn_prio, \$auto$opt_reduce.cc:137:opt_pmux$16796  });
  assign \$csr_save_cause_o$230  = ebrk_insn_prio ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:614.15-644.18|rtl/cve2/cve2_controller.sv:600.11-655.18" *) \$auto$wreduce.cc:514:run$16947 [1] : 1'h1;
  function [3:0] \$procmux$4252 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:650.28-653.16|rtl/cve2/cve2_controller.sv:600.11-655.18" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$4252  = b[3:0];
      6'b????1?:
        \$procmux$4252  = b[7:4];
      6'b???1??:
        \$procmux$4252  = b[11:8];
      6'b??1???:
        \$procmux$4252  = b[15:12];
      6'b?1????:
        \$procmux$4252  = b[19:16];
      6'b1?????:
        \$procmux$4252  = b[23:20];
      default:
        \$procmux$4252  = a;
    endcase
  endfunction
  assign \$auto$wreduce.cc:514:run$16948 [3:0] = \$procmux$4252 (4'h0, { 10'h04a, \$215 , \$215 , 2'h0, \$auto$wreduce.cc:514:run$16947 [1], \$auto$wreduce.cc:514:run$16947 [1], 8'h75 }, { instr_fetch_err, illegal_insn_prio, ecall_insn_prio, ebrk_insn_prio, store_err_prio, load_err_prio });
  assign \$ctrl_fsm_ns$225 [3:2] = ebrk_insn_prio ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:614.15-644.18|rtl/cve2/cve2_controller.sv:600.11-655.18" *) \$ctrl_fsm_ns$219 [3:2] : 2'h1;
  assign \$csr_mtval_o$258  = \$208  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" *) \$csr_mtval_o$231  : 32'd0;
  assign \$csr_save_cause_o$257  = \$208  & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" *) \$csr_save_cause_o$230 ;
  assign \$csr_restore_dret_id_o$256  = \$208  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" *) 1'h0 : \$csr_restore_dret_id_o$245 ;
  assign \$csr_restore_mret_id_o$255  = \$208  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" *) 1'h0 : mret_insn;
  assign \$auto$wreduce.cc:514:run$16949 [3:0] = \$208  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" *) \$auto$wreduce.cc:514:run$16948 [3:0] : 4'h0;
  assign \$exc_pc_mux_o$252  = \$208  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" *) { debug_mode_o, debug_mode_o } : 2'h1;
  assign \$flush_id$249  = \$208  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" *) \$csr_save_cause_o$230  : 1'h1;
  assign \$procmux$4375_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) 4'h9;
  assign \$debug_cause_o$195 [2:1] = debug_req_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:535.11-535.45|rtl/cve2/cve2_controller.sv:534.18-538.12" *) 2'h1 : 2'h2;
  assign \$procmux$4403_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) 4'h8;
  assign \$debug_cause_o$196  = trigger_match_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:533.11-533.45|rtl/cve2/cve2_controller.sv:532.9-538.12" *) 3'h2 : { \$debug_cause_o$195 [2:1], \$debug_cause_o$195 [1] };
  assign \$auto$wreduce.cc:514:run$16943 [2] = ~ (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:510.13-510.52|rtl/cve2/cve2_controller.sv:509.20-513.14" *) irqs_i[18];
  assign \$procmux$4432_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) 3'h7;
  assign \$auto$wreduce.cc:514:run$16944 [3:2] = irqs_i[16] ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:508.13-508.52|rtl/cve2/cve2_controller.sv:507.20-513.14" *) 2'h2 : { 1'h0, \$auto$wreduce.cc:514:run$16943 [2] };
  assign \$auto$wreduce.cc:514:run$16945 [4:0] = \$184  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:506.13-506.59|rtl/cve2/cve2_controller.sv:500.20-513.14" *) { 1'h1, mfip_id } : { 1'h0, \$auto$wreduce.cc:514:run$16944 [3:2], 2'h3 };
  assign \$auto$wreduce.cc:514:run$16946 [5:0] = \$182  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:497.40-500.14|rtl/cve2/cve2_controller.sv:497.11-513.14" *) 6'h20 : { 1'h0, \$auto$wreduce.cc:514:run$16945 [4:0] };
  assign \$nmi_mode_d$188  = nmi_mode_o | (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:497.40-500.14|rtl/cve2/cve2_controller.sv:497.11-513.14" *) \$182 ;
  assign \$exc_cause_o$192  = handle_irq ? (* src = "rtl/cve2/cve2_controller.sv:490.25-514.12|rtl/cve2/cve2_controller.sv:490.9-514.12" *) { 1'h1, \$auto$wreduce.cc:514:run$16946 [5:0] } : 7'h00;
  assign \$halt_if$174  = \$161  | (* src = "rtl/cve2/cve2_controller.sv:472.36-481.14|rtl/cve2/cve2_controller.sv:472.20-481.14" *) handle_irq;
  assign controller_run_o = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) 3'h5;
  assign \$ctrl_fsm_ns$173  = handle_irq ? (* src = "rtl/cve2/cve2_controller.sv:472.36-481.14|rtl/cve2/cve2_controller.sv:472.20-481.14" *) 4'h7 : \$ctrl_fsm_ns$149 ;
  assign \$halt_if$176  = \$halt_if$174  | (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:466.33-472.14|rtl/cve2/cve2_controller.sv:466.11-481.14" *) enter_debug_mode;
  assign \$ctrl_fsm_ns$175  = enter_debug_mode ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:466.33-472.14|rtl/cve2/cve2_controller.sv:466.11-481.14" *) 4'h8 : \$ctrl_fsm_ns$173 ;
  assign \$halt_if$178  = \$172  ? (* src = "rtl/cve2/cve2_controller.sv:466.11-481.14|rtl/cve2/cve2_controller.sv:465.9-482.12" *) \$halt_if$176  : \$161 ;
  assign \$ctrl_fsm_ns$177  = \$172  ? (* src = "rtl/cve2/cve2_controller.sv:466.11-481.14|rtl/cve2/cve2_controller.sv:465.9-482.12" *) \$ctrl_fsm_ns$175  : \$ctrl_fsm_ns$149 ;
  assign \$perf_tbranch_o$155  = \$152  & (* src = "rtl/cve2/cve2_controller.sv:452.41-457.12|rtl/cve2/cve2_controller.sv:452.9-457.12" *) branch_set_i;
  assign \$perf_jump_o$154  = \$152  & (* src = "rtl/cve2/cve2_controller.sv:452.41-457.12|rtl/cve2/cve2_controller.sv:452.9-457.12" *) jump_set_i;
  assign \$ctrl_fsm_ns$149  = special_req ? (* src = "rtl/cve2/cve2_controller.sv:441.26-450.12|rtl/cve2/cve2_controller.sv:441.9-450.12" *) 4'h6 : ctrl_fsm_cs;
  assign \$halt_if$148  = handle_irq | (* src = "rtl/cve2/cve2_controller.sv:417.31-422.12|rtl/cve2/cve2_controller.sv:417.9-422.12" *) enter_debug_mode;
  assign \$procmux$4696_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:400.20-423.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) 3'h4;
  assign { \$ctrl_fsm_ns$147 [3], \$ctrl_fsm_ns$147 [1], \$ctrl_fsm_ns$147 [2] } = enter_debug_mode ? (* src = "rtl/cve2/cve2_controller.sv:417.31-422.12|rtl/cve2/cve2_controller.sv:417.9-422.12" *) 3'h4 : { 1'h0, handle_irq, 1'h1 };
  assign \$procmux$4752_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:383.14-398.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) 2'h3;
  function [3:0] \$procmux$4768 ;
    input [3:0] a;
    input [27:0] b;
    input [6:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      7'b??????1:
        \$procmux$4768  = b[3:0];
      7'b?????1?:
        \$procmux$4768  = b[7:4];
      7'b????1??:
        \$procmux$4768  = b[11:8];
      7'b???1???:
        \$procmux$4768  = b[15:12];
      7'b??1????:
        \$procmux$4768  = b[19:16];
      7'b?1?????:
        \$procmux$4768  = b[23:20];
      7'b1??????:
        \$procmux$4768  = b[27:24];
      default:
        \$procmux$4768  = a;
    endcase
  endfunction
  assign ctrl_fsm_ns = \$procmux$4768 (4'h0, { 12'h134, \$ctrl_fsm_ns$147 [3:1], \$ctrl_fsm_ns$147 [2], \$ctrl_fsm_ns$177 , 4'h5, \$ctrl_fsm_ns$265  }, { \$procmux$4790_CMP , \$procmux$4787_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18429 , \$procmux$4696_CMP , controller_run_o, \$auto$opt_reduce.cc:137:opt_pmux$16786 , \$procmux$3947_CMP  });
  assign \$procmux$4787_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:375.19-381.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) 2'h2;
  assign \$procmux$4788_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:366.17-373.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) 1'h1;
  assign \$procmux$4790_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:357.14-365.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) ctrl_fsm_cs;
  assign perf_tbranch_o = controller_run_o & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$perf_tbranch_o$155 ;
  assign perf_jump_o = controller_run_o & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$perf_jump_o$154 ;
  assign csr_mtval_o = \$procmux$3947_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$csr_mtval_o$258  : 32'd0;
  function [0:0] \$procmux$4835 ;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$4835  = b[0:0];
      4'b??1?:
        \$procmux$4835  = b[1:1];
      4'b?1??:
        \$procmux$4835  = b[2:2];
      4'b1???:
        \$procmux$4835  = b[3:3];
      default:
        \$procmux$4835  = a;
    endcase
  endfunction
  assign csr_save_cause_o = \$procmux$4835 (1'h0, { handle_irq, 1'h1, \$200 , \$csr_save_cause_o$257  }, { \$procmux$4432_CMP , \$procmux$4403_CMP , \$procmux$4375_CMP , \$procmux$3947_CMP  });
  assign csr_restore_dret_id_o = \$procmux$3947_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$csr_restore_dret_id_o$256 ;
  assign csr_restore_mret_id_o = \$procmux$3947_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$csr_restore_mret_id_o$255 ;
  assign csr_save_id_o = \$procmux$4375_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$200 ;
  function [0:0] \$procmux$4864 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$4864  = b[0:0];
      2'b1?:
        \$procmux$4864  = b[1:1];
      default:
        \$procmux$4864  = a;
    endcase
  endfunction
  assign csr_save_if_o = \$procmux$4864 (1'h0, { handle_irq, 1'h1 }, { \$procmux$4432_CMP , \$procmux$4403_CMP  });
  function [0:0] \$procmux$4871 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$4871  = b[0:0];
      2'b1?:
        \$procmux$4871  = b[1:1];
      default:
        \$procmux$4871  = a;
    endcase
  endfunction
  assign debug_csr_save_o = \$procmux$4871 (1'h0, { 1'h1, \$200  }, { \$procmux$4403_CMP , \$procmux$4375_CMP  });
  assign debug_cause_o = \$procmux$4403_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$debug_cause_o$196  : 3'h1;
  function [6:0] \$procmux$4885 ;
    input [6:0] a;
    input [13:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$4885  = b[6:0];
      2'b1?:
        \$procmux$4885  = b[13:7];
      default:
        \$procmux$4885  = a;
    endcase
  endfunction
  assign exc_cause_o = \$procmux$4885 (7'h00, { \$exc_cause_o$192 , 3'h0, \$auto$wreduce.cc:514:run$16949 [3:0] }, { \$procmux$4432_CMP , \$procmux$3947_CMP  });
  function [1:0] \$procmux$4892 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$4892  = b[1:0];
      2'b1?:
        \$procmux$4892  = b[3:2];
      default:
        \$procmux$4892  = a;
    endcase
  endfunction
  assign exc_pc_mux_o = \$procmux$4892 (2'h1, { 2'h2, \$exc_pc_mux_o$252  }, { \$auto$opt_reduce.cc:137:opt_pmux$16788 , \$procmux$3947_CMP  });
  function [2:0] \$procmux$4902 ;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$4902  = b[2:0];
      3'b?1?:
        \$procmux$4902  = b[5:3];
      3'b1??:
        \$procmux$4902  = b[8:6];
      default:
        \$procmux$4902  = a;
    endcase
  endfunction
  assign pc_mux_o = \$procmux$4902 (3'h0, { 6'h0a, \$pc_mux_o$251  }, { controller_run_o, \$auto$opt_reduce.cc:137:opt_pmux$16786 , \$procmux$3947_CMP  });
  function [0:0] \$procmux$4919 ;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$4919  = b[0:0];
      4'b??1?:
        \$procmux$4919  = b[1:1];
      4'b?1??:
        \$procmux$4919  = b[2:2];
      4'b1???:
        \$procmux$4919  = b[3:3];
      default:
        \$procmux$4919  = a;
    endcase
  endfunction
  assign pc_set_o = \$procmux$4919 (1'h0, { \$152 , handle_irq, 1'h1, \$pc_set_o$250  }, { controller_run_o, \$procmux$4432_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16792 , \$procmux$3947_CMP  });
  function [0:0] \$procmux$4965 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:383.14-398.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$4965  = b[0:0];
      2'b1?:
        \$procmux$4965  = b[1:1];
      default:
        \$procmux$4965  = a;
    endcase
  endfunction
  assign ctrl_busy_o = \$procmux$4965 (1'h1, { 1'h0, \$141  }, { \$procmux$4787_CMP , \$procmux$4752_CMP  });
  function [0:0] \$procmux$4971 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$4971  = b[0:0];
      2'b1?:
        \$procmux$4971  = b[1:1];
      default:
        \$procmux$4971  = a;
    endcase
  endfunction
  assign flush_id_o = \$procmux$4971 (1'h0, { 1'h1, \$flush_id$249  }, { \$auto$opt_reduce.cc:137:opt_pmux$16798 , \$procmux$3947_CMP  });
  assign retain_id = controller_run_o & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) special_req;
  function [0:0] \$procmux$4994 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$4994  = b[0:0];
      3'b?1?:
        \$procmux$4994  = b[1:1];
      3'b1??:
        \$procmux$4994  = b[2:2];
      default:
        \$procmux$4994  = a;
    endcase
  endfunction
  assign halt_if = \$procmux$4994 (1'h0, { \$halt_if$148 , \$halt_if$178 , 1'h1 }, { \$procmux$4696_CMP , controller_run_o, \$auto$opt_reduce.cc:137:opt_pmux$16800  });
  assign debug_mode_d = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$procmux$3947_CMP ;
  assign nmi_mode_d = \$procmux$3947_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" *) 1'h0 : \$nmi_mode_d$188 ;
  assign mfip_id = irqs_i[0] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h0 : \$mfip_id$128 ;
  assign \$mfip_id$128  = irqs_i[1] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h1 : \$mfip_id$127 ;
  assign \$mfip_id$127  = irqs_i[2] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h2 : \$mfip_id$126 ;
  assign \$mfip_id$126  = irqs_i[3] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h3 : \$mfip_id$125 ;
  assign \$mfip_id$125  = irqs_i[4] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h4 : \$mfip_id$124 ;
  assign \$mfip_id$124  = irqs_i[5] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h5 : \$mfip_id$123 ;
  assign \$mfip_id$123  = irqs_i[6] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h6 : \$mfip_id$122 ;
  assign \$mfip_id$122  = irqs_i[7] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h7 : \$mfip_id$121 ;
  assign \$mfip_id$121  = irqs_i[8] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h8 : \$mfip_id$120 ;
  assign \$mfip_id$120  = irqs_i[9] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h9 : \$mfip_id$119 ;
  assign \$mfip_id$119  = irqs_i[10] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'ha : \$mfip_id$118 ;
  assign \$mfip_id$118  = irqs_i[11] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'hb : { \$mfip_id$117 [3], \$mfip_id$117 [3], \$mfip_id$117 [1:0] };
  assign { \$mfip_id$117 [3], \$mfip_id$117 [1:0] } = irqs_i[12] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 3'h4 : { \$mfip_id$116 [3], \$mfip_id$116 [1:0] };
  assign { \$mfip_id$116 [3], \$mfip_id$116 [1:0] } = irqs_i[13] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 3'h5 : { \$mfip_id$115 [3], \$mfip_id$115 [3], \$mfip_id$115 [0] };
  assign { \$mfip_id$115 [3], \$mfip_id$115 [0] } = irqs_i[14] ? (* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" *) 2'h2 : { irqs_i[15], irqs_i[15] };
  assign \$load_err_prio$59  = store_err_q ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:242.9-242.31|rtl/cve2/cve2_controller.sv:241.16-245.10" *) 1'h0 : load_err_q;
  assign \$load_err_prio$62  = ebrk_insn ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:240.9-240.31|rtl/cve2/cve2_controller.sv:239.16-245.10" *) 1'h0 : \$load_err_prio$59 ;
  assign \$procmux$5239_Y  = ebrk_insn ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:240.9-240.31|rtl/cve2/cve2_controller.sv:239.16-245.10" *) 1'h0 : store_err_q;
  assign \$load_err_prio$66  = ecall_insn ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" *) 1'h0 : \$load_err_prio$62 ;
  assign \$procmux$5274_Y  = ecall_insn ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" *) 1'h0 : \$procmux$5239_Y ;
  assign \$ebrk_insn_prio$64  = ecall_insn ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" *) 1'h0 : ebrk_insn;
  assign \$load_err_prio$71  = illegal_insn_q ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" *) 1'h0 : \$load_err_prio$66 ;
  assign \$procmux$5310_Y  = illegal_insn_q ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" *) 1'h0 : \$procmux$5274_Y ;
  assign \$ebrk_insn_prio$69  = illegal_insn_q ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" *) 1'h0 : \$ebrk_insn_prio$64 ;
  assign \$ecall_insn_prio$68  = illegal_insn_q ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" *) 1'h0 : ecall_insn;
  assign load_err_prio = instr_fetch_err ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" *) 1'h0 : \$load_err_prio$71 ;
  assign store_err_prio = instr_fetch_err ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" *) 1'h0 : \$procmux$5310_Y ;
  assign ebrk_insn_prio = instr_fetch_err ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" *) 1'h0 : \$ebrk_insn_prio$69 ;
  assign ecall_insn_prio = instr_fetch_err ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" *) 1'h0 : \$ecall_insn_prio$68 ;
  assign illegal_insn_prio = instr_fetch_err ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" *) 1'h0 : illegal_insn_q;
  assign \$211 [0] = pc_id_i[0];
  assign \$auto$rtlil.cc:3092:Mux$1607 [0] = pc_id_i[0];
  assign { \$auto$wreduce.cc:514:run$16941 [3], \$auto$wreduce.cc:514:run$16941 [0] } = { 1'h0, \$auto$wreduce.cc:514:run$16941 [2] };
  assign { \$auto$wreduce.cc:514:run$16942 [3], \$auto$wreduce.cc:514:run$16942 [0] } = { 1'h0, \$auto$wreduce.cc:514:run$16942 [2] };
  assign { \$auto$wreduce.cc:514:run$16943 [6:3], \$auto$wreduce.cc:514:run$16943 [1:0] } = 6'h23;
  assign { \$auto$wreduce.cc:514:run$16944 [6:4], \$auto$wreduce.cc:514:run$16944 [1:0] } = 5'h13;
  assign \$auto$wreduce.cc:514:run$16945 [6:5] = 2'h2;
  assign \$auto$wreduce.cc:514:run$16946 [6] = 1'h1;
  assign { \$auto$wreduce.cc:514:run$16947 [6:2], \$auto$wreduce.cc:514:run$16947 [0] } = { 5'h00, \$auto$wreduce.cc:514:run$16947 [1] };
  assign \$auto$wreduce.cc:514:run$16948 [6:4] = 3'h0;
  assign \$auto$wreduce.cc:514:run$16949 [6:4] = 3'h0;
  assign \$ctrl_fsm_ns$147 [0] = \$ctrl_fsm_ns$147 [2];
  assign \$ctrl_fsm_ns$219 [1:0] = 2'h1;
  assign \$ctrl_fsm_ns$225 [1:0] = 2'h1;
  assign { \$ctrl_fsm_ns$239 [3], \$ctrl_fsm_ns$239 [0] } = { 1'h0, \$ctrl_fsm_ns$239 [2] };
  assign \$debug_cause_o$195 [0] = \$debug_cause_o$195 [1];
  assign \$mfip_id$115 [2:1] = { \$mfip_id$115 [3], \$mfip_id$115 [3] };
  assign \$mfip_id$116 [2] = \$mfip_id$116 [3];
  assign \$mfip_id$117 [2] = \$mfip_id$117 [3];
  assign \$pc_mux_o$243 [0] = \$pc_mux_o$243 [1];
endmodule

(* src = "rtl/cve2/cve2_core.sv:15.8" *)
module \cve2_core$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex (clk_i, rst_ni, core_busy_o, boot_addr_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_be_o, data_addr_o, data_wdata_o, data_rdata_i, data_err_i, debug_req_i, fetch_enable_i
, test_en_i, hart_id_i, irq_software_i, irq_timer_i, irq_external_i, irq_fast_i, irq_nm_i, irq_pending_o, crash_dump_o);
  wire \$1 ;
  wire \$5 ;
  (* src = "rtl/cve2/cve2_core.sv:177.16" *)
  wire [31:0] alu_adder_result_ex;
  (* src = "rtl/cve2/cve2_core.sv:174.16" *)
  wire [31:0] alu_operand_a_ex;
  (* src = "rtl/cve2/cve2_core.sv:175.16" *)
  wire [31:0] alu_operand_b_ex;
  (* src = "rtl/cve2/cve2_core.sv:173.16" *)
  wire [6:0] alu_operator_ex;
  (* src = "rtl/cve2/cve2_core.sv:36.40" *)
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  (* src = "rtl/cve2/cve2_core.sv:146.16" *)
  wire branch_decision;
  (* src = "rtl/cve2/cve2_core.sv:145.16" *)
  wire [31:0] branch_target_ex;
  (* src = "rtl/cve2/cve2_core.sv:30.40" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_core.sv:106.40" *)
  output core_busy_o;
  wire core_busy_o;
  (* src = "rtl/cve2/cve2_core.sv:67.40" *)
  output [127:0] crash_dump_o;
  wire [127:0] crash_dump_o;
  (* src = "rtl/cve2/cve2_core.sv:191.16" *)
  wire csr_access;
  (* src = "rtl/cve2/cve2_core.sv:194.16" *)
  wire [11:0] csr_addr;
  (* src = "rtl/cve2/cve2_core.sv:226.26" *)
  wire [31:0] csr_depc;
  (* src = "rtl/cve2/cve2_core.sv:226.16" *)
  wire [31:0] csr_mepc;
  (* src = "rtl/cve2/cve2_core.sv:225.16" *)
  wire csr_mstatus_mie;
  (* src = "rtl/cve2/cve2_core.sv:243.16" *)
  wire csr_mstatus_tw;
  (* src = "rtl/cve2/cve2_core.sv:242.16" *)
  wire [31:0] csr_mtval;
  (* src = "rtl/cve2/cve2_core.sv:241.16" *)
  wire [31:0] csr_mtvec;
  (* src = "rtl/cve2/cve2_core.sv:240.16" *)
  wire csr_mtvec_init;
  (* src = "rtl/cve2/cve2_core.sv:192.16" *)
  wire [1:0] csr_op;
  (* src = "rtl/cve2/cve2_core.sv:193.16" *)
  wire csr_op_en;
  (* src = "rtl/cve2/cve2_core.sv:229.17" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135" *)
  wire [135:0] csr_pmp_addr;
  (* src = "rtl/cve2/cve2_core.sv:230.17" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23" *)
  wire [23:0] csr_pmp_cfg;
  (* src = "rtl/cve2/cve2_core.sv:231.17" *)
  (* unused_bits = "0 1 2" *)
  wire [2:0] csr_pmp_mseccfg;
  (* src = "rtl/cve2/cve2_core.sv:195.16" *)
  wire [31:0] csr_rdata;
  (* src = "rtl/cve2/cve2_core.sv:238.16" *)
  wire csr_restore_dret_id;
  (* src = "rtl/cve2/cve2_core.sv:237.16" *)
  wire csr_restore_mret_id;
  (* src = "rtl/cve2/cve2_core.sv:239.16" *)
  wire csr_save_cause;
  (* src = "rtl/cve2/cve2_core.sv:236.16" *)
  wire csr_save_id;
  (* src = "rtl/cve2/cve2_core.sv:235.16" *)
  wire csr_save_if;
  (* src = "rtl/cve2/cve2_core.sv:149.16" *)
  wire ctrl_busy;
  (* src = "rtl/cve2/cve2_core.sv:52.40" *)
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  (* src = "rtl/cve2/cve2_core.sv:51.40" *)
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  (* src = "rtl/cve2/cve2_core.sv:55.40" *)
  input data_err_i;
  wire data_err_i;
  (* src = "rtl/cve2/cve2_core.sv:48.40" *)
  input data_gnt_i;
  wire data_gnt_i;
  (* src = "rtl/cve2/cve2_core.sv:54.40" *)
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  (* src = "rtl/cve2/cve2_core.sv:47.40" *)
  output data_req_o;
  wire data_req_o;
  (* src = "rtl/cve2/cve2_core.sv:49.40" *)
  input data_rvalid_i;
  wire data_rvalid_i;
  (* src = "rtl/cve2/cve2_core.sv:53.40" *)
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  (* src = "rtl/cve2/cve2_core.sv:50.40" *)
  output data_we_o;
  wire data_we_o;
  (* src = "rtl/cve2/cve2_core.sv:249.16" *)
  wire [2:0] debug_cause;
  (* src = "rtl/cve2/cve2_core.sv:250.16" *)
  wire debug_csr_save;
  (* src = "rtl/cve2/cve2_core.sv:252.16" *)
  wire debug_ebreakm;
  (* src = "rtl/cve2/cve2_core.sv:253.16" *)
  wire debug_ebreaku;
  (* src = "rtl/cve2/cve2_core.sv:248.16" *)
  wire debug_mode;
  (* src = "rtl/cve2/cve2_core.sv:66.40" *)
  input debug_req_i;
  wire debug_req_i;
  (* src = "rtl/cve2/cve2_core.sv:251.16" *)
  wire debug_single_step;
  (* src = "rtl/cve2/cve2_core.sv:182.16" *)
  wire div_en_ex;
  (* src = "rtl/cve2/cve2_core.sv:184.16" *)
  wire div_sel_ex;
  (* src = "rtl/cve2/cve2_core.sv:220.16" *)
  wire en_wb;
  (* src = "rtl/cve2/cve2_core.sv:210.16" *)
  wire ex_valid;
  (* src = "rtl/cve2/cve2_core.sv:135.16" *)
  wire [6:0] exc_cause;
  (* src = "rtl/cve2/cve2_core.sv:134.16" *)
  wire [1:0] exc_pc_mux_id;
  (* src = "rtl/cve2/cve2_core.sv:105.40" *)
  input fetch_enable_i;
  wire fetch_enable_i;
  (* src = "rtl/cve2/cve2_core.sv:798.16" *)
  (* unused_bits = "0 1" *)
  wire [1:0] \g_no_pmp.unused_priv_lvl_ls ;
  (* src = "rtl/cve2/cve2_core.sv:35.40" *)
  input [31:0] hart_id_i;
  wire [31:0] hart_id_i;
  (* src = "rtl/cve2/cve2_core.sv:209.16" *)
  wire id_in_ready;
  (* src = "rtl/cve2/cve2_core.sv:150.16" *)
  wire if_busy;
  (* src = "rtl/cve2/cve2_core.sv:123.16" *)
  wire illegal_c_insn_id;
  (* src = "rtl/cve2/cve2_core.sv:197.16" *)
  wire illegal_csr_insn_id;
  (* src = "rtl/cve2/cve2_core.sv:273.16" *)
  (* unused_bits = "0" *)
  wire illegal_insn_id;
  (* src = "rtl/cve2/cve2_core.sv:126.16" *)
  wire [67:0] imd_val_d_ex;
  (* src = "rtl/cve2/cve2_core.sv:127.16" *)
  wire [67:0] imd_val_q_ex;
  (* src = "rtl/cve2/cve2_core.sv:128.16" *)
  wire [1:0] imd_val_we_ex;
  (* src = "rtl/cve2/cve2_core.sv:42.40" *)
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  (* src = "rtl/cve2/cve2_core.sv:44.40" *)
  input instr_err_i;
  wire instr_err_i;
  (* src = "rtl/cve2/cve2_core.sv:121.16" *)
  wire instr_fetch_err;
  (* src = "rtl/cve2/cve2_core.sv:122.16" *)
  wire instr_fetch_err_plus2;
  (* src = "rtl/cve2/cve2_core.sv:130.16" *)
  wire instr_first_cycle_id;
  (* src = "rtl/cve2/cve2_core.sv:40.40" *)
  input instr_gnt_i;
  wire instr_gnt_i;
  (* src = "rtl/cve2/cve2_core.sv:258.16" *)
  (* unused_bits = "0" *)
  wire instr_id_done;
  (* src = "rtl/cve2/cve2_core.sv:119.16" *)
  wire instr_is_compressed_id;
  (* src = "rtl/cve2/cve2_core.sv:114.16" *)
  (* unused_bits = "0" *)
  wire instr_new_id;
  (* src = "rtl/cve2/cve2_core.sv:120.16" *)
  wire instr_perf_count_id;
  (* src = "rtl/cve2/cve2_core.sv:116.16" *)
  wire [31:0] instr_rdata_alu_id;
  (* src = "rtl/cve2/cve2_core.sv:118.16" *)
  wire [15:0] instr_rdata_c_id;
  (* src = "rtl/cve2/cve2_core.sv:43.40" *)
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  (* src = "rtl/cve2/cve2_core.sv:115.16" *)
  wire [31:0] instr_rdata_id;
  (* src = "rtl/cve2/cve2_core.sv:217.16" *)
  wire instr_req_gated;
  (* src = "rtl/cve2/cve2_core.sv:39.40" *)
  output instr_req_o;
  wire instr_req_o;
  (* src = "rtl/cve2/cve2_core.sv:41.40" *)
  input instr_rvalid_i;
  wire instr_rvalid_i;
  (* src = "rtl/cve2/cve2_core.sv:131.16" *)
  wire instr_valid_clear;
  (* src = "rtl/cve2/cve2_core.sv:113.16" *)
  wire instr_valid_id;
  (* src = "rtl/cve2/cve2_core.sv:60.40" *)
  input irq_external_i;
  wire irq_external_i;
  (* src = "rtl/cve2/cve2_core.sv:61.40" *)
  input [15:0] irq_fast_i;
  wire [15:0] irq_fast_i;
  (* src = "rtl/cve2/cve2_core.sv:62.40" *)
  input irq_nm_i;
  wire irq_nm_i;
  (* src = "rtl/cve2/cve2_core.sv:63.40" *)
  output irq_pending_o;
  wire irq_pending_o;
  (* src = "rtl/cve2/cve2_core.sv:58.40" *)
  input irq_software_i;
  wire irq_software_i;
  (* src = "rtl/cve2/cve2_core.sv:59.40" *)
  input irq_timer_i;
  wire irq_timer_i;
  (* src = "rtl/cve2/cve2_core.sv:224.16" *)
  wire [18:0] irqs;
  (* src = "rtl/cve2/cve2_core.sv:141.16" *)
  wire lsu_addr_incr_req;
  (* src = "rtl/cve2/cve2_core.sv:142.16" *)
  wire [31:0] lsu_addr_last;
  (* src = "rtl/cve2/cve2_core.sv:151.16" *)
  wire lsu_busy;
  (* src = "rtl/cve2/cve2_core.sv:137.16" *)
  wire lsu_load_err;
  (* src = "rtl/cve2/cve2_core.sv:205.16" *)
  wire lsu_req;
  (* src = "rtl/cve2/cve2_core.sv:213.16" *)
  wire lsu_resp_err;
  (* src = "rtl/cve2/cve2_core.sv:212.16" *)
  wire lsu_resp_valid;
  (* src = "rtl/cve2/cve2_core.sv:204.16" *)
  wire lsu_sign_ext;
  (* src = "rtl/cve2/cve2_core.sv:138.16" *)
  wire lsu_store_err;
  (* src = "rtl/cve2/cve2_core.sv:203.16" *)
  wire [1:0] lsu_type;
  (* src = "rtl/cve2/cve2_core.sv:206.16" *)
  wire [31:0] lsu_wdata;
  (* src = "rtl/cve2/cve2_core.sv:202.16" *)
  wire lsu_we;
  (* src = "rtl/cve2/cve2_core.sv:181.16" *)
  wire mult_en_ex;
  (* src = "rtl/cve2/cve2_core.sv:183.16" *)
  wire mult_sel_ex;
  (* src = "rtl/cve2/cve2_core.sv:187.16" *)
  wire [31:0] multdiv_operand_a_ex;
  (* src = "rtl/cve2/cve2_core.sv:188.16" *)
  wire [31:0] multdiv_operand_b_ex;
  (* src = "rtl/cve2/cve2_core.sv:185.16" *)
  wire [1:0] multdiv_operator_ex;
  (* src = "rtl/cve2/cve2_core.sv:186.16" *)
  wire [1:0] multdiv_signed_mode_ex;
  (* src = "rtl/cve2/cve2_core.sv:223.16" *)
  wire nmi_mode;
  (* src = "rtl/cve2/cve2_core.sv:125.16" *)
  wire [31:0] pc_id;
  (* src = "rtl/cve2/cve2_core.sv:124.16" *)
  wire [31:0] pc_if;
  (* src = "rtl/cve2/cve2_core.sv:133.16" *)
  wire [2:0] pc_mux_id;
  (* src = "rtl/cve2/cve2_core.sv:132.16" *)
  wire pc_set;
  (* src = "rtl/cve2/cve2_core.sv:267.16" *)
  wire perf_branch;
  (* src = "rtl/cve2/cve2_core.sv:265.16" *)
  wire perf_div_wait;
  (* src = "rtl/cve2/cve2_core.sv:263.16" *)
  wire perf_dside_wait;
  (* src = "rtl/cve2/cve2_core.sv:261.16" *)
  wire perf_instr_ret_compressed_wb;
  (* src = "rtl/cve2/cve2_core.sv:260.16" *)
  wire perf_instr_ret_wb;
  (* src = "rtl/cve2/cve2_core.sv:262.16" *)
  wire perf_iside_wait;
  (* src = "rtl/cve2/cve2_core.sv:266.16" *)
  wire perf_jump;
  (* src = "rtl/cve2/cve2_core.sv:269.16" *)
  wire perf_load;
  (* src = "rtl/cve2/cve2_core.sv:270.16" *)
  wire perf_store;
  (* src = "rtl/cve2/cve2_core.sv:268.16" *)
  wire perf_tbranch;
  (* src = "rtl/cve2/cve2_core.sv:264.16" *)
  wire perf_wfi_wait;
  (* src = "rtl/cve2/cve2_core.sv:244.16" *)
  wire [1:0] priv_mode_id;
  (* src = "rtl/cve2/cve2_core.sv:178.16" *)
  wire [31:0] result_ex;
  (* src = "rtl/cve2/cve2_core.sv:154.16" *)
  wire [4:0] rf_raddr_a;
  (* src = "rtl/cve2/cve2_core.sv:156.16" *)
  wire [4:0] rf_raddr_b;
  (* src = "rtl/cve2/cve2_core.sv:155.16" *)
  wire [31:0] rf_rdata_a;
  (* src = "rtl/cve2/cve2_core.sv:157.16" *)
  wire [31:0] rf_rdata_b;
  (* src = "rtl/cve2/cve2_core.sv:158.16" *)
  (* unused_bits = "0" *)
  wire rf_ren_a;
  (* src = "rtl/cve2/cve2_core.sv:159.16" *)
  (* unused_bits = "0" *)
  wire rf_ren_b;
  (* src = "rtl/cve2/cve2_core.sv:168.16" *)
  wire [4:0] rf_waddr_id;
  (* src = "rtl/cve2/cve2_core.sv:160.16" *)
  wire [4:0] rf_waddr_wb;
  (* src = "rtl/cve2/cve2_core.sv:169.16" *)
  wire [31:0] rf_wdata_id;
  (* src = "rtl/cve2/cve2_core.sv:164.16" *)
  wire [31:0] rf_wdata_lsu;
  (* src = "rtl/cve2/cve2_core.sv:161.16" *)
  wire [31:0] rf_wdata_wb;
  (* src = "rtl/cve2/cve2_core.sv:170.16" *)
  wire rf_we_id;
  (* src = "rtl/cve2/cve2_core.sv:166.16" *)
  wire rf_we_lsu;
  (* src = "rtl/cve2/cve2_core.sv:165.16" *)
  wire rf_we_wb;
  (* src = "rtl/cve2/cve2_core.sv:31.40" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_core.sv:33.40" *)
  input test_en_i;
  wire test_en_i;
  (* src = "rtl/cve2/cve2_core.sv:254.16" *)
  wire trigger_match;
  assign \$1  = ctrl_busy | if_busy;
  assign lsu_resp_err = lsu_load_err | lsu_store_err;
  assign csr_addr = csr_access ? alu_operand_b_ex[11:0] : 12'h000;
  assign core_busy_o = \$1  | lsu_busy;
  assign \$5  = ~ instr_valid_id;
  assign perf_iside_wait = id_in_ready & \$5 ;
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/cve2/cve2_core.sv:680.5" *)
  \cve2_cs_registers$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i  cs_registers_i (
    .boot_addr_i(boot_addr_i),
    .branch_i(perf_branch),
    .branch_taken_i(perf_tbranch),
    .clk_i(clk_i),
    .csr_access_i(csr_access),
    .csr_addr_i(csr_addr),
    .csr_depc_o(csr_depc),
    .csr_mcause_i(exc_cause),
    .csr_mepc_o(csr_mepc),
    .csr_mstatus_mie_o(csr_mstatus_mie),
    .csr_mstatus_tw_o(csr_mstatus_tw),
    .csr_mtval_i(csr_mtval),
    .csr_mtvec_init_i(csr_mtvec_init),
    .csr_mtvec_o(csr_mtvec),
    .csr_op_en_i(csr_op_en),
    .csr_op_i(csr_op),
    .csr_pmp_addr_o(csr_pmp_addr),
    .csr_pmp_cfg_o(csr_pmp_cfg),
    .csr_pmp_mseccfg_o(csr_pmp_mseccfg),
    .csr_rdata_o(csr_rdata),
    .csr_restore_dret_i(csr_restore_dret_id),
    .csr_restore_mret_i(csr_restore_mret_id),
    .csr_save_cause_i(csr_save_cause),
    .csr_save_id_i(csr_save_id),
    .csr_save_if_i(csr_save_if),
    .csr_wdata_i(alu_operand_a_ex),
    .debug_cause_i(debug_cause),
    .debug_csr_save_i(debug_csr_save),
    .debug_ebreakm_o(debug_ebreakm),
    .debug_ebreaku_o(debug_ebreaku),
    .debug_mode_i(debug_mode),
    .debug_single_step_o(debug_single_step),
    .div_wait_i(perf_div_wait),
    .dside_wait_i(perf_dside_wait),
    .hart_id_i(hart_id_i),
    .illegal_csr_insn_o(illegal_csr_insn_id),
    .instr_ret_compressed_i(perf_instr_ret_compressed_wb),
    .instr_ret_i(perf_instr_ret_wb),
    .irq_external_i(irq_external_i),
    .irq_fast_i(irq_fast_i),
    .irq_pending_o(irq_pending_o),
    .irq_software_i(irq_software_i),
    .irq_timer_i(irq_timer_i),
    .irqs_o(irqs),
    .iside_wait_i(perf_iside_wait),
    .jump_i(perf_jump),
    .mem_load_i(perf_load),
    .mem_store_i(perf_store),
    .nmi_mode_i(nmi_mode),
    .pc_id_i(pc_id),
    .pc_if_i(pc_if),
    .priv_mode_id_o(priv_mode_id),
    .priv_mode_lsu_o(\g_no_pmp.unused_priv_lvl_ls ),
    .rst_ni(rst_ni),
    .trigger_match_o(trigger_match),
    .wfi_wait_i(perf_wfi_wait)
  );
  (* src = "rtl/cve2/cve2_core.sv:490.5" *)
  \cve2_ex_block$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.ex_block_i  ex_block_i (
    .alu_adder_result_ex_o(alu_adder_result_ex),
    .alu_instr_first_cycle_i(instr_first_cycle_id),
    .alu_operand_a_i(alu_operand_a_ex),
    .alu_operand_b_i(alu_operand_b_ex),
    .alu_operator_i(alu_operator_ex),
    .branch_decision_o(branch_decision),
    .branch_target_o(branch_target_ex),
    .clk_i(clk_i),
    .div_en_i(div_en_ex),
    .div_sel_i(div_sel_ex),
    .ex_valid_o(ex_valid),
    .imd_val_d_o(imd_val_d_ex),
    .imd_val_q_i(imd_val_q_ex),
    .imd_val_we_o(imd_val_we_ex),
    .mult_en_i(mult_en_ex),
    .mult_sel_i(mult_sel_ex),
    .multdiv_operand_a_i(multdiv_operand_a_ex),
    .multdiv_operand_b_i(multdiv_operand_b_ex),
    .multdiv_operator_i(multdiv_operator_ex),
    .multdiv_signed_mode_i(multdiv_signed_mode_ex),
    .result_ex_o(result_ex),
    .rst_ni(rst_ni)
  );
  (* src = "rtl/cve2/cve2_core.sv:357.5" *)
  \cve2_id_stage$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i  id_stage_i (
    .alu_operand_a_ex_o(alu_operand_a_ex),
    .alu_operand_b_ex_o(alu_operand_b_ex),
    .alu_operator_ex_o(alu_operator_ex),
    .branch_decision_i(branch_decision),
    .clk_i(clk_i),
    .csr_access_o(csr_access),
    .csr_mstatus_mie_i(csr_mstatus_mie),
    .csr_mstatus_tw_i(csr_mstatus_tw),
    .csr_mtval_o(csr_mtval),
    .csr_op_en_o(csr_op_en),
    .csr_op_o(csr_op),
    .csr_rdata_i(csr_rdata),
    .csr_restore_dret_id_o(csr_restore_dret_id),
    .csr_restore_mret_id_o(csr_restore_mret_id),
    .csr_save_cause_o(csr_save_cause),
    .csr_save_id_o(csr_save_id),
    .csr_save_if_o(csr_save_if),
    .ctrl_busy_o(ctrl_busy),
    .debug_cause_o(debug_cause),
    .debug_csr_save_o(debug_csr_save),
    .debug_ebreakm_i(debug_ebreakm),
    .debug_ebreaku_i(debug_ebreaku),
    .debug_mode_o(debug_mode),
    .debug_req_i(debug_req_i),
    .debug_single_step_i(debug_single_step),
    .div_en_ex_o(div_en_ex),
    .div_sel_ex_o(div_sel_ex),
    .en_wb_o(en_wb),
    .ex_valid_i(ex_valid),
    .exc_cause_o(exc_cause),
    .exc_pc_mux_o(exc_pc_mux_id),
    .fetch_enable_i(fetch_enable_i),
    .id_in_ready_o(id_in_ready),
    .illegal_c_insn_i(illegal_c_insn_id),
    .illegal_csr_insn_i(illegal_csr_insn_id),
    .illegal_insn_o(illegal_insn_id),
    .imd_val_d_ex_i(imd_val_d_ex),
    .imd_val_q_ex_o(imd_val_q_ex),
    .imd_val_we_ex_i(imd_val_we_ex),
    .instr_fetch_err_i(instr_fetch_err),
    .instr_fetch_err_plus2_i(instr_fetch_err_plus2),
    .instr_first_cycle_id_o(instr_first_cycle_id),
    .instr_id_done_o(instr_id_done),
    .instr_is_compressed_i(instr_is_compressed_id),
    .instr_perf_count_id_o(instr_perf_count_id),
    .instr_rdata_alu_i(instr_rdata_alu_id),
    .instr_rdata_c_i(instr_rdata_c_id),
    .instr_rdata_i(instr_rdata_id),
    .instr_req_o(instr_req_gated),
    .instr_valid_clear_o(instr_valid_clear),
    .instr_valid_i(instr_valid_id),
    .irq_nm_i(irq_nm_i),
    .irq_pending_i(irq_pending_o),
    .irqs_i(irqs),
    .lsu_addr_incr_req_i(lsu_addr_incr_req),
    .lsu_addr_last_i(lsu_addr_last),
    .lsu_load_err_i(lsu_load_err),
    .lsu_req_o(lsu_req),
    .lsu_resp_valid_i(lsu_resp_valid),
    .lsu_sign_ext_o(lsu_sign_ext),
    .lsu_store_err_i(lsu_store_err),
    .lsu_type_o(lsu_type),
    .lsu_wdata_o(lsu_wdata),
    .lsu_we_o(lsu_we),
    .mult_en_ex_o(mult_en_ex),
    .mult_sel_ex_o(mult_sel_ex),
    .multdiv_operand_a_ex_o(multdiv_operand_a_ex),
    .multdiv_operand_b_ex_o(multdiv_operand_b_ex),
    .multdiv_operator_ex_o(multdiv_operator_ex),
    .multdiv_signed_mode_ex_o(multdiv_signed_mode_ex),
    .nmi_mode_o(nmi_mode),
    .pc_id_i(pc_id),
    .pc_mux_o(pc_mux_id),
    .pc_set_o(pc_set),
    .perf_branch_o(perf_branch),
    .perf_div_wait_o(perf_div_wait),
    .perf_dside_wait_o(perf_dside_wait),
    .perf_jump_o(perf_jump),
    .perf_tbranch_o(perf_tbranch),
    .perf_wfi_wait_o(perf_wfi_wait),
    .priv_mode_i(priv_mode_id),
    .result_ex_i(result_ex),
    .rf_raddr_a_o(rf_raddr_a),
    .rf_raddr_b_o(rf_raddr_b),
    .rf_rdata_a_i(rf_rdata_a),
    .rf_rdata_b_i(rf_rdata_b),
    .rf_ren_a_o(rf_ren_a),
    .rf_ren_b_o(rf_ren_b),
    .rf_waddr_id_o(rf_waddr_id),
    .rf_wdata_id_o(rf_wdata_id),
    .rf_we_id_o(rf_we_id),
    .rst_ni(rst_ni),
    .trigger_match_i(trigger_match)
  );
  (* src = "rtl/cve2/cve2_core.sv:290.5" *)
  \cve2_if_stage$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i  if_stage_i (
    .boot_addr_i(boot_addr_i),
    .branch_target_ex_i(branch_target_ex),
    .clk_i(clk_i),
    .csr_depc_i(csr_depc),
    .csr_mepc_i(csr_mepc),
    .csr_mtvec_i(csr_mtvec),
    .csr_mtvec_init_o(csr_mtvec_init),
    .exc_cause(exc_cause),
    .exc_pc_mux_i(exc_pc_mux_id),
    .id_in_ready_i(id_in_ready),
    .if_busy_o(if_busy),
    .illegal_c_insn_id_o(illegal_c_insn_id),
    .instr_addr_o(instr_addr_o),
    .instr_err_i(instr_err_i),
    .instr_fetch_err_o(instr_fetch_err),
    .instr_fetch_err_plus2_o(instr_fetch_err_plus2),
    .instr_gnt_i(instr_gnt_i),
    .instr_is_compressed_id_o(instr_is_compressed_id),
    .instr_new_id_o(instr_new_id),
    .instr_rdata_alu_id_o(instr_rdata_alu_id),
    .instr_rdata_c_id_o(instr_rdata_c_id),
    .instr_rdata_i(instr_rdata_i),
    .instr_rdata_id_o(instr_rdata_id),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .instr_valid_clear_i(instr_valid_clear),
    .instr_valid_id_o(instr_valid_id),
    .pc_id_o(pc_id),
    .pc_if_o(pc_if),
    .pc_mux_i(pc_mux_id),
    .pc_set_i(pc_set),
    .pmp_err_if_i(1'h0),
    .pmp_err_if_plus2_i(1'h0),
    .req_i(instr_req_gated),
    .rst_ni(rst_ni)
  );
  (* src = "rtl/cve2/cve2_core.sv:532.24" *)
  \cve2_load_store_unit$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.load_store_unit_i  load_store_unit_i (
    .adder_result_ex_i(alu_adder_result_ex),
    .addr_incr_req_o(lsu_addr_incr_req),
    .addr_last_o(lsu_addr_last),
    .busy_o(lsu_busy),
    .clk_i(clk_i),
    .data_addr_o(data_addr_o),
    .data_be_o(data_be_o),
    .data_err_i(data_err_i),
    .data_gnt_i(data_gnt_i),
    .data_pmp_err_i(1'h0),
    .data_rdata_i(data_rdata_i),
    .data_req_o(data_req_o),
    .data_rvalid_i(data_rvalid_i),
    .data_wdata_o(data_wdata_o),
    .data_we_o(data_we_o),
    .load_err_o(lsu_load_err),
    .lsu_rdata_o(rf_wdata_lsu),
    .lsu_rdata_valid_o(rf_we_lsu),
    .lsu_req_i(lsu_req),
    .lsu_resp_valid_o(lsu_resp_valid),
    .lsu_sign_ext_i(lsu_sign_ext),
    .lsu_type_i(lsu_type),
    .lsu_wdata_i(lsu_wdata),
    .lsu_we_i(lsu_we),
    .perf_load_o(perf_load),
    .perf_store_o(perf_store),
    .rst_ni(rst_ni),
    .store_err_o(lsu_store_err)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/cve2/cve2_core.sv:646.5" *)
  \cve2_register_file_ff$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.register_file_i  register_file_i (
    .clk_i(clk_i),
    .raddr_a_i(rf_raddr_a),
    .raddr_b_i(rf_raddr_b),
    .rdata_a_o(rf_rdata_a),
    .rdata_b_o(rf_rdata_b),
    .rst_ni(rst_ni),
    .test_en_i(test_en_i),
    .waddr_a_i(rf_waddr_wb),
    .wdata_a_i(rf_wdata_wb),
    .we_a_i(rf_we_wb)
  );
  (* src = "rtl/cve2/cve2_core.sv:578.5" *)
  \cve2_wb$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.wb_i  wb_i (
    .clk_i(clk_i),
    .en_wb_i(en_wb),
    .instr_is_compressed_id_i(instr_is_compressed_id),
    .instr_perf_count_id_i(instr_perf_count_id),
    .lsu_resp_err_i(lsu_resp_err),
    .lsu_resp_valid_i(lsu_resp_valid),
    .perf_instr_ret_compressed_wb_o(perf_instr_ret_compressed_wb),
    .perf_instr_ret_wb_o(perf_instr_ret_wb),
    .rf_waddr_id_i(rf_waddr_id),
    .rf_waddr_wb_o(rf_waddr_wb),
    .rf_wdata_id_i(rf_wdata_id),
    .rf_wdata_lsu_i(rf_wdata_lsu),
    .rf_wdata_wb_o(rf_wdata_wb),
    .rf_we_id_i(rf_we_id),
    .rf_we_lsu_i(rf_we_lsu),
    .rf_we_wb_o(rf_we_wb),
    .rst_ni(rst_ni)
  );
  assign crash_dump_o = { pc_id, pc_if, lsu_addr_last, csr_mepc };
endmodule

(* src = "rtl/cve2/cve2_counter.sv:1.8" *)
module \cve2_counter$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.mcycle_counter_i (clk_i, rst_ni, counter_inc_i, counterh_we_i, counter_we_i, counter_val_i, counter_val_o, counter_val_upd_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17540 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17542 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17549 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17544 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17551 ;
  (* src = "rtl/cve2/cve2_counter.sv:8.23" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_counter.sv:23.28" *)
  wire [63:0] counter_d;
  (* src = "rtl/cve2/cve2_counter.sv:11.23" *)
  input counter_inc_i;
  wire counter_inc_i;
  (* src = "rtl/cve2/cve2_counter.sv:21.28" *)
  wire [63:0] counter_load;
  (* src = "rtl/cve2/cve2_counter.sv:20.28" *)
  wire [63:0] counter_upd;
  (* src = "rtl/cve2/cve2_counter.sv:14.23" *)
  input [31:0] counter_val_i;
  wire [31:0] counter_val_i;
  (* src = "rtl/cve2/cve2_counter.sv:15.23" *)
  output [63:0] counter_val_o;
  reg [63:0] counter_val_o;
  (* src = "rtl/cve2/cve2_counter.sv:16.23" *)
  output [63:0] counter_val_upd_o;
  wire [63:0] counter_val_upd_o;
  (* src = "rtl/cve2/cve2_counter.sv:13.23" *)
  input counter_we_i;
  wire counter_we_i;
  (* src = "rtl/cve2/cve2_counter.sv:12.23" *)
  input counterh_we_i;
  wire counterh_we_i;
  (* src = "rtl/cve2/cve2_counter.sv:9.23" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_counter.sv:22.28" *)
  wire we;
  assign counter_upd = counter_val_o + 1'h1;
  assign we = counter_we_i | counterh_we_i;
  (* src = "rtl/cve2/cve2_counter.sv:63.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_val_o[63:32] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17544 ) counter_val_o[63:32] <= counter_d[63:32];
  (* src = "rtl/cve2/cve2_counter.sv:63.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_val_o[31:0] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17551 ) counter_val_o[31:0] <= counter_d[31:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17540  = | { counter_inc_i, we };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17542  = { counterh_we_i, we } != 2'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17549  = { counterh_we_i, we } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17544  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17542 , \$auto$opt_dff.cc:194:make_patterns_logic$17540  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17551  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17549 , \$auto$opt_dff.cc:194:make_patterns_logic$17540  };
  assign counter_d = we ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_counter.sv:41.7-41.50|rtl/cve2/cve2_counter.sv:40.5-46.8" *) counter_load : counter_upd;
  assign counter_load = counterh_we_i ? (* src = "rtl/cve2/cve2_counter.sv:34.24-37.8|rtl/cve2/cve2_counter.sv:34.5-37.8" *) { counter_val_i, 32'hxxxxxxxx } : { 32'hxxxxxxxx, counter_val_i };
  assign counter_val_upd_o = 64'h0000000000000000;
endmodule

(* src = "rtl/cve2/cve2_counter.sv:1.8" *)
module \cve2_counter$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.minstret_counter_i (clk_i, rst_ni, counter_inc_i, counterh_we_i, counter_we_i, counter_val_i, counter_val_o, counter_val_upd_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17554 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17556 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17563 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17558 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17565 ;
  (* src = "rtl/cve2/cve2_counter.sv:8.23" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_counter.sv:23.28" *)
  wire [63:0] counter_d;
  (* src = "rtl/cve2/cve2_counter.sv:11.23" *)
  input counter_inc_i;
  wire counter_inc_i;
  (* src = "rtl/cve2/cve2_counter.sv:21.28" *)
  wire [63:0] counter_load;
  (* src = "rtl/cve2/cve2_counter.sv:14.23" *)
  input [31:0] counter_val_i;
  wire [31:0] counter_val_i;
  (* src = "rtl/cve2/cve2_counter.sv:15.23" *)
  output [63:0] counter_val_o;
  reg [63:0] counter_val_o;
  (* src = "rtl/cve2/cve2_counter.sv:16.23" *)
  output [63:0] counter_val_upd_o;
  wire [63:0] counter_val_upd_o;
  (* src = "rtl/cve2/cve2_counter.sv:13.23" *)
  input counter_we_i;
  wire counter_we_i;
  (* src = "rtl/cve2/cve2_counter.sv:12.23" *)
  input counterh_we_i;
  wire counterh_we_i;
  (* src = "rtl/cve2/cve2_counter.sv:9.23" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_counter.sv:22.28" *)
  wire we;
  assign counter_val_upd_o = counter_val_o + 1'h1;
  assign we = counter_we_i | counterh_we_i;
  (* src = "rtl/cve2/cve2_counter.sv:63.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_val_o[63:32] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17558 ) counter_val_o[63:32] <= counter_d[63:32];
  (* src = "rtl/cve2/cve2_counter.sv:63.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_val_o[31:0] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17565 ) counter_val_o[31:0] <= counter_d[31:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17554  = | { counter_inc_i, we };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17556  = { counterh_we_i, we } != 2'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17563  = { counterh_we_i, we } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17558  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17556 , \$auto$opt_dff.cc:194:make_patterns_logic$17554  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17565  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17554 , \$auto$opt_dff.cc:194:make_patterns_logic$17563  };
  assign counter_d = we ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_counter.sv:41.7-41.50|rtl/cve2/cve2_counter.sv:40.5-46.8" *) counter_load : counter_val_upd_o;
  assign counter_load = counterh_we_i ? (* src = "rtl/cve2/cve2_counter.sv:34.24-37.8|rtl/cve2/cve2_counter.sv:34.5-37.8" *) { counter_val_i, 32'hxxxxxxxx } : { 32'hxxxxxxxx, counter_val_i };
endmodule

(* src = "rtl/cve2/cve2_cs_registers.sv:15.8" *)
module \cve2_cs_registers$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i (clk_i, rst_ni, boot_addr_i, hart_id_i, irq_software_i, irq_timer_i, irq_external_i, irq_fast_i, irq_pending_o, pc_id_i, priv_mode_id_o, priv_mode_lsu_o, csr_mstatus_tw_o, csr_mtvec_o, csr_mtvec_init_i, csr_access_i, csr_addr_i, csr_wdata_i, csr_op_i, csr_op_en_i, csr_rdata_o
, nmi_mode_i, irqs_o, csr_mstatus_mie_o, csr_mepc_o, csr_pmp_cfg_o, csr_pmp_addr_o, csr_pmp_mseccfg_o, debug_mode_i, debug_cause_i, debug_csr_save_i, csr_depc_o, debug_single_step_o, debug_ebreakm_o, debug_ebreaku_o, trigger_match_o, pc_if_i, csr_save_if_i, csr_save_id_i, csr_restore_mret_i, csr_restore_dret_i, csr_save_cause_i
, csr_mcause_i, csr_mtval_i, illegal_csr_insn_o, instr_ret_i, instr_ret_compressed_i, iside_wait_i, jump_i, branch_i, branch_taken_i, mem_load_i, mem_store_i, dside_wait_i, wfi_wait_i, div_wait_i);
  wire \$152 ;
  wire \$16 ;
  wire [31:0] \$181 ;
  wire [31:0] \$183 ;
  wire [31:0] \$185 ;
  wire \$192 ;
  wire \$194 ;
  wire \$208 ;
  wire \$212 ;
  wire \$214 ;
  wire \$219 ;
  wire \$221 ;
  wire \$225 ;
  wire \$227 ;
  wire \$229 ;
  wire \$231 ;
  wire \$241 ;
  wire \$245 ;
  wire \$248 ;
  wire \$3 ;
  wire \$66 ;
  wire \$68 ;
  wire \$7 ;
  wire \$70 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$9 ;
  wire [1023:0] \$auto$bmuxmap.cc:84:execute$18761 ;
  wire [511:0] \$auto$bmuxmap.cc:84:execute$18778 ;
  wire [255:0] \$auto$bmuxmap.cc:84:execute$18787 ;
  wire [127:0] \$auto$bmuxmap.cc:84:execute$18792 ;
  wire [63:0] \$auto$bmuxmap.cc:84:execute$18795 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17568 ;
  wire [4:0] \$auto$opt_expr.cc:205:group_cell_inputs$17123 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16804 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16806 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16808 ;
  wire \$auto$rtlil.cc:2964:ReduceBool$1003 ;
  (* unused_bits = "3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] \$auto$rtlil.cc:3004:And$16668 ;
  wire \$auto$rtlil.cc:3011:Eq$1000 ;
  wire \$auto$rtlil.cc:3011:Eq$1001 ;
  wire \$auto$rtlil.cc:3011:Eq$1002 ;
  wire \$auto$rtlil.cc:3011:Eq$1022 ;
  wire \$auto$rtlil.cc:3011:Eq$1023 ;
  wire \$auto$rtlil.cc:3011:Eq$1024 ;
  wire \$auto$rtlil.cc:3011:Eq$983 ;
  wire \$auto$rtlil.cc:3011:Eq$984 ;
  wire \$auto$rtlil.cc:3011:Eq$985 ;
  wire \$auto$rtlil.cc:3011:Eq$986 ;
  wire \$auto$rtlil.cc:3011:Eq$987 ;
  wire \$auto$rtlil.cc:3011:Eq$988 ;
  wire \$auto$rtlil.cc:3011:Eq$989 ;
  wire \$auto$rtlil.cc:3011:Eq$990 ;
  wire \$auto$rtlil.cc:3011:Eq$991 ;
  wire \$auto$rtlil.cc:3011:Eq$992 ;
  wire \$auto$rtlil.cc:3011:Eq$993 ;
  wire \$auto$rtlil.cc:3011:Eq$994 ;
  wire \$auto$rtlil.cc:3011:Eq$995 ;
  wire \$auto$rtlil.cc:3011:Eq$996 ;
  wire \$auto$rtlil.cc:3011:Eq$997 ;
  wire \$auto$rtlil.cc:3011:Eq$998 ;
  wire \$auto$rtlil.cc:3011:Eq$999 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$971 ;
  wire [63:0] \$auto$rtlil.cc:3092:Mux$976 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire [31:0] \$auto$wreduce.cc:514:run$16950 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire [31:0] \$auto$wreduce.cc:514:run$16951 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire [5:0] \$auto$wreduce.cc:514:run$16952 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire [31:0] \$dcsr_d$101 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire [31:0] \$dcsr_d$117 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire [1:0] \$dcsr_d[1:0]$145 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:560.11-562.14" *)
  wire [1:0] \$dcsr_d[1:0]$78 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire [2:0] \$dcsr_d[8:6]$146 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$dcsr_en$102 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire \$dcsr_en$118 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire \$dcsr_en$147 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire [31:0] \$depc_d$148 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$depc_en$103 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire \$depc_en$119 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire \$depc_en$149 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$dscratch0_en$104 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$dscratch1_en$105 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:626.9-634.16" *)
  wire [31:0] \$exception_pc$125 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *)
  wire \$illegal_csr$39 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire [6:0] \$mcause_d$132 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire [6:0] \$mcause_d$141 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *)
  wire [6:0] \$mcause_d$157 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire \$mcause_en$114 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire \$mcause_en$133 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire \$mcause_en$142 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *)
  wire \$mcause_en$158 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$mcause_en$98 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$mcountinhibit_we$106 ;
  wire [1:0] \$memory$auto$memory_bmux2rom.cc:63:execute$18542$rdmux[0][0][0]$b$18556 ;
  wire [1:0] \$memory$auto$memory_bmux2rom.cc:63:execute$18542$rdmux[0][1][1]$b$18562 ;
  wire [1:0] \$memory$auto$memory_bmux2rom.cc:63:execute$18542$rdmux[0][2][3]$b$18574 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire [31:0] \$mepc_d$130 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire [31:0] \$mepc_d$139 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *)
  wire [31:0] \$mepc_d$155 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire \$mepc_en$113 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire \$mepc_en$131 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire \$mepc_en$140 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *)
  wire \$mepc_en$156 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$mepc_en$97 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$mie_en$95 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$mscratch_en$96 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire \$mstack_en$150 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire [5:0] \$mstatus_d$93 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:676.9-678.12" *)
  wire \$mstatus_d[1]$153 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:534.11-536.14" *)
  wire [1:0] \$mstatus_d[3:2]$71 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *)
  wire [2:0] \$mstatus_d[4:2]$154 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire [3:0] \$mstatus_d[5:2]$128 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire [3:0] \$mstatus_d[5:2]$137 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire \$mstatus_en$110 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire \$mstatus_en$129 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire \$mstatus_en$138 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$mstatus_en$94 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire [31:0] \$mtval_d$134 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire [31:0] \$mtval_d$143 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire \$mtval_en$115 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire \$mtval_en$135 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire \$mtval_en$144 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$mtval_en$99 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$mtvec_en$100 ;
  wire \$procmux$11228_CMP ;
  wire [30:0] \$procmux$11725_CMP ;
  wire \$procmux$11725_CTRL ;
  wire [30:0] \$procmux$11731_CMP ;
  wire \$procmux$11731_CTRL ;
  wire \$procmux$11801_CMP ;
  wire \$procmux$12049_CMP ;
  wire \$procmux$12050_CMP ;
  wire \$procmux$12051_CMP ;
  wire \$procmux$12052_CMP ;
  wire [28:0] \$procmux$12058_CMP ;
  wire \$procmux$12058_CTRL ;
  wire \$procmux$12086_CMP ;
  wire \$procmux$12092_CMP ;
  wire \$procmux$12094_CMP ;
  wire [1:0] \$procmux$12095_CMP ;
  wire \$procmux$12096_CMP ;
  wire \$procmux$12098_CMP ;
  wire \$procmux$12099_CMP ;
  wire \$procmux$12100_CMP ;
  wire \$procmux$12101_CMP ;
  wire \$procmux$12102_CMP ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:43.32" *)
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:98.32" *)
  input branch_i;
  wire branch_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:99.32" *)
  input branch_taken_i;
  wire branch_taken_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:29.32" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:46.32" *)
  input csr_access_i;
  wire csr_access_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:47.32" *)
  input [11:0] csr_addr_i;
  wire [11:0] csr_addr_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:73.32" *)
  output [31:0] csr_depc_o;
  wire [31:0] csr_depc_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:88.32" *)
  input [6:0] csr_mcause_i;
  wire [6:0] csr_mcause_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:62.32" *)
  output [31:0] csr_mepc_o;
  wire [31:0] csr_mepc_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:61.32" *)
  output csr_mstatus_mie_o;
  wire csr_mstatus_mie_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:38.32" *)
  output csr_mstatus_tw_o;
  wire csr_mstatus_tw_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:89.32" *)
  input [31:0] csr_mtval_i;
  wire [31:0] csr_mtval_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:42.32" *)
  input csr_mtvec_init_i;
  wire csr_mtvec_init_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:41.32" *)
  output [31:0] csr_mtvec_o;
  wire [31:0] csr_mtvec_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:50.32" *)
  input csr_op_en_i;
  wire csr_op_en_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:49.32" *)
  input [1:0] csr_op_i;
  wire [1:0] csr_op_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:66.34" *)
  output [135:0] csr_pmp_addr_o;
  wire [135:0] csr_pmp_addr_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:65.34" *)
  output [23:0] csr_pmp_cfg_o;
  wire [23:0] csr_pmp_cfg_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:67.34" *)
  output [2:0] csr_pmp_mseccfg_o;
  wire [2:0] csr_pmp_mseccfg_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:51.32" *)
  output [31:0] csr_rdata_o;
  wire [31:0] csr_rdata_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:86.32" *)
  input csr_restore_dret_i;
  wire csr_restore_dret_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:85.32" *)
  input csr_restore_mret_i;
  wire csr_restore_mret_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:87.32" *)
  input csr_save_cause_i;
  wire csr_save_cause_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:84.32" *)
  input csr_save_id_i;
  wire csr_save_id_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:83.32" *)
  input csr_save_if_i;
  wire csr_save_if_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:48.32" *)
  input [31:0] csr_wdata_i;
  wire [31:0] csr_wdata_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:227.16" *)
  wire [31:0] csr_wdata_int;
  (* src = "rtl/cve2/cve2_cs_registers.sv:229.16" *)
  wire csr_we_int;
  (* src = "rtl/cve2/cve2_cs_registers.sv:230.16" *)
  wire csr_wr;
  (* src = "rtl/cve2/cve2_cs_registers.sv:180.24" *)
  wire [31:0] dcsr_d;
  (* src = "rtl/cve2/cve2_cs_registers.sv:181.16" *)
  wire dcsr_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:180.16" *)
  wire [31:0] dcsr_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:71.32" *)
  input [2:0] debug_cause_i;
  wire [2:0] debug_cause_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:72.32" *)
  input debug_csr_save_i;
  wire debug_csr_save_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:75.32" *)
  output debug_ebreakm_o;
  wire debug_ebreakm_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:76.32" *)
  output debug_ebreaku_o;
  wire debug_ebreaku_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:70.32" *)
  input debug_mode_i;
  wire debug_mode_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:74.32" *)
  output debug_single_step_o;
  wire debug_single_step_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:182.24" *)
  wire [31:0] depc_d;
  (* src = "rtl/cve2/cve2_cs_registers.sv:183.16" *)
  wire depc_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:104.32" *)
  input div_wait_i;
  wire div_wait_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:186.16" *)
  wire dscratch0_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:184.16" *)
  wire [31:0] dscratch0_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:186.30" *)
  wire dscratch1_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:185.16" *)
  wire [31:0] dscratch1_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:102.32" *)
  input dside_wait_i;
  wire dside_wait_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:1325.31" *)
  wire \gen_trigger_regs.selected_tmatch_control ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:1326.31" *)
  wire [31:0] \gen_trigger_regs.selected_tmatch_value ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:1330.31" *)
  wire \gen_trigger_regs.tmatch_control_we ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:1331.31" *)
  wire \gen_trigger_regs.tmatch_value_we ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:1320.31" *)
  wire \gen_trigger_regs.tselect_d ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:1320.42" *)
  wire \gen_trigger_regs.tselect_q ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:1329.31" *)
  wire \gen_trigger_regs.tselect_we ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:33.32" *)
  input [31:0] hart_id_i;
  wire [31:0] hart_id_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:233.16" *)
  wire illegal_csr;
  (* src = "rtl/cve2/cve2_cs_registers.sv:90.32" *)
  output illegal_csr_insn_o;
  wire illegal_csr_insn_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:234.16" *)
  wire illegal_csr_priv;
  (* src = "rtl/cve2/cve2_cs_registers.sv:235.16" *)
  wire illegal_csr_write;
  (* src = "rtl/cve2/cve2_cs_registers.sv:95.32" *)
  input instr_ret_compressed_i;
  wire instr_ret_compressed_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:94.32" *)
  input instr_ret_i;
  wire instr_ret_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:56.32" *)
  input irq_external_i;
  wire irq_external_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:57.32" *)
  input [15:0] irq_fast_i;
  wire [15:0] irq_fast_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:59.32" *)
  output irq_pending_o;
  wire irq_pending_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:54.32" *)
  input irq_software_i;
  wire irq_software_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:55.32" *)
  input irq_timer_i;
  wire irq_timer_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:60.32" *)
  output [18:0] irqs_o;
  wire [18:0] irqs_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:96.32" *)
  input iside_wait_i;
  wire iside_wait_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:97.32" *)
  input jump_i;
  wire jump_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:173.26" *)
  wire [6:0] mcause_d;
  (* src = "rtl/cve2/cve2_cs_registers.sv:174.16" *)
  wire mcause_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:173.16" *)
  wire [6:0] mcause_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:201.32" *)
  wire [31:0] mcountinhibit;
  (* src = "rtl/cve2/cve2_cs_registers.sv:204.32" *)
  wire mcountinhibit_we;
  (* src = "rtl/cve2/cve2_cs_registers.sv:100.32" *)
  input mem_load_i;
  wire mem_load_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:101.32" *)
  input mem_store_i;
  wire mem_store_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:171.24" *)
  wire [31:0] mepc_d;
  (* src = "rtl/cve2/cve2_cs_registers.sv:172.16" *)
  wire mepc_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:209.16" *)
  wire [2047:0] mhpmcounter;
  (* unused_bits = "1" *)
  wire [2:0] mhpmcounter_we;
  (* unused_bits = "1" *)
  wire [2:0] mhpmcounterh_we;
  (* src = "rtl/cve2/cve2_cs_registers.sv:168.16" *)
  wire mie_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:167.16" *)
  wire [18:0] mie_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:219.16" *)
  wire [63:0] minstret_raw;
  (* src = "rtl/cve2/cve2_cs_registers.sv:170.16" *)
  wire mscratch_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:169.16" *)
  wire [31:0] mscratch_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:193.16" *)
  wire [6:0] mstack_cause_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:191.16" *)
  wire mstack_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:192.16" *)
  wire [31:0] mstack_epc_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:190.16" *)
  wire [2:0] mstack_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:165.27" *)
  wire [5:0] mstatus_d;
  (* src = "rtl/cve2/cve2_cs_registers.sv:166.16" *)
  wire mstatus_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:165.16" *)
  wire [5:0] mstatus_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:175.25" *)
  wire [31:0] mtval_d;
  (* src = "rtl/cve2/cve2_cs_registers.sv:176.16" *)
  wire mtval_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:175.16" *)
  wire [31:0] mtval_q;
  (* src = "rtl/cve2/cve2_cs_registers.sv:177.25" *)
  wire [31:0] mtvec_d;
  (* src = "rtl/cve2/cve2_cs_registers.sv:178.16" *)
  wire mtvec_en;
  (* src = "rtl/cve2/cve2_cs_registers.sv:58.32" *)
  input nmi_mode_i;
  wire nmi_mode_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:80.32" *)
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:79.32" *)
  input [31:0] pc_if_i;
  wire [31:0] pc_if_i;
  (* src = "rtl/cve2/cve2_cs_registers.sv:164.28" *)
  wire [1:0] priv_lvl_d;
  (* src = "rtl/cve2/cve2_cs_registers.sv:36.32" *)
  output [1:0] priv_mode_id_o;
  reg [1:0] priv_mode_id_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:37.32" *)
  output [1:0] priv_mode_lsu_o;
  wire [1:0] priv_mode_lsu_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:30.32" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_cs_registers.sv:77.32" *)
  output trigger_match_o;
  wire trigger_match_o;
  (* src = "rtl/cve2/cve2_cs_registers.sv:103.32" *)
  input wfi_wait_i;
  wire wfi_wait_i;
  assign illegal_csr_priv = csr_addr_i[9:8] > priv_mode_id_o;
  assign illegal_csr_insn_o = csr_access_i & \$9 ;
  assign \$16  = ~ debug_mode_i;
  assign \$152  = mstatus_q[3:2] != 2'h3;
  assign priv_mode_lsu_o = mstatus_q[1] ? mstatus_q[3:2] : priv_mode_id_o;
  assign \$181  = csr_wdata_i | csr_rdata_o;
  assign \$183  = ~ csr_wdata_i;
  assign \$185  = \$183  & csr_rdata_o;
  assign \$auto$rtlil.cc:3011:Eq$1022  = csr_op_i == 1'h1;
  assign \$auto$rtlil.cc:3011:Eq$1023  = csr_op_i == 2'h2;
  assign \$auto$rtlil.cc:3011:Eq$1024  = csr_op_i == 2'h3;
  assign csr_wr = | { \$auto$rtlil.cc:3011:Eq$1024 , \$auto$rtlil.cc:3011:Eq$1023 , \$auto$rtlil.cc:3011:Eq$1022  };
  assign \$192  = csr_wr & csr_op_en_i;
  assign \$194  = ~ illegal_csr_insn_o;
  assign csr_we_int = \$192  & \$194 ;
  assign irqs_o = { irq_software_i, irq_timer_i, irq_external_i, irq_fast_i } & mie_q;
  assign irq_pending_o = | irqs_o;
  assign \$3  = csr_addr_i[11:10] == 2'h3;
  assign \$208  = ~ mcountinhibit[0];
  assign \$212  = ~ mcountinhibit[2];
  assign \$214  = instr_ret_i & \$212 ;
  assign \$219  = csr_we_int & debug_mode_i;
  assign \$221  = csr_addr_i == 11'h7a0;
  assign \gen_trigger_regs.tselect_we  = \$219  & \$221 ;
  assign \$225  = ~ \gen_trigger_regs.tselect_q ;
  assign \$227  = \$225  & csr_we_int;
  assign \$229  = \$227  & debug_mode_i;
  assign \$231  = csr_addr_i == 11'h7a1;
  assign \gen_trigger_regs.tmatch_control_we  = \$229  & \$231 ;
  assign \$241  = csr_addr_i == 11'h7a2;
  assign \gen_trigger_regs.tmatch_value_we  = \$229  & \$241 ;
  assign \gen_trigger_regs.tselect_d  = \$245  & csr_wdata_int[0];
  assign \$248  = pc_if_i == \gen_trigger_regs.selected_tmatch_value ;
  assign trigger_match_o = \gen_trigger_regs.selected_tmatch_control  & \$248 ;
  assign illegal_csr_write = \$3  && csr_wr;
  assign \$auto$rtlil.cc:3011:Eq$983  = csr_addr_i == 10'h3a0;
  assign \$auto$rtlil.cc:3011:Eq$984  = csr_addr_i == 10'h3a1;
  assign \$auto$rtlil.cc:3011:Eq$985  = csr_addr_i == 10'h3a2;
  assign \$auto$rtlil.cc:3011:Eq$986  = csr_addr_i == 10'h3a3;
  assign \$auto$rtlil.cc:3011:Eq$987  = csr_addr_i == 10'h3b0;
  assign \$auto$rtlil.cc:3011:Eq$988  = csr_addr_i == 10'h3b1;
  assign \$auto$rtlil.cc:3011:Eq$989  = csr_addr_i == 10'h3b2;
  assign \$auto$rtlil.cc:3011:Eq$990  = csr_addr_i == 10'h3b3;
  assign \$auto$rtlil.cc:3011:Eq$991  = csr_addr_i == 10'h3b4;
  assign \$auto$rtlil.cc:3011:Eq$992  = csr_addr_i == 10'h3b5;
  assign \$auto$rtlil.cc:3011:Eq$993  = csr_addr_i == 10'h3b6;
  assign \$auto$rtlil.cc:3011:Eq$994  = csr_addr_i == 10'h3b7;
  assign \$auto$rtlil.cc:3011:Eq$995  = csr_addr_i == 10'h3b8;
  assign \$auto$rtlil.cc:3011:Eq$996  = csr_addr_i == 10'h3b9;
  assign \$auto$rtlil.cc:3011:Eq$997  = csr_addr_i == 10'h3ba;
  assign \$auto$rtlil.cc:3011:Eq$998  = csr_addr_i == 10'h3bb;
  assign \$auto$rtlil.cc:3011:Eq$999  = csr_addr_i == 10'h3bc;
  assign \$auto$rtlil.cc:3011:Eq$1000  = csr_addr_i == 10'h3bd;
  assign \$auto$rtlil.cc:3011:Eq$1001  = csr_addr_i == 10'h3be;
  assign \$auto$rtlil.cc:3011:Eq$1002  = csr_addr_i == 10'h3bf;
  assign \$7  = illegal_csr | illegal_csr_write;
  assign \$auto$rtlil.cc:2964:ReduceBool$1003  = | { \$auto$rtlil.cc:3011:Eq$1002 , \$auto$rtlil.cc:3011:Eq$1001 , \$auto$rtlil.cc:3011:Eq$1000 , \$auto$rtlil.cc:3011:Eq$999 , \$auto$rtlil.cc:3011:Eq$998 , \$auto$rtlil.cc:3011:Eq$997 , \$auto$rtlil.cc:3011:Eq$996 , \$auto$rtlil.cc:3011:Eq$995 , \$auto$rtlil.cc:3011:Eq$994 , \$auto$rtlil.cc:3011:Eq$993 , \$auto$rtlil.cc:3011:Eq$992 , \$auto$rtlil.cc:3011:Eq$991 , \$auto$rtlil.cc:3011:Eq$990 , \$auto$rtlil.cc:3011:Eq$989 , \$auto$rtlil.cc:3011:Eq$988 , \$auto$rtlil.cc:3011:Eq$987 , \$auto$rtlil.cc:3011:Eq$986 , \$auto$rtlil.cc:3011:Eq$985 , \$auto$rtlil.cc:3011:Eq$984 , \$auto$rtlil.cc:3011:Eq$983  };
  assign mtvec_d[31:8] = csr_mtvec_init_i ? boot_addr_i[31:8] : csr_wdata_int[31:8];
  assign \$66  = csr_wdata_int[12:11] != 2'h3;
  assign \$68  = | csr_wdata_int[12:11];
  assign \$70  = \$66  && \$68 ;
  assign \$73  = csr_wdata_int[1:0] != 2'h3;
  assign \$75  = | csr_wdata_int[1:0];
  assign \$77  = \$73  && \$75 ;
  assign \$9  = \$7  | illegal_csr_priv;
  assign \$auto$bmuxmap.cc:84:execute$18761 [63:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$18761 [127:64] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$18761 [191:128] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$18761 [255:192] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$18761 [319:256] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$18761 [383:320] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$18761 [447:384] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$18761 [511:448] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$18761 [575:512] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$18761 [639:576] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$18761 [703:640] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$18761 [767:704] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$18761 [831:768] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$18761 [895:832] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$18761 [959:896] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [0] ? minstret_raw : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$18761 [1023:960] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [0] ? mhpmcounter[2047:1984] : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$18778 [63:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [1] ? \$auto$bmuxmap.cc:84:execute$18761 [127:64] : \$auto$bmuxmap.cc:84:execute$18761 [63:0];
  assign \$auto$bmuxmap.cc:84:execute$18778 [127:64] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [1] ? \$auto$bmuxmap.cc:84:execute$18761 [255:192] : \$auto$bmuxmap.cc:84:execute$18761 [191:128];
  assign \$auto$bmuxmap.cc:84:execute$18778 [191:128] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [1] ? \$auto$bmuxmap.cc:84:execute$18761 [383:320] : \$auto$bmuxmap.cc:84:execute$18761 [319:256];
  assign \$auto$bmuxmap.cc:84:execute$18778 [255:192] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [1] ? \$auto$bmuxmap.cc:84:execute$18761 [511:448] : \$auto$bmuxmap.cc:84:execute$18761 [447:384];
  assign \$auto$bmuxmap.cc:84:execute$18778 [319:256] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [1] ? \$auto$bmuxmap.cc:84:execute$18761 [639:576] : \$auto$bmuxmap.cc:84:execute$18761 [575:512];
  assign \$auto$bmuxmap.cc:84:execute$18778 [383:320] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [1] ? \$auto$bmuxmap.cc:84:execute$18761 [767:704] : \$auto$bmuxmap.cc:84:execute$18761 [703:640];
  assign \$auto$bmuxmap.cc:84:execute$18778 [447:384] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [1] ? \$auto$bmuxmap.cc:84:execute$18761 [895:832] : \$auto$bmuxmap.cc:84:execute$18761 [831:768];
  assign \$auto$bmuxmap.cc:84:execute$18778 [511:448] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [1] ? \$auto$bmuxmap.cc:84:execute$18761 [1023:960] : \$auto$bmuxmap.cc:84:execute$18761 [959:896];
  assign \$auto$bmuxmap.cc:84:execute$18787 [63:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [2] ? \$auto$bmuxmap.cc:84:execute$18778 [127:64] : \$auto$bmuxmap.cc:84:execute$18778 [63:0];
  assign \$auto$bmuxmap.cc:84:execute$18787 [127:64] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [2] ? \$auto$bmuxmap.cc:84:execute$18778 [255:192] : \$auto$bmuxmap.cc:84:execute$18778 [191:128];
  assign \$auto$bmuxmap.cc:84:execute$18787 [191:128] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [2] ? \$auto$bmuxmap.cc:84:execute$18778 [383:320] : \$auto$bmuxmap.cc:84:execute$18778 [319:256];
  assign \$auto$bmuxmap.cc:84:execute$18787 [255:192] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [2] ? \$auto$bmuxmap.cc:84:execute$18778 [511:448] : \$auto$bmuxmap.cc:84:execute$18778 [447:384];
  assign \$auto$bmuxmap.cc:84:execute$18792 [63:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [3] ? \$auto$bmuxmap.cc:84:execute$18787 [127:64] : \$auto$bmuxmap.cc:84:execute$18787 [63:0];
  assign \$auto$bmuxmap.cc:84:execute$18792 [127:64] = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [3] ? \$auto$bmuxmap.cc:84:execute$18787 [255:192] : \$auto$bmuxmap.cc:84:execute$18787 [191:128];
  assign \$auto$bmuxmap.cc:84:execute$18795  = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [4] ? \$auto$bmuxmap.cc:84:execute$18792 [127:64] : \$auto$bmuxmap.cc:84:execute$18792 [63:0];
  assign \$auto$rtlil.cc:3004:And$16668 [0] = csr_addr_i[4:0] == 5'h00;
  assign \$auto$rtlil.cc:3004:And$16668 [1] = csr_addr_i[4:0] == 5'h01;
  assign \$auto$rtlil.cc:3004:And$16668 [2] = csr_addr_i[4:0] == 5'h02;
  assign \$auto$rtlil.cc:3004:And$16668 [3] = csr_addr_i[4:0] == 5'h03;
  assign \$auto$rtlil.cc:3004:And$16668 [4] = csr_addr_i[4:0] == 5'h04;
  assign \$auto$rtlil.cc:3004:And$16668 [5] = csr_addr_i[4:0] == 5'h05;
  assign \$auto$rtlil.cc:3004:And$16668 [6] = csr_addr_i[4:0] == 5'h06;
  assign \$auto$rtlil.cc:3004:And$16668 [7] = csr_addr_i[4:0] == 5'h07;
  assign \$auto$rtlil.cc:3004:And$16668 [8] = csr_addr_i[4:0] == 5'h08;
  assign \$auto$rtlil.cc:3004:And$16668 [9] = csr_addr_i[4:0] == 5'h09;
  assign \$auto$rtlil.cc:3004:And$16668 [10] = csr_addr_i[4:0] == 5'h0a;
  assign \$auto$rtlil.cc:3004:And$16668 [11] = csr_addr_i[4:0] == 5'h0b;
  assign \$auto$rtlil.cc:3004:And$16668 [12] = csr_addr_i[4:0] == 5'h0c;
  assign \$auto$rtlil.cc:3004:And$16668 [13] = csr_addr_i[4:0] == 5'h0d;
  assign \$auto$rtlil.cc:3004:And$16668 [14] = csr_addr_i[4:0] == 5'h0e;
  assign \$auto$rtlil.cc:3004:And$16668 [15] = csr_addr_i[4:0] == 5'h0f;
  assign \$auto$rtlil.cc:3004:And$16668 [16] = csr_addr_i[4:0] == 5'h10;
  assign \$auto$rtlil.cc:3004:And$16668 [17] = csr_addr_i[4:0] == 5'h11;
  assign \$auto$rtlil.cc:3004:And$16668 [18] = csr_addr_i[4:0] == 5'h12;
  assign \$auto$rtlil.cc:3004:And$16668 [19] = csr_addr_i[4:0] == 5'h13;
  assign \$auto$rtlil.cc:3004:And$16668 [20] = csr_addr_i[4:0] == 5'h14;
  assign \$auto$rtlil.cc:3004:And$16668 [21] = csr_addr_i[4:0] == 5'h15;
  assign \$auto$rtlil.cc:3004:And$16668 [22] = csr_addr_i[4:0] == 5'h16;
  assign \$auto$rtlil.cc:3004:And$16668 [23] = csr_addr_i[4:0] == 5'h17;
  assign \$auto$rtlil.cc:3004:And$16668 [24] = csr_addr_i[4:0] == 5'h18;
  assign \$auto$rtlil.cc:3004:And$16668 [25] = csr_addr_i[4:0] == 5'h19;
  assign \$auto$rtlil.cc:3004:And$16668 [26] = csr_addr_i[4:0] == 5'h1a;
  assign \$auto$rtlil.cc:3004:And$16668 [27] = csr_addr_i[4:0] == 5'h1b;
  assign \$auto$rtlil.cc:3004:And$16668 [28] = csr_addr_i[4:0] == 5'h1c;
  assign \$auto$rtlil.cc:3004:And$16668 [29] = csr_addr_i[4:0] == 5'h1d;
  assign \$auto$rtlil.cc:3004:And$16668 [30] = csr_addr_i[4:0] == 5'h1e;
  assign \$auto$rtlil.cc:3004:And$16668 [31] = csr_addr_i[4:0] == 5'h1f;
  (* src = "rtl/cve2/cve2_cs_registers.sv:704.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) priv_mode_id_o <= 2'h3;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17568 ) priv_mode_id_o <= priv_lvl_d;
  reg [1:0] \$auto$ff.cc:266:slice$17571 ;
  (* src = "rtl/cve2/cve2_cs_registers.sv:1303.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17571  <= 2'h0;
    else if (mcountinhibit_we) \$auto$ff.cc:266:slice$17571  <= { csr_wdata_int[2], csr_wdata_int[0] };
  assign { mcountinhibit[2], mcountinhibit[0] } = \$auto$ff.cc:266:slice$17571 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17568  = | { csr_save_cause_i, csr_restore_dret_i, csr_restore_mret_i };
  assign \$245  = ! csr_wdata_int;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17123  = ~ csr_addr_i[4:0];
  assign \$auto$opt_reduce.cc:137:opt_pmux$16804  = | { \$procmux$12102_CMP , \$procmux$12101_CMP , \$procmux$12100_CMP , \$procmux$12099_CMP , \$procmux$12098_CMP , \$procmux$12096_CMP , \$procmux$12095_CMP , \$procmux$12094_CMP , \$procmux$12092_CMP , \$procmux$12086_CMP , \$procmux$12058_CMP , \$procmux$12052_CMP , \$procmux$12051_CMP , \$procmux$12050_CMP , \$procmux$12049_CMP , \$procmux$11801_CMP , \$procmux$11731_CMP , \$procmux$11725_CMP , \$mcountinhibit_we$106 , \$mtval_en$99 , \$mcause_en$98 , \$mepc_en$97 , \$mscratch_en$96 , \$mie_en$95 , \$mstatus_en$94 , \$auto$rtlil.cc:3011:Eq$1002 , \$auto$rtlil.cc:3011:Eq$1001 , \$auto$rtlil.cc:3011:Eq$1000 , \$auto$rtlil.cc:3011:Eq$999 , \$auto$rtlil.cc:3011:Eq$998 , \$auto$rtlil.cc:3011:Eq$997 , \$auto$rtlil.cc:3011:Eq$996 , \$auto$rtlil.cc:3011:Eq$995 , \$auto$rtlil.cc:3011:Eq$994 , \$auto$rtlil.cc:3011:Eq$993 , \$auto$rtlil.cc:3011:Eq$992 , \$auto$rtlil.cc:3011:Eq$991 , \$auto$rtlil.cc:3011:Eq$990 , \$auto$rtlil.cc:3011:Eq$989 , \$auto$rtlil.cc:3011:Eq$988 , \$auto$rtlil.cc:3011:Eq$987 , \$auto$rtlil.cc:3011:Eq$986 , \$auto$rtlil.cc:3011:Eq$985 , \$auto$rtlil.cc:3011:Eq$984 , \$auto$rtlil.cc:3011:Eq$983 , \$241 , \$231 , \$221  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16806  = | { \$dscratch1_en$105 , \$dscratch0_en$104 , \$depc_en$103 , \$dcsr_en$102  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16808  = | { \$procmux$11228_CMP , \$auto$rtlil.cc:3011:Eq$1022  };
  assign { \$auto$rtlil.cc:3092:Mux$971 [2], \$auto$rtlil.cc:3092:Mux$971 [0] } = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [4] ? \$memory$auto$memory_bmux2rom.cc:63:execute$18542$rdmux[0][0][0]$b$18556  : 2'h0;
  assign \$memory$auto$memory_bmux2rom.cc:63:execute$18542$rdmux[0][0][0]$b$18556  = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [3] ? \$memory$auto$memory_bmux2rom.cc:63:execute$18542$rdmux[0][1][1]$b$18562  : 2'h0;
  assign \$memory$auto$memory_bmux2rom.cc:63:execute$18542$rdmux[0][1][1]$b$18562  = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [2] ? \$memory$auto$memory_bmux2rom.cc:63:execute$18542$rdmux[0][2][3]$b$18574  : 2'h0;
  assign \$memory$auto$memory_bmux2rom.cc:63:execute$18542$rdmux[0][2][3]$b$18574  = \$auto$opt_expr.cc:205:group_cell_inputs$17123 [1] ? { 1'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17123 [0] } : { \$auto$opt_expr.cc:205:group_cell_inputs$17123 [0], 1'h0 };
  function [31:0] \$procmux$11227 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_cs_registers.sv:723.21-723.49|rtl/cve2/cve2_cs_registers.sv:719.5-725.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11227  = b[31:0];
      2'b1?:
        \$procmux$11227  = b[63:32];
      default:
        \$procmux$11227  = a;
    endcase
  endfunction
  assign csr_wdata_int = \$procmux$11227 (\$181 , { \$185 , csr_wdata_i }, { \$auto$rtlil.cc:3011:Eq$1024 , \$auto$opt_reduce.cc:137:opt_pmux$16808  });
  assign \$procmux$11228_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:723.21-723.49|rtl/cve2/cve2_cs_registers.sv:719.5-725.12" *) csr_op_i;
  function [3:0] \$procmux$11238 ;
    input [3:0] a;
    input [7:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11238  = b[3:0];
      2'b1?:
        \$procmux$11238  = b[7:4];
      default:
        \$procmux$11238  = a;
    endcase
  endfunction
  assign mstatus_d[5:2] = \$procmux$11238 (\$auto$wreduce.cc:514:run$16952 [5:2], { \$mstatus_d[5:2]$137 , mstatus_q[4], \$mstatus_d[4:2]$154  }, { csr_save_cause_i, csr_restore_mret_i });
  assign \$mcause_en$158  = \$mcause_en$114  | (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *) nmi_mode_i;
  assign \$mcause_d$157  = nmi_mode_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *) mstack_cause_q : { csr_wdata_int[31], csr_wdata_int[5:0] };
  assign \$mepc_en$156  = \$mepc_en$113  | (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *) nmi_mode_i;
  assign \$mepc_d$155  = nmi_mode_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *) mstack_epc_q : { csr_wdata_int[31:1], 1'h0 };
  assign \$mstatus_d[1]$153  = \$152  ? (* src = "rtl/cve2/cve2_cs_registers.sv:677.11-677.33|rtl/cve2/cve2_cs_registers.sv:676.9-678.12" *) 1'h0 : \$auto$wreduce.cc:514:run$16952 [1];
  assign mstatus_d[1] = csr_restore_mret_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$mstatus_d[1]$153  : \$auto$wreduce.cc:514:run$16952 [1];
  assign \$mstatus_d[4:2]$154  = nmi_mode_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *) mstack_q : 3'h4;
  assign \$mtval_en$135  = debug_mode_i ? (* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) \$mtval_en$115  : 1'h1;
  assign \$mtval_d$134  = debug_mode_i ? (* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) csr_wdata_int : csr_mtval_i;
  assign \$mcause_en$133  = debug_mode_i ? (* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) \$mcause_en$114  : 1'h1;
  assign \$mcause_d$132  = debug_mode_i ? (* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) { csr_wdata_int[31], csr_wdata_int[5:0] } : csr_mcause_i;
  assign \$mepc_en$131  = debug_mode_i ? (* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) \$mepc_en$113  : 1'h1;
  assign \$mepc_d$130  = debug_mode_i ? (* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) { csr_wdata_int[31:1], 1'h0 } : \$exception_pc$125 ;
  assign \$mstatus_en$129  = debug_mode_i ? (* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) \$mstatus_en$110  : 1'h1;
  assign \$mstatus_d[5:2]$128  = debug_mode_i ? (* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) \$auto$wreduce.cc:514:run$16952 [5:2] : { 1'h0, mstatus_q[5], priv_mode_id_o };
  assign \$mstack_en$150  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) 1'h0 : \$16 ;
  assign \$depc_en$149  = \$depc_en$119  | (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) debug_csr_save_i;
  assign \$depc_d$148  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) \$exception_pc$125  : { csr_wdata_int[31:1], 1'h0 };
  assign \$dcsr_en$147  = \$dcsr_en$118  | (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) debug_csr_save_i;
  assign \$dcsr_d[8:6]$146  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) debug_cause_i : dcsr_q[8:6];
  assign \$dcsr_d[1:0]$145  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) priv_mode_id_o : \$dcsr_d$117 [1:0];
  assign \$mtval_en$144  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) \$mtval_en$115  : \$mtval_en$135 ;
  assign \$mtval_d$143  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) csr_wdata_int : \$mtval_d$134 ;
  assign \$mcause_en$142  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) \$mcause_en$114  : \$mcause_en$133 ;
  assign \$mcause_d$141  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) { csr_wdata_int[31], csr_wdata_int[5:0] } : \$mcause_d$132 ;
  assign \$mepc_en$140  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) \$mepc_en$113  : \$mepc_en$131 ;
  assign \$mepc_d$139  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) { csr_wdata_int[31:1], 1'h0 } : \$mepc_d$130 ;
  assign \$mstatus_en$138  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) \$mstatus_en$110  : \$mstatus_en$129 ;
  assign \$mstatus_d[5:2]$137  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) \$auto$wreduce.cc:514:run$16952 [5:2] : \$mstatus_d[5:2]$128 ;
  assign \$exception_pc$125  = csr_save_if_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:628.13-628.36|rtl/cve2/cve2_cs_registers.sv:626.9-634.16" *) pc_if_i : pc_id_i;
  assign mstack_en = csr_save_cause_i & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$mstack_en$150 ;
  assign depc_en = csr_save_cause_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$depc_en$149  : \$depc_en$119 ;
  assign depc_d = csr_save_cause_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$depc_d$148  : { csr_wdata_int[31:1], 1'h0 };
  assign dcsr_en = csr_save_cause_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$dcsr_en$147  : \$dcsr_en$118 ;
  assign dcsr_d[8:6] = csr_save_cause_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$dcsr_d[8:6]$146  : dcsr_q[8:6];
  assign dcsr_d[1:0] = csr_save_cause_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$dcsr_d[1:0]$145  : \$dcsr_d$117 [1:0];
  assign mtval_en = csr_save_cause_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$mtval_en$144  : \$mtval_en$115 ;
  assign mtval_d = csr_save_cause_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$mtval_d$143  : csr_wdata_int;
  function [0:0] \$procmux$11618 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11618  = b[0:0];
      2'b1?:
        \$procmux$11618  = b[1:1];
      default:
        \$procmux$11618  = a;
    endcase
  endfunction
  assign mcause_en = \$procmux$11618 (\$mcause_en$114 , { \$mcause_en$142 , \$mcause_en$158  }, { csr_save_cause_i, csr_restore_mret_i });
  function [6:0] \$procmux$11627 ;
    input [6:0] a;
    input [13:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11627  = b[6:0];
      2'b1?:
        \$procmux$11627  = b[13:7];
      default:
        \$procmux$11627  = a;
    endcase
  endfunction
  assign mcause_d = \$procmux$11627 ({ csr_wdata_int[31], csr_wdata_int[5:0] }, { \$mcause_d$141 , \$mcause_d$157  }, { csr_save_cause_i, csr_restore_mret_i });
  function [0:0] \$procmux$11636 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11636  = b[0:0];
      2'b1?:
        \$procmux$11636  = b[1:1];
      default:
        \$procmux$11636  = a;
    endcase
  endfunction
  assign mepc_en = \$procmux$11636 (\$mepc_en$113 , { \$mepc_en$140 , \$mepc_en$156  }, { csr_save_cause_i, csr_restore_mret_i });
  function [31:0] \$procmux$11645 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11645  = b[31:0];
      2'b1?:
        \$procmux$11645  = b[63:32];
      default:
        \$procmux$11645  = a;
    endcase
  endfunction
  assign mepc_d = \$procmux$11645 ({ csr_wdata_int[31:1], 1'h0 }, { \$mepc_d$139 , \$mepc_d$155  }, { csr_save_cause_i, csr_restore_mret_i });
  function [0:0] \$procmux$11654 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11654  = b[0:0];
      2'b1?:
        \$procmux$11654  = b[1:1];
      default:
        \$procmux$11654  = a;
    endcase
  endfunction
  assign mstatus_en = \$procmux$11654 (\$mstatus_en$110 , { \$mstatus_en$138 , 1'h1 }, { csr_save_cause_i, csr_restore_mret_i });
  function [1:0] \$procmux$11675 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11675  = b[1:0];
      2'b1?:
        \$procmux$11675  = b[3:2];
      default:
        \$procmux$11675  = a;
    endcase
  endfunction
  assign priv_lvl_d = \$procmux$11675 (2'h3, { dcsr_q[1:0], mstatus_q[3:2] }, { csr_restore_dret_i, csr_restore_mret_i });
  assign \$dcsr_d[1:0]$78  = \$77  ? (* src = "rtl/cve2/cve2_cs_registers.sv:561.13-561.37|rtl/cve2/cve2_cs_registers.sv:560.11-562.14" *) 2'h3 : csr_wdata_int[1:0];
  assign \$dcsr_en$102  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:556.19-581.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 11'h7b0;
  assign \$mstatus_d[3:2]$71  = \$70  ? (* src = "rtl/cve2/cve2_cs_registers.sv:535.13-535.40|rtl/cve2/cve2_cs_registers.sv:534.11-536.14" *) 2'h3 : csr_wdata_int[12:11];
  assign \$mstatus_en$94  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:524.22-537.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h300;
  assign \$auto$wreduce.cc:514:run$16951 [2:0] = \$procmux$11725_CTRL  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) \$auto$rtlil.cc:3004:And$16668 [2:0] : 3'h0;
  assign \$procmux$11725_CMP [0] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb80;
  assign \$procmux$11725_CMP [1] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb82;
  assign \$procmux$11725_CMP [10] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb8b;
  assign \$procmux$11725_CMP [11] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb8c;
  assign \$procmux$11725_CMP [12] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb8d;
  assign \$procmux$11725_CMP [13] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb8e;
  assign \$procmux$11725_CMP [14] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb8f;
  assign \$procmux$11725_CMP [15] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb90;
  assign \$procmux$11725_CMP [16] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb91;
  assign \$procmux$11725_CMP [17] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb92;
  assign \$procmux$11725_CMP [18] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb93;
  assign \$procmux$11725_CMP [19] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb94;
  assign \$procmux$11725_CMP [2] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb83;
  assign \$procmux$11725_CMP [20] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb95;
  assign \$procmux$11725_CMP [21] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb96;
  assign \$procmux$11725_CMP [22] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb97;
  assign \$procmux$11725_CMP [23] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb98;
  assign \$procmux$11725_CMP [24] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb99;
  assign \$procmux$11725_CMP [25] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb9a;
  assign \$procmux$11725_CMP [26] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb9b;
  assign \$procmux$11725_CMP [27] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb9c;
  assign \$procmux$11725_CMP [28] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb9d;
  assign \$procmux$11725_CMP [29] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb9e;
  assign \$procmux$11725_CMP [3] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb84;
  assign \$procmux$11725_CMP [30] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb9f;
  assign \$procmux$11725_CMP [4] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb85;
  assign \$procmux$11725_CMP [5] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb86;
  assign \$procmux$11725_CMP [6] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb87;
  assign \$procmux$11725_CMP [7] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb88;
  assign \$procmux$11725_CMP [8] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb89;
  assign \$procmux$11725_CMP [9] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb8a;
  assign \$auto$wreduce.cc:514:run$16950 [2:0] = \$procmux$11731_CTRL  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) \$auto$rtlil.cc:3004:And$16668 [2:0] : 3'h0;
  assign \$procmux$11731_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) \$procmux$11731_CMP ;
  assign \$procmux$11731_CMP [0] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb00;
  assign \$procmux$11731_CMP [1] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb02;
  assign \$procmux$11731_CMP [10] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb0b;
  assign \$procmux$11731_CMP [11] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb0c;
  assign \$procmux$11731_CMP [12] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb0d;
  assign \$procmux$11731_CMP [13] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb0e;
  assign \$procmux$11731_CMP [14] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb0f;
  assign \$procmux$11731_CMP [15] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb10;
  assign \$procmux$11731_CMP [16] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb11;
  assign \$procmux$11731_CMP [17] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb12;
  assign \$procmux$11731_CMP [18] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb13;
  assign \$procmux$11731_CMP [19] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb14;
  assign \$procmux$11731_CMP [2] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb03;
  assign \$procmux$11731_CMP [20] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb15;
  assign \$procmux$11731_CMP [21] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb16;
  assign \$procmux$11731_CMP [22] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb17;
  assign \$procmux$11731_CMP [23] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb18;
  assign \$procmux$11731_CMP [24] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb19;
  assign \$procmux$11731_CMP [25] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb1a;
  assign \$procmux$11731_CMP [26] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb1b;
  assign \$procmux$11731_CMP [27] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb1c;
  assign \$procmux$11731_CMP [28] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb1d;
  assign \$procmux$11731_CMP [29] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb1e;
  assign \$procmux$11731_CMP [3] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb04;
  assign \$procmux$11731_CMP [30] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb1f;
  assign \$procmux$11731_CMP [4] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb05;
  assign \$procmux$11731_CMP [5] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb06;
  assign \$procmux$11731_CMP [6] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb07;
  assign \$procmux$11731_CMP [7] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb08;
  assign \$procmux$11731_CMP [8] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb09;
  assign \$procmux$11731_CMP [9] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb0a;
  assign \$mcountinhibit_we$106  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:590.28-590.52|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h320;
  assign \$dscratch1_en$105  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:587.24-587.44|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 11'h7b3;
  assign \$dscratch0_en$104  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:586.24-586.44|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 11'h7b2;
  assign \$depc_en$103  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:584.18-584.33|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 11'h7b1;
  assign { \$dcsr_d$101 [31:9], \$dcsr_d$101 [5:0] } = \$dcsr_en$102  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:556.19-581.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) { 16'h4000, csr_wdata_int[15], 1'h0, csr_wdata_int[13:12], 6'h00, csr_wdata_int[2], \$dcsr_d[1:0]$78  } : { dcsr_q[31:9], dcsr_q[5:0] };
  assign \$mtvec_en$100  = csr_mtvec_init_i | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:554.20-554.36|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) \$procmux$11801_CMP ;
  assign \$procmux$11801_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:554.20-554.36|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h305;
  assign \$mtval_en$99  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:551.20-551.36|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h343;
  assign \$mcause_en$98  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:548.21-548.38|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h342;
  assign \$mepc_en$97  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:545.19-545.34|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h341;
  assign \$mscratch_en$96  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:542.23-542.42|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h340;
  assign \$mie_en$95  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:540.18-540.32|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h304;
  assign \$mstatus_d$93  = \$mstatus_en$94  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:524.22-537.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) { csr_wdata_int[3], csr_wdata_int[7], \$mstatus_d[3:2]$71 , csr_wdata_int[17], csr_wdata_int[21] } : mstatus_q;
  assign mhpmcounterh_we = csr_we_int ? (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$auto$wreduce.cc:514:run$16951 [2:0] : 3'h0;
  assign mhpmcounter_we = csr_we_int ? (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$auto$wreduce.cc:514:run$16950 [2:0] : 3'h0;
  assign mcountinhibit_we = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$mcountinhibit_we$106 ;
  assign dscratch1_en = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$dscratch1_en$105 ;
  assign dscratch0_en = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$dscratch0_en$104 ;
  assign \$depc_en$119  = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$depc_en$103 ;
  assign \$dcsr_en$118  = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$dcsr_en$102 ;
  assign { dcsr_d[31:9], dcsr_d[5:2], \$dcsr_d$117 [1:0] } = csr_we_int ? (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) { \$dcsr_d$101 [31:9], \$dcsr_d$101 [5:0] } : { dcsr_q[31:9], dcsr_q[5:0] };
  assign mtvec_en = csr_we_int ? (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$mtvec_en$100  : csr_mtvec_init_i;
  assign \$mtval_en$115  = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$mtval_en$99 ;
  assign \$mcause_en$114  = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$mcause_en$98 ;
  assign \$mepc_en$113  = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$mepc_en$97 ;
  assign mscratch_en = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$mscratch_en$96 ;
  assign mie_en = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$mie_en$95 ;
  assign \$mstatus_en$110  = csr_we_int & (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$mstatus_en$94 ;
  assign { \$auto$wreduce.cc:514:run$16952 [5:1], mstatus_d[0] } = csr_we_int ? (* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$mstatus_d$93  : mstatus_q;
  assign illegal_csr = \$illegal_csr$39  | (* src = "rtl/cve2/cve2_cs_registers.sv:479.9-479.28|rtl/cve2/cve2_cs_registers.sv:474.7-480.10" *) \$auto$rtlil.cc:2964:ReduceBool$1003 ;
  function [0:0] \$procmux$12048 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_cs_registers.sv:465.9-465.28|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$12048  = b[0:0];
      2'b1?:
        \$procmux$12048  = b[1:1];
      default:
        \$procmux$12048  = a;
    endcase
  endfunction
  assign \$illegal_csr$39  = \$procmux$12048 (1'h1, { \$16 , 1'h0 }, { \$auto$opt_reduce.cc:137:opt_pmux$16806 , \$auto$opt_reduce.cc:137:opt_pmux$16804  });
  assign \$procmux$12049_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:465.9-465.28|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 11'h7c1;
  assign \$procmux$12050_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:458.21-461.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 11'h7aa;
  assign \$procmux$12051_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:454.21-457.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 11'h7a8;
  assign \$procmux$12052_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:450.19-453.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 11'h7a3;
  assign \$procmux$11725_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) \$procmux$11725_CMP ;
  assign \$procmux$12058_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) \$procmux$12058_CMP ;
  assign \$procmux$12058_CMP [0] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h323;
  assign \$procmux$12058_CMP [1] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h324;
  assign \$procmux$12058_CMP [10] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h32d;
  assign \$procmux$12058_CMP [11] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h32e;
  assign \$procmux$12058_CMP [12] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h32f;
  assign \$procmux$12058_CMP [13] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h330;
  assign \$procmux$12058_CMP [14] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h331;
  assign \$procmux$12058_CMP [15] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h332;
  assign \$procmux$12058_CMP [16] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h333;
  assign \$procmux$12058_CMP [17] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h334;
  assign \$procmux$12058_CMP [18] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h335;
  assign \$procmux$12058_CMP [19] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h336;
  assign \$procmux$12058_CMP [2] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h325;
  assign \$procmux$12058_CMP [20] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h337;
  assign \$procmux$12058_CMP [21] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h338;
  assign \$procmux$12058_CMP [22] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h339;
  assign \$procmux$12058_CMP [23] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h33a;
  assign \$procmux$12058_CMP [24] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h33b;
  assign \$procmux$12058_CMP [25] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h33c;
  assign \$procmux$12058_CMP [26] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h33d;
  assign \$procmux$12058_CMP [27] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h33e;
  assign \$procmux$12058_CMP [28] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h33f;
  assign \$procmux$12058_CMP [3] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h326;
  assign \$procmux$12058_CMP [4] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h327;
  assign \$procmux$12058_CMP [5] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h328;
  assign \$procmux$12058_CMP [6] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h329;
  assign \$procmux$12058_CMP [7] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h32a;
  assign \$procmux$12058_CMP [8] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h32b;
  assign \$procmux$12058_CMP [9] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h32c;
  assign \$procmux$12086_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:328.16-334.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h344;
  assign \$procmux$12092_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:310.9-310.28|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h306;
  assign \$procmux$12094_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:297.17-297.44|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h301;
  assign \$procmux$12095_CMP [0] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:294.34-294.53|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h30a;
  assign \$procmux$12095_CMP [1] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:294.34-294.53|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h31a;
  assign \$procmux$12096_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:290.21-290.40|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h310;
  assign \$procmux$12098_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:277.23-277.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 12'hf15;
  assign \$procmux$12099_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:275.20-275.46|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 12'hf14;
  assign \$procmux$12100_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:273.19-273.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 12'hf13;
  assign \$procmux$12101_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:271.20-271.54|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 12'hf12;
  assign \$procmux$12102_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_cs_registers.sv:269.22-269.58|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 12'hf11;
  function [31:0] \$procmux$12108 ;
    input [31:0] a;
    input [735:0] b;
    input [22:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_cs_registers.sv:446.19-449.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *)
    (* parallel_case *)
    casez (s)
      23'b??????????????????????1:
        \$procmux$12108  = b[31:0];
      23'b?????????????????????1?:
        \$procmux$12108  = b[63:32];
      23'b????????????????????1??:
        \$procmux$12108  = b[95:64];
      23'b???????????????????1???:
        \$procmux$12108  = b[127:96];
      23'b??????????????????1????:
        \$procmux$12108  = b[159:128];
      23'b?????????????????1?????:
        \$procmux$12108  = b[191:160];
      23'b????????????????1??????:
        \$procmux$12108  = b[223:192];
      23'b???????????????1???????:
        \$procmux$12108  = b[255:224];
      23'b??????????????1????????:
        \$procmux$12108  = b[287:256];
      23'b?????????????1?????????:
        \$procmux$12108  = b[319:288];
      23'b????????????1??????????:
        \$procmux$12108  = b[351:320];
      23'b???????????1???????????:
        \$procmux$12108  = b[383:352];
      23'b??????????1????????????:
        \$procmux$12108  = b[415:384];
      23'b?????????1?????????????:
        \$procmux$12108  = b[447:416];
      23'b????????1??????????????:
        \$procmux$12108  = b[479:448];
      23'b???????1???????????????:
        \$procmux$12108  = b[511:480];
      23'b??????1????????????????:
        \$procmux$12108  = b[543:512];
      23'b?????1?????????????????:
        \$procmux$12108  = b[575:544];
      23'b????1??????????????????:
        \$procmux$12108  = b[607:576];
      23'b???1???????????????????:
        \$procmux$12108  = b[639:608];
      23'b??1????????????????????:
        \$procmux$12108  = b[671:640];
      23'b?1?????????????????????:
        \$procmux$12108  = b[703:672];
      23'b1??????????????????????:
        \$procmux$12108  = b[735:704];
      default:
        \$procmux$12108  = a;
    endcase
  endfunction
  assign csr_rdata_o = \$procmux$12108 (32'd0, { 64'h0000060200000023, hart_id_i, 10'h000, mstatus_q[0], 3'h0, mstatus_q[1], 4'h0, mstatus_q[3:2], 3'h0, mstatus_q[4], 3'h0, mstatus_q[5], 35'h040100104, mie_q[15:0], 4'h0, mie_q[16], 3'h0, mie_q[17], 3'h0, mie_q[18], 3'h0, mscratch_q, csr_mtvec_o, csr_mepc_o, mcause_q[6], 25'h0000000, mcause_q[5:0], mtval_q, irq_fast_i, 4'h0, irq_external_i, 3'h0, irq_timer_i, 3'h0, irq_software_i, 3'h0, dcsr_q, csr_depc_o, dscratch0_q, dscratch1_q, 29'h1fffffff, mcountinhibit[2], 1'h0, mcountinhibit[0], 29'h00000000, \$auto$rtlil.cc:3092:Mux$971 [2], 1'h0, \$auto$rtlil.cc:3092:Mux$971 [0], \$auto$rtlil.cc:3092:Mux$976 [31:0], \$auto$rtlil.cc:3092:Mux$976 [63:32], 31'h00000000, \gen_trigger_regs.tselect_q , 29'h05000209, \gen_trigger_regs.selected_tmatch_control , 2'h0, \gen_trigger_regs.selected_tmatch_value  }, { \$procmux$12102_CMP , \$procmux$12101_CMP , \$procmux$12099_CMP , \$mstatus_en$94 , \$procmux$12094_CMP , \$mie_en$95 , \$mscratch_en$96 , \$procmux$11801_CMP , \$mepc_en$97 , \$mcause_en$98 , \$mtval_en$99 , \$procmux$12086_CMP , \$dcsr_en$102 , \$depc_en$103 , \$dscratch0_en$104 , \$dscratch1_en$105 , \$mcountinhibit_we$106 , \$procmux$12058_CTRL , \$procmux$11731_CTRL , \$procmux$11725_CTRL , \$221 , \$231 , \$241  });
  (* src = "rtl/cve2/cve2_cs_registers.sv:1372.9" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_control_csr  \gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_control_csr  (
    .clk_i(clk_i),
    .rd_data_o(\gen_trigger_regs.selected_tmatch_control ),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int[2]),
    .wr_en_i(\gen_trigger_regs.tmatch_control_we )
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:1385.9" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_value_csr  \gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_value_csr  (
    .clk_i(clk_i),
    .rd_data_o(\gen_trigger_regs.selected_tmatch_value ),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(\gen_trigger_regs.tmatch_value_we )
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:1358.7" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.u_tselect_csr  \gen_trigger_regs.u_tselect_csr  (
    .clk_i(clk_i),
    .rd_data_o(\gen_trigger_regs.tselect_q ),
    .rst_ni(rst_ni),
    .wr_data_i(\gen_trigger_regs.tselect_d ),
    .wr_en_i(\gen_trigger_regs.tselect_we )
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:1210.5" *)
  \cve2_counter$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.mcycle_counter_i  mcycle_counter_i (
    .clk_i(clk_i),
    .counter_inc_i(\$208 ),
    .counter_val_i(csr_wdata_int),
    .counter_val_o(mhpmcounter[2047:1984]),
    .counter_we_i(mhpmcounter_we[0]),
    .counterh_we_i(mhpmcounterh_we[0]),
    .rst_ni(rst_ni)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:1226.5" *)
  \cve2_counter$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.minstret_counter_i  minstret_counter_i (
    .clk_i(clk_i),
    .counter_inc_i(\$214 ),
    .counter_val_i(csr_wdata_int),
    .counter_val_o(minstret_raw),
    .counter_we_i(mhpmcounter_we[2]),
    .counterh_we_i(mhpmcounterh_we[2]),
    .rst_ni(rst_ni)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:871.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dcsr_csr  u_dcsr_csr (
    .clk_i(clk_i),
    .rd_data_o(dcsr_q),
    .rst_ni(rst_ni),
    .wr_data_i(dcsr_d),
    .wr_en_i(dcsr_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:885.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_depc_csr  u_depc_csr (
    .clk_i(clk_i),
    .rd_data_o(csr_depc_o),
    .rst_ni(rst_ni),
    .wr_data_i(depc_d),
    .wr_en_i(depc_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:899.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dscratch0_csr  u_dscratch0_csr (
    .clk_i(clk_i),
    .rd_data_o(dscratch0_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(dscratch0_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:913.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dscratch1_csr  u_dscratch1_csr (
    .clk_i(clk_i),
    .rd_data_o(dscratch1_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(dscratch1_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:824.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mcause_csr  u_mcause_csr (
    .clk_i(clk_i),
    .rd_data_o(mcause_q),
    .rst_ni(rst_ni),
    .wr_data_i(mcause_d),
    .wr_en_i(mcause_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:778.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mepc_csr  u_mepc_csr (
    .clk_i(clk_i),
    .rd_data_o(csr_mepc_o),
    .rst_ni(rst_ni),
    .wr_data_i(mepc_d),
    .wr_en_i(mepc_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:796.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mie_csr  u_mie_csr (
    .clk_i(clk_i),
    .rd_data_o(mie_q),
    .rst_ni(rst_ni),
    .wr_data_i({ csr_wdata_int[3], csr_wdata_int[7], csr_wdata_int[11], csr_wdata_int[31:16] }),
    .wr_en_i(mie_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:810.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mscratch_csr  u_mscratch_csr (
    .clk_i(clk_i),
    .rd_data_o(mscratch_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(mscratch_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:956.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_cause_csr  u_mstack_cause_csr (
    .clk_i(clk_i),
    .rd_data_o(mstack_cause_q),
    .rst_ni(rst_ni),
    .wr_data_i(mcause_q),
    .wr_en_i(mstack_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:928.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_csr  u_mstack_csr (
    .clk_i(clk_i),
    .rd_data_o(mstack_q),
    .rst_ni(rst_ni),
    .wr_data_i(mstatus_q[4:2]),
    .wr_en_i(mstack_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:942.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_epc_csr  u_mstack_epc_csr (
    .clk_i(clk_i),
    .rd_data_o(mstack_epc_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_mepc_o),
    .wr_en_i(mstack_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:764.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstatus_csr  u_mstatus_csr (
    .clk_i(clk_i),
    .rd_data_o(mstatus_q),
    .rst_ni(rst_ni),
    .wr_data_i(mstatus_d),
    .wr_en_i(mstatus_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:838.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mtval_csr  u_mtval_csr (
    .clk_i(clk_i),
    .rd_data_o(mtval_q),
    .rst_ni(rst_ni),
    .wr_data_i(mtval_d),
    .wr_en_i(mtval_en)
  );
  (* src = "rtl/cve2/cve2_cs_registers.sv:851.5" *)
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mtvec_csr  u_mtvec_csr (
    .clk_i(clk_i),
    .rd_data_o(csr_mtvec_o),
    .rst_ni(rst_ni),
    .wr_data_i({ mtvec_d[31:8], 8'h01 }),
    .wr_en_i(mtvec_en)
  );
  assign { \$auto$rtlil.cc:3092:Mux$971 [31:3], \$auto$rtlil.cc:3092:Mux$971 [1] } = 30'h00000000;
  assign \$auto$wreduce.cc:514:run$16950 [31:3] = 29'hxxxxxxxx;
  assign \$auto$wreduce.cc:514:run$16951 [31:3] = 29'hxxxxxxxx;
  assign \$auto$wreduce.cc:514:run$16952 [0] = mstatus_d[0];
  assign \$dcsr_d$101 [8:6] = dcsr_q[8:6];
  assign \$dcsr_d$117 [31:2] = { dcsr_d[31:9], dcsr_q[8:6], dcsr_d[5:2] };
  assign csr_mstatus_mie_o = mstatus_q[5];
  assign csr_mstatus_tw_o = mstatus_q[0];
  assign csr_pmp_addr_o = 136'h0000000000000000000000000000000000;
  assign csr_pmp_cfg_o = 24'h000000;
  assign csr_pmp_mseccfg_o = 3'h0;
  assign debug_ebreakm_o = dcsr_q[15];
  assign debug_ebreaku_o = dcsr_q[12];
  assign debug_single_step_o = dcsr_q[2];
  assign { mcountinhibit[31:3], mcountinhibit[1] } = 30'h3ffffffe;
  assign mhpmcounter[1983:0] = { 64'h0000000000000000, minstret_raw, 1856'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 };
  assign mtvec_d[7:0] = 8'h01;
  assign \$auto$rtlil.cc:3092:Mux$976  = \$auto$bmuxmap.cc:84:execute$18795 ;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_control_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output rd_data_o;
  reg rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input wr_data_i;
  wire wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 1'h0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_value_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.u_tselect_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output rd_data_o;
  reg rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input wr_data_i;
  wire wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 1'h0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dcsr_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd1073741827;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_depc_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dscratch0_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dscratch1_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mcause_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [6:0] rd_data_o;
  reg [6:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [6:0] wr_data_i;
  wire [6:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 7'h00;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mepc_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mie_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [18:0] rd_data_o;
  reg [18:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [18:0] wr_data_i;
  wire [18:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 19'h00000;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mscratch_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_cause_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [6:0] rd_data_o;
  reg [6:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [6:0] wr_data_i;
  wire [6:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 7'h00;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [2:0] rd_data_o;
  reg [2:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [2:0] wr_data_i;
  wire [2:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 3'h4;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_epc_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstatus_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [5:0] rd_data_o;
  reg [5:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [5:0] wr_data_i;
  wire [5:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 6'h0c;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mtval_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mtvec_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd1;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "rtl/cve2/cve2_decoder.sv:16.8" *)
module \cve2_decoder$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.decoder_i (clk_i, rst_ni, instr_rdata_i, data_req_o, data_we_o, illegal_insn_o, instr_rdata_alu_i, illegal_c_insn_i, csr_access_o, csr_op_o, rf_raddr_a_o, rf_raddr_b_o, rf_ren_a_o, rf_ren_b_o, ebrk_insn_o, mret_insn_o, dret_insn_o, ecall_insn_o, wfi_insn_o, jump_set_o, instr_first_cycle_i
, imm_a_mux_sel_o, imm_b_mux_sel_o, imm_i_type_o, imm_s_type_o, imm_b_type_o, imm_u_type_o, imm_j_type_o, zimm_rs1_type_o, rf_wdata_sel_o, rf_we_o, rf_waddr_o, alu_operator_o, alu_op_a_mux_sel_o, alu_op_b_mux_sel_o, alu_multicycle_o, mult_en_o, div_en_o, mult_sel_o, div_sel_o, multdiv_operator_o, multdiv_signed_mode_o
, data_type_o, data_sign_extension_o, jump_in_dec_o, branch_in_dec_o);
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$152 ;
  wire \$154 ;
  wire \$170 ;
  wire \$23 ;
  wire \$30 ;
  wire \$35 ;
  wire \$58 ;
  wire \$7 ;
  wire \$71 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$9 ;
  (* src = "rtl/cve2/cve2_decoder.sv:703.9-715.12" *)
  wire [1:0] \$alu_op_a_mux_sel_o$139 ;
  (* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16" *)
  wire [1:0] \$alu_op_a_mux_sel_o$167 ;
  (* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12" *)
  wire [1:0] \$alu_op_a_mux_sel_o$174 ;
  (* src = "rtl/cve2/cve2_decoder.sv:755.9-759.12" *)
  wire \$alu_op_b_mux_sel_o$149 ;
  wire [5:0] \$alu_operator_o$141 ;
  (* src = "rtl/cve2/cve2_decoder.sv:732.9-743.12" *)
  wire [6:0] \$alu_operator_o$143 ;
  wire [5:0] \$alu_operator_o$155 ;
  wire [5:0] \$alu_operator_o$156 ;
  (* src = "rtl/cve2/cve2_decoder.sv:795.9-915.16" *)
  wire [6:0] \$alu_operator_o$158 ;
  (* src = "rtl/cve2/cve2_decoder.sv:965.11-1104.18" *)
  wire [6:0] \$alu_operator_o$159 ;
  (* src = "rtl/cve2/cve2_decoder.sv:922.9-1105.12" *)
  wire [6:0] \$alu_operator_o$162 ;
  (* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16" *)
  wire [6:0] \$alu_operator_o$166 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16810 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16812 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16814 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16816 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16818 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16820 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16822 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16824 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16826 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16828 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16830 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16832 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16834 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16836 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16840 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16842 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16844 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16846 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16848 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16850 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16878 ;
  wire \$auto$rtlil.cc:3092:Mux$1599 ;
  (* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" *)
  wire \$branch_in_dec_o$123 ;
  (* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" *)
  wire \$csr_access_o$101 ;
  (* src = "rtl/cve2/cve2_decoder.sv:622.11-627.18" *)
  wire \$csr_illegal$88 ;
  (* src = "rtl/cve2/cve2_decoder.sv:622.11-627.18" *)
  wire [1:0] \$csr_op$89 ;
  (* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" *)
  wire [1:0] \$csr_op$93 ;
  (* src = "rtl/cve2/cve2_decoder.sv:300.9-305.16" *)
  wire [1:0] \$data_type_o$28 ;
  (* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" *)
  wire \$data_we_o$119 ;
  (* src = "rtl/cve2/cve2_decoder.sv:586.11-606.18" *)
  wire \$dret_insn_o$75 ;
  (* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" *)
  wire \$dret_insn_o$96 ;
  (* src = "rtl/cve2/cve2_decoder.sv:586.11-606.18" *)
  wire \$ebrk_insn_o$73 ;
  (* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" *)
  wire \$ebrk_insn_o$94 ;
  (* src = "rtl/cve2/cve2_decoder.sv:586.11-606.18" *)
  wire \$ecall_insn_o$76 ;
  (* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" *)
  wire \$ecall_insn_o$97 ;
  (* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" *)
  wire \$illegal_insn$102 ;
  (* src = "rtl/cve2/cve2_decoder.sv:271.9-279.16" *)
  wire \$illegal_insn$25 ;
  (* src = "rtl/cve2/cve2_decoder.sv:300.9-305.16" *)
  wire \$illegal_insn$27 ;
  (* src = "rtl/cve2/cve2_decoder.sv:317.9-329.16" *)
  wire \$illegal_insn$32 ;
  (* src = "rtl/cve2/cve2_decoder.sv:357.13-391.20" *)
  wire \$illegal_insn$41 ;
  (* src = "rtl/cve2/cve2_decoder.sv:398.15-435.22" *)
  wire \$illegal_insn$54 ;
  (* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16" *)
  wire \$illegal_insn$55 ;
  (* src = "rtl/cve2/cve2_decoder.sv:348.9-440.16" *)
  wire \$illegal_insn$56 ;
  (* src = "rtl/cve2/cve2_decoder.sv:450.11-551.18" *)
  wire \$illegal_insn$59 ;
  (* src = "rtl/cve2/cve2_decoder.sv:447.9-552.12" *)
  wire \$illegal_insn$62 ;
  (* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16" *)
  wire \$illegal_insn$66 ;
  (* src = "rtl/cve2/cve2_decoder.sv:586.11-606.18" *)
  wire \$illegal_insn$72 ;
  (* src = "rtl/cve2/cve2_decoder.sv:609.11-611.14" *)
  wire \$illegal_insn$84 ;
  (* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" *)
  wire \$illegal_insn$90 ;
  (* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16" *)
  wire [2:0] \$imm_b_mux_sel_o$165 ;
  (* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" *)
  wire \$jump_in_dec_o$122 ;
  (* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16" *)
  wire \$jump_in_dec_o$69 ;
  (* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" *)
  wire \$jump_set_o$111 ;
  (* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16" *)
  wire \$jump_set_o$68 ;
  (* src = "rtl/cve2/cve2_decoder.sv:586.11-606.18" *)
  wire \$mret_insn_o$74 ;
  (* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" *)
  wire \$mret_insn_o$95 ;
  (* src = "rtl/cve2/cve2_decoder.sv:450.11-551.18" *)
  wire [1:0] \$multdiv_operator_o$60 ;
  (* src = "rtl/cve2/cve2_decoder.sv:447.9-552.12" *)
  wire [1:0] \$multdiv_operator_o$63 ;
  (* src = "rtl/cve2/cve2_decoder.sv:450.11-551.18" *)
  wire [1:0] \$multdiv_signed_mode_o$61 ;
  (* src = "rtl/cve2/cve2_decoder.sv:447.9-552.12" *)
  wire [1:0] \$multdiv_signed_mode_o$64 ;
  wire \$procmux$5366_CMP ;
  wire \$procmux$5399_CMP ;
  wire \$procmux$5483_CMP ;
  wire \$procmux$5550_CMP ;
  wire \$procmux$5551_CMP ;
  wire \$procmux$5552_CMP ;
  wire \$procmux$5553_CMP ;
  wire \$procmux$5554_CMP ;
  wire \$procmux$5555_CMP ;
  wire \$procmux$5556_CMP ;
  wire \$procmux$5557_CMP ;
  wire \$procmux$5558_CMP ;
  wire \$procmux$5559_CMP ;
  wire \$procmux$5560_CMP ;
  wire \$procmux$5561_CMP ;
  wire \$procmux$5562_CMP ;
  wire \$procmux$5563_CMP ;
  wire \$procmux$5564_CMP ;
  wire \$procmux$5565_CMP ;
  wire \$procmux$5566_CMP ;
  wire \$procmux$5605_CMP ;
  wire \$procmux$5607_CMP ;
  wire \$procmux$5650_CMP ;
  wire \$procmux$5651_CMP ;
  wire \$procmux$5652_CMP ;
  wire \$procmux$5653_CMP ;
  wire \$procmux$5654_CMP ;
  wire \$procmux$5669_CMP ;
  wire \$procmux$5696_CMP ;
  wire \$procmux$5774_CMP ;
  wire \$procmux$5833_CMP ;
  wire \$procmux$5920_CMP ;
  wire \$procmux$5921_CMP ;
  wire \$procmux$5941_CMP ;
  wire \$procmux$6008_CMP ;
  wire \$procmux$6009_CMP ;
  wire \$procmux$6010_CMP ;
  wire \$procmux$6016_CMP ;
  wire \$procmux$6059_Y ;
  wire \$procmux$6136_Y ;
  wire \$procmux$6152_Y ;
  wire \$procmux$6220_CMP ;
  wire [9:0] \$procmux$6269_CMP ;
  wire \$procmux$6269_CTRL ;
  wire \$procmux$6274_CMP ;
  wire \$procmux$6281_CMP ;
  wire \$procmux$6282_CMP ;
  wire \$procmux$6283_CMP ;
  wire \$procmux$6284_CMP ;
  wire \$procmux$6295_CMP ;
  wire \$procmux$6297_CMP ;
  wire \$procmux$6299_CMP ;
  wire \$procmux$6347_CMP ;
  wire \$procmux$6349_CMP ;
  wire [1:0] \$procmux$6426_CMP ;
  wire \$procmux$6426_CTRL ;
  (* unused_bits = "1 2" *)
  wire [5:0] \$procmux$6501_CMP ;
  wire \$procmux$6517_CMP ;
  wire \$procmux$6530_CMP ;
  wire \$procmux$6603_CTRL ;
  wire \$procmux$6620_CMP ;
  wire \$procmux$6666_CMP ;
  wire \$procmux$6838_Y ;
  wire \$procmux$6846_CMP ;
  wire \$procmux$6847_CMP ;
  (* src = "rtl/cve2/cve2_decoder.sv:67.32" *)
  output alu_multicycle_o;
  wire alu_multicycle_o;
  (* src = "rtl/cve2/cve2_decoder.sv:63.32" *)
  output [1:0] alu_op_a_mux_sel_o;
  wire [1:0] alu_op_a_mux_sel_o;
  (* src = "rtl/cve2/cve2_decoder.sv:65.32" *)
  output alu_op_b_mux_sel_o;
  wire alu_op_b_mux_sel_o;
  (* src = "rtl/cve2/cve2_decoder.sv:62.32" *)
  output [6:0] alu_operator_o;
  wire [6:0] alu_operator_o;
  (* src = "rtl/cve2/cve2_decoder.sv:92.32" *)
  output branch_in_dec_o;
  wire branch_in_dec_o;
  (* src = "rtl/cve2/cve2_decoder.sv:21.32" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_decoder.sv:79.32" *)
  output csr_access_o;
  wire csr_access_o;
  (* src = "rtl/cve2/cve2_decoder.sv:114.16" *)
  wire [1:0] csr_op;
  (* src = "rtl/cve2/cve2_decoder.sv:80.32" *)
  output [1:0] csr_op_o;
  wire [1:0] csr_op_o;
  (* src = "rtl/cve2/cve2_decoder.sv:83.32" *)
  output data_req_o;
  wire data_req_o;
  (* src = "rtl/cve2/cve2_decoder.sv:87.32" *)
  output data_sign_extension_o;
  wire data_sign_extension_o;
  (* src = "rtl/cve2/cve2_decoder.sv:85.32" *)
  output [1:0] data_type_o;
  wire [1:0] data_type_o;
  (* src = "rtl/cve2/cve2_decoder.sv:84.32" *)
  output data_we_o;
  wire data_we_o;
  (* src = "rtl/cve2/cve2_decoder.sv:71.32" *)
  output div_en_o;
  wire div_en_o;
  (* src = "rtl/cve2/cve2_decoder.sv:73.32" *)
  output div_sel_o;
  wire div_sel_o;
  (* src = "rtl/cve2/cve2_decoder.sv:29.32" *)
  output dret_insn_o;
  wire dret_insn_o;
  (* src = "rtl/cve2/cve2_decoder.sv:26.32" *)
  output ebrk_insn_o;
  wire ebrk_insn_o;
  (* src = "rtl/cve2/cve2_decoder.sv:30.32" *)
  output ecall_insn_o;
  wire ecall_insn_o;
  (* src = "rtl/cve2/cve2_decoder.sv:40.32" *)
  input illegal_c_insn_i;
  wire illegal_c_insn_i;
  (* src = "rtl/cve2/cve2_decoder.sv:25.32" *)
  output illegal_insn_o;
  wire illegal_insn_o;
  (* src = "rtl/cve2/cve2_decoder.sv:43.33" *)
  output imm_a_mux_sel_o;
  wire imm_a_mux_sel_o;
  (* src = "rtl/cve2/cve2_decoder.sv:44.33" *)
  output [2:0] imm_b_mux_sel_o;
  wire [2:0] imm_b_mux_sel_o;
  (* src = "rtl/cve2/cve2_decoder.sv:47.33" *)
  output [31:0] imm_b_type_o;
  wire [31:0] imm_b_type_o;
  (* src = "rtl/cve2/cve2_decoder.sv:45.33" *)
  output [31:0] imm_i_type_o;
  wire [31:0] imm_i_type_o;
  (* src = "rtl/cve2/cve2_decoder.sv:49.33" *)
  output [31:0] imm_j_type_o;
  wire [31:0] imm_j_type_o;
  (* src = "rtl/cve2/cve2_decoder.sv:46.33" *)
  output [31:0] imm_s_type_o;
  wire [31:0] imm_s_type_o;
  (* src = "rtl/cve2/cve2_decoder.sv:48.33" *)
  output [31:0] imm_u_type_o;
  wire [31:0] imm_u_type_o;
  (* src = "rtl/cve2/cve2_decoder.sv:35.32" *)
  input instr_first_cycle_i;
  wire instr_first_cycle_i;
  (* src = "rtl/cve2/cve2_decoder.sv:37.32" *)
  input [31:0] instr_rdata_alu_i;
  wire [31:0] instr_rdata_alu_i;
  (* src = "rtl/cve2/cve2_decoder.sv:36.32" *)
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  (* src = "rtl/cve2/cve2_decoder.sv:91.32" *)
  output jump_in_dec_o;
  wire jump_in_dec_o;
  (* src = "rtl/cve2/cve2_decoder.sv:32.32" *)
  output jump_set_o;
  wire jump_set_o;
  (* src = "rtl/cve2/cve2_decoder.sv:27.32" *)
  output mret_insn_o;
  wire mret_insn_o;
  (* src = "rtl/cve2/cve2_decoder.sv:70.32" *)
  output mult_en_o;
  wire mult_en_o;
  (* src = "rtl/cve2/cve2_decoder.sv:72.32" *)
  output mult_sel_o;
  wire mult_sel_o;
  (* src = "rtl/cve2/cve2_decoder.sv:75.32" *)
  output [1:0] multdiv_operator_o;
  wire [1:0] multdiv_operator_o;
  (* src = "rtl/cve2/cve2_decoder.sv:76.32" *)
  output [1:0] multdiv_signed_mode_o;
  wire [1:0] multdiv_signed_mode_o;
  (* src = "rtl/cve2/cve2_decoder.sv:55.32" *)
  output [4:0] rf_raddr_a_o;
  wire [4:0] rf_raddr_a_o;
  (* src = "rtl/cve2/cve2_decoder.sv:56.32" *)
  output [4:0] rf_raddr_b_o;
  wire [4:0] rf_raddr_b_o;
  (* src = "rtl/cve2/cve2_decoder.sv:58.32" *)
  output rf_ren_a_o;
  wire rf_ren_a_o;
  (* src = "rtl/cve2/cve2_decoder.sv:59.32" *)
  output rf_ren_b_o;
  wire rf_ren_b_o;
  (* src = "rtl/cve2/cve2_decoder.sv:57.32" *)
  output [4:0] rf_waddr_o;
  wire [4:0] rf_waddr_o;
  (* src = "rtl/cve2/cve2_decoder.sv:53.32" *)
  output rf_wdata_sel_o;
  wire rf_wdata_sel_o;
  (* src = "rtl/cve2/cve2_decoder.sv:54.32" *)
  output rf_we_o;
  wire rf_we_o;
  (* src = "rtl/cve2/cve2_decoder.sv:22.32" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_decoder.sv:31.32" *)
  output wfi_insn_o;
  wire wfi_insn_o;
  (* src = "rtl/cve2/cve2_decoder.sv:50.33" *)
  output [31:0] zimm_rs1_type_o;
  wire [31:0] zimm_rs1_type_o;
  assign \$11  = \$7  || \$9 ;
  assign \$13  = ! instr_rdata_i[19:15];
  assign \$15  = \$11  && \$13 ;
  assign \$152  = ! instr_rdata_alu_i[31:27];
  assign \$154  = instr_rdata_alu_i[31:27] == 4'h8;
  assign \$170  = ! instr_rdata_alu_i[14:12];
  assign \$23  = | instr_rdata_i[14:12];
  assign \$35  = ! instr_rdata_i[26:25];
  assign \$auto$rtlil.cc:3092:Mux$1599  = ~ \$35 ;
  assign \$58  = { instr_rdata_i[26], instr_rdata_i[13:12] } == 3'h5;
  assign \$7  = csr_op == 2'h2;
  assign \$71  = ! instr_rdata_i[14:12];
  assign \$79  = | instr_rdata_i[19:15];
  assign \$9  = csr_op == 2'h3;
  assign \$81  = | instr_rdata_i[11:7];
  assign \$83  = \$79  || \$81 ;
  assign \$auto$opt_reduce.cc:137:opt_pmux$16810  = | { \$procmux$6059_Y , \$ecall_insn_o$76 , \$dret_insn_o$75 , \$mret_insn_o$74 , \$ebrk_insn_o$73  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16812  = | { \$jump_in_dec_o$69 , \$71  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16814  = | { \$procmux$6530_CMP , \$procmux$6010_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16816  = | { \$procmux$6284_CMP , \$procmux$6282_CMP , \$procmux$6281_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16818  = | { \$procmux$6530_CMP , \$procmux$6010_CMP , \$procmux$6009_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16820  = | { \$imm_b_mux_sel_o$165 [2], \$170  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16822  = | { \$procmux$6295_CMP , \$procmux$6281_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16824  = | { \$procmux$6297_CMP , \$procmux$6282_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16826  = | { \$procmux$6299_CMP , \$procmux$6284_CMP , \$procmux$6283_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16830  = | { \$procmux$5921_CMP , \$procmux$5669_CMP , \$procmux$5607_CMP , \$procmux$5483_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16832  = | { \$procmux$5920_CMP , \$procmux$5833_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16836  = | { \$procmux$5941_CMP , \$procmux$5921_CMP , \$procmux$5920_CMP , \$procmux$5833_CMP , \$procmux$5774_CMP , \$procmux$5669_CMP  };
  assign rf_ren_b_o = | { \$procmux$6274_CMP , \$branch_in_dec_o$123 , \$data_we_o$119  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16840  = | { \$procmux$5566_CMP , \$procmux$5557_CMP , \$procmux$5556_CMP , \$procmux$5555_CMP , \$procmux$5554_CMP , \$procmux$5553_CMP , \$procmux$5552_CMP , \$procmux$5551_CMP , \$procmux$5550_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16842  = | { \$procmux$6620_CMP , \$procmux$6517_CMP , \$procmux$6349_CMP , \$procmux$6274_CMP , \$branch_in_dec_o$123 , \$data_we_o$119  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16844  = | { \$procmux$5941_CMP , \$procmux$5920_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16846  = | { \$procmux$6847_CMP , \$procmux$6846_CMP , \$procmux$6349_CMP , \$procmux$6274_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16848  = | { \$procmux$6847_CMP , \$procmux$6846_CMP , \$procmux$6666_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16850  = | { \$procmux$6010_CMP , \$procmux$6009_CMP , \$procmux$6008_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16878  = | { \$procmux$5774_CMP , \$procmux$5696_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16834  = | { \$procmux$6517_CMP , \$data_we_o$119  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16828  = | { \$procmux$6666_CMP , \$procmux$6620_CMP  };
  assign \$procmux$5366_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 7'h73;
  assign \$alu_op_a_mux_sel_o$174 [1] = \$170  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1132.41-1136.12|rtl/cve2/cve2_decoder.sv:1132.9-1148.12" *) 1'h0 : instr_rdata_alu_i[14];
  assign \$procmux$5399_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16|rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 4'hf;
  function [1:0] \$procmux$5403 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:1120.19-1126.14|rtl/cve2/cve2_decoder.sv:1113.9-1128.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$5403  = b[1:0];
      2'b1?:
        \$procmux$5403  = b[3:2];
      default:
        \$procmux$5403  = a;
    endcase
  endfunction
  assign \$alu_op_a_mux_sel_o$167  = \$procmux$5403 (2'h3, 4'h2, { \$170 , \$imm_b_mux_sel_o$165 [2] });
  assign \$imm_b_mux_sel_o$165 [2] = instr_rdata_alu_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1120.19-1126.14|rtl/cve2/cve2_decoder.sv:1113.9-1128.16" *) 1'h1;
  assign \$alu_operator_o$166 [5] = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1120.19-1126.14|rtl/cve2/cve2_decoder.sv:1113.9-1128.16" *) \$auto$opt_reduce.cc:137:opt_pmux$16820 ;
  assign \$procmux$5483_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:918.18-1106.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 6'h33;
  function [4:0] \$procmux$5549 ;
    input [4:0] a;
    input [44:0] b;
    input [8:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:1098.36-1101.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" *)
    (* parallel_case *)
    casez (s)
      9'b????????1:
        \$procmux$5549  = b[4:0];
      9'b???????1?:
        \$procmux$5549  = b[9:5];
      9'b??????1??:
        \$procmux$5549  = b[14:10];
      9'b?????1???:
        \$procmux$5549  = b[19:15];
      9'b????1????:
        \$procmux$5549  = b[24:20];
      9'b???1?????:
        \$procmux$5549  = b[29:25];
      9'b??1??????:
        \$procmux$5549  = b[34:30];
      9'b?1???????:
        \$procmux$5549  = b[39:35];
      9'b1????????:
        \$procmux$5549  = b[44:40];
      default:
        \$procmux$5549  = a;
    endcase
  endfunction
  assign { \$alu_operator_o$159 [5], \$alu_operator_o$159 [3:0] } = \$procmux$5549 (5'h1c, 45'h01d886452500, { \$procmux$5565_CMP , \$procmux$5564_CMP , \$procmux$5563_CMP , \$procmux$5562_CMP , \$procmux$5561_CMP , \$procmux$5560_CMP , \$procmux$5559_CMP , \$procmux$5558_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16840  });
  assign \$procmux$5550_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1098.36-1101.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 4'hf;
  assign \$procmux$5551_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1094.36-1097.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 4'he;
  assign \$procmux$5552_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1090.36-1093.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 4'hd;
  assign \$procmux$5553_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1086.36-1089.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 4'hc;
  assign \$procmux$5554_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1082.36-1085.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 4'hb;
  assign \$procmux$5555_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1078.36-1081.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 4'ha;
  assign \$procmux$5556_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1074.36-1077.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 4'h9;
  assign \$procmux$5557_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1070.36-1073.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 4'h8;
  assign \$procmux$5558_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:976.36-976.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 9'h105;
  assign \$procmux$5559_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:975.36-975.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 3'h5;
  assign \$procmux$5560_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:974.36-974.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 1'h1;
  assign \$procmux$5561_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:973.36-973.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 3'h7;
  assign \$procmux$5562_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:972.36-972.60|rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 3'h6;
  assign \$procmux$5563_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:971.36-971.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 3'h4;
  assign \$procmux$5564_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:969.36-969.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 2'h2;
  assign \$procmux$5565_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:968.36-968.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 9'h100;
  assign \$procmux$5566_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:967.36-967.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] };
  assign { \$alu_operator_o$162 [5], \$alu_operator_o$162 [3:0] } = instr_rdata_alu_i[26] ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:923.11-963.14|rtl/cve2/cve2_decoder.sv:922.9-1105.12" *) 5'h1c : { \$alu_operator_o$159 [5], \$alu_operator_o$159 [3:0] };
  assign \$procmux$5605_CMP  = instr_rdata_alu_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:871.13-911.16|rtl/cve2/cve2_decoder.sv:795.9-915.16" *) 3'h5;
  assign \$procmux$5607_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:790.22-916.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 5'h13;
  assign \$alu_operator_o$155 [5] = ~ (* src = "rtl/cve2/cve2_decoder.sv:909.17-909.42|rtl/cve2/cve2_decoder.sv:908.24-910.18" *) \$154 ;
  assign { \$alu_operator_o$156 [5], \$alu_operator_o$156 [0] } = \$152  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:907.17-907.42|rtl/cve2/cve2_decoder.sv:906.15-910.18" *) 2'h1 : { \$alu_operator_o$155 [5], 1'h0 };
  function [4:0] \$procmux$5647 ;
    input [4:0] a;
    input [34:0] b;
    input [6:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:871.13-911.16|rtl/cve2/cve2_decoder.sv:795.9-915.16" *)
    (* parallel_case *)
    casez (s)
      7'b??????1:
        \$procmux$5647  = b[4:0];
      7'b?????1?:
        \$procmux$5647  = b[9:5];
      7'b????1??:
        \$procmux$5647  = b[14:10];
      7'b???1???:
        \$procmux$5647  = b[19:15];
      7'b??1????:
        \$procmux$5647  = b[24:20];
      7'b?1?????:
        \$procmux$5647  = b[29:25];
      7'b1??????:
        \$procmux$5647  = b[34:30];
      default:
        \$procmux$5647  = a;
    endcase
  endfunction
  assign { \$alu_operator_o$158 [5], \$alu_operator_o$158 [3:0] } = \$procmux$5647 (5'h00, { 30'h37c10c8a, \$alu_operator_o$156 [5], 1'h1, \$alu_operator_o$156 [5], 1'h0, \$alu_operator_o$156 [0] }, { \$procmux$5654_CMP , \$procmux$5653_CMP , \$procmux$5652_CMP , \$procmux$5651_CMP , \$procmux$5650_CMP , \$imm_b_mux_sel_o$165 [2], \$procmux$5605_CMP  });
  assign \$procmux$5650_CMP  = instr_rdata_alu_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:801.19-801.44|rtl/cve2/cve2_decoder.sv:795.9-915.16" *) 3'h7;
  assign \$procmux$5651_CMP  = instr_rdata_alu_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:800.19-800.43|rtl/cve2/cve2_decoder.sv:795.9-915.16" *) 3'h6;
  assign \$procmux$5652_CMP  = instr_rdata_alu_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:799.19-799.44|rtl/cve2/cve2_decoder.sv:795.9-915.16" *) 3'h4;
  assign \$procmux$5653_CMP  = instr_rdata_alu_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:798.19-798.45|rtl/cve2/cve2_decoder.sv:795.9-915.16" *) 2'h3;
  assign \$procmux$5654_CMP  = instr_rdata_alu_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:797.19-797.44|rtl/cve2/cve2_decoder.sv:795.9-915.16" *) 2'h2;
  assign \$alu_op_b_mux_sel_o$149  = ~ (* src = "rtl/cve2/cve2_decoder.sv:755.29-759.12|rtl/cve2/cve2_decoder.sv:755.9-759.12" *) instr_rdata_alu_i[14];
  assign \$procmux$5669_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:750.21-760.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 6'h23;
  assign \$alu_op_a_mux_sel_o$139 [1] = ~ (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:732.34-736.12|rtl/cve2/cve2_decoder.sv:732.9-743.12" *) instr_first_cycle_i;
  assign \$procmux$5696_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:718.22-744.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 7'h63;
  assign \$alu_operator_o$143 [5:0] = instr_first_cycle_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:732.34-736.12|rtl/cve2/cve2_decoder.sv:732.9-743.12" *) { \$alu_operator_o$141 [5:4], 1'h1, \$alu_operator_o$141 [2:0] } : 6'h00;
  function [4:0] \$procmux$5752 ;
    input [4:0] a;
    input [29:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:726.20-726.45|rtl/cve2/cve2_decoder.sv:720.9-728.16" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$5752  = b[4:0];
      6'b????1?:
        \$procmux$5752  = b[9:5];
      6'b???1??:
        \$procmux$5752  = b[14:10];
      6'b??1???:
        \$procmux$5752  = b[19:15];
      6'b?1????:
        \$procmux$5752  = b[24:20];
      6'b1?????:
        \$procmux$5752  = b[29:25];
      default:
        \$procmux$5752  = a;
    endcase
  endfunction
  assign { \$alu_operator_o$141 [5:4], \$alu_operator_o$141 [2:0] } = \$procmux$5752 (5'h14, 30'h1ae4ad4c, { \$170 , \$imm_b_mux_sel_o$165 [2], \$procmux$5652_CMP , \$procmux$5605_CMP , \$procmux$5651_CMP , \$procmux$5650_CMP  });
  assign \$procmux$5774_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:703.9-715.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 7'h67;
  assign \$procmux$5833_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:686.9-698.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 7'h6f;
  function [0:0] \$procmux$5894 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$5894  = b[0:0];
      3'b?1?:
        \$procmux$5894  = b[1:1];
      3'b1??:
        \$procmux$5894  = b[2:2];
      default:
        \$procmux$5894  = a;
    endcase
  endfunction
  assign alu_op_b_mux_sel_o = \$procmux$5894 (1'h1, { \$alu_op_a_mux_sel_o$139 [1], \$alu_op_b_mux_sel_o$149 , 1'h0 }, { \$procmux$5696_CMP , \$procmux$5669_CMP , \$procmux$5483_CMP  });
  function [1:0] \$procmux$5912 ;
    input [1:0] a;
    input [9:0] b;
    input [4:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        \$procmux$5912  = b[1:0];
      5'b???1?:
        \$procmux$5912  = b[3:2];
      5'b??1??:
        \$procmux$5912  = b[5:4];
      5'b?1???:
        \$procmux$5912  = b[7:6];
      5'b1????:
        \$procmux$5912  = b[9:8];
      default:
        \$procmux$5912  = a;
    endcase
  endfunction
  assign alu_op_a_mux_sel_o = \$procmux$5912 (2'h3, { \$alu_op_a_mux_sel_o$139 [1], 5'h08, \$alu_op_a_mux_sel_o$167 , \$alu_op_a_mux_sel_o$174 [1], \$alu_op_a_mux_sel_o$174 [1] }, { \$auto$opt_reduce.cc:137:opt_pmux$16878 , \$auto$opt_reduce.cc:137:opt_pmux$16832 , \$auto$opt_reduce.cc:137:opt_pmux$16830 , \$procmux$5399_CMP , \$procmux$5366_CMP  });
  assign \$procmux$5920_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:783.21-788.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 5'h17;
  assign \$procmux$5921_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:762.20-769.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 2'h3;
  function [5:0] \$procmux$5934 ;
    input [5:0] a;
    input [29:0] b;
    input [4:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16|rtl/cve2/cve2_decoder.sv:678.5-1152.12" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        \$procmux$5934  = b[5:0];
      5'b???1?:
        \$procmux$5934  = b[11:6];
      5'b??1??:
        \$procmux$5934  = b[17:12];
      5'b?1???:
        \$procmux$5934  = b[23:18];
      5'b1????:
        \$procmux$5934  = b[29:24];
      default:
        \$procmux$5934  = a;
    endcase
  endfunction
  assign alu_operator_o[5:0] = \$procmux$5934 (6'h2c, { \$alu_operator_o$143 [5:0], 6'h00, \$alu_operator_o$158 [5], 1'h0, \$alu_operator_o$158 [3:0], \$alu_operator_o$162 [5], 1'h0, \$alu_operator_o$162 [3:0], \$alu_operator_o$166 [5], 1'h0, \$alu_operator_o$166 [5], \$alu_operator_o$166 [5], 2'h0 }, { \$procmux$5696_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16836 , \$procmux$5607_CMP , \$procmux$5483_CMP , \$procmux$5399_CMP  });
  assign \$procmux$5941_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:775.19-781.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 6'h37;
  function [2:0] \$procmux$5954 ;
    input [2:0] a;
    input [17:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$5954  = b[2:0];
      6'b????1?:
        \$procmux$5954  = b[5:3];
      6'b???1??:
        \$procmux$5954  = b[8:6];
      6'b??1???:
        \$procmux$5954  = b[11:9];
      6'b?1????:
        \$procmux$5954  = b[14:12];
      6'b1?????:
        \$procmux$5954  = b[17:15];
      default:
        \$procmux$5954  = a;
    endcase
  endfunction
  assign imm_b_mux_sel_o = \$procmux$5954 (3'h0, { 2'h2, \$alu_op_a_mux_sel_o$139 [1], \$alu_op_a_mux_sel_o$139 [1], 1'h0, \$alu_op_a_mux_sel_o$139 [1], 1'h0, \$alu_op_a_mux_sel_o$139 [1], 3'h0, \$alu_op_b_mux_sel_o$149 , 3'h3, \$imm_b_mux_sel_o$165 [2], 1'h0, \$imm_b_mux_sel_o$165 [2] }, { \$procmux$5833_CMP , \$procmux$5774_CMP , \$procmux$5696_CMP , \$procmux$5669_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16844 , \$procmux$5399_CMP  });
  assign imm_a_mux_sel_o = \$procmux$5366_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) \$170  : 1'h1;
  assign branch_in_dec_o = illegal_insn_o ? (* src = "rtl/cve2/cve2_decoder.sv:648.23-656.8|rtl/cve2/cve2_decoder.sv:648.5-656.8" *) 1'h0 : \$branch_in_dec_o$123 ;
  assign jump_in_dec_o = illegal_insn_o ? (* src = "rtl/cve2/cve2_decoder.sv:648.23-656.8|rtl/cve2/cve2_decoder.sv:648.5-656.8" *) 1'h0 : \$jump_in_dec_o$122 ;
  assign data_we_o = illegal_insn_o ? (* src = "rtl/cve2/cve2_decoder.sv:648.23-656.8|rtl/cve2/cve2_decoder.sv:648.5-656.8" *) 1'h0 : \$data_we_o$119 ;
  assign data_req_o = illegal_insn_o ? (* src = "rtl/cve2/cve2_decoder.sv:648.23-656.8|rtl/cve2/cve2_decoder.sv:648.5-656.8" *) 1'h0 : \$auto$opt_reduce.cc:137:opt_pmux$16834 ;
  assign csr_access_o = illegal_insn_o ? (* src = "rtl/cve2/cve2_decoder.sv:648.23-656.8|rtl/cve2/cve2_decoder.sv:648.5-656.8" *) 1'h0 : rf_wdata_sel_o;
  assign jump_set_o = illegal_insn_o ? (* src = "rtl/cve2/cve2_decoder.sv:648.23-656.8|rtl/cve2/cve2_decoder.sv:648.5-656.8" *) 1'h0 : \$jump_set_o$111 ;
  assign rf_we_o = illegal_insn_o ? (* src = "rtl/cve2/cve2_decoder.sv:648.23-656.8|rtl/cve2/cve2_decoder.sv:648.5-656.8" *) 1'h0 : \$procmux$6838_Y ;
  assign illegal_insn_o = \$illegal_insn$102  | (* src = "rtl/cve2/cve2_decoder.sv:640.7-640.27|rtl/cve2/cve2_decoder.sv:639.5-641.8" *) illegal_c_insn_i;
  function [1:0] \$procmux$6007 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:625.22-625.44|rtl/cve2/cve2_decoder.sv:622.11-627.18" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$6007  = b[1:0];
      3'b?1?:
        \$procmux$6007  = b[3:2];
      3'b1??:
        \$procmux$6007  = b[5:4];
      default:
        \$procmux$6007  = a;
    endcase
  endfunction
  assign \$csr_op$89  = \$procmux$6007 (2'h0, 6'h1b, { \$procmux$6010_CMP , \$procmux$6009_CMP , \$procmux$6008_CMP  });
  assign \$procmux$6008_CMP  = instr_rdata_i[13:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:625.22-625.44|rtl/cve2/cve2_decoder.sv:622.11-627.18" *) 2'h3;
  assign \$procmux$6009_CMP  = instr_rdata_i[13:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:624.22-624.42|rtl/cve2/cve2_decoder.sv:622.11-627.18" *) 2'h2;
  assign \$procmux$6010_CMP  = instr_rdata_i[13:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:623.22-623.44|rtl/cve2/cve2_decoder.sv:622.11-627.18" *) 1'h1;
  assign \$procmux$6016_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 7'h73;
  assign \$csr_illegal$88  = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:625.22-625.44|rtl/cve2/cve2_decoder.sv:622.11-627.18" *) \$auto$opt_reduce.cc:137:opt_pmux$16850 ;
  assign \$30  = ~ (* src = "rtl/cve2/cve2_decoder.sv:619.13-619.39|rtl/cve2/cve2_decoder.sv:618.11-620.14" *) instr_rdata_i[14];
  assign \$illegal_insn$90  = \$71  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" *) \$illegal_insn$84  : \$csr_illegal$88 ;
  assign \$illegal_insn$84  = \$illegal_insn$72  | (* src = "rtl/cve2/cve2_decoder.sv:610.13-610.33|rtl/cve2/cve2_decoder.sv:609.11-611.14" *) \$83 ;
  assign \$procmux$6059_Y  = instr_rdata_i[31:20] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:602.15-602.33|rtl/cve2/cve2_decoder.sv:586.11-606.18" *) 9'h105;
  assign \$ecall_insn_o$76  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:589.15-589.35|rtl/cve2/cve2_decoder.sv:586.11-606.18" *) instr_rdata_i[31:20];
  assign \$dret_insn_o$75  = instr_rdata_i[31:20] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:599.15-599.34|rtl/cve2/cve2_decoder.sv:586.11-606.18" *) 11'h7b2;
  assign \$mret_insn_o$74  = instr_rdata_i[31:20] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:596.15-596.34|rtl/cve2/cve2_decoder.sv:586.11-606.18" *) 10'h302;
  assign \$ebrk_insn_o$73  = instr_rdata_i[31:20] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:593.15-593.34|rtl/cve2/cve2_decoder.sv:586.11-606.18" *) 1'h1;
  assign \$illegal_insn$72  = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:602.15-602.33|rtl/cve2/cve2_decoder.sv:586.11-606.18" *) \$auto$opt_reduce.cc:137:opt_pmux$16810 ;
  assign \$procmux$6136_Y  = \$71  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" *) 1'h0 : \$30 ;
  assign \$procmux$6152_Y  = \$71  & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" *) \$procmux$6059_Y ;
  assign \$ecall_insn_o$97  = \$71  & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" *) \$ecall_insn_o$76 ;
  assign \$dret_insn_o$96  = \$71  & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" *) \$dret_insn_o$75 ;
  assign \$mret_insn_o$95  = \$71  & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" *) \$mret_insn_o$74 ;
  assign \$ebrk_insn_o$94  = \$71  & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" *) \$ebrk_insn_o$73 ;
  assign \$csr_op$93  = \$71  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" *) 2'h0 : \$csr_op$89 ;
  assign \$csr_access_o$101  = ~ (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" *) \$71 ;
  assign \$jump_in_dec_o$69  = instr_rdata_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:565.19-576.14|rtl/cve2/cve2_decoder.sv:560.9-580.16" *) 1'h1;
  assign \$procmux$6220_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 4'hf;
  assign \$jump_set_o$68  = \$jump_in_dec_o$69  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:565.19-576.14|rtl/cve2/cve2_decoder.sv:560.9-580.16" *) instr_first_cycle_i;
  assign \$illegal_insn$66  = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:565.19-576.14|rtl/cve2/cve2_decoder.sv:560.9-580.16" *) \$auto$opt_reduce.cc:137:opt_pmux$16812 ;
  assign \$illegal_insn$59  = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" *) \$procmux$6269_CTRL ;
  assign \$procmux$6269_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" *) \$procmux$6269_CMP ;
  assign \$procmux$6269_CMP [0] = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" *) { instr_rdata_i[31:25], instr_rdata_i[14:12] };
  assign \$procmux$6269_CMP [1] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 9'h100;
  assign \$procmux$6269_CMP [2] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 2'h2;
  assign \$procmux$6269_CMP [3] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 2'h3;
  assign \$procmux$6269_CMP [4] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 3'h4;
  assign \$procmux$6269_CMP [5] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 3'h6;
  assign \$procmux$6269_CMP [6] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 3'h7;
  assign \$procmux$6269_CMP [7] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 1'h1;
  assign \$procmux$6269_CMP [8] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 3'h5;
  assign \$procmux$6269_CMP [9] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 9'h105;
  assign \$procmux$6274_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 6'h33;
  function [1:0] \$procmux$6280 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:538.36-542.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$6280  = b[1:0];
      2'b1?:
        \$procmux$6280  = b[3:2];
      default:
        \$procmux$6280  = a;
    endcase
  endfunction
  assign \$multdiv_signed_mode_o$61  = \$procmux$6280 (2'h0, 4'h7, { \$procmux$6283_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16816  });
  assign \$procmux$6281_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:538.36-542.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 4'he;
  assign \$procmux$6282_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:528.36-532.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 4'hc;
  assign \$procmux$6283_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:518.36-522.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 4'ha;
  assign \$procmux$6284_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:513.36-517.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 4'h9;
  function [1:0] \$procmux$6294 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:543.36-547.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$6294  = b[1:0];
      3'b?1?:
        \$procmux$6294  = b[3:2];
      3'b1??:
        \$procmux$6294  = b[5:4];
      default:
        \$procmux$6294  = a;
    endcase
  endfunction
  assign \$multdiv_operator_o$60  = \$procmux$6294 (2'h0, 6'h1b, { \$auto$opt_reduce.cc:137:opt_pmux$16826 , \$auto$opt_reduce.cc:137:opt_pmux$16824 , \$auto$opt_reduce.cc:137:opt_pmux$16822  });
  assign \$procmux$6295_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:543.36-547.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 4'hf;
  assign \$procmux$6297_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:533.36-537.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 4'hd;
  assign \$procmux$6299_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:523.36-527.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 4'hb;
  assign \$illegal_insn$62  = \$illegal_insn$59  | (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:448.11-448.61|rtl/cve2/cve2_decoder.sv:447.9-552.12" *) \$58 ;
  assign \$multdiv_signed_mode_o$64  = \$58  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:448.11-448.61|rtl/cve2/cve2_decoder.sv:447.9-552.12" *) 2'h0 : \$multdiv_signed_mode_o$61 ;
  assign \$multdiv_operator_o$63  = \$58  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:448.11-448.61|rtl/cve2/cve2_decoder.sv:447.9-552.12" *) 2'h0 : \$multdiv_operator_o$60 ;
  assign \$procmux$6347_CMP  = instr_rdata_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16|rtl/cve2/cve2_decoder.sv:348.9-440.16" *) 3'h5;
  assign \$procmux$6349_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 5'h13;
  assign \$illegal_insn$54  = \$procmux$6426_CTRL  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:427.19-431.22|rtl/cve2/cve2_decoder.sv:398.15-435.22" *) \$auto$rtlil.cc:3092:Mux$1599  : 1'h1;
  assign \$procmux$6426_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:400.28-400.81|rtl/cve2/cve2_decoder.sv:398.15-435.22" *) \$procmux$6426_CMP ;
  assign \$procmux$6426_CMP [0] = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:400.28-400.81|rtl/cve2/cve2_decoder.sv:398.15-435.22" *) instr_rdata_i[31:27];
  assign \$procmux$6426_CMP [1] = instr_rdata_i[31:27] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:400.28-400.81|rtl/cve2/cve2_decoder.sv:398.15-435.22" *) 4'h8;
  assign \$illegal_insn$55  = \$illegal_insn$54  | (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:396.15-396.65|rtl/cve2/cve2_decoder.sv:395.13-436.16" *) instr_rdata_i[26];
  assign \$illegal_insn$41  = \$procmux$6426_CMP [0] ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:373.17-388.24|rtl/cve2/cve2_decoder.sv:357.13-391.20" *) \$auto$rtlil.cc:3092:Mux$1599  : 1'h1;
  function [0:0] \$procmux$6497 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16|rtl/cve2/cve2_decoder.sv:348.9-440.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$6497  = b[0:0];
      2'b1?:
        \$procmux$6497  = b[1:1];
      default:
        \$procmux$6497  = a;
    endcase
  endfunction
  assign \$illegal_insn$56  = \$procmux$6497 (1'h0, { \$illegal_insn$41 , \$illegal_insn$55  }, { \$jump_in_dec_o$69 , \$procmux$6347_CMP  });
  assign \$procmux$6501_CMP [3] = instr_rdata_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:354.19-354.39|rtl/cve2/cve2_decoder.sv:348.9-440.16" *) 3'h4;
  assign \$procmux$6501_CMP [4] = instr_rdata_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:354.19-354.39|rtl/cve2/cve2_decoder.sv:348.9-440.16" *) 3'h6;
  assign \$procmux$6501_CMP [5] = instr_rdata_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:354.19-354.39|rtl/cve2/cve2_decoder.sv:348.9-440.16" *) 3'h7;
  assign \$procmux$6517_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:308.20-330.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 2'h3;
  function [1:0] \$procmux$6528 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:319.18-319.38|rtl/cve2/cve2_decoder.sv:317.9-329.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$6528  = b[1:0];
      2'b1?:
        \$procmux$6528  = b[3:2];
      default:
        \$procmux$6528  = a;
    endcase
  endfunction
  assign \$data_type_o$28  = \$procmux$6528 (2'h0, 4'h9, { \$procmux$6530_CMP , \$procmux$6010_CMP  });
  assign \$procmux$6530_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:318.18-318.38|rtl/cve2/cve2_decoder.sv:317.9-329.16" *) instr_rdata_i[13:12];
  function [0:0] \$procmux$6542 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:320.18-325.14|rtl/cve2/cve2_decoder.sv:317.9-329.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$6542  = b[0:0];
      2'b1?:
        \$procmux$6542  = b[1:1];
      default:
        \$procmux$6542  = a;
    endcase
  endfunction
  assign \$illegal_insn$32  = \$procmux$6542 (1'h1, { 1'h0, instr_rdata_i[14] }, { \$auto$opt_reduce.cc:137:opt_pmux$16814 , \$procmux$6009_CMP  });
  assign \$data_we_o$119  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:289.21-306.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 6'h23;
  assign \$illegal_insn$27  = \$auto$opt_reduce.cc:137:opt_pmux$16818  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:303.20-303.41|rtl/cve2/cve2_decoder.sv:300.9-305.16" *) instr_rdata_i[14] : 1'h1;
  assign \$illegal_insn$25  = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:277.20-277.40|rtl/cve2/cve2_decoder.sv:271.9-279.16" *) \$procmux$6603_CTRL ;
  assign \$procmux$6603_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:277.20-277.40|rtl/cve2/cve2_decoder.sv:271.9-279.16" *) { \$procmux$6501_CMP [5:3], \$procmux$6347_CMP , \$jump_in_dec_o$69 , \$71  };
  assign \$branch_in_dec_o$123  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:268.22-283.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 7'h63;
  assign \$procmux$6620_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:250.20-266.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 7'h67;
  assign \$procmux$6666_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:237.19-248.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 7'h6f;
  function [0:0] \$procmux$6698 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$6698  = b[0:0];
      2'b1?:
        \$procmux$6698  = b[1:1];
      default:
        \$procmux$6698  = a;
    endcase
  endfunction
  assign \$jump_in_dec_o$122  = \$procmux$6698 (1'h0, { 1'h1, \$jump_in_dec_o$69  }, { \$auto$opt_reduce.cc:137:opt_pmux$16828 , \$procmux$6220_CMP  });
  assign data_sign_extension_o = \$procmux$6517_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:308.20-330.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$30 ;
  assign data_type_o = \$auto$opt_reduce.cc:137:opt_pmux$16834  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:308.20-330.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$data_type_o$28  : 2'h0;
  assign rf_wdata_sel_o = \$procmux$6016_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$csr_access_o$101 ;
  assign multdiv_signed_mode_o = \$procmux$6274_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$multdiv_signed_mode_o$64  : 2'h0;
  assign multdiv_operator_o = \$procmux$6274_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$multdiv_operator_o$63  : 2'h0;
  function [0:0] \$procmux$6782 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$6782  = b[0:0];
      2'b1?:
        \$procmux$6782  = b[1:1];
      default:
        \$procmux$6782  = a;
    endcase
  endfunction
  assign rf_ren_a_o = \$procmux$6782 (1'h0, { 1'h1, \$procmux$6136_Y  }, { \$auto$opt_reduce.cc:137:opt_pmux$16842 , \$procmux$6016_CMP  });
  function [0:0] \$procmux$6805 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$6805  = b[0:0];
      2'b1?:
        \$procmux$6805  = b[1:1];
      default:
        \$procmux$6805  = a;
    endcase
  endfunction
  assign \$jump_set_o$111  = \$procmux$6805 (1'h0, { instr_first_cycle_i, \$jump_set_o$68  }, { \$auto$opt_reduce.cc:137:opt_pmux$16828 , \$procmux$6220_CMP  });
  assign wfi_insn_o = \$procmux$6016_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$procmux$6152_Y ;
  assign ecall_insn_o = \$procmux$6016_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$ecall_insn_o$97 ;
  assign dret_insn_o = \$procmux$6016_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$dret_insn_o$96 ;
  assign mret_insn_o = \$procmux$6016_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$mret_insn_o$95 ;
  assign ebrk_insn_o = \$procmux$6016_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$ebrk_insn_o$94 ;
  assign csr_op = \$procmux$6016_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$csr_op$93  : 2'h0;
  function [0:0] \$procmux$6838 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$6838  = b[0:0];
      3'b?1?:
        \$procmux$6838  = b[1:1];
      3'b1??:
        \$procmux$6838  = b[2:2];
      default:
        \$procmux$6838  = a;
    endcase
  endfunction
  assign \$procmux$6838_Y  = \$procmux$6838 (1'h0, { \$alu_op_a_mux_sel_o$139 [1], 1'h1, \$csr_access_o$101  }, { \$auto$opt_reduce.cc:137:opt_pmux$16828 , \$auto$opt_reduce.cc:137:opt_pmux$16846 , \$procmux$6016_CMP  });
  assign \$procmux$6846_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:341.9-341.33|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 5'h17;
  assign \$procmux$6847_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_decoder.sv:337.9-337.33|rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 6'h37;
  function [0:0] \$procmux$6859 ;
    input [0:0] a;
    input [8:0] b;
    input [8:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" *)
    (* parallel_case *)
    casez (s)
      9'b????????1:
        \$procmux$6859  = b[0:0];
      9'b???????1?:
        \$procmux$6859  = b[1:1];
      9'b??????1??:
        \$procmux$6859  = b[2:2];
      9'b?????1???:
        \$procmux$6859  = b[3:3];
      9'b????1????:
        \$procmux$6859  = b[4:4];
      9'b???1?????:
        \$procmux$6859  = b[5:5];
      9'b??1??????:
        \$procmux$6859  = b[6:6];
      9'b?1???????:
        \$procmux$6859  = b[7:7];
      9'b1????????:
        \$procmux$6859  = b[8:8];
      default:
        \$procmux$6859  = a;
    endcase
  endfunction
  assign \$illegal_insn$102  = \$procmux$6859 (1'h1, { \$23 , \$illegal_insn$25 , \$illegal_insn$27 , \$illegal_insn$32 , 1'h0, \$illegal_insn$56 , \$illegal_insn$62 , \$illegal_insn$66 , \$illegal_insn$90  }, { \$procmux$6620_CMP , \$branch_in_dec_o$123 , \$data_we_o$119 , \$procmux$6517_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16848 , \$procmux$6349_CMP , \$procmux$6274_CMP , \$procmux$6220_CMP , \$procmux$6016_CMP  });
  assign csr_op_o = \$15  ? (* src = "rtl/cve2/cve2_decoder.sv:192.7-192.30|rtl/cve2/cve2_decoder.sv:190.5-193.8" *) 2'h0 : csr_op;
  assign \$alu_op_a_mux_sel_o$139 [0] = 1'h0;
  assign \$alu_op_a_mux_sel_o$174 [0] = \$alu_op_a_mux_sel_o$174 [1];
  assign \$alu_operator_o$141 [3] = 1'h1;
  assign \$alu_operator_o$143 [6] = 1'h0;
  assign \$alu_operator_o$155 [4:0] = { 2'h1, \$alu_operator_o$155 [5], 2'h0 };
  assign \$alu_operator_o$156 [4:1] = { 2'h1, \$alu_operator_o$156 [5], 1'h0 };
  assign { \$alu_operator_o$158 [6], \$alu_operator_o$158 [4] } = 2'h0;
  assign { \$alu_operator_o$159 [6], \$alu_operator_o$159 [4] } = 2'h0;
  assign { \$alu_operator_o$162 [6], \$alu_operator_o$162 [4] } = 2'h0;
  assign { \$alu_operator_o$166 [6], \$alu_operator_o$166 [4:0] } = { 2'h0, \$alu_operator_o$166 [5], \$alu_operator_o$166 [5], 2'h0 };
  assign \$imm_b_mux_sel_o$165 [1:0] = { 1'h0, \$imm_b_mux_sel_o$165 [2] };
  assign \$procmux$6501_CMP [0] = \$71 ;
  assign alu_multicycle_o = 1'h0;
  assign alu_operator_o[6] = 1'h0;
  assign div_en_o = 1'h0;
  assign div_sel_o = 1'h0;
  assign imm_b_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[7], instr_rdata_i[30:25], instr_rdata_i[11:8], 1'h0 };
  assign imm_i_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31:20] };
  assign imm_j_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[19:12], instr_rdata_i[20], instr_rdata_i[30:21], 1'h0 };
  assign imm_s_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31:25], instr_rdata_i[11:7] };
  assign imm_u_type_o = { instr_rdata_i[31:12], 12'h000 };
  assign mult_en_o = 1'h0;
  assign mult_sel_o = 1'h0;
  assign rf_raddr_a_o = instr_rdata_i[19:15];
  assign rf_raddr_b_o = instr_rdata_i[24:20];
  assign rf_waddr_o = instr_rdata_i[11:7];
  assign zimm_rs1_type_o = { 27'h0000000, instr_rdata_i[19:15] };
endmodule

(* src = "rtl/cve2/cve2_ex_block.sv:11.8" *)
module \cve2_ex_block$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.ex_block_i (clk_i, rst_ni, alu_operator_i, alu_operand_a_i, alu_operand_b_i, alu_instr_first_cycle_i, multdiv_operator_i, mult_en_i, div_en_i, mult_sel_i, div_sel_i, multdiv_signed_mode_i, multdiv_operand_a_i, multdiv_operand_b_i, imd_val_we_o, imd_val_d_o, imd_val_q_i, alu_adder_result_ex_o, result_ex_o, branch_target_o, branch_decision_o
, ex_valid_o);
  wire \$9 ;
  (* src = "rtl/cve2/cve2_ex_block.sv:40.33" *)
  output [31:0] alu_adder_result_ex_o;
  wire [31:0] alu_adder_result_ex_o;
  (* src = "rtl/cve2/cve2_ex_block.sv:53.16" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" *)
  wire [33:0] alu_adder_result_ext;
  (* src = "rtl/cve2/cve2_ex_block.sv:58.16" *)
  wire [63:0] alu_imd_val_d;
  (* src = "rtl/cve2/cve2_ex_block.sv:22.33" *)
  input alu_instr_first_cycle_i;
  wire alu_instr_first_cycle_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:54.32" *)
  (* unused_bits = "0" *)
  wire alu_is_equal_result;
  (* src = "rtl/cve2/cve2_ex_block.sv:20.33" *)
  input [31:0] alu_operand_a_i;
  wire [31:0] alu_operand_a_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:21.33" *)
  input [31:0] alu_operand_b_i;
  wire [31:0] alu_operand_b_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:19.33" *)
  input [6:0] alu_operator_i;
  wire [6:0] alu_operator_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:43.33" *)
  output branch_decision_o;
  wire branch_decision_o;
  (* src = "rtl/cve2/cve2_ex_block.sv:42.33" *)
  output [31:0] branch_target_o;
  wire [31:0] branch_target_o;
  (* src = "rtl/cve2/cve2_ex_block.sv:15.33" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:27.33" *)
  input div_en_i;
  wire div_en_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:29.33" *)
  input div_sel_i;
  wire div_sel_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:45.33" *)
  output ex_valid_o;
  wire ex_valid_o;
  (* src = "rtl/cve2/cve2_ex_block.sv:36.33" *)
  output [67:0] imd_val_d_o;
  wire [67:0] imd_val_d_o;
  (* src = "rtl/cve2/cve2_ex_block.sv:37.33" *)
  input [67:0] imd_val_q_i;
  wire [67:0] imd_val_q_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:35.33" *)
  output [1:0] imd_val_we_o;
  wire [1:0] imd_val_we_o;
  (* src = "rtl/cve2/cve2_ex_block.sv:26.33" *)
  input mult_en_i;
  wire mult_en_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:28.33" *)
  input mult_sel_i;
  wire mult_sel_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:31.33" *)
  input [31:0] multdiv_operand_a_i;
  wire [31:0] multdiv_operand_a_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:32.33" *)
  input [31:0] multdiv_operand_b_i;
  wire [31:0] multdiv_operand_b_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:25.33" *)
  input [1:0] multdiv_operator_i;
  wire [1:0] multdiv_operator_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:30.33" *)
  input [1:0] multdiv_signed_mode_i;
  wire [1:0] multdiv_signed_mode_i;
  (* src = "rtl/cve2/cve2_ex_block.sv:41.33" *)
  output [31:0] result_ex_o;
  wire [31:0] result_ex_o;
  (* src = "rtl/cve2/cve2_ex_block.sv:16.33" *)
  input rst_ni;
  wire rst_ni;
  assign ex_valid_o = ~ \$9 ;
  assign \$9  = | imd_val_we_o;
  (* src = "rtl/cve2/cve2_ex_block.sv:97.5" *)
  \cve2_alu$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.ex_block_i.alu_i  alu_i (
    .adder_result_ext_o(alu_adder_result_ext),
    .adder_result_o(alu_adder_result_ex_o),
    .comparison_result_o(branch_decision_o),
    .imd_val_d_o(alu_imd_val_d),
    .imd_val_q_i({ imd_val_q_i[65:34], imd_val_q_i[31:0] }),
    .imd_val_we_o(imd_val_we_o),
    .instr_first_cycle_i(alu_instr_first_cycle_i),
    .is_equal_result_o(alu_is_equal_result),
    .multdiv_operand_a_i(33'h000000000),
    .multdiv_operand_b_i(33'h000000000),
    .multdiv_sel_i(1'h0),
    .operand_a_i(alu_operand_a_i),
    .operand_b_i(alu_operand_b_i),
    .operator_i(alu_operator_i),
    .result_o(result_ex_o)
  );
  assign branch_target_o = alu_adder_result_ex_o;
  assign imd_val_d_o = { 2'h0, alu_imd_val_d[63:32], 2'h0, alu_imd_val_d[31:0] };
endmodule

(* src = "rtl/cve2/cve2_fetch_fifo.sv:15.8" *)
module \cve2_fetch_fifo$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.prefetch_buffer_i.fifo_i (clk_i, rst_ni, clear_i, busy_o, in_valid_i, in_addr_i, in_rdata_i, in_err_i, out_valid_o, out_ready_i, out_addr_o, out_rdata_o, out_err_o, out_err_plus2_o);
  wire \$10 ;
  wire \$102 ;
  wire \$106 ;
  wire \$111 ;
  wire \$115 ;
  wire \$119 ;
  wire \$12 ;
  wire \$121 ;
  wire \$127 ;
  wire \$14 ;
  wire \$16 ;
  wire \$20 ;
  wire \$22 ;
  wire \$25 ;
  wire \$27 ;
  wire \$36 ;
  wire \$39 ;
  wire \$41 ;
  wire \$45 ;
  wire \$57 ;
  wire \$6 ;
  wire \$62 ;
  wire \$73 ;
  wire \$75 ;
  wire \$81 ;
  wire \$90 ;
  wire \$96 ;
  wire \$auto$rtlil.cc:3092:Mux$17224 ;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:119.7-123.10" *)
  wire \$out_valid_o$51 ;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:57.29" *)
  wire addr_incr_two;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:55.29" *)
  wire aligned_is_compressed;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:23.31" *)
  output [1:0] busy_o;
  wire [1:0] busy_o;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:22.31" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:18.31" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:48.29" *)
  wire [2:0] entry_en;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:52.29" *)
  wire err;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:44.29" *)
  wire [2:0] err_d;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:52.51" *)
  wire err_plus2;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:44.40" *)
  reg [2:0] err_q;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:52.36" *)
  wire err_unaligned;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:27.31" *)
  input [31:0] in_addr_i;
  wire [31:0] in_addr_i;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:29.31" *)
  input in_err_i;
  wire in_err_i;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:28.31" *)
  input [31:0] in_rdata_i;
  wire [31:0] in_rdata_i;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:26.31" *)
  input in_valid_i;
  wire in_valid_i;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:59.29" *)
  wire [30:0] instr_addr_d;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:60.29" *)
  wire instr_addr_en;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:58.29" *)
  wire [30:0] instr_addr_next;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:59.43" *)
  reg [30:0] instr_addr_q;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:46.29" *)
  wire [2:0] lowest_free_entry;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:34.31" *)
  output [31:0] out_addr_o;
  wire [31:0] out_addr_o;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:36.31" *)
  output out_err_o;
  wire out_err_o;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:37.31" *)
  output out_err_plus2_o;
  wire out_err_plus2_o;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:35.31" *)
  output [31:0] out_rdata_o;
  wire [31:0] out_rdata_o;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:33.31" *)
  input out_ready_i;
  wire out_ready_i;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:32.31" *)
  output out_valid_o;
  wire out_valid_o;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:50.29" *)
  wire pop_fifo;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:51.29" *)
  wire [31:0] rdata;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:43.29" *)
  wire [95:0] rdata_d;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:43.40" *)
  reg [95:0] rdata_q;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:51.36" *)
  wire [31:0] rdata_unaligned;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:19.31" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:55.52" *)
  wire unaligned_is_compressed;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:53.29" *)
  wire valid;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:45.29" *)
  wire [2:0] valid_d;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:47.43" *)
  wire [2:0] valid_popped;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:47.29" *)
  wire [2:0] valid_pushed;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:45.40" *)
  reg [2:0] valid_q;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:53.36" *)
  wire valid_unaligned;
  assign rdata = valid_q[0] ? rdata_q[31:0] : in_rdata_i;
  assign err = valid_q[0] ? err_q[0] : in_err_i;
  assign err_d[0] = valid_q[1] ? err_q[1] : in_err_i;
  assign \$102  = ~ valid_q[1];
  assign lowest_free_entry[1] = \$102  & valid_q[0];
  assign \$106  = in_valid_i & lowest_free_entry[1];
  assign valid_pushed[1] = \$106  | valid_q[1];
  assign valid_popped[1] = pop_fifo ? valid_pushed[2] : valid_pushed[1];
  assign \$12  = lowest_free_entry[0] | \$10 ;
  assign \$111  = ~ clear_i;
  assign valid_d[1] = valid_popped[1] & \$111 ;
  assign \$115  = valid_pushed[2] & pop_fifo;
  assign \$119  = ~ pop_fifo;
  assign \$121  = \$106  & \$119 ;
  assign entry_en[1] = \$115  | \$121 ;
  assign rdata_d[63:32] = valid_q[2] ? rdata_q[95:64] : in_rdata_i;
  assign err_d[1] = valid_q[2] ? err_q[2] : in_err_i;
  assign \$127  = ~ valid_q[2];
  assign lowest_free_entry[2] = \$127  & valid_q[1];
  assign \$14  = in_err_i & \$12 ;
  assign entry_en[2] = in_valid_i & lowest_free_entry[2];
  assign valid_pushed[2] = valid_q[2] | entry_en[2];
  assign valid_popped[2] = pop_fifo ? 1'h0 : valid_pushed[2];
  assign valid_d[2] = valid_popped[2] & \$111 ;
  assign \$16  = \$6  | \$14 ;
  assign \$10  = ~ unaligned_is_compressed;
  assign \$20  = err_q[1] & \$10 ;
  assign valid = valid_q[0] | in_valid_i;
  assign \$22  = \$20  | err_q[0];
  assign err_unaligned = valid_q[1] ? \$22  : \$16 ;
  assign \$25  = in_err_i & valid_q[0];
  assign \$27  = ~ err_q[0];
  assign err_plus2 = \$auto$rtlil.cc:3092:Mux$17224  & \$27 ;
  assign \$36  = valid_q[0] & in_valid_i;
  assign valid_unaligned = \$36  | valid_q[1];
  assign \$39  = rdata[17:16] != 2'h3;
  assign rdata_unaligned[31:16] = valid_q[1] ? rdata_q[47:32] : in_rdata_i[15:0];
  assign \$41  = ~ err;
  assign unaligned_is_compressed = \$39  & \$41 ;
  assign \$45  = rdata[1:0] != 2'h3;
  assign aligned_is_compressed = \$45  & \$41 ;
  assign \$6  = valid_q[0] & err_q[0];
  assign \$57  = out_ready_i & out_valid_o;
  assign instr_addr_en = clear_i | \$57 ;
  assign addr_incr_two = instr_addr_q[0] ? unaligned_is_compressed : aligned_is_compressed;
  assign \$62  = ~ addr_incr_two;
  assign instr_addr_next = instr_addr_q + { \$62 , addr_incr_two };
  assign instr_addr_d = clear_i ? in_addr_i[31:1] : instr_addr_next;
  assign lowest_free_entry[0] = ~ valid_q[0];
  assign \$73  = ~ aligned_is_compressed;
  assign \$75  = \$73  | instr_addr_q[0];
  assign pop_fifo = \$57  & \$75 ;
  assign \$81  = in_valid_i & lowest_free_entry[0];
  assign valid_pushed[0] = \$81  | valid_q[0];
  assign valid_popped[0] = pop_fifo ? valid_pushed[1] : valid_pushed[0];
  assign valid_d[0] = valid_popped[0] & \$111 ;
  assign \$90  = valid_pushed[1] & pop_fifo;
  assign \$96  = \$81  & \$119 ;
  assign entry_en[0] = \$90  | \$96 ;
  assign rdata_d[31:0] = valid_q[1] ? rdata_q[63:32] : in_rdata_i;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q[95:64] <= 32'd0;
    else if (entry_en[2]) rdata_q[95:64] <= in_rdata_i;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q[63:32] <= 32'd0;
    else if (entry_en[1]) rdata_q[63:32] <= rdata_d[63:32];
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q[31:0] <= 32'd0;
    else if (entry_en[0]) rdata_q[31:0] <= rdata_d[31:0];
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:151.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_addr_q <= 31'h00000000;
    else if (instr_addr_en) instr_addr_q <= instr_addr_d;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) err_q[2] <= 1'h0;
    else if (entry_en[2]) err_q[2] <= in_err_i;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) err_q[1] <= 1'h0;
    else if (entry_en[1]) err_q[1] <= err_d[1];
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) err_q[0] <= 1'h0;
    else if (entry_en[0]) err_q[0] <= err_d[0];
  assign \$auto$rtlil.cc:3092:Mux$17224  = valid_q[1] ? err_q[1] : \$25 ;
  (* src = "rtl/cve2/cve2_fetch_fifo.sv:219.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) valid_q <= 3'h0;
    else valid_q <= valid_d;
  assign out_err_plus2_o = instr_addr_q[0] & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" *) err_plus2;
  assign out_err_o = instr_addr_q[0] ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" *) err_unaligned : err;
  assign out_rdata_o = instr_addr_q[0] ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" *) { rdata_unaligned[31:16], rdata[31:16] } : rdata;
  assign out_valid_o = instr_addr_q[0] ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" *) \$out_valid_o$51  : valid;
  assign \$out_valid_o$51  = unaligned_is_compressed ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_fetch_fifo.sv:120.9-120.29|rtl/cve2/cve2_fetch_fifo.sv:119.7-123.10" *) valid : valid_unaligned;
  assign busy_o = valid_q[2:1];
  assign err_d[2] = in_err_i;
  assign out_addr_o = { instr_addr_q, 1'h0 };
  assign rdata_d[95:64] = in_rdata_i;
  assign rdata_unaligned[15:0] = rdata[31:16];
endmodule

(* src = "rtl/cve2/cve2_id_stage.sv:19.8" *)
module \cve2_id_stage$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i (clk_i, rst_ni, irqs_i, instr_req_o, instr_rdata_i, debug_req_i, fetch_enable_i, irq_nm_i, ctrl_busy_o, illegal_insn_o, instr_valid_i, instr_rdata_alu_i, instr_rdata_c_i, instr_is_compressed_i, instr_first_cycle_id_o, instr_valid_clear_o, id_in_ready_o, branch_decision_i, pc_set_o, pc_mux_o, exc_pc_mux_o
, exc_cause_o, illegal_c_insn_i, instr_fetch_err_i, instr_fetch_err_plus2_i, pc_id_i, ex_valid_i, lsu_resp_valid_i, alu_operator_ex_o, alu_operand_a_ex_o, alu_operand_b_ex_o, imd_val_we_ex_i, imd_val_d_ex_i, imd_val_q_ex_o, mult_en_ex_o, div_en_ex_o, mult_sel_ex_o, div_sel_ex_o, multdiv_operator_ex_o, multdiv_signed_mode_ex_o, multdiv_operand_a_ex_o, multdiv_operand_b_ex_o
, csr_access_o, csr_op_o, csr_op_en_o, csr_save_if_o, csr_save_id_o, csr_restore_mret_id_o, csr_restore_dret_id_o, csr_save_cause_o, csr_mtval_o, priv_mode_i, csr_mstatus_tw_i, illegal_csr_insn_i, lsu_req_o, lsu_we_o, lsu_type_o, lsu_sign_ext_o, lsu_wdata_o, lsu_addr_incr_req_i, lsu_addr_last_i, csr_mstatus_mie_i, irq_pending_i
, nmi_mode_o, lsu_load_err_i, lsu_store_err_i, debug_mode_o, debug_cause_o, debug_csr_save_o, debug_single_step_i, debug_ebreakm_i, debug_ebreaku_i, trigger_match_i, result_ex_i, csr_rdata_i, rf_raddr_a_o, rf_rdata_a_i, rf_raddr_b_o, rf_rdata_b_i, rf_ren_a_o, rf_ren_b_o, rf_waddr_id_o, rf_wdata_id_o, rf_we_id_o
, en_wb_o, instr_perf_count_id_o, perf_jump_o, perf_branch_o, perf_tbranch_o, perf_dside_wait_o, perf_wfi_wait_o, perf_div_wait_o, instr_id_done_o);
  wire \$1 ;
  wire \$100 ;
  wire \$106 ;
  wire \$111 ;
  wire \$118 ;
  wire \$120 ;
  wire \$122 ;
  wire \$129 ;
  wire \$13 ;
  wire \$15 ;
  wire \$157 ;
  wire \$17 ;
  wire \$182 ;
  wire \$184 ;
  wire \$186 ;
  wire \$190 ;
  wire \$192 ;
  wire \$194 ;
  wire \$198 ;
  wire \$203 ;
  wire \$205 ;
  wire \$207 ;
  wire \$217 ;
  wire \$223 ;
  wire \$225 ;
  wire \$227 ;
  wire \$229 ;
  wire \$231 ;
  wire \$233 ;
  wire \$235 ;
  wire \$237 ;
  wire \$239 ;
  wire \$241 ;
  wire \$243 ;
  wire \$43 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$62 ;
  wire \$64 ;
  wire \$66 ;
  wire \$68 ;
  wire \$70 ;
  wire \$72 ;
  wire \$74 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire \$91 ;
  wire \$93 ;
  wire \$95 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16852 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$835 ;
  (* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18" *)
  wire \$branch_set_raw_d$147 ;
  (* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14" *)
  wire \$branch_set_raw_d$163 ;
  (* src = "rtl/cve2/cve2_id_stage.sv:430.14-437.8" *)
  wire \$csr_pipe_flush$97 ;
  (* src = "rtl/cve2/cve2_id_stage.sv:644.15-650.18" *)
  wire \$id_fsm_d$145 ;
  (* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18" *)
  wire \$id_fsm_d$154 ;
  (* src = "rtl/cve2/cve2_id_stage.sv:686.11-692.14" *)
  wire \$id_fsm_d$162 ;
  (* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18" *)
  wire \$jump_set_raw$148 ;
  (* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14" *)
  wire \$jump_set_raw$164 ;
  (* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14" *)
  wire \$perf_branch_o$171 ;
  wire \$procmux$12754_Y ;
  wire \$procmux$12762_Y ;
  wire \$procmux$12770_Y ;
  wire \$procmux$12777_Y ;
  wire \$procmux$12793_Y ;
  wire \$procmux$12801_Y ;
  wire \$procmux$12809_Y ;
  wire \$procmux$12817_Y ;
  wire \$procmux$12895_Y ;
  wire \$procmux$12928_Y ;
  wire \$procmux$12961_Y ;
  wire \$procmux$13039_CMP ;
  wire \$procmux$13040_CMP ;
  wire \$procmux$13041_CMP ;
  wire \$procmux$13042_CMP ;
  wire \$procmux$13043_CMP ;
  wire \$procmux$13044_CMP ;
  wire \$procmux$13046_CMP ;
  wire \$procmux$13047_CMP ;
  wire \$procmux$13048_CMP ;
  (* src = "rtl/cve2/cve2_id_stage.sv:217.16" *)
  wire alu_multicycle_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:215.16" *)
  wire [1:0] alu_op_a_mux_sel;
  (* src = "rtl/cve2/cve2_id_stage.sv:215.34" *)
  wire [1:0] alu_op_a_mux_sel_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:216.16" *)
  wire alu_op_b_mux_sel;
  (* src = "rtl/cve2/cve2_id_stage.sv:216.34" *)
  wire alu_op_b_mux_sel_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:62.37" *)
  output [31:0] alu_operand_a_ex_o;
  wire [31:0] alu_operand_a_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:63.37" *)
  output [31:0] alu_operand_b_ex_o;
  wire [31:0] alu_operand_b_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:61.37" *)
  output [6:0] alu_operator_ex_o;
  wire [6:0] alu_operator_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:43.37" *)
  input branch_decision_i;
  wire branch_decision_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:165.16" *)
  wire branch_in_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:167.40" *)
  wire branch_jump_set_done_d;
  (* src = "rtl/cve2/cve2_id_stage.sv:167.16" *)
  reg branch_jump_set_done_q;
  (* src = "rtl/cve2/cve2_id_stage.sv:166.16" *)
  wire branch_set;
  (* src = "rtl/cve2/cve2_id_stage.sv:166.28" *)
  reg branch_set_raw;
  (* src = "rtl/cve2/cve2_id_stage.sv:166.44" *)
  wire branch_set_raw_d;
  (* src = "rtl/cve2/cve2_id_stage.sv:24.37" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:176.16" *)
  wire controller_run;
  (* src = "rtl/cve2/cve2_id_stage.sv:81.37" *)
  output csr_access_o;
  wire csr_access_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:105.37" *)
  input csr_mstatus_mie_i;
  wire csr_mstatus_mie_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:91.37" *)
  input csr_mstatus_tw_i;
  wire csr_mstatus_tw_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:89.37" *)
  output [31:0] csr_mtval_o;
  wire [31:0] csr_mtval_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:83.37" *)
  output csr_op_en_o;
  wire csr_op_en_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:82.37" *)
  output [1:0] csr_op_o;
  wire [1:0] csr_op_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:240.16" *)
  wire csr_pipe_flush;
  (* src = "rtl/cve2/cve2_id_stage.sv:126.37" *)
  input [31:0] csr_rdata_i;
  wire [31:0] csr_rdata_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:87.37" *)
  output csr_restore_dret_id_o;
  wire csr_restore_dret_id_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:86.37" *)
  output csr_restore_mret_id_o;
  wire csr_restore_mret_id_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:88.37" *)
  output csr_save_cause_o;
  wire csr_save_cause_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:85.37" *)
  output csr_save_id_o;
  wire csr_save_id_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:84.37" *)
  output csr_save_if_o;
  wire csr_save_if_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:28.37" *)
  output ctrl_busy_o;
  wire ctrl_busy_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:116.37" *)
  output [2:0] debug_cause_o;
  wire [2:0] debug_cause_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:117.37" *)
  output debug_csr_save_o;
  wire debug_csr_save_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:120.37" *)
  input debug_ebreakm_i;
  wire debug_ebreakm_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:121.37" *)
  input debug_ebreaku_i;
  wire debug_ebreaku_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:115.37" *)
  output debug_mode_o;
  wire debug_mode_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:118.37" *)
  input debug_req_i;
  wire debug_req_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:119.37" *)
  input debug_single_step_i;
  wire debug_single_step_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:227.27" *)
  wire div_en_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:72.37" *)
  output div_en_ex_o;
  wire div_en_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:74.37" *)
  output div_sel_ex_o;
  wire div_sel_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:161.16" *)
  wire dret_insn_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:159.16" *)
  wire ebrk_insn;
  (* src = "rtl/cve2/cve2_id_stage.sv:162.16" *)
  wire ecall_insn_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:141.37" *)
  output en_wb_o;
  wire en_wb_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:58.37" *)
  input ex_valid_i;
  wire ex_valid_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:49.37" *)
  output [6:0] exc_cause_o;
  wire [6:0] exc_cause_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:48.37" *)
  output [1:0] exc_pc_mux_o;
  wire [1:0] exc_pc_mux_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:27.37" *)
  input fetch_enable_i;
  wire fetch_enable_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:182.16" *)
  wire flush_id;
  (* src = "rtl/cve2/cve2_id_stage.sv:606.22" *)
  wire id_fsm_d;
  (* src = "rtl/cve2/cve2_id_stage.sv:606.12" *)
  reg id_fsm_q;
  (* src = "rtl/cve2/cve2_id_stage.sv:40.37" *)
  output id_in_ready_o;
  wire id_in_ready_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:51.37" *)
  input illegal_c_insn_i;
  wire illegal_c_insn_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:92.37" *)
  input illegal_csr_insn_i;
  wire illegal_csr_insn_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:158.16" *)
  wire illegal_insn_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:29.37" *)
  output illegal_insn_o;
  wire illegal_insn_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:67.37" *)
  input [67:0] imd_val_d_ex_i;
  wire [67:0] imd_val_d_ex_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:68.37" *)
  output [67:0] imd_val_q_ex_o;
  reg [67:0] imd_val_q_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:66.37" *)
  input [1:0] imd_val_we_ex_i;
  wire [1:0] imd_val_we_ex_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:193.16" *)
  wire [31:0] imm_a;
  (* src = "rtl/cve2/cve2_id_stage.sv:222.16" *)
  wire imm_a_mux_sel;
  (* src = "rtl/cve2/cve2_id_stage.sv:194.16" *)
  wire [31:0] imm_b;
  (* src = "rtl/cve2/cve2_id_stage.sv:223.16" *)
  wire [2:0] imm_b_mux_sel;
  (* src = "rtl/cve2/cve2_id_stage.sv:223.31" *)
  wire [2:0] imm_b_mux_sel_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:188.16" *)
  wire [31:0] imm_b_type;
  (* src = "rtl/cve2/cve2_id_stage.sv:186.16" *)
  wire [31:0] imm_i_type;
  (* src = "rtl/cve2/cve2_id_stage.sv:190.16" *)
  wire [31:0] imm_j_type;
  (* src = "rtl/cve2/cve2_id_stage.sv:187.16" *)
  wire [31:0] imm_s_type;
  (* src = "rtl/cve2/cve2_id_stage.sv:189.16" *)
  wire [31:0] imm_u_type;
  (* src = "rtl/cve2/cve2_id_stage.sv:174.16" *)
  wire instr_executing;
  (* src = "rtl/cve2/cve2_id_stage.sv:52.37" *)
  input instr_fetch_err_i;
  wire instr_fetch_err_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:53.37" *)
  input instr_fetch_err_plus2_i;
  wire instr_fetch_err_plus2_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:38.37" *)
  output instr_first_cycle_id_o;
  wire instr_first_cycle_id_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:152.37" *)
  output instr_id_done_o;
  wire instr_id_done_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:36.37" *)
  input instr_is_compressed_i;
  wire instr_is_compressed_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:142.37" *)
  output instr_perf_count_id_o;
  wire instr_perf_count_id_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:34.37" *)
  input [31:0] instr_rdata_alu_i;
  wire [31:0] instr_rdata_alu_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:35.37" *)
  input [15:0] instr_rdata_c_i;
  wire [15:0] instr_rdata_c_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:33.37" *)
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:37.37" *)
  output instr_req_o;
  wire instr_req_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:39.37" *)
  output instr_valid_clear_o;
  wire instr_valid_clear_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:32.37" *)
  input instr_valid_i;
  wire instr_valid_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:108.37" *)
  input irq_nm_i;
  wire irq_nm_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:106.37" *)
  input irq_pending_i;
  wire irq_pending_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:107.37" *)
  input [18:0] irqs_i;
  wire [18:0] irqs_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:168.16" *)
  wire jump_in_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:170.16" *)
  wire jump_set;
  (* src = "rtl/cve2/cve2_id_stage.sv:169.16" *)
  wire jump_set_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:170.26" *)
  wire jump_set_raw;
  (* src = "rtl/cve2/cve2_id_stage.sv:101.37" *)
  input lsu_addr_incr_req_i;
  wire lsu_addr_incr_req_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:102.37" *)
  input [31:0] lsu_addr_last_i;
  wire [31:0] lsu_addr_last_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:111.37" *)
  input lsu_load_err_i;
  wire lsu_load_err_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:236.25" *)
  wire lsu_req_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:95.37" *)
  output lsu_req_o;
  wire lsu_req_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:59.37" *)
  input lsu_resp_valid_i;
  wire lsu_resp_valid_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:98.37" *)
  output lsu_sign_ext_o;
  wire lsu_sign_ext_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:112.37" *)
  input lsu_store_err_i;
  wire lsu_store_err_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:97.37" *)
  output [1:0] lsu_type_o;
  wire [1:0] lsu_type_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:99.37" *)
  output [31:0] lsu_wdata_o;
  wire [31:0] lsu_wdata_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:96.37" *)
  output lsu_we_o;
  wire lsu_we_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:160.16" *)
  wire mret_insn_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:226.28" *)
  wire mult_en_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:71.37" *)
  output mult_en_ex_o;
  wire mult_en_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:73.37" *)
  output mult_sel_ex_o;
  wire mult_sel_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:228.16" *)
  wire multdiv_en_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:77.37" *)
  output [31:0] multdiv_operand_a_ex_o;
  wire [31:0] multdiv_operand_a_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:78.37" *)
  output [31:0] multdiv_operand_b_ex_o;
  wire [31:0] multdiv_operand_b_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:75.37" *)
  output [1:0] multdiv_operator_ex_o;
  wire [1:0] multdiv_operator_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:76.37" *)
  output [1:0] multdiv_signed_mode_ex_o;
  wire [1:0] multdiv_signed_mode_ex_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:183.16" *)
  wire multicycle_done;
  (* src = "rtl/cve2/cve2_id_stage.sv:109.37" *)
  output nmi_mode_o;
  wire nmi_mode_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:55.37" *)
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:47.37" *)
  output [2:0] pc_mux_o;
  wire [2:0] pc_mux_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:46.37" *)
  output pc_set_o;
  wire pc_set_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:146.37" *)
  output perf_branch_o;
  wire perf_branch_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:151.37" *)
  output perf_div_wait_o;
  wire perf_div_wait_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:148.37" *)
  output perf_dside_wait_o;
  wire perf_dside_wait_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:145.37" *)
  output perf_jump_o;
  wire perf_jump_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:147.37" *)
  output perf_tbranch_o;
  wire perf_tbranch_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:150.37" *)
  output perf_wfi_wait_o;
  wire perf_wfi_wait_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:90.37" *)
  input [1:0] priv_mode_i;
  wire [1:0] priv_mode_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:125.37" *)
  input [31:0] result_ex_i;
  wire [31:0] result_ex_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:129.37" *)
  output [4:0] rf_raddr_a_o;
  wire [4:0] rf_raddr_a_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:131.37" *)
  output [4:0] rf_raddr_b_o;
  wire [4:0] rf_raddr_b_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:130.37" *)
  input [31:0] rf_rdata_a_i;
  wire [31:0] rf_rdata_a_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:132.37" *)
  input [31:0] rf_rdata_b_i;
  wire [31:0] rf_rdata_b_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:201.16" *)
  wire rf_ren_a_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:133.37" *)
  output rf_ren_a_o;
  wire rf_ren_a_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:201.30" *)
  wire rf_ren_b_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:134.37" *)
  output rf_ren_b_o;
  wire rf_ren_b_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:137.37" *)
  output [4:0] rf_waddr_id_o;
  wire [4:0] rf_waddr_id_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:138.37" *)
  output [31:0] rf_wdata_id_o;
  wire [31:0] rf_wdata_id_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:198.16" *)
  wire rf_wdata_sel;
  (* src = "rtl/cve2/cve2_id_stage.sv:199.16" *)
  wire rf_we_dec;
  (* src = "rtl/cve2/cve2_id_stage.sv:139.37" *)
  output rf_we_id_o;
  wire rf_we_id_o;
  (* src = "rtl/cve2/cve2_id_stage.sv:199.27" *)
  wire rf_we_raw;
  (* src = "rtl/cve2/cve2_id_stage.sv:25.37" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_id_stage.sv:218.16" *)
  wire stall_alu;
  (* src = "rtl/cve2/cve2_id_stage.sv:179.16" *)
  wire stall_branch;
  (* src = "rtl/cve2/cve2_id_stage.sv:181.16" *)
  wire stall_id;
  (* src = "rtl/cve2/cve2_id_stage.sv:180.16" *)
  wire stall_jump;
  (* src = "rtl/cve2/cve2_id_stage.sv:177.16" *)
  wire stall_mem;
  (* src = "rtl/cve2/cve2_id_stage.sv:178.16" *)
  wire stall_multdiv;
  (* src = "rtl/cve2/cve2_id_stage.sv:122.37" *)
  input trigger_match_i;
  wire trigger_match_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:191.16" *)
  wire [31:0] zimm_rs1_type;
  assign \$1  = ~ instr_fetch_err_i;
  assign illegal_insn_o = instr_valid_i & \$100 ;
  assign multdiv_en_dec = mult_en_dec | div_en_dec;
  assign \$106  = instr_first_cycle_id_o & lsu_req_dec;
  assign lsu_req_o = instr_executing & \$106 ;
  assign mult_en_ex_o = instr_executing & mult_en_dec;
  assign div_en_ex_o = instr_executing & div_en_dec;
  assign \$111  = csr_access_o & instr_executing;
  assign csr_op_en_o = \$111  & en_wb_o;
  assign \$118  = branch_set_raw | jump_set_raw;
  assign \$120  = \$118  | branch_jump_set_done_q;
  assign \$13  = instr_valid_i & \$1 ;
  assign \$122  = ~ instr_valid_clear_o;
  assign branch_jump_set_done_d = \$120  & \$122 ;
  assign \$129  = ~ branch_jump_set_done_q;
  assign jump_set = jump_set_raw & \$129 ;
  assign branch_set = branch_set_raw & \$129 ;
  assign \$15  = ~ illegal_insn_o;
  assign \$157  = rf_we_dec & ex_valid_i;
  assign \$17  = \$13  & \$15 ;
  assign rf_ren_b_o = \$17  & rf_ren_b_dec;
  assign \$182  = stall_mem | stall_multdiv;
  assign \$184  = \$182  | stall_jump;
  assign \$186  = \$184  | stall_branch;
  assign stall_id = \$186  | stall_alu;
  assign \$190  = ~ stall_id;
  assign \$192  = ~ flush_id;
  assign \$194  = \$190  & \$192 ;
  assign en_wb_o = \$194  & instr_executing;
  assign \$198  = ~ id_fsm_q;
  assign instr_first_cycle_id_o = instr_valid_i & \$198 ;
  assign alu_op_a_mux_sel = lsu_addr_incr_req_i ? 2'h1 : alu_op_a_mux_sel_dec;
  assign multicycle_done = lsu_req_dec ? lsu_resp_valid_i : ex_valid_i;
  assign \$203  = ~ lsu_resp_valid_i;
  assign \$205  = \$203  | instr_first_cycle_id_o;
  assign \$207  = lsu_req_dec & \$205 ;
  assign stall_mem = instr_valid_i & \$207 ;
  assign alu_op_b_mux_sel = alu_op_b_mux_sel_dec | lsu_addr_incr_req_i;
  assign instr_executing = \$13  & controller_run;
  assign \$217  = instr_executing & lsu_req_dec;
  assign imm_b_mux_sel = lsu_addr_incr_req_i ? 3'h6 : imm_b_mux_sel_dec;
  assign perf_dside_wait_o = \$217  & \$203 ;
  assign \$223  = ~ ebrk_insn;
  assign \$225  = ~ ecall_insn_dec;
  assign \$227  = \$223  & \$225 ;
  assign \$229  = ~ illegal_insn_dec;
  assign \$231  = \$227  & \$229 ;
  assign \$233  = ~ debug_mode_o;
  assign \$235  = dret_insn_dec & \$233 ;
  assign \$237  = ~ \$235 ;
  assign \$239  = \$231  & \$237 ;
  assign \$241  = ~ illegal_csr_insn_i;
  assign \$243  = \$239  & \$241 ;
  assign instr_perf_count_id_o = \$243  & \$1 ;
  assign perf_div_wait_o = stall_multdiv & div_en_dec;
  assign imm_a = imm_a_mux_sel ? 32'd0 : zimm_rs1_type;
  assign \$auto$rtlil.cc:3092:Mux$835 [2:1] = instr_is_compressed_i ? 2'h1 : 2'h2;
  assign alu_operand_b_ex_o = alu_op_b_mux_sel ? imm_b : rf_rdata_b_i;
  assign \$43  = rf_we_raw & instr_executing;
  assign rf_we_id_o = \$43  & \$241 ;
  assign \$54  = csr_op_o == 1'h1;
  assign \$56  = csr_op_o == 2'h2;
  assign \$58  = \$54  || \$56 ;
  assign \$60  = csr_op_en_o && \$58 ;
  assign \$62  = instr_rdata_i[31:20] == 10'h300;
  assign \$64  = instr_rdata_i[31:20] == 10'h304;
  assign \$66  = \$62  || \$64 ;
  assign \$68  = instr_rdata_i[31:20] == 11'h747;
  assign \$70  = \$66  || \$68 ;
  assign \$72  = instr_rdata_i[31:25] == 5'h1d;
  assign \$74  = \$70  || \$72 ;
  assign \$79  = | csr_op_o;
  assign rf_ren_a_o = \$17  & rf_ren_a_dec;
  assign \$81  = csr_op_en_o && \$79 ;
  assign \$83  = instr_rdata_i[31:20] == 11'h7b0;
  assign \$85  = instr_rdata_i[31:20] == 11'h7b1;
  assign \$87  = \$83  || \$85 ;
  assign \$89  = instr_rdata_i[31:20] == 11'h7b2;
  assign \$91  = \$87  || \$89 ;
  assign \$93  = instr_rdata_i[31:20] == 11'h7b3;
  assign \$95  = \$91  || \$93 ;
  assign \$100  = illegal_insn_dec | illegal_csr_insn_i;
  (* src = "rtl/cve2/cve2_id_stage.sv:305.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) imd_val_q_ex_o[33:0] <= 34'h000000000;
    else if (imd_val_we_ex_i[1]) imd_val_q_ex_o[33:0] <= imd_val_d_ex_i[33:0];
  (* src = "rtl/cve2/cve2_id_stage.sv:305.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) imd_val_q_ex_o[67:34] <= 34'h000000000;
    else if (imd_val_we_ex_i[0]) imd_val_q_ex_o[67:34] <= imd_val_d_ex_i[67:34];
  (* src = "rtl/cve2/cve2_id_stage.sv:608.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) id_fsm_q <= 1'h0;
    else if (instr_executing) id_fsm_q <= id_fsm_d;
  assign \$auto$opt_reduce.cc:137:opt_pmux$16852  = | { lsu_req_dec, alu_multicycle_dec, jump_in_dec };
  (* src = "rtl/cve2/cve2_id_stage.sv:583.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) branch_jump_set_done_q <= 1'h0;
    else branch_jump_set_done_q <= branch_jump_set_done_d;
  (* src = "rtl/cve2/cve2_id_stage.sv:565.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) branch_set_raw <= 1'h0;
    else branch_set_raw <= branch_set_raw_d;
  assign \$id_fsm_d$162  = ~ (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:687.13-687.43|rtl/cve2/cve2_id_stage.sv:686.11-692.14" *) multicycle_done;
  assign \$procmux$12754_Y  = multicycle_done ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:687.13-687.43|rtl/cve2/cve2_id_stage.sv:686.11-692.14" *) 1'h0 : jump_in_dec;
  assign \$procmux$12762_Y  = multicycle_done ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:687.13-687.43|rtl/cve2/cve2_id_stage.sv:686.11-692.14" *) 1'h0 : branch_in_dec;
  assign \$procmux$12770_Y  = multicycle_done ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:687.13-687.43|rtl/cve2/cve2_id_stage.sv:686.11-692.14" *) 1'h0 : multdiv_en_dec;
  assign \$procmux$12777_Y  = multdiv_en_dec ? (* src = "rtl/cve2/cve2_id_stage.sv:683.13-683.54|rtl/cve2/cve2_id_stage.sv:682.11-684.14" *) \$157  : rf_we_dec;
  assign id_fsm_d = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:681.22-693.12|rtl/cve2/cve2_id_stage.sv:633.7-698.14" *) \$id_fsm_d$162  : \$id_fsm_d$154 ;
  assign \$procmux$12793_Y  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:681.22-693.12|rtl/cve2/cve2_id_stage.sv:633.7-698.14" *) \$procmux$12777_Y  : \$procmux$12895_Y ;
  assign \$procmux$12801_Y  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:681.22-693.12|rtl/cve2/cve2_id_stage.sv:633.7-698.14" *) \$procmux$12754_Y  : jump_in_dec;
  assign \$procmux$12809_Y  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:681.22-693.12|rtl/cve2/cve2_id_stage.sv:633.7-698.14" *) \$procmux$12762_Y  : \$branch_set_raw_d$147 ;
  assign \$procmux$12817_Y  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:681.22-693.12|rtl/cve2/cve2_id_stage.sv:633.7-698.14" *) \$procmux$12770_Y  : \$procmux$12928_Y ;
  assign \$id_fsm_d$145  = ~ (* src = "rtl/cve2/cve2_id_stage.sv:644.32-650.18|rtl/cve2/cve2_id_stage.sv:644.15-650.18" *) ex_valid_i;
  function [0:0] \$procmux$12864 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_id_stage.sv:670.33-674.16|rtl/cve2/cve2_id_stage.sv:635.11-678.18" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$12864  = b[0:0];
      3'b?1?:
        \$procmux$12864  = b[1:1];
      3'b1??:
        \$procmux$12864  = b[2:2];
      default:
        \$procmux$12864  = a;
    endcase
  endfunction
  assign \$id_fsm_d$154  = \$procmux$12864 (1'h0, { \$id_fsm_d$145 , branch_decision_i, 1'h1 }, { multdiv_en_dec, branch_in_dec, \$auto$opt_reduce.cc:137:opt_pmux$16852  });
  function [0:0] \$procmux$12895 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_id_stage.sv:670.33-674.16|rtl/cve2/cve2_id_stage.sv:635.11-678.18" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$12895  = b[0:0];
      2'b1?:
        \$procmux$12895  = b[1:1];
      default:
        \$procmux$12895  = a;
    endcase
  endfunction
  assign \$procmux$12895_Y  = \$procmux$12895 (rf_we_dec, { \$157 , 1'h0 }, { multdiv_en_dec, alu_multicycle_dec });
  assign \$branch_set_raw_d$147  = branch_in_dec & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:652.28-663.16|rtl/cve2/cve2_id_stage.sv:635.11-678.18" *) branch_decision_i;
  assign \$procmux$12928_Y  = multdiv_en_dec & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:644.15-650.18|rtl/cve2/cve2_id_stage.sv:635.11-678.18" *) \$id_fsm_d$145 ;
  assign \$jump_set_raw$148  = jump_in_dec & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:664.26-669.16|rtl/cve2/cve2_id_stage.sv:635.11-678.18" *) jump_set_dec;
  assign \$perf_branch_o$171  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" *) 1'h0 : branch_in_dec;
  assign \$procmux$12961_Y  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" *) 1'h0 : alu_multicycle_dec;
  assign \$jump_set_raw$164  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" *) 1'h0 : \$jump_set_raw$148 ;
  assign \$branch_set_raw_d$163  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" *) 1'h0 : \$branch_set_raw_d$147 ;
  assign perf_branch_o = instr_executing & (* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" *) \$perf_branch_o$171 ;
  assign stall_alu = instr_executing & (* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" *) \$procmux$12961_Y ;
  assign rf_we_raw = instr_executing ? (* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" *) \$procmux$12793_Y  : rf_we_dec;
  assign stall_jump = instr_executing & (* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" *) \$procmux$12801_Y ;
  assign stall_branch = instr_executing & (* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" *) \$procmux$12809_Y ;
  assign stall_multdiv = instr_executing & (* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" *) \$procmux$12817_Y ;
  assign jump_set_raw = instr_executing & (* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" *) \$jump_set_raw$164 ;
  assign branch_set_raw_d = instr_executing & (* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" *) \$branch_set_raw_d$163 ;
  assign \$csr_pipe_flush$97  = \$81  & (* src = "rtl/cve2/cve2_id_stage.sv:431.7-436.10|rtl/cve2/cve2_id_stage.sv:430.14-437.8" *) \$95 ;
  assign csr_pipe_flush = \$60  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:423.7-429.10|rtl/cve2/cve2_id_stage.sv:422.5-437.8" *) \$74  : \$csr_pipe_flush$97 ;
  assign rf_wdata_id_o = rf_wdata_sel ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:327.18-327.46|rtl/cve2/cve2_id_stage.sv:325.5-329.12" *) csr_rdata_i : result_ex_i;
  function [31:0] \$procmux$13038 ;
    input [31:0] a;
    input [191:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_id_stage.sv:283.24-283.70|rtl/cve2/cve2_id_stage.sv:277.5-286.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$13038  = b[31:0];
      6'b????1?:
        \$procmux$13038  = b[63:32];
      6'b???1??:
        \$procmux$13038  = b[95:64];
      6'b??1???:
        \$procmux$13038  = b[127:96];
      6'b?1????:
        \$procmux$13038  = b[159:128];
      6'b1?????:
        \$procmux$13038  = b[191:160];
      default:
        \$procmux$13038  = a;
    endcase
  endfunction
  assign imm_b = \$procmux$13038 (32'd4, { imm_i_type, imm_s_type, imm_b_type, imm_u_type, imm_j_type, 29'h00000000, \$auto$rtlil.cc:3092:Mux$835 [2:1], 1'h0 }, { \$procmux$13044_CMP , \$procmux$13043_CMP , \$procmux$13042_CMP , \$procmux$13041_CMP , \$procmux$13040_CMP , \$procmux$13039_CMP  });
  assign \$procmux$13039_CMP  = imm_b_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:283.24-283.70|rtl/cve2/cve2_id_stage.sv:277.5-286.12" *) 3'h5;
  assign \$procmux$13040_CMP  = imm_b_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:282.24-282.43|rtl/cve2/cve2_id_stage.sv:277.5-286.12" *) 3'h4;
  assign \$procmux$13041_CMP  = imm_b_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:281.24-281.43|rtl/cve2/cve2_id_stage.sv:277.5-286.12" *) 2'h3;
  assign \$procmux$13042_CMP  = imm_b_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:280.24-280.43|rtl/cve2/cve2_id_stage.sv:277.5-286.12" *) 2'h2;
  assign \$procmux$13043_CMP  = imm_b_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:279.24-279.43|rtl/cve2/cve2_id_stage.sv:277.5-286.12" *) 1'h1;
  assign \$procmux$13044_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:278.24-278.43|rtl/cve2/cve2_id_stage.sv:277.5-286.12" *) imm_b_mux_sel;
  function [31:0] \$procmux$13045 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_id_stage.sv:267.20-267.42|rtl/cve2/cve2_id_stage.sv:263.5-269.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$13045  = b[31:0];
      3'b?1?:
        \$procmux$13045  = b[63:32];
      3'b1??:
        \$procmux$13045  = b[95:64];
      default:
        \$procmux$13045  = a;
    endcase
  endfunction
  assign alu_operand_a_ex_o = \$procmux$13045 (rf_rdata_a_i, { lsu_addr_last_i, pc_id_i, imm_a }, { \$procmux$13048_CMP , \$procmux$13047_CMP , \$procmux$13046_CMP  });
  assign \$procmux$13046_CMP  = alu_op_a_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:267.20-267.42|rtl/cve2/cve2_id_stage.sv:263.5-269.12" *) 2'h3;
  assign \$procmux$13047_CMP  = alu_op_a_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:266.20-266.44|rtl/cve2/cve2_id_stage.sv:263.5-269.12" *) 2'h2;
  assign \$procmux$13048_CMP  = alu_op_a_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_id_stage.sv:265.20-265.52|rtl/cve2/cve2_id_stage.sv:263.5-269.12" *) 1'h1;
  (* src = "rtl/cve2/cve2_id_stage.sv:447.5" *)
  \cve2_controller$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.controller_i  controller_i (
    .branch_set_i(branch_set),
    .clk_i(clk_i),
    .controller_run_o(controller_run),
    .csr_mstatus_mie_i(csr_mstatus_mie_i),
    .csr_mstatus_tw_i(csr_mstatus_tw_i),
    .csr_mtval_o(csr_mtval_o),
    .csr_pipe_flush_i(csr_pipe_flush),
    .csr_restore_dret_id_o(csr_restore_dret_id_o),
    .csr_restore_mret_id_o(csr_restore_mret_id_o),
    .csr_save_cause_o(csr_save_cause_o),
    .csr_save_id_o(csr_save_id_o),
    .csr_save_if_o(csr_save_if_o),
    .ctrl_busy_o(ctrl_busy_o),
    .debug_cause_o(debug_cause_o),
    .debug_csr_save_o(debug_csr_save_o),
    .debug_ebreakm_i(debug_ebreakm_i),
    .debug_ebreaku_i(debug_ebreaku_i),
    .debug_mode_o(debug_mode_o),
    .debug_req_i(debug_req_i),
    .debug_single_step_i(debug_single_step_i),
    .dret_insn_i(dret_insn_dec),
    .ebrk_insn_i(ebrk_insn),
    .ecall_insn_i(ecall_insn_dec),
    .exc_cause_o(exc_cause_o),
    .exc_pc_mux_o(exc_pc_mux_o),
    .fetch_enable_i(fetch_enable_i),
    .flush_id_o(flush_id),
    .id_in_ready_o(id_in_ready_o),
    .illegal_insn_i(illegal_insn_o),
    .instr_compressed_i(instr_rdata_c_i),
    .instr_fetch_err_i(instr_fetch_err_i),
    .instr_fetch_err_plus2_i(instr_fetch_err_plus2_i),
    .instr_i(instr_rdata_i),
    .instr_is_compressed_i(instr_is_compressed_i),
    .instr_req_o(instr_req_o),
    .instr_valid_clear_o(instr_valid_clear_o),
    .instr_valid_i(instr_valid_i),
    .irq_nm_i(irq_nm_i),
    .irq_pending_i(irq_pending_i),
    .irqs_i(irqs_i),
    .jump_set_i(jump_set),
    .load_err_i(lsu_load_err_i),
    .lsu_addr_last_i(lsu_addr_last_i),
    .mret_insn_i(mret_insn_dec),
    .nmi_mode_o(nmi_mode_o),
    .pc_id_i(pc_id_i),
    .pc_mux_o(pc_mux_o),
    .pc_set_o(pc_set_o),
    .perf_jump_o(perf_jump_o),
    .perf_tbranch_o(perf_tbranch_o),
    .priv_mode_i(priv_mode_i),
    .rst_ni(rst_ni),
    .stall_id_i(stall_id),
    .store_err_i(lsu_store_err_i),
    .trigger_match_i(trigger_match_i),
    .wfi_insn_i(perf_wfi_wait_o)
  );
  (* src = "rtl/cve2/cve2_id_stage.sv:340.5" *)
  \cve2_decoder$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.decoder_i  decoder_i (
    .alu_multicycle_o(alu_multicycle_dec),
    .alu_op_a_mux_sel_o(alu_op_a_mux_sel_dec),
    .alu_op_b_mux_sel_o(alu_op_b_mux_sel_dec),
    .alu_operator_o(alu_operator_ex_o),
    .branch_in_dec_o(branch_in_dec),
    .clk_i(clk_i),
    .csr_access_o(csr_access_o),
    .csr_op_o(csr_op_o),
    .data_req_o(lsu_req_dec),
    .data_sign_extension_o(lsu_sign_ext_o),
    .data_type_o(lsu_type_o),
    .data_we_o(lsu_we_o),
    .div_en_o(div_en_dec),
    .div_sel_o(div_sel_ex_o),
    .dret_insn_o(dret_insn_dec),
    .ebrk_insn_o(ebrk_insn),
    .ecall_insn_o(ecall_insn_dec),
    .illegal_c_insn_i(illegal_c_insn_i),
    .illegal_insn_o(illegal_insn_dec),
    .imm_a_mux_sel_o(imm_a_mux_sel),
    .imm_b_mux_sel_o(imm_b_mux_sel_dec),
    .imm_b_type_o(imm_b_type),
    .imm_i_type_o(imm_i_type),
    .imm_j_type_o(imm_j_type),
    .imm_s_type_o(imm_s_type),
    .imm_u_type_o(imm_u_type),
    .instr_first_cycle_i(instr_first_cycle_id_o),
    .instr_rdata_alu_i(instr_rdata_alu_i),
    .instr_rdata_i(instr_rdata_i),
    .jump_in_dec_o(jump_in_dec),
    .jump_set_o(jump_set_dec),
    .mret_insn_o(mret_insn_dec),
    .mult_en_o(mult_en_dec),
    .mult_sel_o(mult_sel_ex_o),
    .multdiv_operator_o(multdiv_operator_ex_o),
    .multdiv_signed_mode_o(multdiv_signed_mode_ex_o),
    .rf_raddr_a_o(rf_raddr_a_o),
    .rf_raddr_b_o(rf_raddr_b_o),
    .rf_ren_a_o(rf_ren_a_dec),
    .rf_ren_b_o(rf_ren_b_dec),
    .rf_waddr_o(rf_waddr_id_o),
    .rf_wdata_sel_o(rf_wdata_sel),
    .rf_we_o(rf_we_dec),
    .rst_ni(rst_ni),
    .wfi_insn_o(perf_wfi_wait_o),
    .zimm_rs1_type_o(zimm_rs1_type)
  );
  assign \$auto$rtlil.cc:3092:Mux$835 [0] = 1'h0;
  assign instr_id_done_o = en_wb_o;
  assign lsu_wdata_o = rf_rdata_b_i;
  assign multdiv_operand_a_ex_o = rf_rdata_a_i;
  assign multdiv_operand_b_ex_o = rf_rdata_b_i;
endmodule

(* src = "rtl/cve2/cve2_if_stage.sv:15.8" *)
module \cve2_if_stage$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i (clk_i, rst_ni, boot_addr_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, req_i, exc_cause, instr_valid_id_o, instr_new_id_o, instr_rdata_id_o, instr_rdata_alu_id_o, instr_rdata_c_id_o, instr_is_compressed_id_o, instr_fetch_err_o, instr_fetch_err_plus2_o, illegal_c_insn_id_o, pc_if_o
, pc_id_o, pmp_err_if_i, pmp_err_if_plus2_i, instr_valid_clear_i, pc_set_i, pc_mux_i, exc_pc_mux_i, branch_target_ex_i, csr_mepc_i, csr_depc_i, csr_mtvec_i, csr_mtvec_init_o, id_in_ready_i, if_busy_o);
  wire \$11 ;
  wire \$13 ;
  wire \$19 ;
  wire \$25 ;
  wire \$27 ;
  wire \$31 ;
  wire \$33 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire \$43 ;
  wire \$5 ;
  wire \$procmux$13068_CMP ;
  wire \$procmux$13069_CMP ;
  wire \$procmux$13070_CMP ;
  wire \$procmux$13071_CMP ;
  wire \$procmux$13073_CMP ;
  wire \$procmux$13074_CMP ;
  wire \$procmux$13075_CMP ;
  (* src = "rtl/cve2/cve2_if_stage.sv:22.40" *)
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:61.39" *)
  input [31:0] branch_target_ex_i;
  wire [31:0] branch_target_ex_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:19.40" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:66.39" *)
  input [31:0] csr_depc_i;
  wire [31:0] csr_depc_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:64.39" *)
  input [31:0] csr_mepc_i;
  wire [31:0] csr_mepc_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:68.39" *)
  input [31:0] csr_mtvec_i;
  wire [31:0] csr_mtvec_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:69.39" *)
  output csr_mtvec_init_o;
  wire csr_mtvec_init_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:58.39" *)
  input [6:0] exc_cause;
  wire [6:0] exc_cause;
  (* src = "rtl/cve2/cve2_if_stage.sv:102.22" *)
  wire [31:0] exc_pc;
  (* src = "rtl/cve2/cve2_if_stage.sv:57.39" *)
  input [1:0] exc_pc_mux_i;
  wire [1:0] exc_pc_mux_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:84.22" *)
  (* unused_bits = "0" *)
  wire [31:0] fetch_addr_n;
  (* src = "rtl/cve2/cve2_if_stage.sv:91.22" *)
  wire fetch_err;
  (* src = "rtl/cve2/cve2_if_stage.sv:92.22" *)
  wire fetch_err_plus2;
  (* src = "rtl/cve2/cve2_if_stage.sv:89.22" *)
  wire [31:0] fetch_rdata;
  (* src = "rtl/cve2/cve2_if_stage.sv:87.22" *)
  wire fetch_valid;
  (* src = "rtl/cve2/cve2_if_stage.sv:72.39" *)
  input id_in_ready_i;
  wire id_in_ready_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:75.39" *)
  output if_busy_o;
  wire if_busy_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:107.22" *)
  wire if_id_pipe_reg_we;
  (* src = "rtl/cve2/cve2_if_stage.sv:99.22" *)
  wire if_instr_err;
  (* src = "rtl/cve2/cve2_if_stage.sv:100.22" *)
  wire if_instr_err_plus2;
  (* src = "rtl/cve2/cve2_if_stage.sv:98.22" *)
  wire if_instr_pmp_err;
  (* src = "rtl/cve2/cve2_if_stage.sv:95.22" *)
  wire illegal_c_insn;
  (* src = "rtl/cve2/cve2_if_stage.sv:46.39" *)
  output illegal_c_insn_id_o;
  reg illegal_c_insn_id_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:27.39" *)
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:94.22" *)
  wire [31:0] instr_decompressed;
  (* src = "rtl/cve2/cve2_if_stage.sv:31.39" *)
  input instr_err_i;
  wire instr_err_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:44.39" *)
  output instr_fetch_err_o;
  reg instr_fetch_err_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:45.39" *)
  output instr_fetch_err_plus2_o;
  reg instr_fetch_err_plus2_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:28.39" *)
  input instr_gnt_i;
  wire instr_gnt_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:96.22" *)
  wire instr_is_compressed;
  (* src = "rtl/cve2/cve2_if_stage.sv:42.39" *)
  output instr_is_compressed_id_o;
  reg instr_is_compressed_id_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:35.39" *)
  output instr_new_id_o;
  reg instr_new_id_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:37.39" *)
  output [31:0] instr_rdata_alu_id_o;
  reg [31:0] instr_rdata_alu_id_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:39.39" *)
  output [15:0] instr_rdata_c_id_o;
  reg [15:0] instr_rdata_c_id_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:30.39" *)
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:36.39" *)
  output [31:0] instr_rdata_id_o;
  wire [31:0] instr_rdata_id_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:26.39" *)
  output instr_req_o;
  wire instr_req_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:29.39" *)
  input instr_rvalid_i;
  wire instr_rvalid_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:54.39" *)
  input instr_valid_clear_i;
  wire instr_valid_clear_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:78.22" *)
  wire instr_valid_id_d;
  (* src = "rtl/cve2/cve2_if_stage.sv:34.39" *)
  output instr_valid_id_o;
  reg instr_valid_id_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:49.39" *)
  output [31:0] pc_id_o;
  reg [31:0] pc_id_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:48.39" *)
  output [31:0] pc_if_o;
  wire [31:0] pc_if_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:56.39" *)
  input [2:0] pc_mux_i;
  wire [2:0] pc_mux_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:55.39" *)
  input pc_set_i;
  wire pc_set_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:50.39" *)
  input pmp_err_if_i;
  wire pmp_err_if_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:51.39" *)
  input pmp_err_if_plus2_i;
  wire pmp_err_if_plus2_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:23.40" *)
  input req_i;
  wire req_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:20.40" *)
  input rst_ni;
  wire rst_ni;
  assign if_instr_pmp_err = pmp_err_if_i | \$13 ;
  assign if_instr_err = fetch_err | if_instr_pmp_err;
  assign \$19  = ~ instr_is_compressed;
  assign \$11  = pc_if_o[2] & \$19 ;
  assign \$13  = \$11  & pmp_err_if_plus2_i;
  assign \$25  = \$13  | fetch_err_plus2;
  assign \$27  = ~ pmp_err_if_i;
  assign if_instr_err_plus2 = \$25  & \$27 ;
  assign \$31  = ~ fetch_err;
  assign \$33  = fetch_valid & \$31 ;
  assign if_id_pipe_reg_we = fetch_valid & id_in_ready_i;
  assign \$37  = ~ pc_set_i;
  assign \$39  = if_id_pipe_reg_we & \$37 ;
  assign \$5  = ! pc_mux_i;
  assign \$41  = ~ instr_valid_clear_i;
  assign \$43  = instr_valid_id_o & \$41 ;
  assign instr_valid_id_d = \$39  | \$43 ;
  assign csr_mtvec_init_o = \$5  & pc_set_i;
  (* src = "rtl/cve2/cve2_if_stage.sv:237.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) pc_id_o <= 32'd0;
    else if (if_id_pipe_reg_we) pc_id_o <= pc_if_o;
  (* src = "rtl/cve2/cve2_if_stage.sv:237.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_rdata_alu_id_o <= 32'd0;
    else if (if_id_pipe_reg_we) instr_rdata_alu_id_o <= instr_decompressed;
  (* src = "rtl/cve2/cve2_if_stage.sv:237.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_rdata_c_id_o <= 16'h0000;
    else if (if_id_pipe_reg_we) instr_rdata_c_id_o <= fetch_rdata[15:0];
  (* src = "rtl/cve2/cve2_if_stage.sv:237.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_is_compressed_id_o <= 1'h0;
    else if (if_id_pipe_reg_we) instr_is_compressed_id_o <= instr_is_compressed;
  (* src = "rtl/cve2/cve2_if_stage.sv:237.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_fetch_err_plus2_o <= 1'h0;
    else if (if_id_pipe_reg_we) instr_fetch_err_plus2_o <= if_instr_err_plus2;
  (* src = "rtl/cve2/cve2_if_stage.sv:237.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_fetch_err_o <= 1'h0;
    else if (if_id_pipe_reg_we) instr_fetch_err_o <= if_instr_err;
  (* src = "rtl/cve2/cve2_if_stage.sv:237.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) illegal_c_insn_id_o <= 1'h0;
    else if (if_id_pipe_reg_we) illegal_c_insn_id_o <= illegal_c_insn;
  (* src = "rtl/cve2/cve2_if_stage.sv:220.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_new_id_o <= 1'h0;
    else instr_new_id_o <= if_id_pipe_reg_we;
  (* src = "rtl/cve2/cve2_if_stage.sv:220.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_valid_id_o <= 1'h0;
    else instr_valid_id_o <= instr_valid_id_d;
  function [31:0] \$procmux$13067 ;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_if_stage.sv:142.16-142.42|rtl/cve2/cve2_if_stage.sv:137.5-144.12" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$13067  = b[31:0];
      4'b??1?:
        \$procmux$13067  = b[63:32];
      4'b?1??:
        \$procmux$13067  = b[95:64];
      4'b1???:
        \$procmux$13067  = b[127:96];
      default:
        \$procmux$13067  = a;
    endcase
  endfunction
  assign fetch_addr_n = \$procmux$13067 ({ boot_addr_i[31:8], 8'h00 }, { branch_target_ex_i, exc_pc[31:2], 2'h0, csr_mepc_i, csr_depc_i }, { \$procmux$13071_CMP , \$procmux$13070_CMP , \$procmux$13069_CMP , \$procmux$13068_CMP  });
  assign \$procmux$13068_CMP  = pc_mux_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_if_stage.sv:142.16-142.42|rtl/cve2/cve2_if_stage.sv:137.5-144.12" *) 3'h4;
  assign \$procmux$13069_CMP  = pc_mux_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_if_stage.sv:141.16-141.42|rtl/cve2/cve2_if_stage.sv:137.5-144.12" *) 2'h3;
  assign \$procmux$13070_CMP  = pc_mux_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_if_stage.sv:140.16-140.38|rtl/cve2/cve2_if_stage.sv:137.5-144.12" *) 2'h2;
  assign \$procmux$13071_CMP  = pc_mux_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_if_stage.sv:139.16-139.50|rtl/cve2/cve2_if_stage.sv:137.5-144.12" *) 1'h1;
  function [29:0] \$procmux$13072 ;
    input [29:0] a;
    input [89:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_if_stage.sv:127.23-127.48|rtl/cve2/cve2_if_stage.sv:123.5-129.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$13072  = b[29:0];
      3'b?1?:
        \$procmux$13072  = b[59:30];
      3'b1??:
        \$procmux$13072  = b[89:60];
      default:
        \$procmux$13072  = a;
    endcase
  endfunction
  assign exc_pc[31:2] = \$procmux$13072 ({ csr_mtvec_i[31:8], 6'h00 }, { csr_mtvec_i[31:8], exc_cause[5:0], 60'h000008000000204 }, { \$procmux$13075_CMP , \$procmux$13074_CMP , \$procmux$13073_CMP  });
  assign \$procmux$13073_CMP  = exc_pc_mux_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_if_stage.sv:127.23-127.48|rtl/cve2/cve2_if_stage.sv:123.5-129.12" *) 2'h3;
  assign \$procmux$13074_CMP  = exc_pc_mux_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_if_stage.sv:126.23-126.43|rtl/cve2/cve2_if_stage.sv:123.5-129.12" *) 2'h2;
  assign \$procmux$13075_CMP  = exc_pc_mux_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_if_stage.sv:125.23-125.74|rtl/cve2/cve2_if_stage.sv:123.5-129.12" *) 1'h1;
  (* src = "rtl/cve2/cve2_if_stage.sv:203.27" *)
  \cve2_compressed_decoder$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.compressed_decoder_i  compressed_decoder_i (
    .clk_i(clk_i),
    .illegal_instr_o(illegal_c_insn),
    .instr_i(fetch_rdata),
    .instr_o(instr_decompressed),
    .is_compressed_o(instr_is_compressed),
    .rst_ni(rst_ni),
    .valid_i(\$33 )
  );
  (* src = "rtl/cve2/cve2_if_stage.sv:152.5" *)
  \cve2_prefetch_buffer$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.prefetch_buffer_i  prefetch_buffer_i (
    .addr_i({ fetch_addr_n[31:1], 1'h0 }),
    .addr_o(pc_if_o),
    .branch_i(pc_set_i),
    .busy_o(if_busy_o),
    .clk_i(clk_i),
    .err_o(fetch_err),
    .err_plus2_o(fetch_err_plus2),
    .instr_addr_o(instr_addr_o),
    .instr_err_i(instr_err_i),
    .instr_gnt_i(instr_gnt_i),
    .instr_rdata_i(instr_rdata_i),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .rdata_o(fetch_rdata),
    .ready_i(id_in_ready_i),
    .req_i(req_i),
    .rst_ni(rst_ni),
    .valid_o(fetch_valid)
  );
  assign exc_pc[1:0] = 2'h0;
  assign instr_rdata_id_o = instr_rdata_alu_id_o;
endmodule

(* src = "rtl/cve2/cve2_load_store_unit.sv:16.8" *)
module \cve2_load_store_unit$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.load_store_unit_i (clk_i, rst_ni, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_be_o, data_addr_o, data_wdata_o, data_rdata_i, data_err_i, busy_o, data_pmp_err_i, lsu_we_i, lsu_type_i, lsu_wdata_i, lsu_sign_ext_i, lsu_rdata_o, lsu_rdata_valid_o, lsu_req_i, adder_result_ex_i
, addr_incr_req_o, addr_last_o, lsu_resp_valid_o, load_err_o, store_err_o, perf_load_o, perf_store_o);
  wire \$101 ;
  wire \$103 ;
  wire \$105 ;
  wire \$110 ;
  wire \$112 ;
  wire \$114 ;
  wire \$124 ;
  wire \$126 ;
  wire \$132 ;
  wire \$155 ;
  wire \$159 ;
  wire \$161 ;
  wire \$167 ;
  wire \$169 ;
  wire \$171 ;
  wire \$179 ;
  wire \$183 ;
  wire \$63 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$71 ;
  wire \$73 ;
  wire \$78 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" *)
  wire \$addr_update$117 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:417.9-423.12" *)
  wire \$addr_update$127 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" *)
  wire \$addr_update$135 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *)
  wire \$addr_update$85 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17610 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17612 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17614 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17625 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17630 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17634 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17636 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17645 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17649 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17616 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17627 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17640 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17653 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16854 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16856 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16886 ;
  wire \$auto$opt_share.cc:222:merge_operators$17225 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$865 ;
  wire \$auto$rtlil.cc:3094:Pmux$17227 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16" *)
  wire [3:0] \$data_be$10 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:113.11-119.18" *)
  wire [3:0] \$data_be$3 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:121.11-127.18" *)
  wire [3:0] \$data_be$4 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:112.9-128.12" *)
  wire [3:0] \$data_be$5 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:133.11-139.18" *)
  wire [3:0] \$data_be$8 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:132.9-142.12" *)
  wire [3:0] \$data_be$9 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" *)
  wire \$handle_misaligned_d$119 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:375.9-380.12" *)
  wire \$handle_misaligned_d$98 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" *)
  wire [2:0] \$ls_fsm_ns$122 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:358.11-365.14" *)
  wire [2:0] \$ls_fsm_ns$84 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *)
  wire \$perf_load_o$92 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *)
  wire \$perf_store_o$93 ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *)
  wire \$pmp_err_d$88 ;
  wire \$procmux$12198_CMP ;
  wire \$procmux$12224_CMP ;
  wire \$procmux$12252_CMP ;
  wire \$procmux$12320_CMP ;
  wire [1:0] \$procmux$12585_CMP ;
  wire \$procmux$12585_CTRL ;
  wire \$procmux$12586_CMP ;
  wire [31:0] \$procmux$12589_Y ;
  wire \$procmux$12592_CMP ;
  wire [31:0] \$procmux$12595_Y ;
  wire \$procmux$12598_CMP ;
  wire [31:0] \$procmux$12602_Y ;
  wire \$procmux$12605_CMP ;
  wire [31:0] \$procmux$12619_Y ;
  wire \$procmux$12677_CMP ;
  wire \$procmux$12678_CMP ;
  wire [1:0] \$procmux$12686_CMP ;
  wire \$procmux$12686_CTRL ;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:44.24" *)
  input [31:0] adder_result_ex_i;
  wire [31:0] adder_result_ex_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:46.24" *)
  output addr_incr_req_o;
  wire addr_incr_req_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:66.30" *)
  wire [31:0] addr_last_d;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:48.24" *)
  output [31:0] addr_last_o;
  reg [31:0] addr_last_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:68.17" *)
  wire addr_update;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:58.24" *)
  output busy_o;
  wire busy_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:18.24" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:69.17" *)
  wire ctrl_update;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:28.24" *)
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:30.24" *)
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:25.24" *)
  input data_err_i;
  wire data_err_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:23.24" *)
  input data_gnt_i;
  wire data_gnt_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:93.17" *)
  wire data_or_pmp_err;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:26.24" *)
  input data_pmp_err_i;
  wire data_pmp_err_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:32.24" *)
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:22.24" *)
  output data_req_o;
  wire data_req_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:24.24" *)
  input data_rvalid_i;
  wire data_rvalid_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:74.17" *)
  reg data_sign_ext_q;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:73.17" *)
  reg [1:0] data_type_q;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:31.24" *)
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:29.24" *)
  output data_we_o;
  wire data_we_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:75.17" *)
  reg data_we_q;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:89.38" *)
  wire handle_misaligned_d;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:89.17" *)
  reg handle_misaligned_q;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:55.24" *)
  output load_err_o;
  wire load_err_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:100.12" *)
  reg [2:0] ls_fsm_cs;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:100.23" *)
  wire [2:0] ls_fsm_ns;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:92.28" *)
  wire lsu_err_d;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:92.17" *)
  reg lsu_err_q;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:40.24" *)
  output [31:0] lsu_rdata_o;
  wire [31:0] lsu_rdata_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:41.24" *)
  output lsu_rdata_valid_o;
  wire lsu_rdata_valid_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:42.24" *)
  input lsu_req_i;
  wire lsu_req_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:52.24" *)
  output lsu_resp_valid_o;
  wire lsu_resp_valid_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:38.24" *)
  input lsu_sign_ext_i;
  wire lsu_sign_ext_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:36.24" *)
  input [1:0] lsu_type_i;
  wire [1:0] lsu_type_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:37.24" *)
  input [31:0] lsu_wdata_i;
  wire [31:0] lsu_wdata_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:35.24" *)
  input lsu_we_i;
  wire lsu_we_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:60.24" *)
  output perf_load_o;
  wire perf_load_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:61.24" *)
  output perf_store_o;
  wire perf_store_o;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:91.28" *)
  wire pmp_err_d;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:91.17" *)
  reg pmp_err_q;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:86.17" *)
  wire [31:0] rdata_b_ext;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:85.17" *)
  wire [31:0] rdata_h_ext;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:72.17" *)
  reg [1:0] rdata_offset_q;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:71.17" *)
  reg [23:0] rdata_q;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:70.17" *)
  wire rdata_update;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:84.17" *)
  wire [31:0] rdata_w_ext;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:19.24" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:88.17" *)
  wire split_misaligned_access;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:56.24" *)
  output store_err_o;
  wire store_err_o;
  assign \$101  = data_rvalid_i || pmp_err_q;
  assign \$103  = data_err_i | pmp_err_q;
  assign \$105  = ~ data_we_q;
  assign \$114  = ~ data_gnt_i;
  assign \$110  = ~ \$103 ;
  assign \$112  = data_gnt_i & \$110 ;
  assign \$124  = data_gnt_i || pmp_err_q;
  assign \$126  = ~ lsu_err_q;
  assign \$132  = ~ data_err_i;
  assign \$155  = lsu_err_q | data_err_i;
  assign data_or_pmp_err = \$155  | pmp_err_q;
  assign \$159  = data_rvalid_i | pmp_err_q;
  assign \$161  = ! ls_fsm_cs;
  assign lsu_resp_valid_o = \$159  & \$161 ;
  assign \$167  = \$161  & data_rvalid_i;
  assign \$169  = ~ data_or_pmp_err;
  assign \$171  = \$167  & \$169 ;
  assign lsu_rdata_valid_o = \$171  & \$105 ;
  assign \$179  = data_or_pmp_err & \$105 ;
  assign load_err_o = \$179  & lsu_resp_valid_o;
  assign \$183  = data_or_pmp_err & data_we_q;
  assign store_err_o = \$183  & lsu_resp_valid_o;
  assign busy_o = | ls_fsm_cs;
  assign addr_last_d[1:0] = addr_incr_req_o ? 2'h0 : adder_result_ex_i[1:0];
  assign \$63  = ! lsu_type_i;
  assign \$65  = | adder_result_ex_i[1:0];
  assign \$67  = \$63  && \$65 ;
  assign \$69  = lsu_type_i == 1'h1;
  assign \$71  = adder_result_ex_i[1:0] == 2'h3;
  assign \$73  = \$69  && \$71 ;
  assign split_misaligned_access = \$67  || \$73 ;
  assign \$78  = ~ lsu_we_i;
  assign \$auto$rtlil.cc:3092:Mux$865 [1] = ~ split_misaligned_access;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q <= 24'h000000;
    else if (rdata_update) rdata_q <= data_rdata_i[31:8];
  (* src = "rtl/cve2/cve2_load_store_unit.sv:190.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_offset_q <= 2'h0;
    else if (ctrl_update) rdata_offset_q <= adder_result_ex_i[1:0];
  (* src = "rtl/cve2/cve2_load_store_unit.sv:452.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) pmp_err_q <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17616 ) pmp_err_q <= pmp_err_d;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:452.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) lsu_err_q <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17627 ) lsu_err_q <= lsu_err_d;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:452.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) ls_fsm_cs <= 3'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17640 ) ls_fsm_cs <= ls_fsm_ns;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:452.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) handle_misaligned_q <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17653 ) handle_misaligned_q <= handle_misaligned_d;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:190.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_we_q <= 1'h0;
    else if (ctrl_update) data_we_q <= lsu_we_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:190.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_type_q <= 2'h0;
    else if (ctrl_update) data_type_q <= lsu_type_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:190.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_sign_ext_q <= 1'h0;
    else if (ctrl_update) data_sign_ext_q <= lsu_sign_ext_i;
  (* src = "rtl/cve2/cve2_load_store_unit.sv:210.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) addr_last_o <= 32'd0;
    else if (addr_update) addr_last_o <= { adder_result_ex_i[31:2], addr_last_d[1:0] };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17610  = { \$procmux$12198_CMP , data_rvalid_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17612  = { \$procmux$12252_CMP , \$101  } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17614  = | { \$procmux$12252_CMP , \$procmux$12198_CMP , \$161  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17625  = { lsu_req_i, \$161  } != 2'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17630  = { \$procmux$12252_CMP , \$101 , data_gnt_i } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17634  = { \$procmux$12224_CMP , \$124  } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17636  = { \$procmux$12320_CMP , \$124  } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17645  = { lsu_req_i, \$161 , data_gnt_i } != 3'h6;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17649  = | { \$procmux$12320_CMP , \$procmux$12252_CMP , \$procmux$12224_CMP , \$161  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17616  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17614 , \$auto$opt_dff.cc:194:make_patterns_logic$17612 , \$auto$opt_dff.cc:194:make_patterns_logic$17610  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17627  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17625 , \$auto$opt_dff.cc:194:make_patterns_logic$17614 , \$auto$opt_dff.cc:194:make_patterns_logic$17612 , \$auto$opt_dff.cc:194:make_patterns_logic$17610  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17640  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17636 , \$auto$opt_dff.cc:194:make_patterns_logic$17634 , \$auto$opt_dff.cc:194:make_patterns_logic$17630 , \$auto$opt_dff.cc:194:make_patterns_logic$17625 , \$auto$opt_dff.cc:194:make_patterns_logic$17610  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17653  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17649 , \$auto$opt_dff.cc:194:make_patterns_logic$17645 , \$auto$opt_dff.cc:194:make_patterns_logic$17634 , \$auto$opt_dff.cc:194:make_patterns_logic$17630 , \$auto$opt_dff.cc:194:make_patterns_logic$17625  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16856  = | { \$procmux$12320_CMP , \$procmux$12252_CMP , \$procmux$12224_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16886  = | { \$procmux$12320_CMP , \$procmux$12224_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16854  = | { \$procmux$12252_CMP , \$procmux$12198_CMP  };
  assign \$auto$rtlil.cc:3094:Pmux$17227  = \$procmux$12198_CMP  ? data_rvalid_i : \$101 ;
  assign \$procmux$12198_CMP  = ls_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) 3'h4;
  assign \$auto$opt_share.cc:222:merge_operators$17225  = \$auto$rtlil.cc:3094:Pmux$17227  & (* src = "rtl/cve2/cve2_load_store_unit.sv:431.28-442.12|rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" *) \$105 ;
  assign \$addr_update$135  = data_rvalid_i & (* src = "rtl/cve2/cve2_load_store_unit.sv:431.28-442.12|rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" *) \$132 ;
  assign \$procmux$12224_CMP  = ls_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) 2'h3;
  assign \$addr_update$127  = \$124  & (* src = "rtl/cve2/cve2_load_store_unit.sv:417.38-423.12|rtl/cve2/cve2_load_store_unit.sv:417.9-423.12" *) \$126 ;
  assign \$procmux$12252_CMP  = ls_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) 2'h2;
  assign \$ls_fsm_ns$122 [2:1] = \$101  ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" *) { 1'h0, \$114  } : 2'h2;
  assign \$handle_misaligned_d$119  = \$101  & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" *) \$114 ;
  assign \$addr_update$117  = \$101  & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" *) \$112 ;
  assign \$procmux$12320_CMP  = ls_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:369.21-381.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) 1'h1;
  assign \$handle_misaligned_d$98  = handle_misaligned_q | (* src = "rtl/cve2/cve2_load_store_unit.sv:375.38-380.12|rtl/cve2/cve2_load_store_unit.sv:375.9-380.12" *) \$124 ;
  function [2:0] \$procmux$12347 ;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$12347  = b[2:0];
      3'b?1?:
        \$procmux$12347  = b[5:3];
      3'b1??:
        \$procmux$12347  = b[8:6];
      default:
        \$procmux$12347  = a;
    endcase
  endfunction
  assign ls_fsm_ns = \$procmux$12347 (3'h0, { 1'h0, \$ls_fsm_ns$84 [1:0], 3'h2, \$ls_fsm_ns$122 [2:1], \$ls_fsm_ns$122 [1] }, { \$161 , \$procmux$12320_CMP , \$procmux$12252_CMP  });
  assign \$ls_fsm_ns$84 [1:0] = data_gnt_i ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:358.27-363.14|rtl/cve2/cve2_load_store_unit.sv:358.11-365.14" *) { split_misaligned_access, 1'h0 } : { \$auto$rtlil.cc:3092:Mux$865 [1], 1'h1 };
  assign \$perf_store_o$93  = lsu_req_i & (* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *) lsu_we_i;
  assign \$perf_load_o$92  = lsu_req_i & (* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *) \$78 ;
  assign \$pmp_err_d$88  = lsu_req_i & (* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *) data_pmp_err_i;
  assign \$addr_update$85  = lsu_req_i & (* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *) data_gnt_i;
  assign perf_store_o = \$161  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) \$perf_store_o$93 ;
  assign perf_load_o = \$161  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) \$perf_load_o$92 ;
  function [0:0] \$procmux$12513 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$12513  = b[0:0];
      2'b1?:
        \$procmux$12513  = b[1:1];
      default:
        \$procmux$12513  = a;
    endcase
  endfunction
  assign addr_incr_req_o = \$procmux$12513 (1'h0, { handle_misaligned_q, 1'h1 }, { \$procmux$12224_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16854  });
  function [0:0] \$procmux$12522 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$12522  = b[0:0];
      2'b1?:
        \$procmux$12522  = b[1:1];
      default:
        \$procmux$12522  = a;
    endcase
  endfunction
  assign data_req_o = \$procmux$12522 (1'h0, { lsu_req_i, 1'h1 }, { \$161 , \$auto$opt_reduce.cc:137:opt_pmux$16856  });
  function [0:0] \$procmux$12532 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$12532  = b[0:0];
      2'b1?:
        \$procmux$12532  = b[1:1];
      default:
        \$procmux$12532  = a;
    endcase
  endfunction
  assign lsu_err_d = \$procmux$12532 (1'h0, { \$103 , data_err_i }, { \$procmux$12252_CMP , \$procmux$12198_CMP  });
  assign pmp_err_d = \$auto$opt_reduce.cc:137:opt_pmux$16854  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) data_pmp_err_i : \$pmp_err_d$88 ;
  function [0:0] \$procmux$12549 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$12549  = b[0:0];
      3'b?1?:
        \$procmux$12549  = b[1:1];
      3'b1??:
        \$procmux$12549  = b[2:2];
      default:
        \$procmux$12549  = a;
    endcase
  endfunction
  assign handle_misaligned_d = \$procmux$12549 (split_misaligned_access, { \$handle_misaligned_d$98 , \$handle_misaligned_d$119 , 1'h0 }, { \$procmux$12320_CMP , \$procmux$12252_CMP , \$procmux$12224_CMP  });
  assign rdata_update = \$auto$opt_reduce.cc:137:opt_pmux$16854  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) \$auto$opt_share.cc:222:merge_operators$17225 ;
  function [0:0] \$procmux$12566 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$12566  = b[0:0];
      2'b1?:
        \$procmux$12566  = b[1:1];
      default:
        \$procmux$12566  = a;
    endcase
  endfunction
  assign ctrl_update = \$procmux$12566 (1'h0, { \$addr_update$85 , \$124  }, { \$161 , \$auto$opt_reduce.cc:137:opt_pmux$16886  });
  function [0:0] \$procmux$12574 ;
    input [0:0] a;
    input [4:0] b;
    input [4:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        \$procmux$12574  = b[0:0];
      5'b???1?:
        \$procmux$12574  = b[1:1];
      5'b??1??:
        \$procmux$12574  = b[2:2];
      5'b?1???:
        \$procmux$12574  = b[3:3];
      5'b1????:
        \$procmux$12574  = b[4:4];
      default:
        \$procmux$12574  = a;
    endcase
  endfunction
  assign addr_update = \$procmux$12574 (1'h0, { \$addr_update$85 , \$124 , \$addr_update$117 , \$addr_update$127 , \$addr_update$135  }, { \$161 , \$procmux$12320_CMP , \$procmux$12252_CMP , \$procmux$12224_CMP , \$procmux$12198_CMP  });
  function [31:0] \$procmux$12584 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$12584  = b[31:0];
      2'b1?:
        \$procmux$12584  = b[63:32];
      default:
        \$procmux$12584  = a;
    endcase
  endfunction
  assign lsu_rdata_o = \$procmux$12584 (rdata_w_ext, { rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[15:0], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[7:0] }, { \$procmux$12586_CMP , \$procmux$12585_CTRL  });
  assign \$procmux$12585_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" *) \$procmux$12585_CMP ;
  assign \$procmux$12585_CMP [0] = data_type_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" *) 2'h2;
  assign \$procmux$12585_CMP [1] = data_type_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" *) 2'h3;
  assign \$procmux$12586_CMP  = data_type_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:315.20-315.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" *) 1'h1;
  assign \$procmux$12589_Y [31] = data_sign_ext_q & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:301.11-301.60|rtl/cve2/cve2_load_store_unit.sv:300.9-304.12" *) data_rdata_i[31];
  assign \$procmux$12592_CMP  = rdata_offset_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:300.9-304.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" *) 2'h3;
  assign \$procmux$12595_Y [31] = data_sign_ext_q & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:293.11-293.60|rtl/cve2/cve2_load_store_unit.sv:292.9-296.12" *) data_rdata_i[23];
  assign \$procmux$12598_CMP  = rdata_offset_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:292.9-296.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" *) 2'h2;
  assign \$procmux$12602_Y [31] = data_sign_ext_q & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:285.11-285.59|rtl/cve2/cve2_load_store_unit.sv:284.9-288.12" *) data_rdata_i[15];
  assign \$procmux$12605_CMP  = rdata_offset_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:284.9-288.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" *) 1'h1;
  function [8:0] \$procmux$12607 ;
    input [8:0] a;
    input [26:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:300.9-304.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$12607  = b[8:0];
      3'b?1?:
        \$procmux$12607  = b[17:9];
      3'b1??:
        \$procmux$12607  = b[26:18];
      default:
        \$procmux$12607  = a;
    endcase
  endfunction
  assign { rdata_b_ext[31], rdata_b_ext[7:0] } = \$procmux$12607 ({ \$procmux$12619_Y [31], data_rdata_i[7:0] }, { \$procmux$12602_Y [31], data_rdata_i[15:8], \$procmux$12595_Y [31], data_rdata_i[23:16], \$procmux$12589_Y [31], data_rdata_i[31:24] }, { \$procmux$12605_CMP , \$procmux$12598_CMP , \$procmux$12592_CMP  });
  assign \$procmux$12619_Y [31] = data_sign_ext_q & (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:277.11-277.58|rtl/cve2/cve2_load_store_unit.sv:276.9-280.12" *) data_rdata_i[7];
  function [16:0] \$procmux$12642 ;
    input [16:0] a;
    input [50:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:261.9-265.12|rtl/cve2/cve2_load_store_unit.sv:235.5-269.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$12642  = b[16:0];
      3'b?1?:
        \$procmux$12642  = b[33:17];
      3'b1??:
        \$procmux$12642  = b[50:34];
      default:
        \$procmux$12642  = a;
    endcase
  endfunction
  assign { rdata_h_ext[31], rdata_h_ext[15:0] } = \$procmux$12642 ({ \$procmux$12602_Y [31], data_rdata_i[15:0] }, { \$procmux$12595_Y [31], data_rdata_i[23:8], \$procmux$12589_Y [31], data_rdata_i[31:16], \$procmux$12619_Y [31], data_rdata_i[7:0], rdata_q[23:16] }, { \$procmux$12605_CMP , \$procmux$12598_CMP , \$procmux$12592_CMP  });
  function [31:0] \$procmux$12658 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:224.16-224.67|rtl/cve2/cve2_load_store_unit.sv:220.5-226.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$12658  = b[31:0];
      3'b?1?:
        \$procmux$12658  = b[63:32];
      3'b1??:
        \$procmux$12658  = b[95:64];
      default:
        \$procmux$12658  = a;
    endcase
  endfunction
  assign rdata_w_ext = \$procmux$12658 (data_rdata_i, { data_rdata_i[7:0], rdata_q, data_rdata_i[15:0], rdata_q[23:8], data_rdata_i[23:0], rdata_q[23:16] }, { \$procmux$12605_CMP , \$procmux$12598_CMP , \$procmux$12592_CMP  });
  function [31:0] \$procmux$12675 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:171.16-171.69|rtl/cve2/cve2_load_store_unit.sv:167.5-173.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$12675  = b[31:0];
      3'b?1?:
        \$procmux$12675  = b[63:32];
      3'b1??:
        \$procmux$12675  = b[95:64];
      default:
        \$procmux$12675  = a;
    endcase
  endfunction
  assign data_wdata_o = \$procmux$12675 (lsu_wdata_i, { lsu_wdata_i[23:0], lsu_wdata_i[31:24], lsu_wdata_i[15:0], lsu_wdata_i[31:16], lsu_wdata_i[7:0], lsu_wdata_i[31:8] }, { \$procmux$12678_CMP , \$procmux$12677_CMP , \$71  });
  assign \$procmux$12677_CMP  = adder_result_ex_i[1:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:170.16-170.69|rtl/cve2/cve2_load_store_unit.sv:167.5-173.12" *) 2'h2;
  assign \$procmux$12678_CMP  = adder_result_ex_i[1:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:169.16-169.69|rtl/cve2/cve2_load_store_unit.sv:167.5-173.12" *) 1'h1;
  function [3:0] \$procmux$12680 ;
    input [3:0] a;
    input [11:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:151.20-151.38|rtl/cve2/cve2_load_store_unit.sv:147.9-153.16" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$12680  = b[3:0];
      3'b?1?:
        \$procmux$12680  = b[7:4];
      3'b1??:
        \$procmux$12680  = b[11:8];
      default:
        \$procmux$12680  = a;
    endcase
  endfunction
  assign \$data_be$10  = \$procmux$12680 (4'h1, 12'h248, { \$procmux$12678_CMP , \$procmux$12677_CMP , \$71  });
  assign \$procmux$12686_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" *) \$procmux$12686_CMP ;
  assign \$procmux$12686_CMP [0] = lsu_type_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" *) 2'h2;
  assign \$procmux$12686_CMP [1] = lsu_type_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" *) 2'h3;
  assign \$data_be$9  = handle_misaligned_q ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:133.11-139.18|rtl/cve2/cve2_load_store_unit.sv:132.9-142.12" *) 4'h1 : \$data_be$8 ;
  function [3:0] \$procmux$12696 ;
    input [3:0] a;
    input [11:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:137.22-137.40|rtl/cve2/cve2_load_store_unit.sv:133.11-139.18" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$12696  = b[3:0];
      3'b?1?:
        \$procmux$12696  = b[7:4];
      3'b1??:
        \$procmux$12696  = b[11:8];
      default:
        \$procmux$12696  = a;
    endcase
  endfunction
  assign \$data_be$8  = \$procmux$12696 (4'h3, 12'h6c8, { \$procmux$12678_CMP , \$procmux$12677_CMP , \$71  });
  function [3:0] \$procmux$12706 ;
    input [3:0] a;
    input [7:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$12706  = b[3:0];
      2'b1?:
        \$procmux$12706  = b[7:4];
      default:
        \$procmux$12706  = a;
    endcase
  endfunction
  assign data_be_o = \$procmux$12706 (\$data_be$5 , { \$data_be$9 , \$data_be$10  }, { \$69 , \$procmux$12686_CTRL  });
  function [2:0] \$procmux$12714 ;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:125.22-125.40|rtl/cve2/cve2_load_store_unit.sv:121.11-127.18" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$12714  = b[2:0];
      3'b?1?:
        \$procmux$12714  = b[5:3];
      3'b1??:
        \$procmux$12714  = b[8:6];
      default:
        \$procmux$12714  = a;
    endcase
  endfunction
  assign \$data_be$4 [2:0] = \$procmux$12714 (3'h0, 9'h05f, { \$procmux$12678_CMP , \$procmux$12677_CMP , \$71  });
  assign \$data_be$5  = handle_misaligned_q ? (* full_case = 32'd1 *) (* src = "rtl/cve2/cve2_load_store_unit.sv:113.11-119.18|rtl/cve2/cve2_load_store_unit.sv:112.9-128.12" *) { 1'h0, \$data_be$4 [2:0] } : { 1'h1, \$data_be$3 [2:0] };
  function [2:0] \$procmux$12736 ;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/cve2/cve2_load_store_unit.sv:117.22-117.40|rtl/cve2/cve2_load_store_unit.sv:113.11-119.18" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$12736  = b[2:0];
      3'b?1?:
        \$procmux$12736  = b[5:3];
      3'b1??:
        \$procmux$12736  = b[8:6];
      default:
        \$procmux$12736  = a;
    endcase
  endfunction
  assign \$data_be$3 [2:0] = \$procmux$12736 (3'h7, 9'h1a0, { \$procmux$12678_CMP , \$procmux$12677_CMP , \$71  });
  assign \$auto$rtlil.cc:3092:Mux$865 [0] = 1'h1;
  assign \$data_be$3 [3] = 1'h1;
  assign \$data_be$4 [3] = 1'h0;
  assign \$ls_fsm_ns$122 [0] = \$ls_fsm_ns$122 [1];
  assign \$ls_fsm_ns$84 [2] = 1'h0;
  assign \$procmux$12589_Y [30:0] = { \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], data_rdata_i[31:24] };
  assign \$procmux$12595_Y [30:0] = { \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], data_rdata_i[23:16] };
  assign \$procmux$12602_Y [30:0] = { \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], data_rdata_i[15:8] };
  assign \$procmux$12619_Y [30:0] = { \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], data_rdata_i[7:0] };
  assign addr_last_d[31:2] = adder_result_ex_i[31:2];
  assign data_addr_o = { adder_result_ex_i[31:2], 2'h0 };
  assign data_we_o = lsu_we_i;
  assign rdata_b_ext[30:8] = { rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31] };
  assign rdata_h_ext[30:16] = { rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31] };
endmodule

(* src = "rtl/cve2/cve2_prefetch_buffer.sv:12.8" *)
module \cve2_prefetch_buffer$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.prefetch_buffer_i (clk_i, rst_ni, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, addr_o, req_i, addr_i, rdata_o, busy_o, branch_i, ready_i, valid_o, err_o, err_plus2_o);
  wire \$1 ;
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$20 ;
  wire \$24 ;
  wire \$28 ;
  wire \$30 ;
  wire [1:0] \$5 ;
  wire \$59 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$7 ;
  wire \$75 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$93 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17662 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1589 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1592 ;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:20.23" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:26.23" *)
  output [31:0] addr_o;
  wire [31:0] addr_o;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:48.24" *)
  wire [1:0] branch_discard_n;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:48.60" *)
  reg [1:0] branch_discard_q;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:48.42" *)
  wire [1:0] branch_discard_s;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:19.23" *)
  input branch_i;
  wire branch_i;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:39.23" *)
  output busy_o;
  wire busy_o;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:14.23" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:46.24" *)
  wire discard_req_d;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:46.39" *)
  reg discard_req_q;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:27.23" *)
  output err_o;
  wire err_o;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:28.23" *)
  output err_plus2_o;
  wire err_plus2_o;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:53.24" *)
  wire [31:0] fetch_addr_d;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:54.24" *)
  wire fetch_addr_en;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:53.38" *)
  reg [31:0] fetch_addr_q;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:61.24" *)
  wire [1:0] fifo_busy;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:59.24" *)
  wire fifo_ready;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:57.24" *)
  wire fifo_valid;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:55.24" *)
  (* unused_bits = "0 1" *)
  wire [31:0] instr_addr;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:33.23" *)
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:35.23" *)
  input instr_err_i;
  wire instr_err_i;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:32.23" *)
  input instr_gnt_i;
  wire instr_gnt_i;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:34.23" *)
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:31.23" *)
  output instr_req_o;
  wire instr_req_o;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:36.23" *)
  input instr_rvalid_i;
  wire instr_rvalid_i;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:25.23" *)
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:47.24" *)
  wire [1:0] rdata_outstanding_n;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:47.66" *)
  reg [1:0] rdata_outstanding_q;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:47.45" *)
  wire [1:0] rdata_outstanding_s;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:23.23" *)
  input ready_i;
  wire ready_i;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:17.23" *)
  input req_i;
  wire req_i;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:15.23" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:52.24" *)
  wire stored_addr_en;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:51.39" *)
  reg [31:0] stored_addr_q;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:44.24" *)
  wire valid_new_req;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:24.23" *)
  output valid_o;
  wire valid_o;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:45.24" *)
  wire valid_req_d;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:45.37" *)
  reg valid_req_q;
  assign \$1  = | rdata_outstanding_q;
  assign \$12  = req_i & \$10 ;
  assign \$14  = ~ rdata_outstanding_q[1];
  assign valid_new_req = \$12  & \$14 ;
  assign instr_req_o = valid_req_q | valid_new_req;
  assign \$20  = ~ instr_gnt_i;
  assign busy_o = \$1  | instr_req_o;
  assign valid_req_d = instr_req_o & \$20 ;
  assign \$24  = branch_i | discard_req_q;
  assign discard_req_d = valid_req_q & \$24 ;
  assign \$28  = ~ valid_req_q;
  assign \$30  = valid_new_req & \$28 ;
  assign stored_addr_en = \$30  & \$20 ;
  assign \$5  = fifo_busy | { rdata_outstanding_q[0], rdata_outstanding_q[1] };
  assign fetch_addr_en = branch_i | \$30 ;
  assign { \$auto$rtlil.cc:3092:Mux$1589 [31:2], fetch_addr_d[1:0] } = branch_i ? addr_i : { fetch_addr_q[31:2], 2'h0 };
  assign fetch_addr_d[31:2] = \$auto$rtlil.cc:3092:Mux$1589 [31:2] + \$30 ;
  assign \$auto$rtlil.cc:3092:Mux$1592  = branch_i ? addr_i : fetch_addr_q;
  assign instr_addr = valid_req_q ? stored_addr_q : \$auto$rtlil.cc:3092:Mux$1592 ;
  assign \$59  = instr_req_o & instr_gnt_i;
  assign \$7  = & \$5 ;
  assign rdata_outstanding_n[0] = \$59  | rdata_outstanding_q[0];
  assign \$65  = \$59  & discard_req_d;
  assign \$67  = branch_i & rdata_outstanding_q[0];
  assign \$69  = \$65  | \$67 ;
  assign branch_discard_n[0] = \$69  | branch_discard_q[0];
  assign \$75  = \$59  & rdata_outstanding_q[0];
  assign rdata_outstanding_n[1] = \$75  | rdata_outstanding_q[1];
  assign fifo_ready = ! \$7 ;
  assign \$83  = \$65  & rdata_outstanding_q[0];
  assign \$85  = branch_i & rdata_outstanding_q[1];
  assign \$87  = \$83  | \$85 ;
  assign branch_discard_n[1] = \$87  | branch_discard_q[1];
  assign \$10  = fifo_ready | branch_i;
  assign rdata_outstanding_s = instr_rvalid_i ? { 1'h0, rdata_outstanding_n[1] } : rdata_outstanding_n;
  assign branch_discard_s = instr_rvalid_i ? { 1'h0, branch_discard_n[1] } : branch_discard_n;
  assign \$93  = ~ branch_discard_q[0];
  assign fifo_valid = instr_rvalid_i & \$93 ;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:151.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) stored_addr_q[1:0] <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17662 ) stored_addr_q[1:0] <= \$auto$rtlil.cc:3092:Mux$1592 [1:0];
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:151.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) stored_addr_q[31:2] <= 30'h00000000;
    else if (stored_addr_en) stored_addr_q[31:2] <= instr_addr[31:2];
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:168.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) fetch_addr_q <= 32'd0;
    else if (fetch_addr_en) fetch_addr_q <= fetch_addr_d;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17662  = & { stored_addr_en, \$28  };
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:229.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) branch_discard_q <= 2'h0;
    else branch_discard_q <= branch_discard_s;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:229.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) discard_req_q <= 1'h0;
    else discard_req_q <= discard_req_d;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:229.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_outstanding_q <= 2'h0;
    else rdata_outstanding_q <= rdata_outstanding_s;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:229.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) valid_req_q <= 1'h0;
    else valid_req_q <= valid_req_d;
  (* src = "rtl/cve2/cve2_prefetch_buffer.sv:92.5" *)
  \cve2_fetch_fifo$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.prefetch_buffer_i.fifo_i  fifo_i (
    .busy_o(fifo_busy),
    .clear_i(branch_i),
    .clk_i(clk_i),
    .in_addr_i(addr_i),
    .in_err_i(instr_err_i),
    .in_rdata_i(instr_rdata_i),
    .in_valid_i(fifo_valid),
    .out_addr_o(addr_o),
    .out_err_o(err_o),
    .out_err_plus2_o(err_plus2_o),
    .out_rdata_o(rdata_o),
    .out_ready_i(ready_i),
    .out_valid_o(valid_o),
    .rst_ni(rst_ni)
  );
  assign \$auto$rtlil.cc:3092:Mux$1589 [1:0] = fetch_addr_d[1:0];
  assign instr_addr_o = { instr_addr[31:2], 2'h0 };
endmodule

(* src = "rtl/cve2/cve2_register_file_ff.sv:13.8" *)
module \cve2_register_file_ff$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.register_file_i (clk_i, rst_ni, test_en_i, raddr_a_i, rdata_a_o, raddr_b_i, rdata_b_o, waddr_a_i, wdata_a_i, we_a_i);
  wire \$11 ;
  wire \$14 ;
  wire \$17 ;
  wire \$2 ;
  wire \$20 ;
  wire \$23 ;
  wire \$26 ;
  wire \$29 ;
  wire \$32 ;
  wire \$35 ;
  wire \$38 ;
  wire \$41 ;
  wire \$44 ;
  wire \$47 ;
  wire \$5 ;
  wire \$50 ;
  wire \$53 ;
  wire \$56 ;
  wire \$59 ;
  wire \$62 ;
  wire \$65 ;
  wire \$68 ;
  wire \$71 ;
  wire \$74 ;
  wire \$77 ;
  wire \$8 ;
  wire \$80 ;
  wire \$83 ;
  wire \$86 ;
  wire \$89 ;
  wire \$92 ;
  wire [511:0] \$auto$bmuxmap.cc:84:execute$18797 ;
  wire [255:0] \$auto$bmuxmap.cc:84:execute$18814 ;
  wire [127:0] \$auto$bmuxmap.cc:84:execute$18823 ;
  wire [63:0] \$auto$bmuxmap.cc:84:execute$18828 ;
  wire [31:0] \$auto$bmuxmap.cc:84:execute$18831 ;
  wire [511:0] \$auto$bmuxmap.cc:84:execute$18833 ;
  wire [255:0] \$auto$bmuxmap.cc:84:execute$18850 ;
  wire [127:0] \$auto$bmuxmap.cc:84:execute$18859 ;
  wire [63:0] \$auto$bmuxmap.cc:84:execute$18864 ;
  wire [31:0] \$auto$bmuxmap.cc:84:execute$18867 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:19.32" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:25.32" *)
  input [4:0] raddr_a_i;
  wire [4:0] raddr_a_i;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:29.32" *)
  input [4:0] raddr_b_i;
  wire [4:0] raddr_b_i;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:26.32" *)
  output [31:0] rdata_a_o;
  wire [31:0] rdata_a_o;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:30.32" *)
  output [31:0] rdata_b_o;
  wire [31:0] rdata_b_o;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:43.40" *)
  wire [1023:0] rf_reg;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:20.32" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:22.32" *)
  input test_en_i;
  wire test_en_i;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:34.32" *)
  input [4:0] waddr_a_i;
  wire [4:0] waddr_a_i;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:35.32" *)
  input [31:0] wdata_a_i;
  wire [31:0] wdata_a_i;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:45.40" *)
  wire [30:0] we_a_dec;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:36.32" *)
  input we_a_i;
  wire we_a_i;
  assign \$2  = waddr_a_i == 1'h1;
  assign \$11  = waddr_a_i == 3'h4;
  assign we_a_dec[3] = \$11  & we_a_i;
  assign \$14  = waddr_a_i == 3'h5;
  assign we_a_dec[4] = \$14  & we_a_i;
  assign \$17  = waddr_a_i == 3'h6;
  assign we_a_dec[5] = \$17  & we_a_i;
  assign \$20  = waddr_a_i == 3'h7;
  assign we_a_dec[6] = \$20  & we_a_i;
  assign \$23  = waddr_a_i == 4'h8;
  assign we_a_dec[7] = \$23  & we_a_i;
  assign \$26  = waddr_a_i == 4'h9;
  assign we_a_dec[8] = \$26  & we_a_i;
  assign \$29  = waddr_a_i == 4'ha;
  assign we_a_dec[0] = \$2  & we_a_i;
  assign we_a_dec[9] = \$29  & we_a_i;
  assign \$32  = waddr_a_i == 4'hb;
  assign we_a_dec[10] = \$32  & we_a_i;
  assign \$35  = waddr_a_i == 4'hc;
  assign we_a_dec[11] = \$35  & we_a_i;
  assign \$38  = waddr_a_i == 4'hd;
  assign we_a_dec[12] = \$38  & we_a_i;
  assign \$5  = waddr_a_i == 2'h2;
  assign \$41  = waddr_a_i == 4'he;
  assign we_a_dec[13] = \$41  & we_a_i;
  assign \$44  = waddr_a_i == 4'hf;
  assign we_a_dec[14] = \$44  & we_a_i;
  assign \$47  = waddr_a_i == 5'h10;
  assign we_a_dec[15] = \$47  & we_a_i;
  assign \$50  = waddr_a_i == 5'h11;
  assign we_a_dec[16] = \$50  & we_a_i;
  assign \$53  = waddr_a_i == 5'h12;
  assign we_a_dec[17] = \$53  & we_a_i;
  assign \$56  = waddr_a_i == 5'h13;
  assign we_a_dec[18] = \$56  & we_a_i;
  assign \$59  = waddr_a_i == 5'h14;
  assign we_a_dec[1] = \$5  & we_a_i;
  assign we_a_dec[19] = \$59  & we_a_i;
  assign \$62  = waddr_a_i == 5'h15;
  assign we_a_dec[20] = \$62  & we_a_i;
  assign \$65  = waddr_a_i == 5'h16;
  assign we_a_dec[21] = \$65  & we_a_i;
  assign \$68  = waddr_a_i == 5'h17;
  assign we_a_dec[22] = \$68  & we_a_i;
  assign \$8  = waddr_a_i == 2'h3;
  assign \$71  = waddr_a_i == 5'h18;
  assign we_a_dec[23] = \$71  & we_a_i;
  assign \$74  = waddr_a_i == 5'h19;
  assign we_a_dec[24] = \$74  & we_a_i;
  assign \$77  = waddr_a_i == 5'h1a;
  assign we_a_dec[25] = \$77  & we_a_i;
  assign \$80  = waddr_a_i == 5'h1b;
  assign we_a_dec[26] = \$80  & we_a_i;
  assign \$83  = waddr_a_i == 5'h1c;
  assign we_a_dec[27] = \$83  & we_a_i;
  assign \$86  = waddr_a_i == 5'h1d;
  assign we_a_dec[28] = \$86  & we_a_i;
  assign \$89  = waddr_a_i == 5'h1e;
  assign we_a_dec[2] = \$8  & we_a_i;
  assign we_a_dec[29] = \$89  & we_a_i;
  assign \$92  = waddr_a_i == 5'h1f;
  assign we_a_dec[30] = \$92  & we_a_i;
  assign \$auto$bmuxmap.cc:84:execute$18797 [31:0] = raddr_a_i[0] ? rf_reg[63:32] : 32'd0;
  assign \$auto$bmuxmap.cc:84:execute$18797 [63:32] = raddr_a_i[0] ? rf_reg[127:96] : rf_reg[95:64];
  assign \$auto$bmuxmap.cc:84:execute$18797 [95:64] = raddr_a_i[0] ? rf_reg[191:160] : rf_reg[159:128];
  assign \$auto$bmuxmap.cc:84:execute$18797 [127:96] = raddr_a_i[0] ? rf_reg[255:224] : rf_reg[223:192];
  assign \$auto$bmuxmap.cc:84:execute$18797 [159:128] = raddr_a_i[0] ? rf_reg[319:288] : rf_reg[287:256];
  assign \$auto$bmuxmap.cc:84:execute$18797 [191:160] = raddr_a_i[0] ? rf_reg[383:352] : rf_reg[351:320];
  assign \$auto$bmuxmap.cc:84:execute$18797 [223:192] = raddr_a_i[0] ? rf_reg[447:416] : rf_reg[415:384];
  assign \$auto$bmuxmap.cc:84:execute$18797 [255:224] = raddr_a_i[0] ? rf_reg[511:480] : rf_reg[479:448];
  assign \$auto$bmuxmap.cc:84:execute$18797 [287:256] = raddr_a_i[0] ? rf_reg[575:544] : rf_reg[543:512];
  assign \$auto$bmuxmap.cc:84:execute$18797 [319:288] = raddr_a_i[0] ? rf_reg[639:608] : rf_reg[607:576];
  assign \$auto$bmuxmap.cc:84:execute$18797 [351:320] = raddr_a_i[0] ? rf_reg[703:672] : rf_reg[671:640];
  assign \$auto$bmuxmap.cc:84:execute$18797 [383:352] = raddr_a_i[0] ? rf_reg[767:736] : rf_reg[735:704];
  assign \$auto$bmuxmap.cc:84:execute$18797 [415:384] = raddr_a_i[0] ? rf_reg[831:800] : rf_reg[799:768];
  assign \$auto$bmuxmap.cc:84:execute$18797 [447:416] = raddr_a_i[0] ? rf_reg[895:864] : rf_reg[863:832];
  assign \$auto$bmuxmap.cc:84:execute$18797 [479:448] = raddr_a_i[0] ? rf_reg[959:928] : rf_reg[927:896];
  assign \$auto$bmuxmap.cc:84:execute$18797 [511:480] = raddr_a_i[0] ? rf_reg[1023:992] : rf_reg[991:960];
  assign \$auto$bmuxmap.cc:84:execute$18814 [31:0] = raddr_a_i[1] ? \$auto$bmuxmap.cc:84:execute$18797 [63:32] : \$auto$bmuxmap.cc:84:execute$18797 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$18814 [63:32] = raddr_a_i[1] ? \$auto$bmuxmap.cc:84:execute$18797 [127:96] : \$auto$bmuxmap.cc:84:execute$18797 [95:64];
  assign \$auto$bmuxmap.cc:84:execute$18814 [95:64] = raddr_a_i[1] ? \$auto$bmuxmap.cc:84:execute$18797 [191:160] : \$auto$bmuxmap.cc:84:execute$18797 [159:128];
  assign \$auto$bmuxmap.cc:84:execute$18814 [127:96] = raddr_a_i[1] ? \$auto$bmuxmap.cc:84:execute$18797 [255:224] : \$auto$bmuxmap.cc:84:execute$18797 [223:192];
  assign \$auto$bmuxmap.cc:84:execute$18814 [159:128] = raddr_a_i[1] ? \$auto$bmuxmap.cc:84:execute$18797 [319:288] : \$auto$bmuxmap.cc:84:execute$18797 [287:256];
  assign \$auto$bmuxmap.cc:84:execute$18814 [191:160] = raddr_a_i[1] ? \$auto$bmuxmap.cc:84:execute$18797 [383:352] : \$auto$bmuxmap.cc:84:execute$18797 [351:320];
  assign \$auto$bmuxmap.cc:84:execute$18814 [223:192] = raddr_a_i[1] ? \$auto$bmuxmap.cc:84:execute$18797 [447:416] : \$auto$bmuxmap.cc:84:execute$18797 [415:384];
  assign \$auto$bmuxmap.cc:84:execute$18814 [255:224] = raddr_a_i[1] ? \$auto$bmuxmap.cc:84:execute$18797 [511:480] : \$auto$bmuxmap.cc:84:execute$18797 [479:448];
  assign \$auto$bmuxmap.cc:84:execute$18823 [31:0] = raddr_a_i[2] ? \$auto$bmuxmap.cc:84:execute$18814 [63:32] : \$auto$bmuxmap.cc:84:execute$18814 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$18823 [63:32] = raddr_a_i[2] ? \$auto$bmuxmap.cc:84:execute$18814 [127:96] : \$auto$bmuxmap.cc:84:execute$18814 [95:64];
  assign \$auto$bmuxmap.cc:84:execute$18823 [95:64] = raddr_a_i[2] ? \$auto$bmuxmap.cc:84:execute$18814 [191:160] : \$auto$bmuxmap.cc:84:execute$18814 [159:128];
  assign \$auto$bmuxmap.cc:84:execute$18823 [127:96] = raddr_a_i[2] ? \$auto$bmuxmap.cc:84:execute$18814 [255:224] : \$auto$bmuxmap.cc:84:execute$18814 [223:192];
  assign \$auto$bmuxmap.cc:84:execute$18828 [31:0] = raddr_a_i[3] ? \$auto$bmuxmap.cc:84:execute$18823 [63:32] : \$auto$bmuxmap.cc:84:execute$18823 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$18828 [63:32] = raddr_a_i[3] ? \$auto$bmuxmap.cc:84:execute$18823 [127:96] : \$auto$bmuxmap.cc:84:execute$18823 [95:64];
  assign \$auto$bmuxmap.cc:84:execute$18831  = raddr_a_i[4] ? \$auto$bmuxmap.cc:84:execute$18828 [63:32] : \$auto$bmuxmap.cc:84:execute$18828 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$18833 [31:0] = raddr_b_i[0] ? rf_reg[63:32] : 32'd0;
  assign \$auto$bmuxmap.cc:84:execute$18833 [63:32] = raddr_b_i[0] ? rf_reg[127:96] : rf_reg[95:64];
  assign \$auto$bmuxmap.cc:84:execute$18833 [95:64] = raddr_b_i[0] ? rf_reg[191:160] : rf_reg[159:128];
  assign \$auto$bmuxmap.cc:84:execute$18833 [127:96] = raddr_b_i[0] ? rf_reg[255:224] : rf_reg[223:192];
  assign \$auto$bmuxmap.cc:84:execute$18833 [159:128] = raddr_b_i[0] ? rf_reg[319:288] : rf_reg[287:256];
  assign \$auto$bmuxmap.cc:84:execute$18833 [191:160] = raddr_b_i[0] ? rf_reg[383:352] : rf_reg[351:320];
  assign \$auto$bmuxmap.cc:84:execute$18833 [223:192] = raddr_b_i[0] ? rf_reg[447:416] : rf_reg[415:384];
  assign \$auto$bmuxmap.cc:84:execute$18833 [255:224] = raddr_b_i[0] ? rf_reg[511:480] : rf_reg[479:448];
  assign \$auto$bmuxmap.cc:84:execute$18833 [287:256] = raddr_b_i[0] ? rf_reg[575:544] : rf_reg[543:512];
  assign \$auto$bmuxmap.cc:84:execute$18833 [319:288] = raddr_b_i[0] ? rf_reg[639:608] : rf_reg[607:576];
  assign \$auto$bmuxmap.cc:84:execute$18833 [351:320] = raddr_b_i[0] ? rf_reg[703:672] : rf_reg[671:640];
  assign \$auto$bmuxmap.cc:84:execute$18833 [383:352] = raddr_b_i[0] ? rf_reg[767:736] : rf_reg[735:704];
  assign \$auto$bmuxmap.cc:84:execute$18833 [415:384] = raddr_b_i[0] ? rf_reg[831:800] : rf_reg[799:768];
  assign \$auto$bmuxmap.cc:84:execute$18833 [447:416] = raddr_b_i[0] ? rf_reg[895:864] : rf_reg[863:832];
  assign \$auto$bmuxmap.cc:84:execute$18833 [479:448] = raddr_b_i[0] ? rf_reg[959:928] : rf_reg[927:896];
  assign \$auto$bmuxmap.cc:84:execute$18833 [511:480] = raddr_b_i[0] ? rf_reg[1023:992] : rf_reg[991:960];
  assign \$auto$bmuxmap.cc:84:execute$18850 [31:0] = raddr_b_i[1] ? \$auto$bmuxmap.cc:84:execute$18833 [63:32] : \$auto$bmuxmap.cc:84:execute$18833 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$18850 [63:32] = raddr_b_i[1] ? \$auto$bmuxmap.cc:84:execute$18833 [127:96] : \$auto$bmuxmap.cc:84:execute$18833 [95:64];
  assign \$auto$bmuxmap.cc:84:execute$18850 [95:64] = raddr_b_i[1] ? \$auto$bmuxmap.cc:84:execute$18833 [191:160] : \$auto$bmuxmap.cc:84:execute$18833 [159:128];
  assign \$auto$bmuxmap.cc:84:execute$18850 [127:96] = raddr_b_i[1] ? \$auto$bmuxmap.cc:84:execute$18833 [255:224] : \$auto$bmuxmap.cc:84:execute$18833 [223:192];
  assign \$auto$bmuxmap.cc:84:execute$18850 [159:128] = raddr_b_i[1] ? \$auto$bmuxmap.cc:84:execute$18833 [319:288] : \$auto$bmuxmap.cc:84:execute$18833 [287:256];
  assign \$auto$bmuxmap.cc:84:execute$18850 [191:160] = raddr_b_i[1] ? \$auto$bmuxmap.cc:84:execute$18833 [383:352] : \$auto$bmuxmap.cc:84:execute$18833 [351:320];
  assign \$auto$bmuxmap.cc:84:execute$18850 [223:192] = raddr_b_i[1] ? \$auto$bmuxmap.cc:84:execute$18833 [447:416] : \$auto$bmuxmap.cc:84:execute$18833 [415:384];
  assign \$auto$bmuxmap.cc:84:execute$18850 [255:224] = raddr_b_i[1] ? \$auto$bmuxmap.cc:84:execute$18833 [511:480] : \$auto$bmuxmap.cc:84:execute$18833 [479:448];
  assign \$auto$bmuxmap.cc:84:execute$18859 [31:0] = raddr_b_i[2] ? \$auto$bmuxmap.cc:84:execute$18850 [63:32] : \$auto$bmuxmap.cc:84:execute$18850 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$18859 [63:32] = raddr_b_i[2] ? \$auto$bmuxmap.cc:84:execute$18850 [127:96] : \$auto$bmuxmap.cc:84:execute$18850 [95:64];
  assign \$auto$bmuxmap.cc:84:execute$18859 [95:64] = raddr_b_i[2] ? \$auto$bmuxmap.cc:84:execute$18850 [191:160] : \$auto$bmuxmap.cc:84:execute$18850 [159:128];
  assign \$auto$bmuxmap.cc:84:execute$18859 [127:96] = raddr_b_i[2] ? \$auto$bmuxmap.cc:84:execute$18850 [255:224] : \$auto$bmuxmap.cc:84:execute$18850 [223:192];
  assign \$auto$bmuxmap.cc:84:execute$18864 [31:0] = raddr_b_i[3] ? \$auto$bmuxmap.cc:84:execute$18859 [63:32] : \$auto$bmuxmap.cc:84:execute$18859 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$18864 [63:32] = raddr_b_i[3] ? \$auto$bmuxmap.cc:84:execute$18859 [127:96] : \$auto$bmuxmap.cc:84:execute$18859 [95:64];
  assign \$auto$bmuxmap.cc:84:execute$18867  = raddr_b_i[4] ? \$auto$bmuxmap.cc:84:execute$18864 [63:32] : \$auto$bmuxmap.cc:84:execute$18864 [31:0];
  reg [31:0] \$auto$ff.cc:266:slice$17666 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17666  <= 32'd0;
    else if (we_a_dec[8]) \$auto$ff.cc:266:slice$17666  <= wdata_a_i;
  assign rf_reg[319:288] = \$auto$ff.cc:266:slice$17666 ;
  reg [31:0] \$auto$ff.cc:266:slice$17667 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17667  <= 32'd0;
    else if (we_a_dec[7]) \$auto$ff.cc:266:slice$17667  <= wdata_a_i;
  assign rf_reg[287:256] = \$auto$ff.cc:266:slice$17667 ;
  reg [31:0] \$auto$ff.cc:266:slice$17668 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17668  <= 32'd0;
    else if (we_a_dec[6]) \$auto$ff.cc:266:slice$17668  <= wdata_a_i;
  assign rf_reg[255:224] = \$auto$ff.cc:266:slice$17668 ;
  reg [31:0] \$auto$ff.cc:266:slice$17669 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17669  <= 32'd0;
    else if (we_a_dec[5]) \$auto$ff.cc:266:slice$17669  <= wdata_a_i;
  assign rf_reg[223:192] = \$auto$ff.cc:266:slice$17669 ;
  reg [31:0] \$auto$ff.cc:266:slice$17670 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17670  <= 32'd0;
    else if (we_a_dec[4]) \$auto$ff.cc:266:slice$17670  <= wdata_a_i;
  assign rf_reg[191:160] = \$auto$ff.cc:266:slice$17670 ;
  reg [31:0] \$auto$ff.cc:266:slice$17671 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17671  <= 32'd0;
    else if (we_a_dec[3]) \$auto$ff.cc:266:slice$17671  <= wdata_a_i;
  assign rf_reg[159:128] = \$auto$ff.cc:266:slice$17671 ;
  reg [31:0] \$auto$ff.cc:266:slice$17672 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17672  <= 32'd0;
    else if (we_a_dec[2]) \$auto$ff.cc:266:slice$17672  <= wdata_a_i;
  assign rf_reg[127:96] = \$auto$ff.cc:266:slice$17672 ;
  reg [31:0] \$auto$ff.cc:266:slice$17673 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17673  <= 32'd0;
    else if (we_a_dec[30]) \$auto$ff.cc:266:slice$17673  <= wdata_a_i;
  assign rf_reg[1023:992] = \$auto$ff.cc:266:slice$17673 ;
  reg [31:0] \$auto$ff.cc:266:slice$17674 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17674  <= 32'd0;
    else if (we_a_dec[29]) \$auto$ff.cc:266:slice$17674  <= wdata_a_i;
  assign rf_reg[991:960] = \$auto$ff.cc:266:slice$17674 ;
  reg [31:0] \$auto$ff.cc:266:slice$17675 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17675  <= 32'd0;
    else if (we_a_dec[1]) \$auto$ff.cc:266:slice$17675  <= wdata_a_i;
  assign rf_reg[95:64] = \$auto$ff.cc:266:slice$17675 ;
  reg [31:0] \$auto$ff.cc:266:slice$17676 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17676  <= 32'd0;
    else if (we_a_dec[28]) \$auto$ff.cc:266:slice$17676  <= wdata_a_i;
  assign rf_reg[959:928] = \$auto$ff.cc:266:slice$17676 ;
  reg [31:0] \$auto$ff.cc:266:slice$17677 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17677  <= 32'd0;
    else if (we_a_dec[27]) \$auto$ff.cc:266:slice$17677  <= wdata_a_i;
  assign rf_reg[927:896] = \$auto$ff.cc:266:slice$17677 ;
  reg [31:0] \$auto$ff.cc:266:slice$17678 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17678  <= 32'd0;
    else if (we_a_dec[26]) \$auto$ff.cc:266:slice$17678  <= wdata_a_i;
  assign rf_reg[895:864] = \$auto$ff.cc:266:slice$17678 ;
  reg [31:0] \$auto$ff.cc:266:slice$17679 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17679  <= 32'd0;
    else if (we_a_dec[25]) \$auto$ff.cc:266:slice$17679  <= wdata_a_i;
  assign rf_reg[863:832] = \$auto$ff.cc:266:slice$17679 ;
  reg [31:0] \$auto$ff.cc:266:slice$17680 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17680  <= 32'd0;
    else if (we_a_dec[24]) \$auto$ff.cc:266:slice$17680  <= wdata_a_i;
  assign rf_reg[831:800] = \$auto$ff.cc:266:slice$17680 ;
  reg [31:0] \$auto$ff.cc:266:slice$17681 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17681  <= 32'd0;
    else if (we_a_dec[23]) \$auto$ff.cc:266:slice$17681  <= wdata_a_i;
  assign rf_reg[799:768] = \$auto$ff.cc:266:slice$17681 ;
  reg [31:0] \$auto$ff.cc:266:slice$17682 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17682  <= 32'd0;
    else if (we_a_dec[22]) \$auto$ff.cc:266:slice$17682  <= wdata_a_i;
  assign rf_reg[767:736] = \$auto$ff.cc:266:slice$17682 ;
  reg [31:0] \$auto$ff.cc:266:slice$17683 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17683  <= 32'd0;
    else if (we_a_dec[21]) \$auto$ff.cc:266:slice$17683  <= wdata_a_i;
  assign rf_reg[735:704] = \$auto$ff.cc:266:slice$17683 ;
  reg [31:0] \$auto$ff.cc:266:slice$17684 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17684  <= 32'd0;
    else if (we_a_dec[20]) \$auto$ff.cc:266:slice$17684  <= wdata_a_i;
  assign rf_reg[703:672] = \$auto$ff.cc:266:slice$17684 ;
  reg [31:0] \$auto$ff.cc:266:slice$17685 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17685  <= 32'd0;
    else if (we_a_dec[19]) \$auto$ff.cc:266:slice$17685  <= wdata_a_i;
  assign rf_reg[671:640] = \$auto$ff.cc:266:slice$17685 ;
  reg [31:0] \$auto$ff.cc:266:slice$17686 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17686  <= 32'd0;
    else if (we_a_dec[0]) \$auto$ff.cc:266:slice$17686  <= wdata_a_i;
  assign rf_reg[63:32] = \$auto$ff.cc:266:slice$17686 ;
  reg [31:0] \$auto$ff.cc:266:slice$17687 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17687  <= 32'd0;
    else if (we_a_dec[18]) \$auto$ff.cc:266:slice$17687  <= wdata_a_i;
  assign rf_reg[639:608] = \$auto$ff.cc:266:slice$17687 ;
  reg [31:0] \$auto$ff.cc:266:slice$17688 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17688  <= 32'd0;
    else if (we_a_dec[17]) \$auto$ff.cc:266:slice$17688  <= wdata_a_i;
  assign rf_reg[607:576] = \$auto$ff.cc:266:slice$17688 ;
  reg [31:0] \$auto$ff.cc:266:slice$17689 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17689  <= 32'd0;
    else if (we_a_dec[16]) \$auto$ff.cc:266:slice$17689  <= wdata_a_i;
  assign rf_reg[575:544] = \$auto$ff.cc:266:slice$17689 ;
  reg [31:0] \$auto$ff.cc:266:slice$17690 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17690  <= 32'd0;
    else if (we_a_dec[15]) \$auto$ff.cc:266:slice$17690  <= wdata_a_i;
  assign rf_reg[543:512] = \$auto$ff.cc:266:slice$17690 ;
  reg [31:0] \$auto$ff.cc:266:slice$17691 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17691  <= 32'd0;
    else if (we_a_dec[14]) \$auto$ff.cc:266:slice$17691  <= wdata_a_i;
  assign rf_reg[511:480] = \$auto$ff.cc:266:slice$17691 ;
  reg [31:0] \$auto$ff.cc:266:slice$17692 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17692  <= 32'd0;
    else if (we_a_dec[13]) \$auto$ff.cc:266:slice$17692  <= wdata_a_i;
  assign rf_reg[479:448] = \$auto$ff.cc:266:slice$17692 ;
  reg [31:0] \$auto$ff.cc:266:slice$17693 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17693  <= 32'd0;
    else if (we_a_dec[12]) \$auto$ff.cc:266:slice$17693  <= wdata_a_i;
  assign rf_reg[447:416] = \$auto$ff.cc:266:slice$17693 ;
  reg [31:0] \$auto$ff.cc:266:slice$17694 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17694  <= 32'd0;
    else if (we_a_dec[11]) \$auto$ff.cc:266:slice$17694  <= wdata_a_i;
  assign rf_reg[415:384] = \$auto$ff.cc:266:slice$17694 ;
  reg [31:0] \$auto$ff.cc:266:slice$17695 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17695  <= 32'd0;
    else if (we_a_dec[10]) \$auto$ff.cc:266:slice$17695  <= wdata_a_i;
  assign rf_reg[383:352] = \$auto$ff.cc:266:slice$17695 ;
  reg [31:0] \$auto$ff.cc:266:slice$17696 ;
  (* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17696  <= 32'd0;
    else if (we_a_dec[9]) \$auto$ff.cc:266:slice$17696  <= wdata_a_i;
  assign rf_reg[351:320] = \$auto$ff.cc:266:slice$17696 ;
  assign rf_reg[31:0] = 32'd0;
  assign rdata_a_o = \$auto$bmuxmap.cc:84:execute$18831 ;
  assign rdata_b_o = \$auto$bmuxmap.cc:84:execute$18867 ;
endmodule

(* src = "rtl/cve2/cve2_wb.sv:14.8" *)
module \cve2_wb$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.wb_i (clk_i, rst_ni, lsu_resp_valid_i, en_wb_i, instr_is_compressed_id_i, instr_perf_count_id_i, perf_instr_ret_wb_o, perf_instr_ret_compressed_wb_o, rf_waddr_id_i, rf_wdata_id_i, rf_we_id_i, rf_wdata_lsu_i, rf_we_lsu_i, rf_waddr_wb_o, rf_wdata_wb_o, rf_we_wb_o, lsu_resp_err_i);
  wire \$1 ;
  wire [31:0] \$11 ;
  wire [31:0] \$13 ;
  wire \$3 ;
  wire \$5 ;
  (* src = "rtl/cve2/cve2_wb.sv:16.36" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/cve2/cve2_wb.sv:18.36" *)
  input en_wb_i;
  wire en_wb_i;
  (* src = "rtl/cve2/cve2_wb.sv:20.36" *)
  input instr_is_compressed_id_i;
  wire instr_is_compressed_id_i;
  (* src = "rtl/cve2/cve2_wb.sv:21.36" *)
  input instr_perf_count_id_i;
  wire instr_perf_count_id_i;
  (* src = "rtl/cve2/cve2_wb.sv:38.36" *)
  input lsu_resp_err_i;
  wire lsu_resp_err_i;
  (* src = "rtl/cve2/cve2_wb.sv:37.36" *)
  input lsu_resp_valid_i;
  wire lsu_resp_valid_i;
  (* src = "rtl/cve2/cve2_wb.sv:24.36" *)
  output perf_instr_ret_compressed_wb_o;
  wire perf_instr_ret_compressed_wb_o;
  (* src = "rtl/cve2/cve2_wb.sv:23.36" *)
  output perf_instr_ret_wb_o;
  wire perf_instr_ret_wb_o;
  (* src = "rtl/cve2/cve2_wb.sv:26.36" *)
  input [4:0] rf_waddr_id_i;
  wire [4:0] rf_waddr_id_i;
  (* src = "rtl/cve2/cve2_wb.sv:33.36" *)
  output [4:0] rf_waddr_wb_o;
  wire [4:0] rf_waddr_wb_o;
  (* src = "rtl/cve2/cve2_wb.sv:27.36" *)
  input [31:0] rf_wdata_id_i;
  wire [31:0] rf_wdata_id_i;
  (* src = "rtl/cve2/cve2_wb.sv:30.36" *)
  input [31:0] rf_wdata_lsu_i;
  wire [31:0] rf_wdata_lsu_i;
  (* src = "rtl/cve2/cve2_wb.sv:34.36" *)
  output [31:0] rf_wdata_wb_o;
  wire [31:0] rf_wdata_wb_o;
  (* src = "rtl/cve2/cve2_wb.sv:28.36" *)
  input rf_we_id_i;
  wire rf_we_id_i;
  (* src = "rtl/cve2/cve2_wb.sv:31.36" *)
  input rf_we_lsu_i;
  wire rf_we_lsu_i;
  (* src = "rtl/cve2/cve2_wb.sv:35.36" *)
  output rf_we_wb_o;
  wire rf_we_wb_o;
  (* src = "rtl/cve2/cve2_wb.sv:17.36" *)
  input rst_ni;
  wire rst_ni;
  assign \$1  = instr_perf_count_id_i & en_wb_i;
  assign \$11  = { rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i } & rf_wdata_id_i;
  assign \$13  = { rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i } & rf_wdata_lsu_i;
  assign rf_wdata_wb_o = \$11  | \$13 ;
  assign rf_we_wb_o = | { rf_we_lsu_i, rf_we_id_i };
  assign \$3  = lsu_resp_valid_i & lsu_resp_err_i;
  assign \$5  = ~ \$3 ;
  assign perf_instr_ret_wb_o = \$1  & \$5 ;
  assign perf_instr_ret_compressed_wb_o = perf_instr_ret_wb_o & instr_is_compressed_id_i;
  assign rf_waddr_wb_o = rf_waddr_id_i;
endmodule

(* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:17.8" *)
module \debug_rom$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_mem.gen_rom_snd_scratch.i_debug_rom (clk_i, rst_ni, req_i, addr_i, rdata_o);
  wire \$6 ;
  wire [63:0] \$auto$rtlil.cc:3092:Mux$1684 ;
  wire [49:0] \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 ;
  wire [49:0] \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 ;
  wire [49:0] \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 ;
  wire [49:0] \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 ;
  wire [49:0] \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 ;
  wire [49:0] \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 ;
  wire [49:0] \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 ;
  wire [49:0] \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 ;
  (* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:21.24" *)
  input [63:0] addr_i;
  wire [63:0] addr_i;
  (* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:51.39" *)
  reg [4:0] addr_q;
  (* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:18.24" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:22.24" *)
  output [63:0] rdata_o;
  wire [63:0] rdata_o;
  (* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:20.24" *)
  input req_i;
  wire req_i;
  (* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:19.24" *)
  input rst_ni;
  wire rst_ni;
  assign \$6  = addr_q < 5'h14;
  (* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:55.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) addr_q <= 5'h00;
    else if (req_i) addr_q <= addr_i[7:3];
  assign { \$auto$rtlil.cc:3092:Mux$1684 [63:62], \$auto$rtlil.cc:3092:Mux$1684 [60:59], \$auto$rtlil.cc:3092:Mux$1684 [57], \$auto$rtlil.cc:3092:Mux$1684 [61], \$auto$rtlil.cc:3092:Mux$1684 [55:53], \$auto$rtlil.cc:3092:Mux$1684 [50], \$auto$rtlil.cc:3092:Mux$1684 [48], \$auto$rtlil.cc:3092:Mux$1684 [46:42], \$auto$rtlil.cc:3092:Mux$1684 [40], \$auto$rtlil.cc:3092:Mux$1684 [38:36], \$auto$rtlil.cc:3092:Mux$1684 [34], \$auto$rtlil.cc:3092:Mux$1684 [31:20], \$auto$rtlil.cc:3092:Mux$1684 [18], \$auto$rtlil.cc:3092:Mux$1684 [16], \$auto$rtlil.cc:3092:Mux$1684 [19], \$auto$rtlil.cc:3092:Mux$1684 [14:12], \$auto$rtlil.cc:3092:Mux$1684 [52], \$auto$rtlil.cc:3092:Mux$1684 [10], \$auto$rtlil.cc:3092:Mux$1684 [8], \$auto$rtlil.cc:3092:Mux$1684 [58], \$auto$rtlil.cc:3092:Mux$1684 [6:2] } = addr_q[4] ? { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [49], 2'h3, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [46], 2'h2, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [46], 3'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [37], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [37], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [33], 4'he, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [27:26], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [26], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [26], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [20], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [17], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [49], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [33], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [7], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [26], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [49] } : { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [49:45], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [43:26], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [26], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [24:15], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [13:11], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [9], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [7], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [5:1] };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [48:47], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [45], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [43:26], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [24:15], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [13:11], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [9], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [7], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [5:1] } = addr_q[3] ? { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [48:47], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [45], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [43:30], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [28:26], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [48], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [21:16], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [13:11], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [9], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [7], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [5], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [5], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [3], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [33] } : { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [48:46], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [43:42], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [40], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [38:36], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [34:33], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [30:29], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [37], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [24:18], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [22], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [34:33], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [42], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [37], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [33], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [9], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [42], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [5:2], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [2] };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [40], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [38], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [36], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [30:29], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [24:23], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [21:18], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [22], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [34], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [37], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [33], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [9], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [42], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [5:2] } = addr_q[2] ? { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [40], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [42], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [33], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [29], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [29], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [18], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [29], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [34], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [33], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [40], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [42], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [4], 2'h2 } : { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [48], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [48], 3'h4, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [24:23], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [21:20], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [24], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [48], 5'h00, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [5], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [5], 2'h1 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [45], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [43:34], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [32:30], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [28:26], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [21], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [19:16], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [13:11], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [9], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [7], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [5], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [3], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [33] } = addr_q[2] ? { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [40], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [40], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [35], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48:47], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [27], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [35], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [17], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [35], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [35], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [35], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [9], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [9], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [17], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [43] } : { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [45], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [41], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [38], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [38], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [36], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [45], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [34], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [32:31], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [41], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [28:27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [43], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [45], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [36], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [13:12], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [32], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [34], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [12], 1'h0 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [23], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [21:20], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [24], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [5] } = addr_q[1] ? { 2'h3, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [27] } : { 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [13], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [13], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [28], 2'h1 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [18], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [29], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [34], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [33], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [40], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [42], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [4] } = addr_q[1] ? { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [20], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [27], 4'h5 } : { 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [27], 3'h5, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [27] };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [38], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [31], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [41], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [45], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [36], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [32], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [34], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [12] } = addr_q[1] ? { 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [13], 4'h9, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [13], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [28], 1'h0 } : { 2'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [13], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [13], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [13], 3'h5 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [40], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [35], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [9], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [17], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [43] } = addr_q[1] ? { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [20], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [27], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [27], 2'h2 } : { 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [20], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [20], 2'h2, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [27] };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [37], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [17], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [33], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [7], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [26], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [49] } = addr_q[1] ? { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [13], 2'h2, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [13], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [13], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [28], 1'h0 } : { 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [13], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [28], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [13], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [13], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [28] };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [13], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [28] } = addr_q[0] ? 2'h1 : 2'h2;
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [27] } = addr_q[0] ? 2'h2 : 2'h1;
  assign { rdata_o[63:62], rdata_o[60:59], rdata_o[57], rdata_o[61], rdata_o[55:53], rdata_o[50], rdata_o[48], rdata_o[46:42], rdata_o[40], rdata_o[38:36], rdata_o[34], rdata_o[31:20], rdata_o[18], rdata_o[16], rdata_o[19], rdata_o[14:12], rdata_o[52], rdata_o[10], rdata_o[8], rdata_o[58], rdata_o[6:2], rdata_o[33] } = \$6  ? (* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:68.7-68.29|rtl/riscv-dbg/debug_rom/debug_rom.sv:67.5-69.8" *) { \$auto$rtlil.cc:3092:Mux$1684 [63:62], \$auto$rtlil.cc:3092:Mux$1684 [60:59], \$auto$rtlil.cc:3092:Mux$1684 [57], \$auto$rtlil.cc:3092:Mux$1684 [61], \$auto$rtlil.cc:3092:Mux$1684 [55:53], \$auto$rtlil.cc:3092:Mux$1684 [50], \$auto$rtlil.cc:3092:Mux$1684 [48], \$auto$rtlil.cc:3092:Mux$1684 [46:42], \$auto$rtlil.cc:3092:Mux$1684 [40], \$auto$rtlil.cc:3092:Mux$1684 [38:36], \$auto$rtlil.cc:3092:Mux$1684 [34], \$auto$rtlil.cc:3092:Mux$1684 [31:20], \$auto$rtlil.cc:3092:Mux$1684 [18], \$auto$rtlil.cc:3092:Mux$1684 [16], \$auto$rtlil.cc:3092:Mux$1684 [19], \$auto$rtlil.cc:3092:Mux$1684 [14:12], \$auto$rtlil.cc:3092:Mux$1684 [52], \$auto$rtlil.cc:3092:Mux$1684 [10], \$auto$rtlil.cc:3092:Mux$1684 [8], \$auto$rtlil.cc:3092:Mux$1684 [58], \$auto$rtlil.cc:3092:Mux$1684 [6:2], 1'h1 } : 49'h0000000000000;
  assign { \$auto$rtlil.cc:3092:Mux$1684 [56], \$auto$rtlil.cc:3092:Mux$1684 [51], \$auto$rtlil.cc:3092:Mux$1684 [49], \$auto$rtlil.cc:3092:Mux$1684 [47], \$auto$rtlil.cc:3092:Mux$1684 [41], \$auto$rtlil.cc:3092:Mux$1684 [39], \$auto$rtlil.cc:3092:Mux$1684 [35], \$auto$rtlil.cc:3092:Mux$1684 [33:32], \$auto$rtlil.cc:3092:Mux$1684 [17], \$auto$rtlil.cc:3092:Mux$1684 [15], \$auto$rtlil.cc:3092:Mux$1684 [11], \$auto$rtlil.cc:3092:Mux$1684 [9], \$auto$rtlil.cc:3092:Mux$1684 [7], \$auto$rtlil.cc:3092:Mux$1684 [1:0] } = { \$auto$rtlil.cc:3092:Mux$1684 [61], \$auto$rtlil.cc:3092:Mux$1684 [58], \$auto$rtlil.cc:3092:Mux$1684 [58], \$auto$rtlil.cc:3092:Mux$1684 [58], 2'h0, \$auto$rtlil.cc:3092:Mux$1684 [58], 2'h3, \$auto$rtlil.cc:3092:Mux$1684 [19], \$auto$rtlil.cc:3092:Mux$1684 [19], \$auto$rtlil.cc:3092:Mux$1684 [52], 1'h0, \$auto$rtlil.cc:3092:Mux$1684 [58], 2'h3 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [44], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [25], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [14], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [10], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [8], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [6], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [0] } = { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [26], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [49], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$a$18648 [49], 1'h1 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [48:47], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [45:38], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [36:34], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [32:28], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [25:21], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [19:18], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [16:8], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [6:0] } = { 2'h3, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [46], 2'h2, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [46], 5'h00, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [37], 4'he, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [26], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [26], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [20], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [49], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [33], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [27], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [26], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][0][0]$b$18649 [49], 1'h1 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [45:44], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [41], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [39], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [35], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [32:31], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [26:25], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [17:10], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [8:6], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [1:0] } = { 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [43], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [37], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [22], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [34:33], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [42], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [37], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [33], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [42], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$a$18651 [2], 1'h1 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [46], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [44], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [29], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [25:22], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [15:14], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [10], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [8], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [6], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [4], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [2:0] } = { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [26], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [48], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [20], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [49], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [5], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][1][0]$b$18652 [33], 1'h1 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [47:25], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [22], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [19:6], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [4:0] } = { 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [48], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [48], 3'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [48], 3'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [48], 6'h20, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [24], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [48], 11'h000, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$a$18657 [5], 4'h7 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [46:44], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [41], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [39:35], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [32:30], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [26:21], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [19], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [17:5], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [3:0] } = { 5'h00, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [48:47], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [42], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [33], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [29], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [29], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [27], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [29], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [34:33], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [42], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [33], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [40], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [42], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [27], 4'h9 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [48:46], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [44], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [42], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [40:39], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [37], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [35], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [33], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [30:29], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [26:14], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [11:0] } = { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [49], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [38], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [45], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [41], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [49], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [43], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [43], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [45], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [36], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [32], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [34], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [28], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$a$18660 [12], 3'h1 };
  assign { \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [49], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [46:44], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [42:41], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [39:36], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [34:18], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [16:10], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [8:0] } = { 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [40], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [47], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [43], 1'h1, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [43], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48:47], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][0]$b$18658 [27], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [35], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [35], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [35], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [35], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [48], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [35], 2'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [9], 1'h0, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [17], \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [17], 2'h2, \$memory$auto$memory_bmux2rom.cc:63:execute$18545$rdmux[0][2][1]$b$18661 [43], 1'h1 };
  assign { rdata_o[56], rdata_o[51], rdata_o[49], rdata_o[47], rdata_o[41], rdata_o[39], rdata_o[35], rdata_o[32], rdata_o[17], rdata_o[15], rdata_o[11], rdata_o[9], rdata_o[7], rdata_o[1:0] } = { rdata_o[61], rdata_o[58], rdata_o[58], rdata_o[58], 2'h0, rdata_o[58], rdata_o[33], rdata_o[19], rdata_o[19], rdata_o[52], 1'h0, rdata_o[58], rdata_o[33], rdata_o[33] };
endmodule

(* src = "rtl/common_cells/delta_counter.sv:13.8" *)
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17699 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17230 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$17229 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$17232 ;
  (* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" *)
  wire [1:0] \$counter_d$7 ;
  (* src = "rtl/common_cells/delta_counter.sv:19.30" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/delta_counter.sv:17.30" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/delta_counter.sv:28.32" *)
  wire [1:0] counter_d;
  (* src = "rtl/common_cells/delta_counter.sv:28.21" *)
  reg [1:0] counter_q;
  (* src = "rtl/common_cells/delta_counter.sv:24.30" *)
  input d_i;
  wire d_i;
  (* src = "rtl/common_cells/delta_counter.sv:23.30" *)
  input delta_i;
  wire delta_i;
  (* src = "rtl/common_cells/delta_counter.sv:22.30" *)
  input down_i;
  wire down_i;
  (* src = "rtl/common_cells/delta_counter.sv:20.30" *)
  input en_i;
  wire en_i;
  (* src = "rtl/common_cells/delta_counter.sv:21.30" *)
  input load_i;
  wire load_i;
  (* src = "rtl/common_cells/delta_counter.sv:26.30" *)
  output overflow_o;
  wire overflow_o;
  (* src = "rtl/common_cells/delta_counter.sv:25.30" *)
  output q_o;
  wire q_o;
  (* src = "rtl/common_cells/delta_counter.sv:18.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$opt_share.cc:222:merge_operators$17230  = counter_q - \$auto$rtlil.cc:3092:Mux$17232 ;
  (* src = "rtl/common_cells/delta_counter.sv:76.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17699 ) counter_q <= counter_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17699  = | { load_i, en_i, clear_i };
  assign \$auto$rtlil.cc:2959:Neg$17229  = - { 1'h0, delta_i };
  assign \$auto$rtlil.cc:3092:Mux$17232  = down_i ? { 1'h0, delta_i } : \$auto$rtlil.cc:2959:Neg$17229 ;
  assign \$counter_d$7  = load_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" *) { 1'h0, d_i } : \$auto$opt_share.cc:222:merge_operators$17230 ;
  assign counter_d = clear_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" *) 2'h0 : \$counter_d$7 ;
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

(* src = "rtl/common_cells/delta_counter.sv:13.8" *)
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17702 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17235 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$17234 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$17237 ;
  (* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" *)
  wire [1:0] \$counter_d$7 ;
  (* src = "rtl/common_cells/delta_counter.sv:19.30" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/delta_counter.sv:17.30" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/delta_counter.sv:28.32" *)
  wire [1:0] counter_d;
  (* src = "rtl/common_cells/delta_counter.sv:28.21" *)
  reg [1:0] counter_q;
  (* src = "rtl/common_cells/delta_counter.sv:24.30" *)
  input d_i;
  wire d_i;
  (* src = "rtl/common_cells/delta_counter.sv:23.30" *)
  input delta_i;
  wire delta_i;
  (* src = "rtl/common_cells/delta_counter.sv:22.30" *)
  input down_i;
  wire down_i;
  (* src = "rtl/common_cells/delta_counter.sv:20.30" *)
  input en_i;
  wire en_i;
  (* src = "rtl/common_cells/delta_counter.sv:21.30" *)
  input load_i;
  wire load_i;
  (* src = "rtl/common_cells/delta_counter.sv:26.30" *)
  output overflow_o;
  wire overflow_o;
  (* src = "rtl/common_cells/delta_counter.sv:25.30" *)
  output q_o;
  wire q_o;
  (* src = "rtl/common_cells/delta_counter.sv:18.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$opt_share.cc:222:merge_operators$17235  = counter_q - \$auto$rtlil.cc:3092:Mux$17237 ;
  (* src = "rtl/common_cells/delta_counter.sv:76.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17702 ) counter_q <= counter_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17702  = | { load_i, en_i, clear_i };
  assign \$auto$rtlil.cc:2959:Neg$17234  = - { 1'h0, delta_i };
  assign \$auto$rtlil.cc:3092:Mux$17237  = down_i ? { 1'h0, delta_i } : \$auto$rtlil.cc:2959:Neg$17234 ;
  assign \$counter_d$7  = load_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" *) { 1'h0, d_i } : \$auto$opt_share.cc:222:merge_operators$17235 ;
  assign counter_d = clear_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" *) 2'h0 : \$counter_d$7 ;
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

(* src = "rtl/common_cells/delta_counter.sv:13.8" *)
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17705 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17240 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$17239 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$17242 ;
  (* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" *)
  wire [1:0] \$counter_d$7 ;
  (* src = "rtl/common_cells/delta_counter.sv:19.30" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/delta_counter.sv:17.30" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/delta_counter.sv:28.32" *)
  wire [1:0] counter_d;
  (* src = "rtl/common_cells/delta_counter.sv:28.21" *)
  reg [1:0] counter_q;
  (* src = "rtl/common_cells/delta_counter.sv:24.30" *)
  input d_i;
  wire d_i;
  (* src = "rtl/common_cells/delta_counter.sv:23.30" *)
  input delta_i;
  wire delta_i;
  (* src = "rtl/common_cells/delta_counter.sv:22.30" *)
  input down_i;
  wire down_i;
  (* src = "rtl/common_cells/delta_counter.sv:20.30" *)
  input en_i;
  wire en_i;
  (* src = "rtl/common_cells/delta_counter.sv:21.30" *)
  input load_i;
  wire load_i;
  (* src = "rtl/common_cells/delta_counter.sv:26.30" *)
  output overflow_o;
  wire overflow_o;
  (* src = "rtl/common_cells/delta_counter.sv:25.30" *)
  output q_o;
  wire q_o;
  (* src = "rtl/common_cells/delta_counter.sv:18.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$opt_share.cc:222:merge_operators$17240  = counter_q - \$auto$rtlil.cc:3092:Mux$17242 ;
  (* src = "rtl/common_cells/delta_counter.sv:76.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17705 ) counter_q <= counter_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17705  = | { load_i, en_i, clear_i };
  assign \$auto$rtlil.cc:2959:Neg$17239  = - { 1'h0, delta_i };
  assign \$auto$rtlil.cc:3092:Mux$17242  = down_i ? { 1'h0, delta_i } : \$auto$rtlil.cc:2959:Neg$17239 ;
  assign \$counter_d$7  = load_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" *) { 1'h0, d_i } : \$auto$opt_share.cc:222:merge_operators$17240 ;
  assign counter_d = clear_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" *) 2'h0 : \$counter_d$7 ;
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

(* src = "rtl/common_cells/delta_counter.sv:13.8" *)
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17708 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17245 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$17244 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$17247 ;
  (* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" *)
  wire [1:0] \$counter_d$7 ;
  (* src = "rtl/common_cells/delta_counter.sv:19.30" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/delta_counter.sv:17.30" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/delta_counter.sv:28.32" *)
  wire [1:0] counter_d;
  (* src = "rtl/common_cells/delta_counter.sv:28.21" *)
  reg [1:0] counter_q;
  (* src = "rtl/common_cells/delta_counter.sv:24.30" *)
  input d_i;
  wire d_i;
  (* src = "rtl/common_cells/delta_counter.sv:23.30" *)
  input delta_i;
  wire delta_i;
  (* src = "rtl/common_cells/delta_counter.sv:22.30" *)
  input down_i;
  wire down_i;
  (* src = "rtl/common_cells/delta_counter.sv:20.30" *)
  input en_i;
  wire en_i;
  (* src = "rtl/common_cells/delta_counter.sv:21.30" *)
  input load_i;
  wire load_i;
  (* src = "rtl/common_cells/delta_counter.sv:26.30" *)
  output overflow_o;
  wire overflow_o;
  (* src = "rtl/common_cells/delta_counter.sv:25.30" *)
  output q_o;
  wire q_o;
  (* src = "rtl/common_cells/delta_counter.sv:18.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$opt_share.cc:222:merge_operators$17245  = counter_q - \$auto$rtlil.cc:3092:Mux$17247 ;
  (* src = "rtl/common_cells/delta_counter.sv:76.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17708 ) counter_q <= counter_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17708  = | { load_i, en_i, clear_i };
  assign \$auto$rtlil.cc:2959:Neg$17244  = - { 1'h0, delta_i };
  assign \$auto$rtlil.cc:3092:Mux$17247  = down_i ? { 1'h0, delta_i } : \$auto$rtlil.cc:2959:Neg$17244 ;
  assign \$counter_d$7  = load_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" *) { 1'h0, d_i } : \$auto$opt_share.cc:222:merge_operators$17245 ;
  assign counter_d = clear_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" *) 2'h0 : \$counter_d$7 ;
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

(* src = "rtl/common_cells/delta_counter.sv:13.8" *)
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_obi_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17711 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17250 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$17249 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$17252 ;
  (* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" *)
  wire [1:0] \$counter_d$7 ;
  (* src = "rtl/common_cells/delta_counter.sv:19.30" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/delta_counter.sv:17.30" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/delta_counter.sv:28.32" *)
  wire [1:0] counter_d;
  (* src = "rtl/common_cells/delta_counter.sv:28.21" *)
  reg [1:0] counter_q;
  (* src = "rtl/common_cells/delta_counter.sv:24.30" *)
  input d_i;
  wire d_i;
  (* src = "rtl/common_cells/delta_counter.sv:23.30" *)
  input delta_i;
  wire delta_i;
  (* src = "rtl/common_cells/delta_counter.sv:22.30" *)
  input down_i;
  wire down_i;
  (* src = "rtl/common_cells/delta_counter.sv:20.30" *)
  input en_i;
  wire en_i;
  (* src = "rtl/common_cells/delta_counter.sv:21.30" *)
  input load_i;
  wire load_i;
  (* src = "rtl/common_cells/delta_counter.sv:26.30" *)
  output overflow_o;
  wire overflow_o;
  (* src = "rtl/common_cells/delta_counter.sv:25.30" *)
  output q_o;
  wire q_o;
  (* src = "rtl/common_cells/delta_counter.sv:18.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$opt_share.cc:222:merge_operators$17250  = counter_q - \$auto$rtlil.cc:3092:Mux$17252 ;
  (* src = "rtl/common_cells/delta_counter.sv:76.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17711 ) counter_q <= counter_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17711  = | { load_i, en_i, clear_i };
  assign \$auto$rtlil.cc:2959:Neg$17249  = - { 1'h0, delta_i };
  assign \$auto$rtlil.cc:3092:Mux$17252  = down_i ? { 1'h0, delta_i } : \$auto$rtlil.cc:2959:Neg$17249 ;
  assign \$counter_d$7  = load_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" *) { 1'h0, d_i } : \$auto$opt_share.cc:222:merge_operators$17250 ;
  assign counter_d = clear_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" *) 2'h0 : \$counter_d$7 ;
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

(* src = "rtl/common_cells/delta_counter.sv:13.8" *)
module \delta_counter$croc_chip.i_croc_soc.i_user.i_obi_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17714 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17255 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$17254 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$17257 ;
  (* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" *)
  wire [1:0] \$counter_d$7 ;
  (* src = "rtl/common_cells/delta_counter.sv:19.30" *)
  input clear_i;
  wire clear_i;
  (* src = "rtl/common_cells/delta_counter.sv:17.30" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/delta_counter.sv:28.32" *)
  wire [1:0] counter_d;
  (* src = "rtl/common_cells/delta_counter.sv:28.21" *)
  reg [1:0] counter_q;
  (* src = "rtl/common_cells/delta_counter.sv:24.30" *)
  input d_i;
  wire d_i;
  (* src = "rtl/common_cells/delta_counter.sv:23.30" *)
  input delta_i;
  wire delta_i;
  (* src = "rtl/common_cells/delta_counter.sv:22.30" *)
  input down_i;
  wire down_i;
  (* src = "rtl/common_cells/delta_counter.sv:20.30" *)
  input en_i;
  wire en_i;
  (* src = "rtl/common_cells/delta_counter.sv:21.30" *)
  input load_i;
  wire load_i;
  (* src = "rtl/common_cells/delta_counter.sv:26.30" *)
  output overflow_o;
  wire overflow_o;
  (* src = "rtl/common_cells/delta_counter.sv:25.30" *)
  output q_o;
  wire q_o;
  (* src = "rtl/common_cells/delta_counter.sv:18.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$opt_share.cc:222:merge_operators$17255  = counter_q - \$auto$rtlil.cc:3092:Mux$17257 ;
  (* src = "rtl/common_cells/delta_counter.sv:76.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17714 ) counter_q <= counter_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17714  = | { load_i, en_i, clear_i };
  assign \$auto$rtlil.cc:2959:Neg$17254  = - { 1'h0, delta_i };
  assign \$auto$rtlil.cc:3092:Mux$17257  = down_i ? { 1'h0, delta_i } : \$auto$rtlil.cc:2959:Neg$17254 ;
  assign \$counter_d$7  = load_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" *) { 1'h0, d_i } : \$auto$opt_share.cc:222:merge_operators$17255 ;
  assign counter_d = clear_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" *) 2'h0 : \$counter_d$7 ;
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

(* src = "rtl/riscv-dbg/dm_csrs.sv:18.8" *)
module \dm_csrs$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_csrs (clk_i, rst_ni, testmode_i, unavailable_i, hartinfo_i, dmi_rst_ni, dmi_req_valid_i, dmi_req_ready_o, dmi_req_i, dmi_resp_valid_o, dmi_resp_ready_i, dmi_resp_o, ndmreset_o, dmactive_o, next_dm_addr_i, ndmreset_ack_i, data_i, data_o, halted_i, resumeack_i, hartsel_o
, haltreq_o, resumereq_o, clear_resumeack_o, cmd_valid_o, cmd_o, cmderror_valid_i, cmderror_i, cmdbusy_i, progbuf_o, data_valid_i, sbaddress_o, sbaddress_i, sbaddress_write_valid_o, sbreadonaddr_o, sbautoincrement_o, sbaccess_o, sbreadondata_o, sbdata_o, sbdata_read_valid_o, sbdata_write_valid_o, sbdata_i
, sbdata_valid_i, sbbusy_i, sberror_valid_i, sberror_i);
  wire \$102 ;
  wire \$104 ;
  wire \$106 ;
  wire \$119 ;
  wire \$160 ;
  wire \$162 ;
  wire \$184 ;
  wire \$186 ;
  wire [2:0] \$228 ;
  wire [2:0] \$230 ;
  wire \$280 ;
  wire \$282 ;
  wire \$284 ;
  wire \$357 ;
  wire \$362 ;
  wire \$386 ;
  wire \$64 ;
  wire \$81 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *)
  wire [31:0] \$abstractauto_q$398 ;
  wire [7:0] \$auto$bmuxmap.cc:84:execute$18869 ;
  wire [3:0] \$auto$bmuxmap.cc:84:execute$18878 ;
  wire [1:0] \$auto$bmuxmap.cc:84:execute$18883 ;
  wire \$auto$bmuxmap.cc:84:execute$18886 ;
  wire [127:0] \$auto$bmuxmap.cc:84:execute$18888 ;
  wire [63:0] \$auto$bmuxmap.cc:84:execute$18893 ;
  wire [31:0] \$auto$bmuxmap.cc:84:execute$18896 ;
  wire [7:0] \$auto$bmuxmap.cc:84:execute$18898 ;
  wire [3:0] \$auto$bmuxmap.cc:84:execute$18907 ;
  wire [1:0] \$auto$bmuxmap.cc:84:execute$18912 ;
  wire \$auto$bmuxmap.cc:84:execute$18915 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17717 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17719 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17721 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17726 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17730 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17735 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17737 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17739 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17762 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17764 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17766 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17768 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17793 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17795 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17865 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17877 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17879 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17881 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17897 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17899 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17915 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17917 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17723 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17732 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17741 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17770 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17797 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17867 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17883 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17901 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17919 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18531 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16888 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16892 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16894 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16896 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18535 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18541 ;
  wire \$auto$opt_share.cc:222:merge_operators$18441 ;
  wire \$auto$rtlil.cc:3010:Le$1086 ;
  wire \$auto$rtlil.cc:3010:Le$1105 ;
  wire \$auto$rtlil.cc:3011:Eq$1094 ;
  wire \$auto$rtlil.cc:3011:Eq$1095 ;
  wire \$auto$rtlil.cc:3011:Eq$1096 ;
  wire \$auto$rtlil.cc:3011:Eq$1100 ;
  wire \$auto$rtlil.cc:3011:Eq$1101 ;
  wire \$auto$rtlil.cc:3011:Eq$1102 ;
  wire \$auto$rtlil.cc:3011:Eq$1103 ;
  wire \$auto$rtlil.cc:3011:Eq$1113 ;
  wire \$auto$rtlil.cc:3011:Eq$1114 ;
  wire \$auto$rtlil.cc:3011:Eq$1115 ;
  wire \$auto$rtlil.cc:3011:Eq$1116 ;
  wire \$auto$rtlil.cc:3011:Eq$1117 ;
  wire \$auto$rtlil.cc:3011:Eq$1118 ;
  wire \$auto$rtlil.cc:3011:Eq$1119 ;
  wire \$auto$rtlil.cc:3011:Eq$1120 ;
  wire \$auto$rtlil.cc:3011:Eq$1121 ;
  wire \$auto$rtlil.cc:3015:Ge$1085 ;
  wire \$auto$rtlil.cc:3015:Ge$1104 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1087 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1106 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1090 ;
  wire \$auto$rtlil.cc:3092:Mux$1093 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1109 ;
  wire \$auto$rtlil.cc:3092:Mux$1112 ;
  wire [63:0] \$auto$rtlil.cc:3093:Bwmux$1131 ;
  wire \$auto$rtlil.cc:3094:Pmux$18443 ;
  wire [63:0] \$auto$rtlil.cc:3114:Demux$1129 ;
  wire [255:0] \$auto$rtlil.cc:3114:Demux$1156 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:391.11-393.14" *)
  wire [1:0] \$auto$wreduce.cc:514:run$16968 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *)
  wire [1:0] \$auto$wreduce.cc:514:run$16969 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *)
  wire [1:0] \$auto$wreduce.cc:514:run$16970 ;
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 21" *)
  wire [31:0] \$auto$wreduce.cc:514:run$16972 ;
  wire [31:0] \$auto$wreduce.cc:514:run$16973 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:300.11-309.14" *)
  wire \$cmd_valid_d$122 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:320.11-331.14" *)
  wire \$cmd_valid_d$149 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" *)
  wire \$cmd_valid_d$172 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" *)
  wire \$cmd_valid_d$177 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:375.13-385.16" *)
  wire \$cmd_valid_d$206 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:416.11-426.14" *)
  wire \$cmd_valid_d$244 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14" *)
  wire \$cmd_valid_d$275 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *)
  wire \$cmd_valid_d$322 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *)
  wire \$cmd_valid_q$397 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:306.13-308.16" *)
  wire [2:0] \$cmderr_d$120 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:300.11-309.14" *)
  wire [2:0] \$cmderr_d$121 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" *)
  wire [2:0] \$cmderr_d$171 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" *)
  wire [2:0] \$cmderr_d$176 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:382.15-384.18" *)
  wire [2:0] \$cmderr_d$204 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:375.13-385.16" *)
  wire [2:0] \$cmderr_d$205 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:405.11-412.14" *)
  wire [2:0] \$cmderr_d$234 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *)
  wire [2:0] \$cmderr_d$320 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *)
  wire [2:0] \$cmderr_d$336 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *)
  wire [2:0] \$cmderr_q$395 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *)
  wire [31:0] \$command_q$396 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *)
  wire [63:0] \$data_q$403 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *)
  wire [31:0] \$dmcontrol_d$319 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *)
  (* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29" *)
  wire [31:0] \$dmcontrol_d$335 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *)
  (* unused_bits = "0" *)
  wire [31:0] \$dmcontrol_q$394 ;
  wire [21:0] \$procmux$10004_Y ;
  wire \$procmux$10043_Y ;
  wire \$procmux$10552_Y ;
  wire \$procmux$10562_Y ;
  wire [1:0] \$procmux$10615_Y ;
  wire \$procmux$10673_Y ;
  wire [31:0] \$procmux$10852_Y ;
  wire \$procmux$10885_Y ;
  wire [1:0] \$procmux$10893_Y ;
  wire [31:0] \$procmux$10932_Y ;
  wire [31:0] \$procmux$10994_Y ;
  wire \$procmux$11132_Y ;
  wire [33:0] \$procmux$11176_Y ;
  wire \$procmux$11179_Y ;
  wire [255:0] \$procmux$11191_Y ;
  wire [63:0] \$procmux$11194_Y ;
  wire [63:0] \$procmux$11197_Y ;
  wire \$procmux$9819_Y ;
  wire [31:0] \$procmux$9886_Y ;
  wire [31:0] \$procmux$9908_Y ;
  wire [31:0] \$procmux$9918_Y ;
  wire \$procmux$9925_Y ;
  wire [21:0] \$procmux$9944_Y ;
  wire [31:0] \$procmux$9966_Y ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:171.39" *)
  wire [31:0] abstractauto_q;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:219.15" *)
  wire [3:0] autoexecdata_idx;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:50.45" *)
  output clear_resumeack_o;
  wire clear_resumeack_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:23.45" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:53.45" *)
  output [31:0] cmd_o;
  reg [31:0] cmd_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:170.23" *)
  wire cmd_valid_d;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:52.45" *)
  output cmd_valid_o;
  reg cmd_valid_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:56.45" *)
  input cmdbusy_i;
  wire cmdbusy_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:168.23" *)
  wire [2:0] cmderr_d;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:168.33" *)
  reg [2:0] cmderr_q;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:55.45" *)
  input [2:0] cmderror_i;
  wire [2:0] cmderror_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:54.45" *)
  input cmderror_valid_i;
  wire cmderror_valid_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:179.35" *)
  wire [63:0] data_d;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:61.45" *)
  input [63:0] data_i;
  wire [63:0] data_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:59.45" *)
  output [63:0] data_o;
  reg [63:0] data_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:62.45" *)
  input data_valid_i;
  wire data_valid_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:39.45" *)
  output dmactive_o;
  reg dmactive_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:166.23" *)
  (* unused_bits = "0" *)
  wire [31:0] dmcontrol_d;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:31.45" *)
  input [40:0] dmi_req_i;
  wire [40:0] dmi_req_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:30.45" *)
  output dmi_req_ready_o;
  wire dmi_req_ready_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:29.45" *)
  input dmi_req_valid_i;
  wire dmi_req_valid_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:35.45" *)
  output [33:0] dmi_resp_o;
  wire [33:0] dmi_resp_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:34.45" *)
  input dmi_resp_ready_i;
  wire dmi_resp_ready_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:33.45" *)
  output dmi_resp_valid_o;
  wire dmi_resp_valid_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:27.45" *)
  input dmi_rst_ni;
  wire dmi_rst_ni;
  wire [19:0] dmstatus;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:43.45" *)
  input halted_i;
  wire halted_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:48.45" *)
  output haltreq_o;
  reg haltreq_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:42.45" *)
  input [31:0] hartinfo_i;
  wire [31:0] hartinfo_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:47.45" *)
  output [19:0] hartsel_o;
  wire [19:0] hartsel_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:176.23" *)
  wire havereset_d;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:176.36" *)
  reg havereset_q;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:38.45" *)
  input ndmreset_ack_i;
  wire ndmreset_ack_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:37.45" *)
  output ndmreset_o;
  reg ndmreset_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:25.45" *)
  input [31:0] next_dm_addr_i;
  wire [31:0] next_dm_addr_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:178.37" *)
  wire [255:0] progbuf_d;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:58.45" *)
  output [255:0] progbuf_o;
  reg [255:0] progbuf_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:92.16" *)
  wire resp_queue_empty;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:91.16" *)
  wire resp_queue_full;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:183.18" *)
  wire [33:0] resp_queue_inp;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:94.16" *)
  wire resp_queue_pop;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:93.16" *)
  wire resp_queue_push;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:45.45" *)
  input resumeack_i;
  wire resumeack_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:49.45" *)
  output resumereq_o;
  reg resumereq_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:24.45" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:70.45" *)
  output [2:0] sbaccess_o;
  reg [2:0] sbaccess_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:173.23" *)
  wire [63:0] sbaddr_d;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:173.33" *)
  reg [63:0] sbaddr_q;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:65.45" *)
  input [31:0] sbaddress_i;
  wire [31:0] sbaddress_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:64.45" *)
  output [31:0] sbaddress_o;
  wire [31:0] sbaddress_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:66.45" *)
  output sbaddress_write_valid_o;
  wire sbaddress_write_valid_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:69.45" *)
  output sbautoincrement_o;
  reg sbautoincrement_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:80.45" *)
  input sbbusy_i;
  wire sbbusy_i;
  wire [28:0] sbcs_d;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:172.31" *)
  wire [31:0] sbcs_q;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:174.23" *)
  wire [63:0] sbdata_d;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:77.45" *)
  input [31:0] sbdata_i;
  wire [31:0] sbdata_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:73.45" *)
  output [31:0] sbdata_o;
  reg [31:0] sbdata_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:174.33" *)
  wire [63:0] sbdata_q;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:74.45" *)
  output sbdata_read_valid_o;
  wire sbdata_read_valid_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:78.45" *)
  input sbdata_valid_i;
  wire sbdata_valid_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:75.45" *)
  output sbdata_write_valid_o;
  wire sbdata_write_valid_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:82.45" *)
  input [2:0] sberror_i;
  wire [2:0] sberror_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:81.45" *)
  input sberror_valid_i;
  wire sberror_valid_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:68.45" *)
  output sbreadonaddr_o;
  reg sbreadonaddr_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:72.45" *)
  output sbreadondata_o;
  reg sbreadondata_o;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:26.45" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:44.45" *)
  input unavailable_i;
  wire unavailable_i;
  assign \$102  = dmi_req_ready_o && dmi_req_valid_i;
  assign \$104  = dmi_req_i[33:32] == 1'h1;
  assign \$106  = \$102  && \$104 ;
  assign \$auto$rtlil.cc:3010:Le$1086  = dmi_req_i[40:34] <= 3'h5;
  assign \$auto$rtlil.cc:3024:LogicAnd$1087  = \$auto$rtlil.cc:3015:Ge$1085  && \$auto$rtlil.cc:3010:Le$1086 ;
  assign \$auto$rtlil.cc:3092:Mux$1090  = dmi_req_i[34] ? data_o[63:32] : data_o[31:0];
  assign \$119  = ! cmderr_q;
  assign \$auto$rtlil.cc:3011:Eq$1094  = dmi_req_i[40:34] == 5'h10;
  assign \$auto$rtlil.cc:3011:Eq$1095  = dmi_req_i[40:34] == 5'h11;
  assign \$auto$rtlil.cc:3011:Eq$1096  = dmi_req_i[40:34] == 5'h12;
  assign \$auto$rtlil.cc:3011:Eq$1100  = dmi_req_i[40:34] == 5'h16;
  assign \$auto$rtlil.cc:3011:Eq$1101  = dmi_req_i[40:34] == 5'h18;
  assign \$auto$rtlil.cc:3011:Eq$1102  = dmi_req_i[40:34] == 5'h17;
  assign \$auto$rtlil.cc:3011:Eq$1103  = dmi_req_i[40:34] == 5'h1d;
  assign \$auto$rtlil.cc:3010:Le$1105  = dmi_req_i[40:34] <= 6'h27;
  assign \$auto$rtlil.cc:3024:LogicAnd$1106  = \$auto$rtlil.cc:3015:Ge$1104  && \$auto$rtlil.cc:3010:Le$1105 ;
  assign \$auto$rtlil.cc:3011:Eq$1113  = dmi_req_i[40:34] == 7'h40;
  assign \$auto$rtlil.cc:3011:Eq$1114  = dmi_req_i[40:34] == 5'h13;
  assign \$auto$rtlil.cc:3011:Eq$1115  = dmi_req_i[40:34] == 6'h34;
  assign \$auto$rtlil.cc:3011:Eq$1116  = dmi_req_i[40:34] == 6'h35;
  assign \$auto$rtlil.cc:3011:Eq$1117  = dmi_req_i[40:34] == 6'h38;
  assign \$auto$rtlil.cc:3011:Eq$1118  = dmi_req_i[40:34] == 6'h39;
  assign \$auto$rtlil.cc:3011:Eq$1119  = dmi_req_i[40:34] == 6'h3a;
  assign \$auto$rtlil.cc:3011:Eq$1120  = dmi_req_i[40:34] == 6'h3c;
  assign \$160  = sbbusy_i || sbcs_q[22];
  assign \$162  = ! sbcs_q[14:12];
  assign \$auto$rtlil.cc:3011:Eq$1121  = dmi_req_i[40:34] == 6'h3d;
  assign \$184  = dmi_req_i[33:32] == 2'h2;
  assign \$186  = \$102  && \$184 ;
  \$bwmux  #(
    .WIDTH(32'd64)
  ) \$198  (
    .A(data_o),
    .B({ dmi_req_i[31:0], dmi_req_i[31:0] }),
    .S({ \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31] }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$1131 )
  );
  assign \$228  = ~ dmi_req_i[10:8];
  assign \$230  = \$228  & cmderr_q;
  assign dmi_resp_valid_o = ~ resp_queue_empty;
  \$bwmux  #(
    .WIDTH(32'd256)
  ) \$267  (
    .A(progbuf_o),
    .B({ dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0] }),
    .S({ \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31] }),
    .Y(progbuf_d)
  );
  assign dmi_req_ready_o = ~ resp_queue_full;
  assign \$280  = ~ dmi_req_i[22];
  assign \$282  = sbcs_q[22] & \$280 ;
  assign \$284  = | dmi_req_i[14:12];
  assign resp_queue_push = dmi_req_valid_i & dmi_req_ready_o;
  assign autoexecdata_idx[3:2] = dmi_req_i[37:36] - 1'h1;
  assign \$357  = ! resumereq_o;
  assign clear_resumeack_o = \$357  && \$dmcontrol_d$335 [30];
  assign \$362  = resumereq_o && resumeack_i;
  assign resp_queue_pop = dmi_resp_ready_i & dmi_resp_valid_o;
  assign \$386  = ~ dmi_rst_ni;
  assign \$64  = ~ unavailable_i;
  assign dmstatus[9] = halted_i & \$64 ;
  assign \$81  = ~ halted_i;
  assign dmstatus[11] = \$81  & \$64 ;
  assign \$auto$bmuxmap.cc:84:execute$18869 [0] = dmi_req_i[34] ? abstractauto_q[1] : abstractauto_q[0];
  assign \$auto$bmuxmap.cc:84:execute$18869 [1] = dmi_req_i[34] ? 1'h0 : 1'h0;
  assign \$auto$bmuxmap.cc:84:execute$18869 [2] = dmi_req_i[34] ? 1'h0 : 1'h0;
  assign \$auto$bmuxmap.cc:84:execute$18869 [3] = dmi_req_i[34] ? 1'h0 : 1'h0;
  assign \$auto$bmuxmap.cc:84:execute$18869 [4] = dmi_req_i[34] ? 1'h0 : 1'h0;
  assign \$auto$bmuxmap.cc:84:execute$18869 [5] = dmi_req_i[34] ? 1'h0 : 1'h0;
  assign \$auto$bmuxmap.cc:84:execute$18869 [6] = dmi_req_i[34] ? 1'hx : 1'hx;
  assign \$auto$bmuxmap.cc:84:execute$18869 [7] = dmi_req_i[34] ? 1'hx : 1'hx;
  assign \$auto$bmuxmap.cc:84:execute$18878 [0] = dmi_req_i[35] ? \$auto$bmuxmap.cc:84:execute$18869 [1] : \$auto$bmuxmap.cc:84:execute$18869 [0];
  assign \$auto$bmuxmap.cc:84:execute$18878 [1] = dmi_req_i[35] ? \$auto$bmuxmap.cc:84:execute$18869 [3] : \$auto$bmuxmap.cc:84:execute$18869 [2];
  assign \$auto$bmuxmap.cc:84:execute$18878 [2] = dmi_req_i[35] ? \$auto$bmuxmap.cc:84:execute$18869 [5] : \$auto$bmuxmap.cc:84:execute$18869 [4];
  assign \$auto$bmuxmap.cc:84:execute$18878 [3] = dmi_req_i[35] ? \$auto$bmuxmap.cc:84:execute$18869 [7] : \$auto$bmuxmap.cc:84:execute$18869 [6];
  assign \$auto$bmuxmap.cc:84:execute$18883 [0] = autoexecdata_idx[2] ? \$auto$bmuxmap.cc:84:execute$18878 [1] : \$auto$bmuxmap.cc:84:execute$18878 [0];
  assign \$auto$bmuxmap.cc:84:execute$18883 [1] = autoexecdata_idx[2] ? \$auto$bmuxmap.cc:84:execute$18878 [3] : \$auto$bmuxmap.cc:84:execute$18878 [2];
  assign \$auto$bmuxmap.cc:84:execute$18886  = autoexecdata_idx[3] ? \$auto$bmuxmap.cc:84:execute$18883 [1] : \$auto$bmuxmap.cc:84:execute$18883 [0];
  assign \$auto$bmuxmap.cc:84:execute$18888 [31:0] = dmi_req_i[34] ? progbuf_o[63:32] : progbuf_o[31:0];
  assign \$auto$bmuxmap.cc:84:execute$18888 [63:32] = dmi_req_i[34] ? progbuf_o[127:96] : progbuf_o[95:64];
  assign \$auto$bmuxmap.cc:84:execute$18888 [95:64] = dmi_req_i[34] ? progbuf_o[191:160] : progbuf_o[159:128];
  assign \$auto$bmuxmap.cc:84:execute$18888 [127:96] = dmi_req_i[34] ? progbuf_o[255:224] : progbuf_o[223:192];
  assign \$auto$bmuxmap.cc:84:execute$18893 [31:0] = dmi_req_i[35] ? \$auto$bmuxmap.cc:84:execute$18888 [63:32] : \$auto$bmuxmap.cc:84:execute$18888 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$18893 [63:32] = dmi_req_i[35] ? \$auto$bmuxmap.cc:84:execute$18888 [127:96] : \$auto$bmuxmap.cc:84:execute$18888 [95:64];
  assign \$auto$bmuxmap.cc:84:execute$18896  = dmi_req_i[36] ? \$auto$bmuxmap.cc:84:execute$18893 [63:32] : \$auto$bmuxmap.cc:84:execute$18893 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$18898 [0] = dmi_req_i[34] ? abstractauto_q[17] : abstractauto_q[16];
  assign \$auto$bmuxmap.cc:84:execute$18898 [1] = dmi_req_i[34] ? abstractauto_q[19] : abstractauto_q[18];
  assign \$auto$bmuxmap.cc:84:execute$18898 [2] = dmi_req_i[34] ? abstractauto_q[21] : abstractauto_q[20];
  assign \$auto$bmuxmap.cc:84:execute$18898 [3] = dmi_req_i[34] ? abstractauto_q[23] : abstractauto_q[22];
  assign \$auto$bmuxmap.cc:84:execute$18898 [4] = dmi_req_i[34] ? 1'h0 : 1'h0;
  assign \$auto$bmuxmap.cc:84:execute$18898 [5] = dmi_req_i[34] ? 1'h0 : 1'h0;
  assign \$auto$bmuxmap.cc:84:execute$18898 [6] = dmi_req_i[34] ? 1'h0 : 1'h0;
  assign \$auto$bmuxmap.cc:84:execute$18898 [7] = dmi_req_i[34] ? 1'h0 : 1'h0;
  assign \$auto$bmuxmap.cc:84:execute$18907 [0] = dmi_req_i[35] ? \$auto$bmuxmap.cc:84:execute$18898 [1] : \$auto$bmuxmap.cc:84:execute$18898 [0];
  assign \$auto$bmuxmap.cc:84:execute$18907 [1] = dmi_req_i[35] ? \$auto$bmuxmap.cc:84:execute$18898 [3] : \$auto$bmuxmap.cc:84:execute$18898 [2];
  assign \$auto$bmuxmap.cc:84:execute$18907 [2] = dmi_req_i[35] ? \$auto$bmuxmap.cc:84:execute$18898 [5] : \$auto$bmuxmap.cc:84:execute$18898 [4];
  assign \$auto$bmuxmap.cc:84:execute$18907 [3] = dmi_req_i[35] ? \$auto$bmuxmap.cc:84:execute$18898 [7] : \$auto$bmuxmap.cc:84:execute$18898 [6];
  assign \$auto$bmuxmap.cc:84:execute$18912 [0] = dmi_req_i[36] ? \$auto$bmuxmap.cc:84:execute$18907 [1] : \$auto$bmuxmap.cc:84:execute$18907 [0];
  assign \$auto$bmuxmap.cc:84:execute$18912 [1] = dmi_req_i[36] ? \$auto$bmuxmap.cc:84:execute$18907 [3] : \$auto$bmuxmap.cc:84:execute$18907 [2];
  assign \$auto$bmuxmap.cc:84:execute$18915  = dmi_req_i[37] ? \$auto$bmuxmap.cc:84:execute$18912 [1] : \$auto$bmuxmap.cc:84:execute$18912 [0];
  assign \$auto$rtlil.cc:3114:Demux$1129 [31] = dmi_req_i[34] == 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1129 [63] = dmi_req_i[34] == 1'h1;
  assign \$auto$rtlil.cc:3114:Demux$1156 [31] = dmi_req_i[36:34] == 3'h0;
  assign \$auto$rtlil.cc:3114:Demux$1156 [63] = dmi_req_i[36:34] == 3'h1;
  assign \$auto$rtlil.cc:3114:Demux$1156 [95] = dmi_req_i[36:34] == 3'h2;
  assign \$auto$rtlil.cc:3114:Demux$1156 [127] = dmi_req_i[36:34] == 3'h3;
  assign \$auto$rtlil.cc:3114:Demux$1156 [159] = dmi_req_i[36:34] == 3'h4;
  assign \$auto$rtlil.cc:3114:Demux$1156 [191] = dmi_req_i[36:34] == 3'h5;
  assign \$auto$rtlil.cc:3114:Demux$1156 [223] = dmi_req_i[36:34] == 3'h6;
  assign \$auto$rtlil.cc:3114:Demux$1156 [255] = dmi_req_i[36:34] == 3'h7;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) sbdata_o <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17723 ) sbdata_o <= \$procmux$11194_Y [31:0];
  reg [31:0] \$auto$ff.cc:266:slice$17725 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17725  <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17732 ) \$auto$ff.cc:266:slice$17725  <= \$procmux$11194_Y [63:32];
  assign sbdata_q[63:32] = \$auto$ff.cc:266:slice$17725 ;
  reg [5:0] \$auto$ff.cc:266:slice$17734 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17734  <= 6'h00;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17741 ) \$auto$ff.cc:266:slice$17734  <= \$auto$wreduce.cc:514:run$16973 [28:23];
  assign sbcs_q[28:23] = \$auto$ff.cc:266:slice$17734 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) sbreadondata_o <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17741 ) sbreadondata_o <= \$auto$wreduce.cc:514:run$16973 [15];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) sbreadonaddr_o <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17741 ) sbreadonaddr_o <= \$auto$wreduce.cc:514:run$16973 [20];
  reg [2:0] \$auto$ff.cc:266:slice$17761 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17761  <= 3'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17770 ) \$auto$ff.cc:266:slice$17761  <= \$auto$wreduce.cc:514:run$16973 [14:12];
  assign sbcs_q[14:12] = \$auto$ff.cc:266:slice$17761 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) sbautoincrement_o <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17741 ) sbautoincrement_o <= \$auto$wreduce.cc:514:run$16973 [16];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) sbaccess_o <= 3'h2;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17741 ) sbaccess_o <= \$auto$wreduce.cc:514:run$16973 [19:17];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) progbuf_o[255:224] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17797 ) progbuf_o[255:224] <= \$procmux$11191_Y [255:224];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) progbuf_o[223:192] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17797 ) progbuf_o[223:192] <= \$procmux$11191_Y [223:192];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) progbuf_o[191:160] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17797 ) progbuf_o[191:160] <= \$procmux$11191_Y [191:160];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) progbuf_o[159:128] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17797 ) progbuf_o[159:128] <= \$procmux$11191_Y [159:128];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) progbuf_o[127:96] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17797 ) progbuf_o[127:96] <= \$procmux$11191_Y [127:96];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) progbuf_o[95:64] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17797 ) progbuf_o[95:64] <= \$procmux$11191_Y [95:64];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) progbuf_o[63:32] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17797 ) progbuf_o[63:32] <= \$procmux$11191_Y [63:32];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) progbuf_o[31:0] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17797 ) progbuf_o[31:0] <= \$procmux$11191_Y [31:0];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) ndmreset_o <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17867 ) ndmreset_o <= \$dmcontrol_q$394 [1];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) haltreq_o <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17867 ) haltreq_o <= \$dmcontrol_q$394 [31];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_o[63:32] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17883 ) data_o[63:32] <= \$data_q$403 [63:32];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_o[31:0] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17883 ) data_o[31:0] <= \$data_q$403 [31:0];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) cmd_o[23:0] <= 24'h000000;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17901 ) cmd_o[23:0] <= \$command_q$396 [23:0];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) cmd_o[31:24] <= 8'h00;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17901 ) cmd_o[31:24] <= \$command_q$396 [31:24];
  reg \$auto$ff.cc:266:slice$17930 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17930  <= 1'h0;
    else \$auto$ff.cc:266:slice$17930  <= \$auto$wreduce.cc:514:run$16973 [29];
  assign sbcs_q[29] = \$auto$ff.cc:266:slice$17930 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) dmactive_o <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18531 ) dmactive_o <= dmi_req_i[0];
  reg [7:0] \$auto$ff.cc:266:slice$18538 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$18538  <= 8'h00;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17919 ) \$auto$ff.cc:266:slice$18538  <= \$abstractauto_q$398 [23:16];
  assign abstractauto_q[23:16] = \$auto$ff.cc:266:slice$18538 ;
  reg [1:0] \$auto$ff.cc:266:slice$18539 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$18539  <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17919 ) \$auto$ff.cc:266:slice$18539  <= \$abstractauto_q$398 [1:0];
  assign abstractauto_q[1:0] = \$auto$ff.cc:266:slice$18539 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17717  = { \$auto$rtlil.cc:3011:Eq$1120 , dmactive_o, sbdata_valid_i, \$186 , \$160  } != 5'h1b;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17719  = { dmactive_o, sbdata_valid_i, \$186  } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17721  = { \$auto$rtlil.cc:3011:Eq$1120 , dmactive_o, sbdata_valid_i, \$186  } != 4'h5;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17726  = { \$auto$rtlil.cc:3011:Eq$1121 , dmactive_o, sbdata_valid_i, \$186 , \$160  } != 5'h1b;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17730  = { \$auto$rtlil.cc:3011:Eq$1121 , dmactive_o, sbdata_valid_i, \$186  } != 4'h5;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17735  = { dmactive_o, \$186  } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17737  = { \$auto$rtlil.cc:3011:Eq$1117 , dmactive_o, sbbusy_i, \$186  } != 4'hf;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17739  = { \$auto$rtlil.cc:3011:Eq$1117 , dmactive_o, \$186  } != 3'h3;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17762  = { dmactive_o, sberror_valid_i, \$186  } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17764  = { \$auto$rtlil.cc:3011:Eq$1117 , dmactive_o, sberror_valid_i, sbbusy_i, \$284 , \$186  } != 6'h31;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17766  = { \$auto$rtlil.cc:3011:Eq$1117 , dmactive_o, sberror_valid_i, sbbusy_i, \$186  } != 5'h1b;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17768  = { \$auto$rtlil.cc:3011:Eq$1117 , dmactive_o, sberror_valid_i, \$186  } != 4'h5;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17793  = { \$auto$rtlil.cc:3024:LogicAnd$1106 , dmactive_o, cmdbusy_i, \$186  } != 4'hf;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17795  = { \$auto$rtlil.cc:3024:LogicAnd$1106 , dmactive_o, \$186  } != 3'h3;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17865  = { \$auto$rtlil.cc:3011:Eq$1094 , dmactive_o, \$186  } != 3'h3;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17877  = { dmactive_o, data_valid_i, \$186  } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17879  = { \$auto$rtlil.cc:3024:LogicAnd$1087 , dmactive_o, data_valid_i, cmdbusy_i, \$186  } != 5'h1b;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17881  = { \$auto$rtlil.cc:3024:LogicAnd$1087 , dmactive_o, data_valid_i, \$186  } != 4'h5;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17897  = { \$auto$rtlil.cc:3011:Eq$1102 , dmactive_o, cmdbusy_i, \$186  } != 4'hf;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17899  = { \$auto$rtlil.cc:3011:Eq$1102 , dmactive_o, \$186  } != 3'h3;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17915  = { \$auto$rtlil.cc:3011:Eq$1101 , dmactive_o, cmdbusy_i, \$186  } != 4'hf;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17917  = { \$auto$rtlil.cc:3011:Eq$1101 , dmactive_o, \$186  } != 3'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17723  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17721 , \$auto$opt_dff.cc:194:make_patterns_logic$17719 , \$auto$opt_dff.cc:194:make_patterns_logic$17717  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17732  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17730 , \$auto$opt_dff.cc:194:make_patterns_logic$17726 , \$auto$opt_dff.cc:194:make_patterns_logic$17719  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17741  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17737 , \$auto$opt_dff.cc:194:make_patterns_logic$17735 , \$auto$opt_dff.cc:194:make_patterns_logic$17739  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17770  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17768 , \$auto$opt_dff.cc:194:make_patterns_logic$17766 , \$auto$opt_dff.cc:194:make_patterns_logic$17764 , \$auto$opt_dff.cc:194:make_patterns_logic$17762  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17797  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17735 , \$auto$opt_dff.cc:194:make_patterns_logic$17795 , \$auto$opt_dff.cc:194:make_patterns_logic$17793  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17867  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17865 , \$auto$opt_dff.cc:194:make_patterns_logic$17735  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17883  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17881 , \$auto$opt_dff.cc:194:make_patterns_logic$17879 , \$auto$opt_dff.cc:194:make_patterns_logic$17877  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17901  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17899 , \$auto$opt_dff.cc:194:make_patterns_logic$17897 , \$auto$opt_dff.cc:194:make_patterns_logic$17735  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17919  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17917 , \$auto$opt_dff.cc:194:make_patterns_logic$17915 , \$auto$opt_dff.cc:194:make_patterns_logic$17735  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18531  = & { \$auto$rtlil.cc:3011:Eq$1094 , \$186  };
  assign \$auto$rtlil.cc:3015:Ge$1085  = | dmi_req_i[40:36];
  assign \$auto$rtlil.cc:3015:Ge$1104  = | dmi_req_i[40:39];
  assign \$auto$opt_reduce.cc:137:opt_pmux$16892  = | { \$auto$rtlil.cc:3024:LogicAnd$1106 , \$auto$rtlil.cc:3011:Eq$1102 , \$auto$rtlil.cc:3011:Eq$1101 , \$auto$rtlil.cc:3024:LogicAnd$1087  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16894  = | { \$auto$rtlil.cc:3011:Eq$1121 , \$auto$rtlil.cc:3011:Eq$1120  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16896  = | { \$auto$rtlil.cc:3024:LogicAnd$1106 , \$auto$rtlil.cc:3024:LogicAnd$1087  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16888  = | { \$auto$rtlil.cc:3011:Eq$1121 , \$auto$rtlil.cc:3011:Eq$1120 , \$auto$rtlil.cc:3011:Eq$1119 , \$auto$rtlil.cc:3011:Eq$1118  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$18535  = | { \$auto$rtlil.cc:3011:Eq$1121 , \$auto$rtlil.cc:3011:Eq$1120 , \$auto$rtlil.cc:3011:Eq$1119 , \$auto$rtlil.cc:3011:Eq$1118 , \$auto$rtlil.cc:3011:Eq$1117 , \$auto$rtlil.cc:3024:LogicAnd$1106 , \$auto$rtlil.cc:3011:Eq$1102 , \$auto$rtlil.cc:3011:Eq$1101 , \$auto$rtlil.cc:3011:Eq$1100 , \$auto$rtlil.cc:3024:LogicAnd$1087  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$18541  = | { \$auto$rtlil.cc:3011:Eq$1116 , \$auto$rtlil.cc:3011:Eq$1115 , \$auto$rtlil.cc:3011:Eq$1114 , \$auto$rtlil.cc:3011:Eq$1113  };
  function [0:0] \$auto$opt_share.cc:246:merge_operators$18442 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$auto$opt_share.cc:246:merge_operators$18442  = b[0:0];
      2'b1?:
        \$auto$opt_share.cc:246:merge_operators$18442  = b[1:1];
      default:
        \$auto$opt_share.cc:246:merge_operators$18442  = a;
    endcase
  endfunction
  assign \$auto$rtlil.cc:3094:Pmux$18443  = \$auto$opt_share.cc:246:merge_operators$18442 (cmdbusy_i, { sbbusy_i, \$160  }, { \$auto$rtlil.cc:3011:Eq$1117 , \$auto$opt_reduce.cc:137:opt_pmux$16888  });
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) cmd_valid_o <= 1'h0;
    else cmd_valid_o <= \$cmd_valid_q$397 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) cmderr_q <= 3'h0;
    else cmderr_q <= \$cmderr_q$395 ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) resumereq_o <= 1'h0;
    else resumereq_o <= \$dmcontrol_q$394 [30];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) havereset_q <= 1'h1;
    else havereset_q <= havereset_d;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) sbaddr_q <= 64'h0000000000000000;
    else sbaddr_q <= \$procmux$11197_Y ;
  reg \$driver$sbcs_q.sbbusy ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$driver$sbcs_q.sbbusy  <= 1'h0;
    else \$driver$sbcs_q.sbbusy  <= \$auto$wreduce.cc:514:run$16973 [21];
  assign sbcs_q[21] = \$driver$sbcs_q.sbbusy ;
  reg \$driver$sbcs_q.sbbusyerror ;
  (* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$driver$sbcs_q.sbbusyerror  <= 1'h0;
    else \$driver$sbcs_q.sbbusyerror  <= \$auto$wreduce.cc:514:run$16973 [22];
  assign sbcs_q[22] = \$driver$sbcs_q.sbbusyerror ;
  assign { \$procmux$10004_Y [21:14], \$procmux$10004_Y [11:0] } = sbbusy_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:461.25-464.14|rtl/riscv-dbg/dm_csrs.sv:461.11-470.14" *) { sbcs_q[21], 8'bxxxxxxx0, sbcs_q[29], 7'h00, sbcs_q[29], sbcs_q[29], sbcs_q[29] } : { dmi_req_i[21:15], 1'h0, dmi_req_i[11:0] };
  assign \$procmux$10043_Y  = \$282  | (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:461.25-464.14|rtl/riscv-dbg/dm_csrs.sv:461.11-470.14" *) sbbusy_i;
  assign \$cmderr_d$204  = \$119  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:455.15-455.41|rtl/riscv-dbg/dm_csrs.sv:454.13-456.16" *) 3'h1 : \$cmderr_d$176 ;
  assign \$cmd_valid_d$275  = cmdbusy_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:444.27-452.14|rtl/riscv-dbg/dm_csrs.sv:444.11-457.14" *) \$cmd_valid_d$177  : \$auto$rtlil.cc:3092:Mux$1112 ;
  assign \$cmderr_d$205  = cmdbusy_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:444.27-452.14|rtl/riscv-dbg/dm_csrs.sv:444.11-457.14" *) \$cmderr_d$204  : \$cmderr_d$176 ;
  assign \$cmd_valid_d$244  = cmdbusy_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:416.27-421.14|rtl/riscv-dbg/dm_csrs.sv:416.11-426.14" *) \$cmd_valid_d$177  : 1'h1;
  assign \$cmderr_d$234  = cmdbusy_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:406.13-406.71|rtl/riscv-dbg/dm_csrs.sv:405.11-412.14" *) \$cmderr_d$204  : \$230 ;
  assign \$auto$wreduce.cc:514:run$16968 [0] = dmi_req_i[28] ? (* src = "rtl/riscv-dbg/dm_csrs.sv:392.13-392.55|rtl/riscv-dbg/dm_csrs.sv:391.11-393.14" *) 1'h0 : havereset_q;
  assign \$cmd_valid_d$206  = cmdbusy_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:375.29-380.16|rtl/riscv-dbg/dm_csrs.sv:375.13-385.16" *) \$cmd_valid_d$177  : \$auto$rtlil.cc:3092:Mux$1093 ;
  assign \$procmux$10552_Y  = \$auto$rtlil.cc:3011:Eq$1120  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:493.11-499.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *) \$procmux$10673_Y ;
  assign \$procmux$10562_Y  = \$auto$rtlil.cc:3011:Eq$1118  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:474.11-480.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *) \$procmux$10673_Y ;
  assign \$auto$wreduce.cc:514:run$16969 [0] = \$auto$rtlil.cc:3011:Eq$1094  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:388.24-394.12|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *) \$auto$wreduce.cc:514:run$16968 [0] : havereset_q;
  assign \$procmux$10615_Y [1] = \$auto$opt_reduce.cc:137:opt_pmux$18535  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:503.11-508.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *) \$auto$opt_share.cc:222:merge_operators$18441  : \$procmux$11176_Y [1];
  assign \$procmux$10673_Y  = \$160  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:493.47-496.14|rtl/riscv-dbg/dm_csrs.sv:493.11-499.14" *) 1'h0 : \$162 ;
  function [0:0] \$procmux$10723 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10723  = b[0:0];
      3'b?1?:
        \$procmux$10723  = b[1:1];
      3'b1??:
        \$procmux$10723  = b[2:2];
      default:
        \$procmux$10723  = a;
    endcase
  endfunction
  assign \$cmd_valid_d$322  = \$procmux$10723 (\$cmd_valid_d$177 , { \$cmd_valid_d$206 , \$cmd_valid_d$244 , \$cmd_valid_d$275  }, { \$auto$rtlil.cc:3024:LogicAnd$1087 , \$auto$rtlil.cc:3011:Eq$1102 , \$auto$rtlil.cc:3024:LogicAnd$1106  });
  function [2:0] \$procmux$10754 ;
    input [2:0] a;
    input [5:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$10754  = b[2:0];
      2'b1?:
        \$procmux$10754  = b[5:3];
      default:
        \$procmux$10754  = a;
    endcase
  endfunction
  assign \$cmderr_d$320  = \$procmux$10754 (\$cmderr_d$176 , { \$cmderr_d$234 , \$cmderr_d$205  }, { \$auto$rtlil.cc:3011:Eq$1100 , \$auto$opt_reduce.cc:137:opt_pmux$16892  });
  assign \$dmcontrol_d$319  = \$auto$rtlil.cc:3011:Eq$1094  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:388.24-394.12|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *) dmi_req_i[31:0] : { 1'hx, resumereq_o, 29'b0000000000000000000000000000x, dmactive_o };
  assign sbdata_write_valid_o = \$186  & (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *) \$procmux$10552_Y ;
  assign sbaddress_write_valid_o = \$186  & (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *) \$procmux$10562_Y ;
  assign \$auto$wreduce.cc:514:run$16970 [0] = \$186  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *) \$auto$wreduce.cc:514:run$16969 [0] : havereset_q;
  assign resp_queue_inp[1] = \$186  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *) \$procmux$10615_Y [1] : \$procmux$11176_Y [1];
  assign sbaddr_d = \$186  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *) { \$procmux$9908_Y , \$procmux$9918_Y  } : { 32'h00000000, sbaddress_i };
  assign { sbcs_d[28:22], \$auto$wreduce.cc:514:run$16972 [21], sbcs_d[20:15], \$auto$wreduce.cc:514:run$16972 [14], \$auto$wreduce.cc:514:run$16972 [11:0] } = \$186  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *) { dmi_req_i[28:23], \$procmux$9925_Y , \$procmux$9944_Y [21:14], \$procmux$9944_Y [11:0] } : { 6'hxx, \$procmux$11179_Y , sbcs_q[21], 8'bxxxxxxx0, sbcs_q[29], 7'h00, sbcs_q[29], sbcs_q[29], sbcs_q[29] };
  assign cmd_valid_d = \$186  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *) \$cmd_valid_d$322  : \$cmd_valid_d$177 ;
  assign \$cmderr_d$336  = \$186  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *) \$cmderr_d$320  : \$cmderr_d$176 ;
  assign { dmcontrol_d[31], \$dmcontrol_d$335 [30:2], dmcontrol_d[1:0] } = \$186  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" *) \$dmcontrol_d$319  : { 1'hx, resumereq_o, 29'b0000000000000000000000000000x, dmactive_o };
  function [31:0] \$procmux$10852 ;
    input [31:0] a;
    input [447:0] b;
    input [13:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dm_csrs.sv:358.11-363.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" *)
    (* parallel_case *)
    casez (s)
      14'b?????????????1:
        \$procmux$10852  = b[31:0];
      14'b????????????1?:
        \$procmux$10852  = b[63:32];
      14'b???????????1??:
        \$procmux$10852  = b[95:64];
      14'b??????????1???:
        \$procmux$10852  = b[127:96];
      14'b?????????1????:
        \$procmux$10852  = b[159:128];
      14'b????????1?????:
        \$procmux$10852  = b[191:160];
      14'b???????1??????:
        \$procmux$10852  = b[223:192];
      14'b??????1???????:
        \$procmux$10852  = b[255:224];
      14'b?????1????????:
        \$procmux$10852  = b[287:256];
      14'b????1?????????:
        \$procmux$10852  = b[319:288];
      14'b???1??????????:
        \$procmux$10852  = b[351:320];
      14'b??1???????????:
        \$procmux$10852  = b[383:352];
      14'b?1????????????:
        \$procmux$10852  = b[415:384];
      14'b1?????????????:
        \$procmux$10852  = b[447:416];
      default:
        \$procmux$10852  = a;
    endcase
  endfunction
  assign \$procmux$10852_Y  = \$procmux$10852 (32'd0, { \$auto$rtlil.cc:3092:Mux$1090 , haltreq_o, resumereq_o, 28'h0000000, ndmreset_o, dmactive_o, 12'h000, havereset_q, havereset_q, resumeack_i, resumeack_i, 2'h0, unavailable_i, unavailable_i, dmstatus[11], dmstatus[11], dmstatus[9], dmstatus[9], 8'h82, hartinfo_i, 19'h04000, cmdbusy_i, 1'h0, cmderr_q, 16'h0200, abstractauto_q[23:16], 14'h0000, abstractauto_q[1:0], next_dm_addr_i, \$auto$rtlil.cc:3092:Mux$1109 , 31'h00000000, halted_i, 2'h0, sbcs_q[29:21], sbreadonaddr_o, sbaccess_o, sbautoincrement_o, sbreadondata_o, sbcs_q[14:12], 1'h0, sbcs_q[29], 7'h00, sbcs_q[29], sbcs_q[29], sbcs_q[29], sbaddr_q[31:0], sbaddr_q[63:32], \$procmux$10994_Y , \$procmux$10932_Y  }, { \$auto$rtlil.cc:3024:LogicAnd$1087 , \$auto$rtlil.cc:3011:Eq$1094 , \$auto$rtlil.cc:3011:Eq$1095 , \$auto$rtlil.cc:3011:Eq$1096 , \$auto$rtlil.cc:3011:Eq$1100 , \$auto$rtlil.cc:3011:Eq$1101 , \$auto$rtlil.cc:3011:Eq$1103 , \$auto$rtlil.cc:3024:LogicAnd$1106 , \$auto$opt_reduce.cc:137:opt_pmux$18541 , \$auto$rtlil.cc:3011:Eq$1117 , \$auto$rtlil.cc:3011:Eq$1118 , \$auto$rtlil.cc:3011:Eq$1119 , \$auto$rtlil.cc:3011:Eq$1120 , \$auto$rtlil.cc:3011:Eq$1121  });
  assign \$procmux$10885_Y  = sbcs_q[22] | (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:358.47-361.14|rtl/riscv-dbg/dm_csrs.sv:358.11-363.14" *) \$160 ;
  function [0:0] \$procmux$10893 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dm_csrs.sv:358.11-363.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$10893  = b[0:0];
      2'b1?:
        \$procmux$10893  = b[1:1];
      default:
        \$procmux$10893  = a;
    endcase
  endfunction
  assign \$procmux$10893_Y [1] = \$procmux$10893 (1'h0, { cmdbusy_i, \$160  }, { \$auto$opt_reduce.cc:137:opt_pmux$16896 , \$auto$opt_reduce.cc:137:opt_pmux$16894  });
  assign \$procmux$10932_Y  = \$160  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:358.47-361.14|rtl/riscv-dbg/dm_csrs.sv:358.11-363.14" *) 32'd0 : sbdata_q[63:32];
  assign \$cmd_valid_d$149  = cmdbusy_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:323.13-323.87|rtl/riscv-dbg/dm_csrs.sv:320.11-331.14" *) 1'h0 : \$auto$rtlil.cc:3092:Mux$1112 ;
  assign \$cmderr_d$121  = cmdbusy_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:323.13-323.87|rtl/riscv-dbg/dm_csrs.sv:320.11-331.14" *) \$cmderr_d$120  : cmderr_q;
  assign \$procmux$10994_Y  = \$160  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:348.47-351.14|rtl/riscv-dbg/dm_csrs.sv:348.11-354.14" *) 32'd0 : sbdata_o;
  assign \$cmderr_d$120  = \$119  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:329.15-329.41|rtl/riscv-dbg/dm_csrs.sv:328.13-330.16" *) 3'h1 : cmderr_q;
  assign \$cmd_valid_d$122  = cmdbusy_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:302.13-302.73|rtl/riscv-dbg/dm_csrs.sv:300.11-309.14" *) 1'h0 : \$auto$rtlil.cc:3092:Mux$1093 ;
  assign \$procmux$11132_Y  = \$auto$opt_reduce.cc:137:opt_pmux$16894  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:358.11-363.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" *) \$procmux$10885_Y  : sbcs_q[22];
  function [0:0] \$procmux$11149 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dm_csrs.sv:318.38-332.12|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11149  = b[0:0];
      2'b1?:
        \$procmux$11149  = b[1:1];
      default:
        \$procmux$11149  = a;
    endcase
  endfunction
  assign \$cmd_valid_d$172  = \$procmux$11149 (1'h0, { \$cmd_valid_d$122 , \$cmd_valid_d$149  }, { \$auto$rtlil.cc:3024:LogicAnd$1087 , \$auto$rtlil.cc:3024:LogicAnd$1106  });
  assign \$cmderr_d$171  = \$auto$opt_reduce.cc:137:opt_pmux$16896  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:318.38-332.12|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" *) \$cmderr_d$121  : cmderr_q;
  assign sbdata_read_valid_o = \$106  & (* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" *) \$procmux$10552_Y ;
  assign { resp_queue_inp[33:2], \$procmux$11176_Y [1] } = \$106  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" *) { \$procmux$10852_Y , \$procmux$10893_Y [1] } : 33'h000000000;
  assign \$procmux$11179_Y  = \$106  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" *) \$procmux$11132_Y  : sbcs_q[22];
  assign \$cmd_valid_d$177  = \$106  & (* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" *) \$cmd_valid_d$172 ;
  assign \$cmderr_d$176  = \$106  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" *) \$cmderr_d$171  : cmderr_q;
  assign \$data_q$403  = dmactive_o ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *) data_d : 64'h0000000000000000;
  assign \$procmux$11191_Y  = dmactive_o ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *) progbuf_d : 256'h0000000000000000000000000000000000000000000000000000000000000000;
  assign \$procmux$11194_Y  = dmactive_o ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *) sbdata_d : 64'h0000000000000000;
  assign \$procmux$11197_Y  = dmactive_o ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *) sbaddr_d : 64'h0000000000000000;
  assign { \$auto$wreduce.cc:514:run$16973 [28:12], \$auto$wreduce.cc:514:run$16973 [29] } = dmactive_o ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *) { sbcs_d[28:22], sbbusy_i, sbcs_d[20:12], 1'h1 } : 18'h00080;
  assign { \$abstractauto_q$398 [23:16], \$abstractauto_q$398 [1:0] } = dmactive_o ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *) { dmi_req_i[23:16], dmi_req_i[1:0] } : 10'h000;
  assign \$cmd_valid_q$397  = dmactive_o & (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *) cmd_valid_d;
  assign \$command_q$396  = dmactive_o ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *) dmi_req_i[31:0] : 32'd0;
  assign \$cmderr_q$395  = dmactive_o ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *) cmderr_d : 3'h0;
  assign { \$dmcontrol_q$394 [31:30], \$dmcontrol_q$394 [1] } = dmactive_o ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" *) { dmcontrol_d[31:30], dmcontrol_d[1] } : 3'h0;
  assign dmcontrol_d[30] = \$362  ? (* src = "rtl/riscv-dbg/dm_csrs.sv:554.7-554.36|rtl/riscv-dbg/dm_csrs.sv:553.5-555.8" *) 1'h0 : \$dmcontrol_d$335 [30];
  assign sbdata_d = sbdata_valid_i ? (* src = "rtl/riscv-dbg/dm_csrs.sv:536.7-536.32|rtl/riscv-dbg/dm_csrs.sv:535.5-537.8" *) { 32'h00000000, sbdata_i } : { dmi_req_i[31:0], dmi_req_i[31:0] };
  assign sbcs_d[14:12] = sberror_valid_i ? (* src = "rtl/riscv-dbg/dm_csrs.sv:532.7-532.34|rtl/riscv-dbg/dm_csrs.sv:531.5-533.8" *) sberror_i : { \$auto$wreduce.cc:514:run$16972 [14], \$auto$wreduce.cc:514:run$16972 [14], \$auto$wreduce.cc:514:run$16972 [14] };
  assign havereset_d = \$auto$wreduce.cc:514:run$16970 [0] | (* src = "rtl/riscv-dbg/dm_csrs.sv:525.7-525.45|rtl/riscv-dbg/dm_csrs.sv:524.5-526.8" *) ndmreset_ack_i;
  assign data_d = data_valid_i ? (* src = "rtl/riscv-dbg/dm_csrs.sv:520.7-520.23|rtl/riscv-dbg/dm_csrs.sv:519.5-521.8" *) data_i : \$auto$rtlil.cc:3093:Bwmux$1131 ;
  assign cmderr_d = cmderror_valid_i ? (* src = "rtl/riscv-dbg/dm_csrs.sv:515.7-515.29|rtl/riscv-dbg/dm_csrs.sv:514.5-516.8" *) cmderror_i : \$cmderr_d$336 ;
  assign \$auto$opt_share.cc:222:merge_operators$18441  = \$procmux$11176_Y [1] | (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:503.47-506.14|rtl/riscv-dbg/dm_csrs.sv:503.11-508.14" *) \$auto$rtlil.cc:3094:Pmux$18443 ;
  assign \$procmux$9819_Y  = \$procmux$11179_Y  | (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:503.47-506.14|rtl/riscv-dbg/dm_csrs.sv:503.11-508.14" *) \$160 ;
  assign \$procmux$9886_Y  = \$160  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:484.47-487.14|rtl/riscv-dbg/dm_csrs.sv:484.11-489.14" *) 32'd0 : dmi_req_i[31:0];
  assign \$procmux$9908_Y  = \$auto$rtlil.cc:3011:Eq$1119  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:484.11-489.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *) \$procmux$9886_Y  : 32'd0;
  assign \$procmux$9918_Y  = \$auto$rtlil.cc:3011:Eq$1118  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:474.11-480.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *) \$procmux$9966_Y  : sbaddress_i;
  function [0:0] \$procmux$9925 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dm_csrs.sv:503.11-508.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$9925  = b[0:0];
      2'b1?:
        \$procmux$9925  = b[1:1];
      default:
        \$procmux$9925  = a;
    endcase
  endfunction
  assign \$procmux$9925_Y  = \$procmux$9925 (\$procmux$11179_Y , { \$procmux$10043_Y , \$procmux$9819_Y  }, { \$auto$rtlil.cc:3011:Eq$1117 , \$auto$opt_reduce.cc:137:opt_pmux$16888  });
  assign { \$procmux$9944_Y [21:14], \$procmux$9944_Y [11:0] } = \$auto$rtlil.cc:3011:Eq$1117  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:461.11-470.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" *) { \$procmux$10004_Y [21:14], \$procmux$10004_Y [11:0] } : { sbcs_q[21], 8'bxxxxxxx0, sbcs_q[29], 7'h00, sbcs_q[29], sbcs_q[29], sbcs_q[29] };
  assign \$procmux$9966_Y  = \$160  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_csrs.sv:474.47-477.14|rtl/riscv-dbg/dm_csrs.sv:474.11-480.14" *) sbaddress_i : dmi_req_i[31:0];
  (* src = "rtl/riscv-dbg/dm_csrs.sv:596.5" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_csrs.i_fifo  i_fifo (
    .clk_i(clk_i),
    .data_i({ resp_queue_inp[33:1], resp_queue_inp[1] }),
    .data_o(dmi_resp_o),
    .empty_o(resp_queue_empty),
    .flush_i(\$386 ),
    .full_o(resp_queue_full),
    .pop_i(resp_queue_pop),
    .push_i(resp_queue_push),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { \$auto$rtlil.cc:3114:Demux$1129 [62:32], \$auto$rtlil.cc:3114:Demux$1129 [30:0] } = { \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31] };
  assign { \$auto$rtlil.cc:3114:Demux$1156 [254:224], \$auto$rtlil.cc:3114:Demux$1156 [222:192], \$auto$rtlil.cc:3114:Demux$1156 [190:160], \$auto$rtlil.cc:3114:Demux$1156 [158:128], \$auto$rtlil.cc:3114:Demux$1156 [126:96], \$auto$rtlil.cc:3114:Demux$1156 [94:64], \$auto$rtlil.cc:3114:Demux$1156 [62:32], \$auto$rtlil.cc:3114:Demux$1156 [30:0] } = { \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31] };
  assign \$auto$wreduce.cc:514:run$16968 [1] = 1'hx;
  assign \$auto$wreduce.cc:514:run$16969 [1] = 1'hx;
  assign \$auto$wreduce.cc:514:run$16970 [1] = 1'hx;
  assign { \$auto$wreduce.cc:514:run$16972 [31:22], \$auto$wreduce.cc:514:run$16972 [20:15], \$auto$wreduce.cc:514:run$16972 [13:12] } = { 3'hx, sbcs_d[28:22], sbcs_d[20:15], \$auto$wreduce.cc:514:run$16972 [14], \$auto$wreduce.cc:514:run$16972 [14] };
  assign { \$auto$wreduce.cc:514:run$16973 [31:30], \$auto$wreduce.cc:514:run$16973 [11:0] } = { 3'h0, \$auto$wreduce.cc:514:run$16973 [29], 7'h00, \$auto$wreduce.cc:514:run$16973 [29], \$auto$wreduce.cc:514:run$16973 [29], \$auto$wreduce.cc:514:run$16973 [29] };
  assign { \$dmcontrol_d$335 [31], \$dmcontrol_d$335 [1:0] } = { dmcontrol_d[31], dmcontrol_d[1:0] };
  assign { \$dmcontrol_q$394 [29:2], \$dmcontrol_q$394 [0] } = { 28'h0000000, dmcontrol_d[0] };
  assign \$procmux$10004_Y [13:12] = { \$procmux$10004_Y [14], \$procmux$10004_Y [14] };
  assign \$procmux$10615_Y [0] = \$procmux$10615_Y [1];
  assign \$procmux$10893_Y [0] = \$procmux$10893_Y [1];
  assign { \$procmux$11176_Y [33:2], \$procmux$11176_Y [0] } = { resp_queue_inp[33:2], \$procmux$11176_Y [1] };
  assign \$procmux$9944_Y [13:12] = { \$procmux$9944_Y [14], \$procmux$9944_Y [14] };
  assign { abstractauto_q[31:24], abstractauto_q[15:2] } = 22'h000000;
  assign autoexecdata_idx[1:0] = dmi_req_i[35:34];
  assign dmcontrol_d[29:2] = 28'h0000000;
  assign { dmstatus[19:12], dmstatus[10], dmstatus[8:0] } = { havereset_q, havereset_q, resumeack_i, resumeack_i, 2'h0, unavailable_i, unavailable_i, dmstatus[11], dmstatus[9], 8'h82 };
  assign { \$abstractauto_q$398 [31:24], \$abstractauto_q$398 [15:2] } = 22'h000000;
  assign hartsel_o = 20'h00000;
  assign resp_queue_inp[0] = resp_queue_inp[1];
  assign sbaddress_o = sbaddr_q[31:0];
  assign { sbcs_d[21], sbcs_d[11:0] } = { sbbusy_i, 12'h407 };
  assign { sbcs_q[31:30], sbcs_q[20:15], sbcs_q[11:0] } = { 2'h0, sbreadonaddr_o, sbaccess_o, sbautoincrement_o, sbreadondata_o, 1'h0, sbcs_q[29], 7'h00, sbcs_q[29], sbcs_q[29], sbcs_q[29] };
  assign sbdata_q[31:0] = sbdata_o;
  assign \$auto$rtlil.cc:3092:Mux$1093  = \$auto$bmuxmap.cc:84:execute$18886 ;
  assign \$auto$rtlil.cc:3092:Mux$1109  = \$auto$bmuxmap.cc:84:execute$18896 ;
  assign \$auto$rtlil.cc:3092:Mux$1112  = \$auto$bmuxmap.cc:84:execute$18915 ;
endmodule

(* src = "rtl/riscv-dbg/dm_mem.sv:19.8" *)
module \dm_mem$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_mem (clk_i, rst_ni, debug_req_o, req_i, we_i, addr_i, wdata_i, be_i, rdata_o, data_i, data_o, ndmreset_i, hartsel_i, haltreq_i, resumereq_i, clear_resumeack_i, halted_o, resuming_o, progbuf_i, data_valid_o, cmd_valid_i
, cmd_i, cmderror_valid_o, cmderror_o, cmdbusy_o);
  wire [31:0] \$109 ;
  wire \$111 ;
  wire \$124 ;
  wire \$147 ;
  wire \$149 ;
  wire \$151 ;
  wire \$153 ;
  wire [2:0] \$187 ;
  wire [11:0] \$195 ;
  wire \$199 ;
  wire \$22 ;
  wire \$234 ;
  wire \$236 ;
  wire \$238 ;
  wire \$24 ;
  wire \$240 ;
  wire \$244 ;
  wire \$246 ;
  wire \$248 ;
  wire \$250 ;
  wire \$262 ;
  wire \$264 ;
  wire \$284 ;
  wire \$288 ;
  wire \$29 ;
  wire \$298 ;
  wire \$300 ;
  wire \$31 ;
  wire \$36 ;
  wire \$5 ;
  wire \$54 ;
  wire \$7 ;
  wire \$9 ;
  wire [126:0] \$abstract_cmd[255:128]$252 ;
  wire [126:0] \$abstract_cmd[255:128]$253 ;
  wire [126:0] \$abstract_cmd[255:128]$255 ;
  wire [126:0] \$abstract_cmd[255:128]$278 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:429.20-460.14" *)
  wire [127:0] \$abstract_cmd[255:128]$279 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:424.11-460.14" *)
  wire [127:0] \$abstract_cmd[255:128]$281 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:418.18-467.12" *)
  wire [127:0] \$abstract_cmd[255:128]$292 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:377.9-467.12" *)
  wire [127:0] \$abstract_cmd[255:128]$295 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:473.9-476.12" *)
  wire [31:0] \$abstract_cmd[319:288]$301 ;
  wire [30:0] \$abstract_cmd[31:0]$254 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:418.18-467.12" *)
  wire [31:0] \$abstract_cmd[31:0]$291 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:377.9-467.12" *)
  wire [31:0] \$abstract_cmd[31:0]$294 ;
  wire [127:0] \$auto$bmuxmap.cc:84:execute$18917 ;
  wire [63:0] \$auto$bmuxmap.cc:84:execute$18920 ;
  wire [195:0] \$auto$bmuxmap.cc:84:execute$18922 ;
  wire [97:0] \$auto$bmuxmap.cc:84:execute$18927 ;
  wire [48:0] \$auto$bmuxmap.cc:84:execute$18930 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17932 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17934 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17936 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17938 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17943 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17945 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17952 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17954 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17956 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17940 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17949 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17958 ;
  wire [3:0] \$auto$opt_expr.cc:205:group_cell_inputs$17140 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18435 ;
  wire \$auto$rtlil.cc:2957:Not$16643 ;
  (* unused_bits = "1" *)
  wire [1:0] \$auto$rtlil.cc:2957:Not$16647 ;
  wire \$auto$rtlil.cc:2957:Not$17948 ;
  wire [1:0] \$auto$rtlil.cc:3004:And$16640 ;
  wire \$auto$rtlil.cc:3004:And$16644 ;
  wire \$auto$rtlil.cc:3004:And$16648 ;
  (* unused_bits = "1" *)
  wire [1:0] \$auto$rtlil.cc:3005:Or$16650 ;
  (* unused_bits = "1" *)
  wire [1:0] \$auto$rtlil.cc:3005:Or$16652 ;
  wire \$auto$rtlil.cc:3010:Le$1254 ;
  wire \$auto$rtlil.cc:3010:Le$1270 ;
  wire \$auto$rtlil.cc:3010:Le$1276 ;
  wire \$auto$rtlil.cc:3010:Le$1282 ;
  wire \$auto$rtlil.cc:3011:Eq$1221 ;
  wire \$auto$rtlil.cc:3011:Eq$1236 ;
  wire \$auto$rtlil.cc:3011:Eq$1237 ;
  wire \$auto$rtlil.cc:3011:Eq$1252 ;
  wire \$auto$rtlil.cc:3011:Eq$1256 ;
  wire \$auto$rtlil.cc:3015:Ge$1253 ;
  wire \$auto$rtlil.cc:3015:Ge$1269 ;
  wire \$auto$rtlil.cc:3015:Ge$1275 ;
  wire \$auto$rtlil.cc:3015:Ge$1281 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1271 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1277 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1283 ;
  wire \$auto$rtlil.cc:3092:Mux$1193 ;
  wire \$auto$rtlil.cc:3092:Mux$1196 ;
  wire \$auto$rtlil.cc:3092:Mux$1199 ;
  wire \$auto$rtlil.cc:3092:Mux$1202 ;
  wire \$auto$rtlil.cc:3092:Mux$1211 ;
  wire \$auto$rtlil.cc:3092:Mux$1259 ;
  wire [63:0] \$auto$rtlil.cc:3092:Mux$1274 ;
  wire [63:0] \$auto$rtlil.cc:3092:Mux$1280 ;
  wire [1:0] \$auto$rtlil.cc:3114:Demux$1218 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16" *)
  wire [1:0] \$auto$wreduce.cc:514:run$16992 ;
  wire [63:0] \$auto$wreduce.cc:514:run$16995 ;
  wire [63:0] \$auto$wreduce.cc:514:run$16996 ;
  wire [1:0] \$auto$wreduce.cc:514:run$16997 ;
  wire [1:0] \$auto$wreduce.cc:514:run$16998 ;
  wire [1:0] \$auto$wreduce.cc:514:run$16999 ;
  wire [1:0] \$auto$wreduce.cc:514:run$17000 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:148.9-155.12" *)
  wire [2:0] \$cmderror_o$14 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:145.5-192.12" *)
  wire [2:0] \$cmderror_o$51 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:196.5-199.8" *)
  wire [2:0] \$cmderror_o$56 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:196.5-199.8" *)
  wire \$cmderror_valid_o$55 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16" *)
  wire [63:0] \$data_bits$139 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *)
  wire [63:0] \$data_bits$218 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *)
  wire [7:0] \$data_bits[15:8]$115 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *)
  wire [7:0] \$data_bits[23:16]$117 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:269.15-281.18" *)
  wire [31:0] \$data_bits[31:0]$120 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *)
  wire [7:0] \$data_bits[31:24]$119 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *)
  wire [7:0] \$data_bits[39:32]$126 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *)
  wire [7:0] \$data_bits[47:40]$128 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *)
  wire [7:0] \$data_bits[55:48]$130 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:269.15-281.18" *)
  wire [31:0] \$data_bits[63:32]$133 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *)
  wire [7:0] \$data_bits[63:56]$132 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *)
  wire [7:0] \$data_bits[7:0]$113 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *)
  wire \$data_valid_o$220 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *)
  wire \$exception$213 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:145.5-192.12" *)
  wire \$go$48 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *)
  wire \$going$212 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16" *)
  wire [1:0] \$halted_aligned$137 ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *)
  wire [1:0] \$halted_aligned$216 ;
  wire \$procmux$8522_Y ;
  wire \$procmux$8665_Y ;
  wire [63:0] \$procmux$8829_Y ;
  wire [63:0] \$procmux$8867_Y ;
  wire \$procmux$9365_CMP ;
  wire \$procmux$9370_CMP ;
  wire \$procmux$9386_CMP ;
  wire [1:0] \$procmux$9388_Y ;
  wire [1:0] \$procmux$9400_Y ;
  wire [308:0] abstract_cmd;
  (* src = "rtl/riscv-dbg/dm_mem.sv:56.44" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:58.44" *)
  input [3:0] be_i;
  wire [3:0] be_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:34.44" *)
  input clear_resumeack_i;
  wire clear_resumeack_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:25.44" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:47.44" *)
  input [31:0] cmd_i;
  wire [31:0] cmd_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:46.44" *)
  input cmd_valid_i;
  wire cmd_valid_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:50.44" *)
  output cmdbusy_o;
  wire cmdbusy_o;
  (* src = "rtl/riscv-dbg/dm_mem.sv:49.44" *)
  output [2:0] cmderror_o;
  wire [2:0] cmderror_o;
  (* src = "rtl/riscv-dbg/dm_mem.sv:48.44" *)
  output cmderror_valid_o;
  wire cmderror_valid_o;
  (* src = "rtl/riscv-dbg/dm_mem.sv:42.44" *)
  input [63:0] data_i;
  wire [63:0] data_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:43.44" *)
  output [63:0] data_o;
  wire [63:0] data_o;
  (* src = "rtl/riscv-dbg/dm_mem.sv:44.44" *)
  output data_valid_o;
  wire data_valid_o;
  (* src = "rtl/riscv-dbg/dm_mem.sv:28.44" *)
  output debug_req_o;
  wire debug_req_o;
  (* src = "rtl/riscv-dbg/dm_mem.sv:91.9" *)
  wire exception;
  (* src = "rtl/riscv-dbg/dm_mem.sv:121.20" *)
  reg fwd_rom_q;
  (* src = "rtl/riscv-dbg/dm_mem.sv:89.31" *)
  wire go;
  (* src = "rtl/riscv-dbg/dm_mem.sv:89.35" *)
  wire going;
  (* src = "rtl/riscv-dbg/dm_mem.sv:107.30" *)
  wire [1:0] halted_aligned;
  (* src = "rtl/riscv-dbg/dm_mem.sv:87.23" *)
  wire halted_d;
  (* src = "rtl/riscv-dbg/dm_mem.sv:37.44" *)
  output halted_o;
  reg halted_o;
  (* src = "rtl/riscv-dbg/dm_mem.sv:32.44" *)
  input haltreq_i;
  wire haltreq_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:30.44" *)
  input [19:0] hartsel_i;
  wire [19:0] hartsel_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:29.44" *)
  input ndmreset_i;
  wire ndmreset_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:40.44" *)
  input [255:0] progbuf_i;
  wire [255:0] progbuf_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:59.44" *)
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  (* src = "rtl/riscv-dbg/dm_mem.sv:95.25" *)
  reg [63:0] rdata_q;
  (* src = "rtl/riscv-dbg/dm_mem.sv:54.44" *)
  input req_i;
  wire req_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:89.23" *)
  wire resume;
  (* src = "rtl/riscv-dbg/dm_mem.sv:33.44" *)
  input resumereq_i;
  wire resumereq_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:88.23" *)
  wire resuming_d;
  (* src = "rtl/riscv-dbg/dm_mem.sv:38.44" *)
  output resuming_o;
  reg resuming_o;
  (* src = "rtl/riscv-dbg/dm_mem.sv:94.16" *)
  wire [63:0] rom_rdata;
  (* src = "rtl/riscv-dbg/dm_mem.sv:26.44" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/riscv-dbg/dm_mem.sv:134.11" *)
  wire [1:0] state_d;
  (* src = "rtl/riscv-dbg/dm_mem.sv:134.20" *)
  reg [1:0] state_q;
  (* src = "rtl/riscv-dbg/dm_mem.sv:92.9" *)
  wire unsupported_command;
  (* src = "rtl/riscv-dbg/dm_mem.sv:57.44" *)
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:55.44" *)
  input we_i;
  wire we_i;
  (* src = "rtl/riscv-dbg/dm_mem.sv:96.16" *)
  reg word_enable32_q;
  (* src = "rtl/riscv-dbg/dm_mem.sv:215.16" *)
  wire [63:0] word_mux;
  assign \$auto$rtlil.cc:3011:Eq$1252  = addr_i[11:0] == 9'h118;
  assign \$auto$rtlil.cc:3015:Ge$1253  = addr_i[11:0] >= 10'h380;
  assign \$auto$rtlil.cc:3010:Le$1254  = addr_i[11:0] <= 10'h387;
  assign \$auto$rtlil.cc:3024:LogicAnd$1255  = \$auto$rtlil.cc:3015:Ge$1253  && \$auto$rtlil.cc:3010:Le$1254 ;
  assign { \$109 [31], \$109 [9:5] } = addr_i[11:7] - 3'h7;
  assign \$111  = ! { \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [9:5], addr_i[6:2] };
  assign \$124  = { \$109 [31], \$109 [9:5], addr_i[6:2] } == 1'h1;
  assign \$auto$rtlil.cc:3011:Eq$1256  = addr_i[11:0] == 10'h300;
  assign \$auto$rtlil.cc:3092:Mux$1259  = wdata_i[0] ? 1'h0 : resumereq_i;
  assign \$147  = ! cmd_i[31:24];
  assign \$149  = ! cmd_i[17];
  assign \$151  = \$147  && \$149 ;
  assign \$153  = \$151  && cmd_i[18];
  assign \$auto$rtlil.cc:3092:Mux$1196  = hartsel_i[0] ? 1'h0 : resumereq_i;
  assign \$auto$rtlil.cc:3015:Ge$1269  = addr_i[11:0] >= 10'h360;
  assign \$auto$rtlil.cc:3010:Le$1270  = addr_i[11:0] <= 10'h37f;
  assign \$auto$rtlil.cc:3024:LogicAnd$1271  = \$auto$rtlil.cc:3015:Ge$1269  && \$auto$rtlil.cc:3010:Le$1270 ;
  assign \$auto$rtlil.cc:3015:Ge$1275  = addr_i[11:0] >= 10'h338;
  assign \$auto$rtlil.cc:3010:Le$1276  = addr_i[11:0] <= 10'h35f;
  assign \$auto$rtlil.cc:3024:LogicAnd$1277  = \$auto$rtlil.cc:3015:Ge$1275  && \$auto$rtlil.cc:3010:Le$1276 ;
  assign \$187  = addr_i[5:3] - 3'h7;
  assign \$auto$rtlil.cc:3092:Mux$1199  = hartsel_i[0] ? 1'h0 : resuming_o;
  assign \$auto$rtlil.cc:3010:Le$1282  = addr_i[11:0] <= 11'h7ff;
  assign \$auto$rtlil.cc:3024:LogicAnd$1283  = \$auto$rtlil.cc:3015:Ge$1281  && \$auto$rtlil.cc:3010:Le$1282 ;
  assign \$195 [11:10] = addr_i[11:10] - 1'h1;
  assign \$199  = ! { \$195 [11:10], addr_i[9:3] };
  assign \$auto$rtlil.cc:3092:Mux$1193  = hartsel_i[0] ? 1'h0 : halted_o;
  assign \$22  = ! \$auto$rtlil.cc:3092:Mux$1199 ;
  assign \$24  = \$auto$rtlil.cc:3092:Mux$1196  && \$22 ;
  assign \$234  = cmd_i[22:20] < 2'h3;
  assign \$236  = \$234  && cmd_i[17];
  assign \$238  = \$236  && cmd_i[16];
  assign \$240  = | cmd_i[15:14];
  assign \$244  = ! cmd_i[5];
  assign \$246  = cmd_i[12] && \$244 ;
  assign \$248  = cmd_i[4:0] == 4'ha;
  assign \$250  = \$246  && \$248 ;
  assign \$auto$rtlil.cc:3092:Mux$1202  = hartsel_i[0] ? 1'h0 : haltreq_i;
  assign \$262  = ! cmd_i[16];
  assign \$264  = \$236  && \$262 ;
  assign \$29  = ! \$auto$rtlil.cc:3092:Mux$1202 ;
  assign \$284  = cmd_i[22:20] >= 2'h3;
  assign \$288  = \$284  || cmd_i[19];
  assign \$298  = ! \$procmux$8665_Y ;
  assign \$300  = cmd_i[18] && \$298 ;
  assign \$31  = \$24  && \$29 ;
  assign \$36  = \$31  && \$auto$rtlil.cc:3092:Mux$1193 ;
  assign \$5  = cmd_valid_i && \$auto$rtlil.cc:3092:Mux$1193 ;
  assign \$auto$rtlil.cc:3092:Mux$1211  = hartsel_i[0] ? halted_aligned[1] : halted_aligned[0];
  assign \$54  = unsupported_command && cmd_valid_i;
  assign \$7  = ! unsupported_command;
  assign word_mux = fwd_rom_q ? rom_rdata : rdata_q;
  assign rdata_o = word_enable32_q ? word_mux[63:32] : word_mux[31:0];
  assign \$auto$rtlil.cc:3011:Eq$1221  = addr_i[11:0] == 9'h100;
  assign \$9  = \$5  && \$7 ;
  assign \$auto$rtlil.cc:3011:Eq$1236  = addr_i[11:0] == 9'h108;
  assign \$auto$rtlil.cc:3011:Eq$1237  = addr_i[11:0] == 9'h110;
  assign \$auto$bmuxmap.cc:84:execute$18917 [63:0] = addr_i[3] ? progbuf_i[127:64] : progbuf_i[63:0];
  assign \$auto$bmuxmap.cc:84:execute$18917 [127:64] = addr_i[3] ? progbuf_i[255:192] : progbuf_i[191:128];
  assign \$auto$bmuxmap.cc:84:execute$18920  = addr_i[4] ? \$auto$bmuxmap.cc:84:execute$18917 [127:64] : \$auto$bmuxmap.cc:84:execute$18917 [63:0];
  assign \$auto$bmuxmap.cc:84:execute$18922 [48:0] = \$187 [0] ? 49'h00193a8067545 : { 23'h00006e, abstract_cmd[30], abstract_cmd[30], abstract_cmd[30], abstract_cmd[30], 1'h0, abstract_cmd[30], abstract_cmd[30], 2'h0, abstract_cmd[30], abstract_cmd[20], abstract_cmd[30], abstract_cmd[30], 2'h0, abstract_cmd[30], 5'h00, abstract_cmd[20], abstract_cmd[20], abstract_cmd[20], 1'h0, abstract_cmd[20] };
  assign \$auto$bmuxmap.cc:84:execute$18922 [97:49] = \$187 [0] ? { 1'h0, abstract_cmd[254], abstract_cmd[254], abstract_cmd[254], abstract_cmd[254], 1'h0, abstract_cmd[254], abstract_cmd[254], 2'h0, abstract_cmd[254], 3'h0, abstract_cmd[254], 1'h0, abstract_cmd[254], 1'h0, abstract_cmd[254], 3'h5, abstract_cmd[223:212], abstract_cmd[254], abstract_cmd[208], abstract_cmd[206:204], 5'h00, abstract_cmd[198], abstract_cmd[254], abstract_cmd[196], 2'h1 } : { abstract_cmd[191:180], abstract_cmd[198], abstract_cmd[174:172], abstract_cmd[254], 1'h0, abstract_cmd[208], abstract_cmd[164], 3'h2, abstract_cmd[158:157], abstract_cmd[157], abstract_cmd[157], 1'h0, abstract_cmd[158], abstract_cmd[152:148], abstract_cmd[157], abstract_cmd[144], abstract_cmd[142:135], abstract_cmd[158], abstract_cmd[133:132], abstract_cmd[130], 1'h1 };
  assign \$auto$bmuxmap.cc:84:execute$18922 [146:98] = \$187 [0] ? 49'h0000000000000 : { 11'h000, abstract_cmd[308], 6'h00, abstract_cmd[308], 30'h2bd9895d };
  assign \$auto$bmuxmap.cc:84:execute$18922 [195:147] = \$187 [0] ? 49'h0000000000000 : 49'h0000000000000;
  assign \$auto$bmuxmap.cc:84:execute$18927 [48:0] = \$187 [1] ? \$auto$bmuxmap.cc:84:execute$18922 [97:49] : \$auto$bmuxmap.cc:84:execute$18922 [48:0];
  assign \$auto$bmuxmap.cc:84:execute$18927 [97:49] = \$187 [1] ? \$auto$bmuxmap.cc:84:execute$18922 [195:147] : \$auto$bmuxmap.cc:84:execute$18922 [146:98];
  assign \$auto$bmuxmap.cc:84:execute$18930  = \$187 [2] ? \$auto$bmuxmap.cc:84:execute$18927 [97:49] : \$auto$bmuxmap.cc:84:execute$18927 [48:0];
  assign \$auto$rtlil.cc:3004:And$16640 [0] = wdata_i[0] == 1'h0;
  assign \$auto$rtlil.cc:3004:And$16640 [1] = wdata_i[0] == 1'h1;
  assign \$auto$rtlil.cc:3114:Demux$1218 [0] = hartsel_i[0] == 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1218 [1] = hartsel_i[0] == 1'h1;
  (* src = "rtl/riscv-dbg/dm_mem.sv:522.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17940 ) state_q <= state_d;
  (* src = "rtl/riscv-dbg/dm_mem.sv:522.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q <= 64'h0000000000000000;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17949 ) rdata_q <= \$procmux$8867_Y ;
  (* src = "rtl/riscv-dbg/dm_mem.sv:536.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) halted_o <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17958 ) halted_o <= halted_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17932  = | { \$go$48 , \$procmux$9370_CMP , \$procmux$9365_CMP , ndmreset_i, \$36 , \$9  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17934  = { \$go$48 , going, ndmreset_i } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17936  = { \$procmux$9370_CMP , \$auto$rtlil.cc:3092:Mux$1199 , ndmreset_i } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17938  = { \$procmux$9365_CMP , \$auto$rtlil.cc:3092:Mux$1211 , ndmreset_i } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17943  = | { \$auto$rtlil.cc:3024:LogicAnd$1283 , \$auto$rtlil.cc:3024:LogicAnd$1277 , \$auto$rtlil.cc:3024:LogicAnd$1271 , \$auto$rtlil.cc:3011:Eq$1256 , \$auto$rtlil.cc:3024:LogicAnd$1255  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17945  = { cmdbusy_o, \$auto$rtlil.cc:3092:Mux$1259 , \$auto$rtlil.cc:3011:Eq$1256  } != 3'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17952  = | { ndmreset_i, req_i };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17954  = { ndmreset_i, we_i, req_i } != 3'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17956  = { \$auto$rtlil.cc:3011:Eq$1237 , \$auto$rtlil.cc:3011:Eq$1221 , ndmreset_i, we_i, req_i } != 5'h03;
  assign \$auto$rtlil.cc:2957:Not$17948  = ~ we_i;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17940  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17938 , \$auto$opt_dff.cc:194:make_patterns_logic$17936 , \$auto$opt_dff.cc:194:make_patterns_logic$17934 , \$auto$opt_dff.cc:194:make_patterns_logic$17932  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17949  = & { \$auto$rtlil.cc:2957:Not$17948 , \$auto$opt_dff.cc:194:make_patterns_logic$17945 , \$auto$opt_dff.cc:194:make_patterns_logic$17943 , req_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17958  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17956 , \$auto$opt_dff.cc:194:make_patterns_logic$17954 , \$auto$opt_dff.cc:194:make_patterns_logic$17952  };
  assign \$auto$rtlil.cc:3015:Ge$1281  = | addr_i[11:10];
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17140  = { go, go, resume, resume } & { \$auto$rtlil.cc:3114:Demux$1218 , \$auto$rtlil.cc:3114:Demux$1218  };
  assign \$auto$rtlil.cc:3004:And$16644  = halted_o & \$auto$rtlil.cc:2957:Not$16643 ;
  assign \$auto$rtlil.cc:2957:Not$16643  = ~ \$auto$rtlil.cc:3004:And$16640 [0];
  assign \$auto$rtlil.cc:3004:And$16648  = resuming_o & \$auto$rtlil.cc:2957:Not$16647 [0];
  assign \$auto$rtlil.cc:2957:Not$16647 [0] = ~ \$auto$rtlil.cc:3114:Demux$1218 [0];
  assign \$auto$rtlil.cc:3005:Or$16650 [0] = halted_o | \$auto$rtlil.cc:3004:And$16640 [0];
  assign \$auto$rtlil.cc:3005:Or$16652 [0] = \$auto$wreduce.cc:514:run$17000 [0] | \$auto$rtlil.cc:3004:And$16640 [0];
  assign cmdbusy_o = | { \$procmux$9370_CMP , \$procmux$9365_CMP , \$go$48  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$18435  = | { \$procmux$9370_CMP , \$procmux$9365_CMP  };
  (* src = "rtl/riscv-dbg/dm_mem.sv:522.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) fwd_rom_q <= 1'h0;
    else fwd_rom_q <= addr_i[11];
  (* src = "rtl/riscv-dbg/dm_mem.sv:536.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) resuming_o <= 1'h0;
    else resuming_o <= resuming_d;
  (* src = "rtl/riscv-dbg/dm_mem.sv:522.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) word_enable32_q <= 1'h0;
    else word_enable32_q <= addr_i[2];
  assign unsupported_command = \$147  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" *) \$procmux$8665_Y  : 1'h1;
  assign { abstract_cmd[30], abstract_cmd[20] } = \$147  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" *) { \$abstract_cmd[31:0]$294 [30], \$abstract_cmd[31:0]$294 [20] } : 2'h1;
  assign \$abstract_cmd[319:288]$301 [20] = ~ (* src = "rtl/riscv-dbg/dm_mem.sv:475.11-475.46|rtl/riscv-dbg/dm_mem.sv:473.9-476.12" *) \$300 ;
  assign \$procmux$8522_Y  = \$264  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" *) \$240  : \$288 ;
  assign { \$abstract_cmd[31:0]$291 [30], \$abstract_cmd[31:0]$291 [20] } = \$264  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" *) { \$abstract_cmd[31:0]$254 [30], 1'h1 } : { 1'h0, \$288  };
  assign { \$abstract_cmd[255:128]$278 [78:76], \$abstract_cmd[255:128]$278 [68], \$abstract_cmd[255:128]$278 [63:52], \$abstract_cmd[255:128]$278 [126] } = cmd_i[12] ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:442.13-448.16|rtl/riscv-dbg/dm_mem.sv:440.20-460.14" *) 17'h02000 : { cmd_i[22:20], 1'h0, cmd_i[11:0], 1'h1 };
  assign { \$abstract_cmd[255:128]$278 [24:20], \$abstract_cmd[255:128]$278 [16], \$abstract_cmd[255:128]$278 [14:12], \$abstract_cmd[255:128]$278 [30], \$abstract_cmd[255:128]$278 [2] } = cmd_i[12] ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:442.13-448.16|rtl/riscv-dbg/dm_mem.sv:440.20-460.14" *) { cmd_i[4:0], 1'h1, cmd_i[22:20], 1'h0, cmd_i[5] } : 11'h486;
  assign { \$abstract_cmd[255:128]$279 [78:76], \$abstract_cmd[255:128]$279 [68], \$abstract_cmd[255:128]$279 [63:52], \$abstract_cmd[255:128]$279 [126], \$abstract_cmd[255:128]$279 [24:20], \$abstract_cmd[255:128]$279 [16], \$abstract_cmd[255:128]$279 [14:12], \$abstract_cmd[255:128]$279 [30], \$abstract_cmd[255:128]$279 [2] } = \$250  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:430.52-440.14|rtl/riscv-dbg/dm_mem.sv:429.20-460.14" *) { cmd_i[22:20], 25'h07b3c86 } : { \$abstract_cmd[255:128]$278 [78:76], \$abstract_cmd[255:128]$278 [68], \$abstract_cmd[255:128]$278 [63:52], \$abstract_cmd[255:128]$278 [126], \$abstract_cmd[255:128]$278 [24:20], \$abstract_cmd[255:128]$278 [16], \$abstract_cmd[255:128]$278 [14:12], \$abstract_cmd[255:128]$278 [30], \$abstract_cmd[255:128]$278 [2] };
  assign { \$abstract_cmd[255:128]$281 [78:76], \$abstract_cmd[255:128]$281 [68], \$abstract_cmd[255:128]$281 [63:52], \$abstract_cmd[255:128]$281 [126], \$abstract_cmd[255:128]$281 [24:20], \$abstract_cmd[255:128]$281 [16], \$abstract_cmd[255:128]$281 [14:12], \$abstract_cmd[255:128]$281 [30:29], \$abstract_cmd[255:128]$281 [4], \$abstract_cmd[255:128]$281 [2] } = \$240  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:424.41-429.14|rtl/riscv-dbg/dm_mem.sv:424.11-460.14" *) 30'h04000002 : { \$abstract_cmd[255:128]$279 [78:76], \$abstract_cmd[255:128]$279 [68], \$abstract_cmd[255:128]$279 [63:52], \$abstract_cmd[255:128]$279 [126], \$abstract_cmd[255:128]$279 [24:20], \$abstract_cmd[255:128]$279 [16], \$abstract_cmd[255:128]$279 [14:12], \$abstract_cmd[255:128]$279 [30], 1'h1, \$abstract_cmd[255:128]$279 [30], \$abstract_cmd[255:128]$279 [2] };
  assign \$abstract_cmd[31:0]$254 [30] = ~ (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:424.41-429.14|rtl/riscv-dbg/dm_mem.sv:424.11-460.14" *) \$240 ;
  assign { \$abstract_cmd[255:128]$292 [78:76], \$abstract_cmd[255:128]$292 [68], \$abstract_cmd[255:128]$292 [63:52], \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [24:20], \$abstract_cmd[255:128]$292 [16], \$abstract_cmd[255:128]$292 [14:12], \$abstract_cmd[255:128]$292 [30:29], \$abstract_cmd[255:128]$292 [4], \$abstract_cmd[255:128]$292 [2] } = \$264  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" *) { \$abstract_cmd[255:128]$281 [78:76], \$abstract_cmd[255:128]$281 [68], \$abstract_cmd[255:128]$281 [63:52], \$abstract_cmd[255:128]$281 [126], \$abstract_cmd[255:128]$281 [24:20], \$abstract_cmd[255:128]$281 [16], \$abstract_cmd[255:128]$281 [14:12], \$abstract_cmd[255:128]$281 [30:29], \$abstract_cmd[255:128]$281 [4], \$abstract_cmd[255:128]$281 [2] } : 30'h04000002;
  assign \$procmux$8665_Y  = \$238  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" *) \$240  : \$procmux$8522_Y ;
  assign { \$abstract_cmd[255:128]$295 [95:84], \$abstract_cmd[255:128]$295 [78:76], \$abstract_cmd[255:128]$295 [68], \$abstract_cmd[255:128]$295 [63:52], \$abstract_cmd[255:128]$295 [70], \$abstract_cmd[255:128]$295 [46:44], \$abstract_cmd[255:128]$295 [126], \$abstract_cmd[255:128]$295 [80], \$abstract_cmd[255:128]$295 [36], \$abstract_cmd[255:128]$295 [24:20], \$abstract_cmd[255:128]$295 [29], \$abstract_cmd[255:128]$295 [16], \$abstract_cmd[255:128]$295 [14:7], \$abstract_cmd[255:128]$295 [30], \$abstract_cmd[255:128]$295 [5:4], \$abstract_cmd[255:128]$295 [2] } = \$238  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" *) { \$abstract_cmd[255:128]$255 [95:84], 2'h0, \$abstract_cmd[255:128]$255 [126], 3'h4, \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [126], 7'h00, \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [46:44], \$abstract_cmd[255:128]$255 [126], 1'h0, \$abstract_cmd[255:128]$255 [36], \$abstract_cmd[255:128]$255 [30], 2'h0, \$abstract_cmd[255:128]$255 [30], 1'h0, \$abstract_cmd[255:128]$255 [29], \$abstract_cmd[255:128]$255 [16], \$abstract_cmd[255:128]$255 [14:7], \$abstract_cmd[255:128]$255 [30], \$abstract_cmd[255:128]$255 [30], \$abstract_cmd[255:128]$255 [4], \$abstract_cmd[255:128]$255 [2] } : { 2'h0, \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [126], 3'h0, \$abstract_cmd[255:128]$292 [126], 3'h0, \$abstract_cmd[255:128]$292 [78:76], \$abstract_cmd[255:128]$292 [68], \$abstract_cmd[255:128]$292 [63:52], 2'h0, \$abstract_cmd[255:128]$292 [126], 1'h0, \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [126], 1'h1, \$abstract_cmd[255:128]$292 [24:20], \$abstract_cmd[255:128]$292 [29], \$abstract_cmd[255:128]$292 [16], \$abstract_cmd[255:128]$292 [14:12], 5'h00, \$abstract_cmd[255:128]$292 [30:29], \$abstract_cmd[255:128]$292 [4], \$abstract_cmd[255:128]$292 [2] };
  assign { \$abstract_cmd[31:0]$294 [30], \$abstract_cmd[31:0]$294 [20] } = \$238  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" *) { \$abstract_cmd[31:0]$254 [30], 1'h1 } : { \$abstract_cmd[31:0]$291 [30], \$abstract_cmd[31:0]$291 [20] };
  assign { \$abstract_cmd[255:128]$252 [95:84], \$abstract_cmd[255:128]$252 [46:44], \$abstract_cmd[255:128]$252 [126], \$abstract_cmd[255:128]$252 [36] } = cmd_i[12] ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:399.13-405.16|rtl/riscv-dbg/dm_mem.sv:397.20-417.14" *) 17'h00001 : { cmd_i[11:0], cmd_i[22:20], 2'h2 };
  assign { \$abstract_cmd[255:128]$252 [16], \$abstract_cmd[255:128]$252 [14:7], \$abstract_cmd[255:128]$252 [30], \$abstract_cmd[255:128]$252 [2] } = cmd_i[12] ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:399.13-405.16|rtl/riscv-dbg/dm_mem.sv:397.20-417.14" *) { 1'h1, cmd_i[22:20], cmd_i[4:0], 1'h0, cmd_i[5] } : 11'h082;
  assign { \$abstract_cmd[255:128]$253 [95:84], \$abstract_cmd[255:128]$253 [46:44], \$abstract_cmd[255:128]$253 [126], \$abstract_cmd[255:128]$253 [36], \$abstract_cmd[255:128]$253 [16], \$abstract_cmd[255:128]$253 [14:7], \$abstract_cmd[255:128]$253 [30], \$abstract_cmd[255:128]$253 [2] } = \$250  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:387.52-397.14|rtl/riscv-dbg/dm_mem.sv:386.20-417.14" *) { 12'h7b3, cmd_i[22:20], 13'h1082 } : { \$abstract_cmd[255:128]$252 [95:84], \$abstract_cmd[255:128]$252 [46:44], \$abstract_cmd[255:128]$252 [126], \$abstract_cmd[255:128]$252 [36], \$abstract_cmd[255:128]$252 [16], \$abstract_cmd[255:128]$252 [14:7], \$abstract_cmd[255:128]$252 [30], \$abstract_cmd[255:128]$252 [2] };
  assign { \$abstract_cmd[255:128]$255 [95:84], \$abstract_cmd[255:128]$255 [46:44], \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [36], \$abstract_cmd[255:128]$255 [29], \$abstract_cmd[255:128]$255 [16], \$abstract_cmd[255:128]$255 [14:7], \$abstract_cmd[255:128]$255 [30], \$abstract_cmd[255:128]$255 [4], \$abstract_cmd[255:128]$255 [2] } = \$240  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:381.41-386.14|rtl/riscv-dbg/dm_mem.sv:381.11-417.14" *) 30'h00002002 : { \$abstract_cmd[255:128]$253 [95:84], \$abstract_cmd[255:128]$253 [46:44], \$abstract_cmd[255:128]$253 [126], \$abstract_cmd[255:128]$253 [36], 1'h1, \$abstract_cmd[255:128]$253 [16], \$abstract_cmd[255:128]$253 [14:7], \$abstract_cmd[255:128]$253 [30], \$abstract_cmd[255:128]$253 [30], \$abstract_cmd[255:128]$253 [2] };
  assign abstract_cmd[308] = \$147  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" *) \$abstract_cmd[319:288]$301 [20] : 1'h1;
  assign { abstract_cmd[223:212], abstract_cmd[206:204], abstract_cmd[196], abstract_cmd[191:180], abstract_cmd[198], abstract_cmd[174:172], abstract_cmd[254], abstract_cmd[208], abstract_cmd[164], abstract_cmd[152:148], abstract_cmd[157], abstract_cmd[144], abstract_cmd[142:135], abstract_cmd[158], abstract_cmd[133:132], abstract_cmd[130] } = \$147  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" *) { \$abstract_cmd[255:128]$295 [95:84], \$abstract_cmd[255:128]$295 [78:76], \$abstract_cmd[255:128]$295 [68], \$abstract_cmd[255:128]$295 [63:52], \$abstract_cmd[255:128]$295 [70], \$abstract_cmd[255:128]$295 [46:44], \$abstract_cmd[255:128]$295 [126], \$abstract_cmd[255:128]$295 [80], \$abstract_cmd[255:128]$295 [36], \$abstract_cmd[255:128]$295 [24:20], \$abstract_cmd[255:128]$295 [29], \$abstract_cmd[255:128]$295 [16], \$abstract_cmd[255:128]$295 [14:7], \$abstract_cmd[255:128]$295 [30], \$abstract_cmd[255:128]$295 [5:4], \$abstract_cmd[255:128]$295 [2] } : 54'h00004000080002;
  assign resuming_d = ndmreset_i ? (* src = "rtl/riscv-dbg/dm_mem.sv:343.21-347.8|rtl/riscv-dbg/dm_mem.sv:343.5-347.8" *) 1'h0 : \$auto$wreduce.cc:514:run$16999 [0];
  assign halted_d = ndmreset_i ? (* src = "rtl/riscv-dbg/dm_mem.sv:343.21-347.8|rtl/riscv-dbg/dm_mem.sv:343.5-347.8" *) 1'h0 : \$auto$wreduce.cc:514:run$16992 [0];
  assign { \$auto$wreduce.cc:514:run$16995 [9:8], \$auto$wreduce.cc:514:run$16995 [1:0] } = \$199  ? (* src = "rtl/riscv-dbg/dm_mem.sv:334.15-334.94|rtl/riscv-dbg/dm_mem.sv:332.13-335.16" *) { \$auto$opt_expr.cc:205:group_cell_inputs$17140 [1], \$auto$opt_expr.cc:205:group_cell_inputs$17140 [3], \$auto$opt_expr.cc:205:group_cell_inputs$17140 [0], \$auto$opt_expr.cc:205:group_cell_inputs$17140 [2] } : 4'h0;
  assign { \$auto$wreduce.cc:514:run$16996 [26], \$auto$wreduce.cc:514:run$16996 [24] } = \$153  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:303.17-303.87|rtl/riscv-dbg/dm_mem.sv:301.15-307.18" *) 2'h2 : 2'h1;
  assign { \$procmux$8829_Y [30], \$procmux$8829_Y [26:23] } = cmdbusy_o ? (* src = "rtl/riscv-dbg/dm_mem.sv:301.15-307.18|rtl/riscv-dbg/dm_mem.sv:298.13-308.16" *) { 1'h0, \$auto$wreduce.cc:514:run$16996 [26], 1'h1, \$auto$wreduce.cc:514:run$16996 [24], \$auto$wreduce.cc:514:run$16996 [24] } : 5'h11;
  function [63:0] \$procmux$8867 ;
    input [63:0] a;
    input [255:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dm_mem.sv:330.41-337.14|rtl/riscv-dbg/dm_mem.sv:289.9-339.16" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$8867  = b[63:0];
      4'b??1?:
        \$procmux$8867  = b[127:64];
      4'b?1??:
        \$procmux$8867  = b[191:128];
      4'b1???:
        \$procmux$8867  = b[255:192];
      default:
        \$procmux$8867  = a;
    endcase
  endfunction
  assign \$procmux$8867_Y  = \$procmux$8867 ({ 33'h000000000, \$procmux$8829_Y [30], 1'h0, \$procmux$8829_Y [30], 1'h0, \$procmux$8829_Y [26:23], 23'h00006f }, { data_i, \$auto$rtlil.cc:3092:Mux$1274 , \$auto$rtlil.cc:3092:Mux$1280 [63:52], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [50], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [50], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [46:44], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [42], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [40], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [38], \$auto$rtlil.cc:3092:Mux$1280 [38], \$auto$rtlil.cc:3092:Mux$1280 [36], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [34:33], \$auto$rtlil.cc:3092:Mux$1280 [33], \$auto$rtlil.cc:3092:Mux$1280 [31:20], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [18], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [16], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [14:4], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [2:1], \$auto$rtlil.cc:3092:Mux$1280 [1], 54'h00000000000000, \$auto$wreduce.cc:514:run$16995 [9:8], 6'h00, \$auto$wreduce.cc:514:run$16995 [1:0] }, { \$auto$rtlil.cc:3024:LogicAnd$1255 , \$auto$rtlil.cc:3024:LogicAnd$1271 , \$auto$rtlil.cc:3024:LogicAnd$1277 , \$auto$rtlil.cc:3024:LogicAnd$1283  });
  assign \$data_bits[63:56]$132  = be_i[3] ? (* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *) wdata_i[31:24] : data_i[63:56];
  assign \$data_bits[55:48]$130  = be_i[2] ? (* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *) wdata_i[23:16] : data_i[55:48];
  assign \$data_bits[47:40]$128  = be_i[1] ? (* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *) wdata_i[15:8] : data_i[47:40];
  assign \$data_bits[39:32]$126  = be_i[0] ? (* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *) wdata_i[7:0] : data_i[39:32];
  assign \$data_bits[63:32]$133  = \$124  ? (* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" *) { \$data_bits[63:56]$132 , \$data_bits[55:48]$130 , \$data_bits[47:40]$128 , \$data_bits[39:32]$126  } : data_i[63:32];
  assign \$data_bits[31:24]$119  = be_i[3] ? (* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *) wdata_i[31:24] : data_i[31:24];
  assign \$data_bits[23:16]$117  = be_i[2] ? (* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *) wdata_i[23:16] : data_i[23:16];
  assign \$data_bits[15:8]$115  = be_i[1] ? (* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *) wdata_i[15:8] : data_i[15:8];
  assign \$data_bits[7:0]$113  = be_i[0] ? (* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" *) wdata_i[7:0] : data_i[7:0];
  assign \$data_bits[31:0]$120  = \$111  ? (* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" *) { \$data_bits[31:24]$119 , \$data_bits[23:16]$117 , \$data_bits[15:8]$115 , \$data_bits[7:0]$113  } : data_i[31:0];
  assign \$data_bits$139  = \$auto$rtlil.cc:3024:LogicAnd$1255  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" *) { \$data_bits[63:32]$133 , \$data_bits[31:0]$120  } : data_i;
  assign \$auto$wreduce.cc:514:run$16997 [0] = \$auto$rtlil.cc:3011:Eq$1237  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:257.25-262.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" *) \$auto$rtlil.cc:3005:Or$16652 [0] : \$auto$wreduce.cc:514:run$17000 [0];
  assign \$halted_aligned$137  = \$auto$rtlil.cc:3011:Eq$1221  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:250.23-253.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" *) \$auto$rtlil.cc:3004:And$16640  : 2'h0;
  assign \$auto$wreduce.cc:514:run$16992 [0] = \$auto$rtlil.cc:3011:Eq$1237  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:257.25-262.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" *) \$auto$rtlil.cc:3004:And$16644  : \$auto$rtlil.cc:3005:Or$16650 [0];
  assign \$data_valid_o$220  = we_i & (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *) \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  assign \$data_bits$218  = we_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *) \$data_bits$139  : data_i;
  assign \$auto$wreduce.cc:514:run$16998 [0] = we_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *) \$auto$wreduce.cc:514:run$16997 [0] : \$auto$wreduce.cc:514:run$17000 [0];
  assign \$halted_aligned$216  = we_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *) \$halted_aligned$137  : 2'h0;
  assign \$exception$213  = we_i & (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *) \$auto$rtlil.cc:3011:Eq$1252 ;
  assign \$going$212  = we_i & (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" *) \$auto$rtlil.cc:3011:Eq$1236 ;
  assign data_valid_o = req_i & (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" *) \$data_valid_o$220 ;
  assign data_o = req_i ? (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" *) \$data_bits$218  : data_i;
  assign \$auto$wreduce.cc:514:run$16999 [0] = req_i ? (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" *) \$auto$wreduce.cc:514:run$16998 [0] : \$auto$wreduce.cc:514:run$17000 [0];
  assign halted_aligned = req_i ? (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" *) \$halted_aligned$216  : 2'h0;
  assign exception = req_i & (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" *) \$exception$213 ;
  assign going = req_i & (* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" *) \$going$212 ;
  assign \$auto$wreduce.cc:514:run$17000 [0] = clear_resumeack_i ? (* src = "rtl/riscv-dbg/dm_mem.sv:243.7-243.42|rtl/riscv-dbg/dm_mem.sv:242.5-244.8" *) \$auto$rtlil.cc:3004:And$16648  : resuming_o;
  assign state_d = ndmreset_i ? (* src = "rtl/riscv-dbg/dm_mem.sv:206.21-211.8|rtl/riscv-dbg/dm_mem.sv:206.5-211.8" *) 2'h0 : \$procmux$9388_Y ;
  assign go = ndmreset_i ? (* src = "rtl/riscv-dbg/dm_mem.sv:206.21-211.8|rtl/riscv-dbg/dm_mem.sv:206.5-211.8" *) 1'h0 : \$go$48 ;
  assign resume = ndmreset_i ? (* src = "rtl/riscv-dbg/dm_mem.sv:206.21-211.8|rtl/riscv-dbg/dm_mem.sv:206.5-211.8" *) 1'h0 : \$procmux$9370_CMP ;
  assign cmderror_o = exception ? (* src = "rtl/riscv-dbg/dm_mem.sv:201.20-204.8|rtl/riscv-dbg/dm_mem.sv:201.5-204.8" *) 3'h3 : { \$cmderror_o$56 [2:1], 1'h0 };
  assign cmderror_valid_o = \$cmderror_valid_o$55  | (* src = "rtl/riscv-dbg/dm_mem.sv:201.20-204.8|rtl/riscv-dbg/dm_mem.sv:201.5-204.8" *) exception;
  assign \$cmderror_o$56 [2:1] = \$54  ? (* src = "rtl/riscv-dbg/dm_mem.sv:196.45-199.8|rtl/riscv-dbg/dm_mem.sv:196.5-199.8" *) 2'h1 : { \$cmderror_o$51 [2], 1'h0 };
  assign \$cmderror_valid_o$55  = \$cmderror_o$51 [2] | (* src = "rtl/riscv-dbg/dm_mem.sv:196.45-199.8|rtl/riscv-dbg/dm_mem.sv:196.5-199.8" *) \$54 ;
  assign \$procmux$9365_CMP  = state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:182.21-189.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" *) 2'h3;
  assign \$procmux$9370_CMP  = state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:174.15-180.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" *) 2'h2;
  assign \$go$48  = state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:164.11-172.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" *) 1'h1;
  assign \$procmux$9386_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" *) state_q;
  function [1:0] \$procmux$9388 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dm_mem.sv:182.21-189.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$9388  = b[1:0];
      2'b1?:
        \$procmux$9388  = b[3:2];
      default:
        \$procmux$9388  = a;
    endcase
  endfunction
  assign \$procmux$9388_Y  = \$procmux$9388 (\$procmux$9400_Y , 4'hc, { \$go$48 , \$auto$opt_reduce.cc:137:opt_pmux$18435  });
  assign \$procmux$9400_Y  = \$36  ? (* src = "rtl/riscv-dbg/dm_mem.sv:160.11-160.28|rtl/riscv-dbg/dm_mem.sv:158.9-161.12" *) 2'h2 : 2'h1;
  assign \$cmderror_o$14 [2] = \$9  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:150.11-150.24|rtl/riscv-dbg/dm_mem.sv:148.9-155.12" *) 1'h0 : cmd_valid_i;
  assign \$cmderror_o$51 [2] = \$procmux$9386_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" *) \$cmderror_o$14 [2];
  (* src = "rtl/riscv-dbg/dm_mem.sv:498.15" *)
  \debug_rom$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_mem.gen_rom_snd_scratch.i_debug_rom  \gen_rom_snd_scratch.i_debug_rom  (
    .addr_i({ 32'h00000000, addr_i }),
    .clk_i(clk_i),
    .rdata_o(rom_rdata),
    .req_i(req_i),
    .rst_ni(rst_ni)
  );
  assign { \$abstract_cmd[255:128]$252 [125:96], \$abstract_cmd[255:128]$252 [83:47], \$abstract_cmd[255:128]$252 [43:37], \$abstract_cmd[255:128]$252 [35:31], \$abstract_cmd[255:128]$252 [29:17], \$abstract_cmd[255:128]$252 [15], \$abstract_cmd[255:128]$252 [6:3], \$abstract_cmd[255:128]$252 [1:0] } = { \$abstract_cmd[255:128]$252 [126], \$abstract_cmd[255:128]$252 [126], \$abstract_cmd[255:128]$252 [126], 1'h0, \$abstract_cmd[255:128]$252 [126], \$abstract_cmd[255:128]$252 [126], 2'h0, \$abstract_cmd[255:128]$252 [126], 7'h00, \$abstract_cmd[255:128]$252 [126], 2'h0, \$abstract_cmd[255:128]$252 [126], 3'h0, \$abstract_cmd[255:128]$252 [126], \$abstract_cmd[255:128]$252 [126], 6'h26, \$abstract_cmd[255:128]$252 [126], 5'h00, \$abstract_cmd[255:128]$252 [126], 5'h00, \$abstract_cmd[255:128]$252 [126], \$abstract_cmd[255:128]$252 [126], 7'h4c, \$abstract_cmd[255:128]$252 [126], \$abstract_cmd[255:128]$252 [126], \$abstract_cmd[255:128]$252 [126], 8'h00, \$abstract_cmd[255:128]$252 [126], 1'h0, \$abstract_cmd[255:128]$252 [126], 2'h0, \$abstract_cmd[255:128]$252 [126], 14'h006e, \$abstract_cmd[255:128]$252 [30], \$abstract_cmd[255:128]$252 [30], 2'h0, \$abstract_cmd[255:128]$252 [30], 5'h04, \$abstract_cmd[255:128]$252 [30], \$abstract_cmd[255:128]$252 [30], \$abstract_cmd[255:128]$252 [30], 3'h3 };
  assign { \$abstract_cmd[255:128]$253 [125:96], \$abstract_cmd[255:128]$253 [83:47], \$abstract_cmd[255:128]$253 [43:37], \$abstract_cmd[255:128]$253 [35:31], \$abstract_cmd[255:128]$253 [29:17], \$abstract_cmd[255:128]$253 [15], \$abstract_cmd[255:128]$253 [6:3], \$abstract_cmd[255:128]$253 [1:0] } = { \$abstract_cmd[255:128]$253 [126], \$abstract_cmd[255:128]$253 [126], \$abstract_cmd[255:128]$253 [126], 1'h0, \$abstract_cmd[255:128]$253 [126], \$abstract_cmd[255:128]$253 [126], 2'h0, \$abstract_cmd[255:128]$253 [126], 7'h00, \$abstract_cmd[255:128]$253 [126], 2'h0, \$abstract_cmd[255:128]$253 [126], 3'h0, \$abstract_cmd[255:128]$253 [126], \$abstract_cmd[255:128]$253 [126], 6'h26, \$abstract_cmd[255:128]$253 [126], 5'h00, \$abstract_cmd[255:128]$253 [126], 5'h00, \$abstract_cmd[255:128]$253 [126], \$abstract_cmd[255:128]$253 [126], 7'h4c, \$abstract_cmd[255:128]$253 [126], \$abstract_cmd[255:128]$253 [126], \$abstract_cmd[255:128]$253 [126], 8'h00, \$abstract_cmd[255:128]$253 [126], 1'h0, \$abstract_cmd[255:128]$253 [126], 2'h0, \$abstract_cmd[255:128]$253 [126], 14'h006e, \$abstract_cmd[255:128]$253 [30], \$abstract_cmd[255:128]$253 [30], 2'h0, \$abstract_cmd[255:128]$253 [30], 5'h04, \$abstract_cmd[255:128]$253 [30], \$abstract_cmd[255:128]$253 [30], \$abstract_cmd[255:128]$253 [30], 3'h3 };
  assign { \$abstract_cmd[255:128]$255 [125:96], \$abstract_cmd[255:128]$255 [83:47], \$abstract_cmd[255:128]$255 [43:37], \$abstract_cmd[255:128]$255 [35:31], \$abstract_cmd[255:128]$255 [28:17], \$abstract_cmd[255:128]$255 [15], \$abstract_cmd[255:128]$255 [6:5], \$abstract_cmd[255:128]$255 [3], \$abstract_cmd[255:128]$255 [1:0] } = { \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [126], 1'h0, \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [126], 2'h0, \$abstract_cmd[255:128]$255 [126], 7'h00, \$abstract_cmd[255:128]$255 [126], 2'h0, \$abstract_cmd[255:128]$255 [126], 3'h0, \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [126], 6'h26, \$abstract_cmd[255:128]$255 [126], 5'h00, \$abstract_cmd[255:128]$255 [126], 5'h00, \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [126], 7'h4c, \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [126], 8'h00, \$abstract_cmd[255:128]$255 [126], 1'h0, \$abstract_cmd[255:128]$255 [126], 2'h0, \$abstract_cmd[255:128]$255 [126], 10'h006, \$abstract_cmd[255:128]$255 [29], \$abstract_cmd[255:128]$255 [29], 1'h0, \$abstract_cmd[255:128]$255 [30], \$abstract_cmd[255:128]$255 [30], 2'h0, \$abstract_cmd[255:128]$255 [30], 2'h0, \$abstract_cmd[255:128]$255 [29], 2'h0, \$abstract_cmd[255:128]$255 [30], \$abstract_cmd[255:128]$255 [30], 3'h3 };
  assign { \$abstract_cmd[255:128]$278 [125:79], \$abstract_cmd[255:128]$278 [75:69], \$abstract_cmd[255:128]$278 [67:64], \$abstract_cmd[255:128]$278 [51:31], \$abstract_cmd[255:128]$278 [29:25], \$abstract_cmd[255:128]$278 [19:17], \$abstract_cmd[255:128]$278 [15], \$abstract_cmd[255:128]$278 [11:3], \$abstract_cmd[255:128]$278 [1:0] } = { \$abstract_cmd[255:128]$278 [126], \$abstract_cmd[255:128]$278 [126], \$abstract_cmd[255:128]$278 [126], 1'h0, \$abstract_cmd[255:128]$278 [126], \$abstract_cmd[255:128]$278 [126], 2'h0, \$abstract_cmd[255:128]$278 [126], 7'h00, \$abstract_cmd[255:128]$278 [126], 2'h0, \$abstract_cmd[255:128]$278 [126], 3'h0, \$abstract_cmd[255:128]$278 [126], \$abstract_cmd[255:128]$278 [126], 7'h4c, \$abstract_cmd[255:128]$278 [126], \$abstract_cmd[255:128]$278 [126], \$abstract_cmd[255:128]$278 [126], 3'h0, \$abstract_cmd[255:128]$278 [126], 4'h0, \$abstract_cmd[255:128]$278 [126], 1'h0, \$abstract_cmd[255:128]$278 [126], 7'h00, \$abstract_cmd[255:128]$278 [126], 10'h0c0, \$abstract_cmd[255:128]$278 [126], 2'h0, \$abstract_cmd[255:128]$278 [126], 3'h0, \$abstract_cmd[255:128]$278 [126], \$abstract_cmd[255:128]$278 [126], 10'h26e, \$abstract_cmd[255:128]$278 [30], 9'h080, \$abstract_cmd[255:128]$278 [30], 1'h1, \$abstract_cmd[255:128]$278 [30], 3'h3 };
  assign { \$abstract_cmd[255:128]$279 [127], \$abstract_cmd[255:128]$279 [125:79], \$abstract_cmd[255:128]$279 [75:69], \$abstract_cmd[255:128]$279 [67:64], \$abstract_cmd[255:128]$279 [51:31], \$abstract_cmd[255:128]$279 [29:25], \$abstract_cmd[255:128]$279 [19:17], \$abstract_cmd[255:128]$279 [15], \$abstract_cmd[255:128]$279 [11:3], \$abstract_cmd[255:128]$279 [1:0] } = { 1'h0, \$abstract_cmd[255:128]$279 [126], \$abstract_cmd[255:128]$279 [126], \$abstract_cmd[255:128]$279 [126], 1'h0, \$abstract_cmd[255:128]$279 [126], \$abstract_cmd[255:128]$279 [126], 2'h0, \$abstract_cmd[255:128]$279 [126], 7'h00, \$abstract_cmd[255:128]$279 [126], 2'h0, \$abstract_cmd[255:128]$279 [126], 3'h0, \$abstract_cmd[255:128]$279 [126], \$abstract_cmd[255:128]$279 [126], 7'h4c, \$abstract_cmd[255:128]$279 [126], \$abstract_cmd[255:128]$279 [126], \$abstract_cmd[255:128]$279 [126], 3'h0, \$abstract_cmd[255:128]$279 [126], 4'h0, \$abstract_cmd[255:128]$279 [126], 1'h0, \$abstract_cmd[255:128]$279 [126], 7'h00, \$abstract_cmd[255:128]$279 [126], 10'h0c0, \$abstract_cmd[255:128]$279 [126], 2'h0, \$abstract_cmd[255:128]$279 [126], 3'h0, \$abstract_cmd[255:128]$279 [126], \$abstract_cmd[255:128]$279 [126], 10'h26e, \$abstract_cmd[255:128]$279 [30], 9'h080, \$abstract_cmd[255:128]$279 [30], 1'h1, \$abstract_cmd[255:128]$279 [30], 3'h3 };
  assign { \$abstract_cmd[255:128]$281 [127], \$abstract_cmd[255:128]$281 [125:79], \$abstract_cmd[255:128]$281 [75:69], \$abstract_cmd[255:128]$281 [67:64], \$abstract_cmd[255:128]$281 [51:31], \$abstract_cmd[255:128]$281 [28:25], \$abstract_cmd[255:128]$281 [19:17], \$abstract_cmd[255:128]$281 [15], \$abstract_cmd[255:128]$281 [11:5], \$abstract_cmd[255:128]$281 [3], \$abstract_cmd[255:128]$281 [1:0] } = { 1'h0, \$abstract_cmd[255:128]$281 [126], \$abstract_cmd[255:128]$281 [126], \$abstract_cmd[255:128]$281 [126], 1'h0, \$abstract_cmd[255:128]$281 [126], \$abstract_cmd[255:128]$281 [126], 2'h0, \$abstract_cmd[255:128]$281 [126], 7'h00, \$abstract_cmd[255:128]$281 [126], 2'h0, \$abstract_cmd[255:128]$281 [126], 3'h0, \$abstract_cmd[255:128]$281 [126], \$abstract_cmd[255:128]$281 [126], 7'h4c, \$abstract_cmd[255:128]$281 [126], \$abstract_cmd[255:128]$281 [126], \$abstract_cmd[255:128]$281 [126], 3'h0, \$abstract_cmd[255:128]$281 [126], 4'h0, \$abstract_cmd[255:128]$281 [126], 1'h0, \$abstract_cmd[255:128]$281 [126], 7'h00, \$abstract_cmd[255:128]$281 [126], 10'h0c0, \$abstract_cmd[255:128]$281 [126], 2'h0, \$abstract_cmd[255:128]$281 [126], 3'h0, \$abstract_cmd[255:128]$281 [126], \$abstract_cmd[255:128]$281 [126], 6'h26, \$abstract_cmd[255:128]$281 [29], \$abstract_cmd[255:128]$281 [29], 1'h0, \$abstract_cmd[255:128]$281 [30], 1'h0, \$abstract_cmd[255:128]$281 [29], 7'h00, \$abstract_cmd[255:128]$281 [30:29], 3'h3 };
  assign { \$abstract_cmd[255:128]$292 [127], \$abstract_cmd[255:128]$292 [125:79], \$abstract_cmd[255:128]$292 [75:69], \$abstract_cmd[255:128]$292 [67:64], \$abstract_cmd[255:128]$292 [51:31], \$abstract_cmd[255:128]$292 [28:25], \$abstract_cmd[255:128]$292 [19:17], \$abstract_cmd[255:128]$292 [15], \$abstract_cmd[255:128]$292 [11:5], \$abstract_cmd[255:128]$292 [3], \$abstract_cmd[255:128]$292 [1:0] } = { 1'h0, \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [126], 1'h0, \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [126], 2'h0, \$abstract_cmd[255:128]$292 [126], 7'h00, \$abstract_cmd[255:128]$292 [126], 2'h0, \$abstract_cmd[255:128]$292 [126], 3'h0, \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [126], 7'h4c, \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [126], 3'h0, \$abstract_cmd[255:128]$292 [126], 4'h0, \$abstract_cmd[255:128]$292 [126], 1'h0, \$abstract_cmd[255:128]$292 [126], 7'h00, \$abstract_cmd[255:128]$292 [126], 10'h0c0, \$abstract_cmd[255:128]$292 [126], 2'h0, \$abstract_cmd[255:128]$292 [126], 3'h0, \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [126], 6'h26, \$abstract_cmd[255:128]$292 [29], \$abstract_cmd[255:128]$292 [29], 1'h0, \$abstract_cmd[255:128]$292 [30], 1'h0, \$abstract_cmd[255:128]$292 [29], 7'h00, \$abstract_cmd[255:128]$292 [30:29], 3'h3 };
  assign { \$abstract_cmd[255:128]$295 [127], \$abstract_cmd[255:128]$295 [125:96], \$abstract_cmd[255:128]$295 [83:81], \$abstract_cmd[255:128]$295 [79], \$abstract_cmd[255:128]$295 [75:71], \$abstract_cmd[255:128]$295 [69], \$abstract_cmd[255:128]$295 [67:64], \$abstract_cmd[255:128]$295 [51:47], \$abstract_cmd[255:128]$295 [43:37], \$abstract_cmd[255:128]$295 [35:31], \$abstract_cmd[255:128]$295 [28:25], \$abstract_cmd[255:128]$295 [19:17], \$abstract_cmd[255:128]$295 [15], \$abstract_cmd[255:128]$295 [6], \$abstract_cmd[255:128]$295 [3], \$abstract_cmd[255:128]$295 [1:0] } = { 1'h0, \$abstract_cmd[255:128]$295 [126], \$abstract_cmd[255:128]$295 [126], \$abstract_cmd[255:128]$295 [126], 1'h0, \$abstract_cmd[255:128]$295 [126], \$abstract_cmd[255:128]$295 [126], 2'h0, \$abstract_cmd[255:128]$295 [126], 7'h00, \$abstract_cmd[255:128]$295 [126], 2'h0, \$abstract_cmd[255:128]$295 [126], 3'h0, \$abstract_cmd[255:128]$295 [126], \$abstract_cmd[255:128]$295 [126], 6'h26, \$abstract_cmd[255:128]$295 [126], 7'h00, \$abstract_cmd[255:128]$295 [126], 5'h06, \$abstract_cmd[255:128]$295 [70], 1'h0, \$abstract_cmd[255:128]$295 [70], 2'h0, \$abstract_cmd[255:128]$295 [126], 3'h0, \$abstract_cmd[255:128]$295 [80], \$abstract_cmd[255:128]$295 [80], 5'h06, \$abstract_cmd[255:128]$295 [29], \$abstract_cmd[255:128]$295 [29], 1'h0, \$abstract_cmd[255:128]$295 [30], 1'h0, \$abstract_cmd[255:128]$295 [29], 2'h0, \$abstract_cmd[255:128]$295 [30], 3'h3 };
  assign { \$abstract_cmd[319:288]$301 [31:21], \$abstract_cmd[319:288]$301 [19:0] } = { 24'h000000, \$abstract_cmd[319:288]$301 [20], \$abstract_cmd[319:288]$301 [20], 5'h13 };
  assign \$abstract_cmd[31:0]$254 [29:0] = { \$abstract_cmd[31:0]$254 [30], \$abstract_cmd[31:0]$254 [30], \$abstract_cmd[31:0]$254 [30], 1'h0, \$abstract_cmd[31:0]$254 [30], \$abstract_cmd[31:0]$254 [30], 2'h0, \$abstract_cmd[31:0]$254 [30], 2'h2, \$abstract_cmd[31:0]$254 [30], 1'h0, \$abstract_cmd[31:0]$254 [30], 3'h0, \$abstract_cmd[31:0]$254 [30], 12'h073 };
  assign { \$abstract_cmd[31:0]$291 [31], \$abstract_cmd[31:0]$291 [29:21], \$abstract_cmd[31:0]$291 [19:0] } = { 1'h0, \$abstract_cmd[31:0]$291 [30], \$abstract_cmd[31:0]$291 [30], \$abstract_cmd[31:0]$291 [30], 1'h0, \$abstract_cmd[31:0]$291 [30], \$abstract_cmd[31:0]$291 [30], 2'h0, \$abstract_cmd[31:0]$291 [30], 1'h0, \$abstract_cmd[31:0]$291 [30], 1'h0, \$abstract_cmd[31:0]$291 [30], 3'h0, \$abstract_cmd[31:0]$291 [30], 5'h00, \$abstract_cmd[31:0]$291 [20], \$abstract_cmd[31:0]$291 [20], \$abstract_cmd[31:0]$291 [20], 2'h0, \$abstract_cmd[31:0]$291 [20], \$abstract_cmd[31:0]$291 [20] };
  assign { \$abstract_cmd[31:0]$294 [31], \$abstract_cmd[31:0]$294 [29:21], \$abstract_cmd[31:0]$294 [19:0] } = { 1'h0, \$abstract_cmd[31:0]$294 [30], \$abstract_cmd[31:0]$294 [30], \$abstract_cmd[31:0]$294 [30], 1'h0, \$abstract_cmd[31:0]$294 [30], \$abstract_cmd[31:0]$294 [30], 2'h0, \$abstract_cmd[31:0]$294 [30], 1'h0, \$abstract_cmd[31:0]$294 [30], 1'h0, \$abstract_cmd[31:0]$294 [30], 3'h0, \$abstract_cmd[31:0]$294 [30], 5'h00, \$abstract_cmd[31:0]$294 [20], \$abstract_cmd[31:0]$294 [20], \$abstract_cmd[31:0]$294 [20], 2'h0, \$abstract_cmd[31:0]$294 [20], \$abstract_cmd[31:0]$294 [20] };
  assign { \$auto$rtlil.cc:3092:Mux$1280 [51], \$auto$rtlil.cc:3092:Mux$1280 [49:47], \$auto$rtlil.cc:3092:Mux$1280 [43], \$auto$rtlil.cc:3092:Mux$1280 [41], \$auto$rtlil.cc:3092:Mux$1280 [39], \$auto$rtlil.cc:3092:Mux$1280 [37], \$auto$rtlil.cc:3092:Mux$1280 [35], \$auto$rtlil.cc:3092:Mux$1280 [32], \$auto$rtlil.cc:3092:Mux$1280 [19], \$auto$rtlil.cc:3092:Mux$1280 [17], \$auto$rtlil.cc:3092:Mux$1280 [15], \$auto$rtlil.cc:3092:Mux$1280 [3], \$auto$rtlil.cc:3092:Mux$1280 [0] } = { 2'h0, \$auto$rtlil.cc:3092:Mux$1280 [50], 4'h0, \$auto$rtlil.cc:3092:Mux$1280 [38], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [33], 4'h0, \$auto$rtlil.cc:3092:Mux$1280 [1] };
  assign \$auto$wreduce.cc:514:run$16992 [1] = 1'hx;
  assign { \$auto$wreduce.cc:514:run$16995 [63:10], \$auto$wreduce.cc:514:run$16995 [7:2] } = 60'h000000000000000;
  assign { \$auto$wreduce.cc:514:run$16996 [63:27], \$auto$wreduce.cc:514:run$16996 [25], \$auto$wreduce.cc:514:run$16996 [23:0] } = { 38'h0000000001, \$auto$wreduce.cc:514:run$16996 [24], 23'h00006f };
  assign \$auto$wreduce.cc:514:run$16997 [1] = 1'hx;
  assign \$auto$wreduce.cc:514:run$16998 [1] = 1'hx;
  assign \$auto$wreduce.cc:514:run$16999 [1] = 1'hx;
  assign \$auto$wreduce.cc:514:run$17000 [1] = 1'hx;
  assign \$cmderror_o$14 [1:0] = 2'h0;
  assign \$cmderror_o$51 [1:0] = 2'h0;
  assign \$cmderror_o$56 [0] = 1'h0;
  assign { \$procmux$8829_Y [63:31], \$procmux$8829_Y [29:27], \$procmux$8829_Y [22:0] } = { 34'h000000000, \$procmux$8829_Y [30], 24'h00006f };
  assign { abstract_cmd[307:255], abstract_cmd[253:224], abstract_cmd[211:209], abstract_cmd[207], abstract_cmd[203:199], abstract_cmd[197], abstract_cmd[195:192], abstract_cmd[179:175], abstract_cmd[171:165], abstract_cmd[163:159], abstract_cmd[156:153], abstract_cmd[147:145], abstract_cmd[143], abstract_cmd[134], abstract_cmd[131], abstract_cmd[129:31], abstract_cmd[29:21], abstract_cmd[19:0] } = { 13'h0000, abstract_cmd[308], abstract_cmd[308], 38'h26f6604ae6, abstract_cmd[254], abstract_cmd[254], abstract_cmd[254], 1'h0, abstract_cmd[254], abstract_cmd[254], 2'h0, abstract_cmd[254], 7'h00, abstract_cmd[254], 2'h0, abstract_cmd[254], 3'h0, abstract_cmd[254], abstract_cmd[254], 6'h26, abstract_cmd[254], 7'h00, abstract_cmd[254], 5'h06, abstract_cmd[198], 1'h0, abstract_cmd[198], 2'h0, abstract_cmd[254], 3'h0, abstract_cmd[208], abstract_cmd[208], 5'h06, abstract_cmd[157], abstract_cmd[157], 1'h0, abstract_cmd[158], 1'h0, abstract_cmd[157], 2'h0, abstract_cmd[158], 100'h6018a2a26018aaa2600000a2e, abstract_cmd[30], abstract_cmd[30], abstract_cmd[30], 1'h0, abstract_cmd[30], abstract_cmd[30], 2'h0, abstract_cmd[30], 1'h0, abstract_cmd[30], 1'h0, abstract_cmd[30], 3'h0, abstract_cmd[30], 5'h00, abstract_cmd[20], abstract_cmd[20], abstract_cmd[20], 2'h0, abstract_cmd[20], abstract_cmd[20] };
  assign debug_req_o = haltreq_i;
  assign \$195 [9:0] = { addr_i[9:3], 3'h0 };
  assign { \$109 [30:10], \$109 [4:0] } = { \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], addr_i[6:2] };
  assign \$auto$rtlil.cc:3092:Mux$1274  = \$auto$bmuxmap.cc:84:execute$18920 ;
  assign { \$auto$rtlil.cc:3092:Mux$1280 [63:52], \$auto$rtlil.cc:3092:Mux$1280 [50], \$auto$rtlil.cc:3092:Mux$1280 [46:44], \$auto$rtlil.cc:3092:Mux$1280 [42], \$auto$rtlil.cc:3092:Mux$1280 [40], \$auto$rtlil.cc:3092:Mux$1280 [38], \$auto$rtlil.cc:3092:Mux$1280 [36], \$auto$rtlil.cc:3092:Mux$1280 [34:33], \$auto$rtlil.cc:3092:Mux$1280 [31:20], \$auto$rtlil.cc:3092:Mux$1280 [18], \$auto$rtlil.cc:3092:Mux$1280 [16], \$auto$rtlil.cc:3092:Mux$1280 [14:4], \$auto$rtlil.cc:3092:Mux$1280 [2:1] } = \$auto$bmuxmap.cc:84:execute$18930 ;
endmodule

(* src = "rtl/riscv-dbg/dm_obi_top.sv:63.8" *)
module \dm_obi_top$croc_chip.i_croc_soc.i_croc.i_dm_top (clk_i, rst_ni, testmode_i, debug_req_o, unavailable_i, hartinfo_i, slave_req_i, slave_gnt_o, slave_we_i, slave_addr_i, slave_be_i, slave_wdata_i, slave_aid_i, slave_rvalid_o, slave_rdata_o, slave_rid_o, master_req_o, master_addr_o, master_we_o, master_wdata_o, master_be_o
, master_gnt_i, master_rvalid_i, master_err_i, master_other_err_i, master_rdata_i, dmi_rst_ni, dmi_req_valid_i, dmi_req_ready_o, dmi_req_i, dmi_resp_valid_o, dmi_resp_ready_i, dmi_resp_o, ndmreset_o, dmactive_o);
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:72.33" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:78.33" *)
  output debug_req_o;
  wire debug_req_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:77.33" *)
  output dmactive_o;
  wire dmactive_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:113.33" *)
  input [40:0] dmi_req_i;
  wire [40:0] dmi_req_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:112.33" *)
  output dmi_req_ready_o;
  wire dmi_req_ready_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:111.33" *)
  input dmi_req_valid_i;
  wire dmi_req_valid_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:117.33" *)
  output [33:0] dmi_resp_o;
  wire [33:0] dmi_resp_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:116.33" *)
  input dmi_resp_ready_i;
  wire dmi_resp_ready_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:115.33" *)
  output dmi_resp_valid_o;
  wire dmi_resp_valid_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:110.33" *)
  input dmi_rst_ni;
  wire dmi_rst_ni;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:81.40" *)
  input [31:0] hartinfo_i;
  wire [31:0] hartinfo_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:99.33" *)
  output [31:0] master_addr_o;
  wire [31:0] master_addr_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:102.33" *)
  output [3:0] master_be_o;
  wire [3:0] master_be_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:105.33" *)
  input master_err_i;
  wire master_err_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:103.33" *)
  input master_gnt_i;
  wire master_gnt_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:106.33" *)
  input master_other_err_i;
  wire master_other_err_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:107.33" *)
  input [31:0] master_rdata_i;
  wire [31:0] master_rdata_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:98.33" *)
  output master_req_o;
  wire master_req_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:104.33" *)
  input master_rvalid_i;
  wire master_rvalid_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:101.33" *)
  output [31:0] master_wdata_o;
  wire [31:0] master_wdata_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:100.33" *)
  output master_we_o;
  wire master_we_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:76.33" *)
  output ndmreset_o;
  wire ndmreset_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:74.33" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:87.33" *)
  input [31:0] slave_addr_i;
  wire [31:0] slave_addr_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:91.33" *)
  input [2:0] slave_aid_i;
  wire [2:0] slave_aid_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:88.33" *)
  input [3:0] slave_be_i;
  wire [3:0] slave_be_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:85.33" *)
  output slave_gnt_o;
  wire slave_gnt_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:94.33" *)
  output [31:0] slave_rdata_o;
  wire [31:0] slave_rdata_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:83.33" *)
  input slave_req_i;
  wire slave_req_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:96.33" *)
  output [2:0] slave_rid_o;
  reg [2:0] slave_rid_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:93.33" *)
  output slave_rvalid_o;
  reg slave_rvalid_o;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:89.33" *)
  input [31:0] slave_wdata_i;
  wire [31:0] slave_wdata_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:86.33" *)
  input slave_we_i;
  wire slave_we_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:75.33" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:80.33" *)
  input unavailable_i;
  wire unavailable_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:175.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) slave_rid_o <= 3'h0;
    else if (slave_req_i) slave_rid_o <= slave_aid_i;
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:175.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) slave_rvalid_o <= 1'h0;
    else slave_rvalid_o <= slave_req_i;
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/riscv-dbg/dm_obi_top.sv:130.5" *)
  \dm_top$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top  i_dm_top (
    .clk_i(clk_i),
    .debug_req_o(debug_req_o),
    .dmactive_o(dmactive_o),
    .dmi_req_i(dmi_req_i),
    .dmi_req_ready_o(dmi_req_ready_o),
    .dmi_req_valid_i(dmi_req_valid_i),
    .dmi_resp_o(dmi_resp_o),
    .dmi_resp_ready_i(dmi_resp_ready_i),
    .dmi_resp_valid_o(dmi_resp_valid_o),
    .dmi_rst_ni(dmi_rst_ni),
    .hartinfo_i(hartinfo_i),
    .master_add_o(master_addr_o),
    .master_be_o(master_be_o),
    .master_gnt_i(master_gnt_i),
    .master_r_err_i(master_err_i),
    .master_r_other_err_i(master_other_err_i),
    .master_r_rdata_i(master_rdata_i),
    .master_r_valid_i(master_rvalid_i),
    .master_req_o(master_req_o),
    .master_wdata_o(master_wdata_o),
    .master_we_o(master_we_o),
    .ndmreset_ack_i(ndmreset_o),
    .ndmreset_o(ndmreset_o),
    .next_dm_addr_i(32'd0),
    .rst_ni(rst_ni),
    .slave_addr_i(slave_addr_i),
    .slave_be_i(slave_be_i),
    .slave_rdata_o(slave_rdata_o),
    .slave_req_i(slave_req_i),
    .slave_wdata_i(slave_wdata_i),
    .slave_we_i(slave_we_i),
    .testmode_i(testmode_i),
    .unavailable_i(unavailable_i)
  );
  assign slave_gnt_o = 1'h1;
endmodule

(* src = "rtl/riscv-dbg/dm_sba.sv:18.8" *)
module \dm_sba$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_sba (clk_i, rst_ni, master_req_o, master_we_o, master_wdata_o, master_be_o, master_gnt_i, master_add_o, master_r_valid_i, master_r_err_i, master_r_other_err_i, master_r_rdata_i, sbaddress_o, sbaddress_i, sbdata_o, sbdata_i, dmactive_i, sbaddress_write_valid_i, sbreadonaddr_i, sbautoincrement_i, sbaccess_i
, sbreadondata_i, sbdata_read_valid_i, sbdata_write_valid_i, sbdata_valid_o, sbbusy_o, sberror_valid_o, sberror_o);
  wire [32:0] \$10 ;
  wire [3:0] \$12 ;
  wire [3:0] \$16 ;
  wire [31:0] \$24 ;
  wire \$30 ;
  wire \$34 ;
  wire \$63 ;
  wire \$67 ;
  wire [31:0] \$73 ;
  wire [31:0] \$75 ;
  wire \$77 ;
  wire \$81 ;
  (* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12" *)
  wire \$addr_incr_en$44 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17962 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17964 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17966 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17968 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17970 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16860 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16864 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16904 ;
  wire [3:0] \$auto$rtlil.cc:3004:And$16656 ;
  wire [3:0] \$auto$rtlil.cc:3004:And$16658 ;
  wire [2:0] \$procmux$9491_Y ;
  wire \$procmux$9494_Y ;
  wire \$procmux$9497_Y ;
  wire [2:0] \$procmux$9500_Y ;
  wire \$procmux$9512_CMP ;
  wire [2:0] \$procmux$9526_Y ;
  wire \$procmux$9535_Y ;
  wire [2:0] \$procmux$9543_Y ;
  wire \$procmux$9549_Y ;
  wire \$procmux$9575_CMP ;
  wire \$procmux$9649_CMP ;
  wire [2:0] \$procmux$9658_Y ;
  wire \$procmux$9669_CMP ;
  wire [2:0] \$procmux$9675_Y ;
  wire [2:0] \$procmux$9686_Y ;
  wire [2:0] \$procmux$9702_Y ;
  wire \$procmux$9708_Y ;
  wire \$procmux$9743_CMP ;
  wire \$procmux$9746_CMP ;
  wire \$procmux$9748_CMP ;
  wire \$procmux$9749_CMP ;
  (* src = "rtl/riscv-dbg/dm_sba.sv:95.24" *)
  wire [31:0] addr_incr;
  (* src = "rtl/riscv-dbg/dm_sba.sv:94.9" *)
  wire addr_incr_en;
  (* src = "rtl/riscv-dbg/dm_sba.sv:200.26" *)
  wire [1:0] be_idx_masked;
  (* src = "rtl/riscv-dbg/dm_sba.sv:66.34" *)
  wire [3:0] be_mask;
  (* src = "rtl/riscv-dbg/dm_sba.sv:22.34" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:24.34" *)
  input dmactive_i;
  wire dmactive_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:27.34" *)
  output [31:0] master_add_o;
  wire [31:0] master_add_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:30.34" *)
  output [3:0] master_be_o;
  wire [3:0] master_be_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:31.34" *)
  input master_gnt_i;
  wire master_gnt_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:33.34" *)
  input master_r_err_i;
  wire master_r_err_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:34.34" *)
  input master_r_other_err_i;
  wire master_r_other_err_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:35.34" *)
  input [31:0] master_r_rdata_i;
  wire [31:0] master_r_rdata_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:32.34" *)
  input master_r_valid_i;
  wire master_r_valid_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:26.34" *)
  output master_req_o;
  wire master_req_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:29.34" *)
  output [31:0] master_wdata_o;
  wire [31:0] master_wdata_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:28.34" *)
  output master_we_o;
  wire master_we_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:23.34" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/riscv-dbg/dm_sba.sv:43.34" *)
  input [2:0] sbaccess_i;
  wire [2:0] sbaccess_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:91.24" *)
  wire [31:0] sbaccess_mask;
  (* src = "rtl/riscv-dbg/dm_sba.sv:37.34" *)
  input [31:0] sbaddress_i;
  wire [31:0] sbaddress_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:41.34" *)
  output [31:0] sbaddress_o;
  wire [31:0] sbaddress_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:38.34" *)
  input sbaddress_write_valid_i;
  wire sbaddress_write_valid_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:42.34" *)
  input sbautoincrement_i;
  wire sbautoincrement_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:53.34" *)
  output sbbusy_o;
  wire sbbusy_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:46.34" *)
  input [31:0] sbdata_i;
  wire [31:0] sbdata_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:50.34" *)
  output [31:0] sbdata_o;
  wire [31:0] sbdata_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:47.34" *)
  input sbdata_read_valid_i;
  wire sbdata_read_valid_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:51.34" *)
  output sbdata_valid_o;
  wire sbdata_valid_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:48.34" *)
  input sbdata_write_valid_i;
  wire sbdata_write_valid_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:55.34" *)
  output [2:0] sberror_o;
  wire [2:0] sberror_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:54.34" *)
  output sberror_valid_o;
  wire sberror_valid_o;
  (* src = "rtl/riscv-dbg/dm_sba.sv:40.34" *)
  input sbreadonaddr_i;
  wire sbreadonaddr_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:45.34" *)
  input sbreadondata_i;
  wire sbreadondata_i;
  (* src = "rtl/riscv-dbg/dm_sba.sv:59.19" *)
  wire [2:0] state_d;
  (* src = "rtl/riscv-dbg/dm_sba.sv:59.28" *)
  reg [2:0] state_q;
  assign \$12  = $signed(\$10 ) < 0 ? 2'h3 << - \$10  : 2'h3 >> \$10 ;
  assign \$10  = - $signed({ sbaddress_i[1], 1'h0 });
  wire [1:0] _0_ = 2'h3;
  assign \$16  = _0_[$signed(\$10 ) +: 4];
  assign sbaccess_mask = 32'd4294967295 << sbaccess_i;
  assign \$24  = 1'h1 << sbaccess_i;
  assign addr_incr = addr_incr_en ? \$24  : 32'd0;
  assign sbaddress_o = sbaddress_i + addr_incr;
  assign \$30  = sbaddress_write_valid_i && sbreadonaddr_i;
  assign \$34  = sbdata_read_valid_i && sbreadondata_i;
  assign \$63  = sbaccess_i > 2'h2;
  assign sbbusy_o = | state_q;
  assign \$67  = \$63  && sbbusy_o;
  assign \$73  = ~ sbaccess_mask;
  assign \$75  = sbaddress_i & \$73 ;
  assign \$77  = | \$75 ;
  assign \$81  = \$77  && sbbusy_o;
  assign be_idx_masked = sbaddress_i[1:0] & sbaccess_mask[1:0];
  assign master_wdata_o = sbdata_i << { be_idx_masked, 3'h0 };
  assign sbdata_o = master_r_rdata_i >> { be_idx_masked, 3'h0 };
  assign \$auto$rtlil.cc:3004:And$16656 [0] = sbaddress_i[1:0] == 2'h0;
  assign \$auto$rtlil.cc:3004:And$16656 [1] = sbaddress_i[1:0] == 2'h1;
  assign \$auto$rtlil.cc:3004:And$16656 [2] = sbaddress_i[1:0] == 2'h2;
  assign \$auto$rtlil.cc:3004:And$16656 [3] = sbaddress_i[1:0] == 2'h3;
  (* src = "rtl/riscv-dbg/dm_sba.sv:192.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 3'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17970 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17962  = { master_we_o, \$81 , \$67 , master_gnt_i } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17964  = { \$procmux$9649_CMP , \$81 , \$67 , master_gnt_i } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17966  = { \$auto$opt_reduce.cc:137:opt_pmux$16904 , \$81 , master_r_valid_i, \$67  } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17968  = { \$procmux$9669_CMP , sbdata_write_valid_i, \$81 , \$34 , \$30 , \$67  } != 6'h20;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17970  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17968 , \$auto$opt_dff.cc:194:make_patterns_logic$17966 , \$auto$opt_dff.cc:194:make_patterns_logic$17964 , \$auto$opt_dff.cc:194:make_patterns_logic$17962  };
  assign \$auto$rtlil.cc:3004:And$16658  = \$16  & \$12 ;
  assign \$auto$opt_reduce.cc:137:opt_pmux$16860  = | { \$procmux$9649_CMP , master_we_o };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16864  = | { \$procmux$9746_CMP , \$procmux$9743_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16904  = | { \$procmux$9575_CMP , \$procmux$9512_CMP  };
  assign sberror_o = \$81  ? (* src = "rtl/riscv-dbg/dm_sba.sv:183.65-188.8|rtl/riscv-dbg/dm_sba.sv:183.5-188.8" *) 3'h3 : \$procmux$9491_Y ;
  assign sberror_valid_o = \$procmux$9494_Y  | (* src = "rtl/riscv-dbg/dm_sba.sv:183.65-188.8|rtl/riscv-dbg/dm_sba.sv:183.5-188.8" *) \$81 ;
  assign master_req_o = \$81  ? (* src = "rtl/riscv-dbg/dm_sba.sv:183.65-188.8|rtl/riscv-dbg/dm_sba.sv:183.5-188.8" *) 1'h0 : \$procmux$9497_Y ;
  assign state_d = \$81  ? (* src = "rtl/riscv-dbg/dm_sba.sv:183.65-188.8|rtl/riscv-dbg/dm_sba.sv:183.5-188.8" *) 3'h0 : \$procmux$9500_Y ;
  assign \$procmux$9491_Y  = \$67  ? (* src = "rtl/riscv-dbg/dm_sba.sv:175.62-180.8|rtl/riscv-dbg/dm_sba.sv:175.5-180.8" *) 3'h4 : { \$procmux$9702_Y [2:1], \$procmux$9702_Y [2] };
  assign \$procmux$9494_Y  = \$procmux$9708_Y  | (* src = "rtl/riscv-dbg/dm_sba.sv:175.62-180.8|rtl/riscv-dbg/dm_sba.sv:175.5-180.8" *) \$67 ;
  assign \$procmux$9497_Y  = \$67  ? (* src = "rtl/riscv-dbg/dm_sba.sv:175.62-180.8|rtl/riscv-dbg/dm_sba.sv:175.5-180.8" *) 1'h0 : \$auto$opt_reduce.cc:137:opt_pmux$16860 ;
  assign \$procmux$9500_Y  = \$67  ? (* src = "rtl/riscv-dbg/dm_sba.sv:175.62-180.8|rtl/riscv-dbg/dm_sba.sv:175.5-180.8" *) 3'h0 : \$procmux$9658_Y ;
  assign \$procmux$9512_CMP  = state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" *) 3'h4;
  assign \$procmux$9549_Y  = master_r_valid_i & (* src = "rtl/riscv-dbg/dm_sba.sv:155.29-168.12|rtl/riscv-dbg/dm_sba.sv:155.9-168.12" *) \$procmux$9535_Y ;
  assign \$addr_incr_en$44  = master_r_valid_i & (* src = "rtl/riscv-dbg/dm_sba.sv:155.29-168.12|rtl/riscv-dbg/dm_sba.sv:155.9-168.12" *) sbautoincrement_i;
  assign \$procmux$9575_CMP  = state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" *) 2'h3;
  assign { \$procmux$9526_Y [1], \$procmux$9526_Y [2] } = master_r_other_err_i ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:143.37-147.14|rtl/riscv-dbg/dm_sba.sv:143.11-150.14" *) 2'h3 : { master_r_err_i, 1'h0 };
  assign \$procmux$9535_Y  = master_r_err_i | (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:143.37-147.14|rtl/riscv-dbg/dm_sba.sv:143.11-150.14" *) master_r_other_err_i;
  assign { \$procmux$9543_Y [1], \$procmux$9543_Y [2] } = master_r_valid_i ? (* src = "rtl/riscv-dbg/dm_sba.sv:138.29-151.12|rtl/riscv-dbg/dm_sba.sv:138.9-151.12" *) { \$procmux$9526_Y [1], \$procmux$9526_Y [2] } : 2'h0;
  assign master_we_o = state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:130.18-135.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" *) 2'h2;
  assign \$procmux$9649_CMP  = state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:124.17-128.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" *) 1'h1;
  function [2:0] \$procmux$9658 ;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$9658  = b[2:0];
      3'b?1?:
        \$procmux$9658  = b[5:3];
      3'b1??:
        \$procmux$9658  = b[8:6];
      default:
        \$procmux$9658  = a;
    endcase
  endfunction
  assign \$procmux$9658_Y  = \$procmux$9658 (3'h0, { 1'h0, \$procmux$9675_Y [1:0], 6'h1c }, { \$procmux$9669_CMP , \$procmux$9649_CMP , master_we_o });
  assign \$procmux$9669_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:115.17-122.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" *) state_q;
  assign \$procmux$9675_Y [1:0] = \$34  ? (* src = "rtl/riscv-dbg/dm_sba.sv:121.52-121.71|rtl/riscv-dbg/dm_sba.sv:121.9-121.71" *) 2'h1 : \$procmux$9686_Y [1:0];
  assign \$procmux$9686_Y [1:0] = sbdata_write_valid_i ? (* src = "rtl/riscv-dbg/dm_sba.sv:119.35-119.55|rtl/riscv-dbg/dm_sba.sv:119.9-119.55" *) 2'h2 : 2'h1;
  assign { \$procmux$9702_Y [1], \$procmux$9702_Y [2] } = \$auto$opt_reduce.cc:137:opt_pmux$16904  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" *) { \$procmux$9543_Y [1], \$procmux$9543_Y [2] } : 2'h0;
  assign \$procmux$9708_Y  = \$auto$opt_reduce.cc:137:opt_pmux$16904  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" *) \$procmux$9549_Y ;
  assign addr_incr_en = \$auto$opt_reduce.cc:137:opt_pmux$16904  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" *) \$addr_incr_en$44 ;
  assign master_be_o = \$auto$opt_reduce.cc:137:opt_pmux$16860  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:130.18-135.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" *) be_mask : 4'h0;
  assign \$procmux$9743_CMP  = sbaccess_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:83.9-84.46|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" *) 2'h2;
  function [3:0] \$procmux$9745 ;
    input [3:0] a;
    input [11:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dm_sba.sv:86.15-86.28|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$9745  = b[3:0];
      3'b?1?:
        \$procmux$9745  = b[7:4];
      3'b1??:
        \$procmux$9745  = b[11:8];
      default:
        \$procmux$9745  = a;
    endcase
  endfunction
  assign be_mask = \$procmux$9745 (4'h0, { \$auto$rtlil.cc:3004:And$16656 , \$auto$rtlil.cc:3004:And$16658 , 4'hf }, { \$procmux$9749_CMP , \$procmux$9748_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16864  });
  assign \$procmux$9746_CMP  = sbaccess_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:86.15-86.28|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" *) 2'h3;
  assign \$procmux$9748_CMP  = sbaccess_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:80.9-80.66|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" *) 1'h1;
  assign \$procmux$9749_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dm_sba.sv:77.9-77.30|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" *) sbaccess_i;
  assign \$procmux$9526_Y [0] = \$procmux$9526_Y [2];
  assign \$procmux$9543_Y [0] = \$procmux$9543_Y [2];
  assign \$procmux$9675_Y [2] = 1'h0;
  assign \$procmux$9686_Y [2] = 1'h0;
  assign \$procmux$9702_Y [0] = \$procmux$9702_Y [2];
  assign master_add_o = sbaddress_i;
  assign sbdata_valid_o = master_r_valid_i;
endmodule

(* src = "rtl/riscv-dbg/dm_top.sv:20.8" *)
module \dm_top$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top (clk_i, rst_ni, testmode_i, debug_req_o, unavailable_i, hartinfo_i, slave_req_i, slave_we_i, slave_addr_i, slave_be_i, slave_wdata_i, slave_rdata_o, master_req_o, master_we_o, master_wdata_o, master_be_o, master_gnt_i, dmi_rst_ni, dmi_req_valid_i, dmi_req_ready_o, dmi_req_i
, dmi_resp_valid_o, dmi_resp_ready_i, dmi_resp_o, ndmreset_o, dmactive_o, next_dm_addr_i, ndmreset_ack_i, master_add_o, master_r_valid_i, master_r_err_i, master_r_other_err_i, master_r_rdata_i);
  (* src = "rtl/riscv-dbg/dm_top.sv:85.37" *)
  wire clear_resumeack;
  (* src = "rtl/riscv-dbg/dm_top.sv:30.33" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:87.37" *)
  wire [31:0] cmd;
  (* src = "rtl/riscv-dbg/dm_top.sv:86.37" *)
  wire cmd_valid;
  (* src = "rtl/riscv-dbg/dm_top.sv:91.37" *)
  wire cmdbusy;
  (* src = "rtl/riscv-dbg/dm_top.sv:90.37" *)
  wire [2:0] cmderror;
  (* src = "rtl/riscv-dbg/dm_top.sv:89.37" *)
  wire cmderror_valid;
  (* src = "rtl/riscv-dbg/dm_top.sv:93.37" *)
  wire [63:0] data_csrs_mem;
  (* src = "rtl/riscv-dbg/dm_top.sv:94.37" *)
  wire [63:0] data_mem_csrs;
  (* src = "rtl/riscv-dbg/dm_top.sv:95.37" *)
  wire data_valid;
  (* src = "rtl/riscv-dbg/dm_top.sv:43.33" *)
  output debug_req_o;
  wire debug_req_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:42.33" *)
  output dmactive_o;
  wire dmactive_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:72.33" *)
  input [40:0] dmi_req_i;
  wire [40:0] dmi_req_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:71.33" *)
  output dmi_req_ready_o;
  wire dmi_req_ready_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:70.33" *)
  input dmi_req_valid_i;
  wire dmi_req_valid_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:76.33" *)
  output [33:0] dmi_resp_o;
  wire [33:0] dmi_resp_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:75.33" *)
  input dmi_resp_ready_i;
  wire dmi_resp_ready_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:74.33" *)
  output dmi_resp_valid_o;
  wire dmi_resp_valid_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:67.33" *)
  input dmi_rst_ni;
  wire dmi_rst_ni;
  (* src = "rtl/riscv-dbg/dm_top.sv:80.37" *)
  wire halted;
  (* src = "rtl/riscv-dbg/dm_top.sv:83.37" *)
  wire haltreq;
  (* src = "rtl/riscv-dbg/dm_top.sv:46.39" *)
  input [31:0] hartinfo_i;
  wire [31:0] hartinfo_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:97.37" *)
  wire [19:0] hartsel;
  (* src = "rtl/riscv-dbg/dm_top.sv:56.33" *)
  output [31:0] master_add_o;
  wire [31:0] master_add_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:59.33" *)
  output [3:0] master_be_o;
  wire [3:0] master_be_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:60.33" *)
  input master_gnt_i;
  wire master_gnt_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:62.33" *)
  input master_r_err_i;
  wire master_r_err_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:63.33" *)
  input master_r_other_err_i;
  wire master_r_other_err_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:64.33" *)
  input [31:0] master_r_rdata_i;
  wire [31:0] master_r_rdata_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:61.33" *)
  input master_r_valid_i;
  wire master_r_valid_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:55.33" *)
  output master_req_o;
  wire master_req_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:58.33" *)
  output [31:0] master_wdata_o;
  wire [31:0] master_wdata_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:57.33" *)
  output master_we_o;
  wire master_we_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:41.33" *)
  input ndmreset_ack_i;
  wire ndmreset_ack_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:40.33" *)
  output ndmreset_o;
  wire ndmreset_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:38.33" *)
  input [31:0] next_dm_addr_i;
  wire [31:0] next_dm_addr_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:92.37" *)
  wire [255:0] progbuf;
  (* src = "rtl/riscv-dbg/dm_top.sv:82.37" *)
  wire resumeack;
  (* src = "rtl/riscv-dbg/dm_top.sv:84.37" *)
  wire resumereq;
  (* src = "rtl/riscv-dbg/dm_top.sv:32.33" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/riscv-dbg/dm_top.sv:104.37" *)
  wire [2:0] sbaccess;
  (* src = "rtl/riscv-dbg/dm_top.sv:99.37" *)
  wire [31:0] sbaddress_csrs_sba;
  (* src = "rtl/riscv-dbg/dm_top.sv:100.37" *)
  wire [31:0] sbaddress_sba_csrs;
  (* src = "rtl/riscv-dbg/dm_top.sv:101.37" *)
  wire sbaddress_write_valid;
  (* src = "rtl/riscv-dbg/dm_top.sv:103.37" *)
  wire sbautoincrement;
  (* src = "rtl/riscv-dbg/dm_top.sv:111.37" *)
  wire sbbusy;
  (* src = "rtl/riscv-dbg/dm_top.sv:109.37" *)
  wire [31:0] sbdata_read;
  (* src = "rtl/riscv-dbg/dm_top.sv:107.37" *)
  wire sbdata_read_valid;
  (* src = "rtl/riscv-dbg/dm_top.sv:110.37" *)
  wire sbdata_valid;
  (* src = "rtl/riscv-dbg/dm_top.sv:106.37" *)
  wire [31:0] sbdata_write;
  (* src = "rtl/riscv-dbg/dm_top.sv:108.37" *)
  wire sbdata_write_valid;
  (* src = "rtl/riscv-dbg/dm_top.sv:113.37" *)
  wire [2:0] sberror;
  (* src = "rtl/riscv-dbg/dm_top.sv:112.37" *)
  wire sberror_valid;
  (* src = "rtl/riscv-dbg/dm_top.sv:102.37" *)
  wire sbreadonaddr;
  (* src = "rtl/riscv-dbg/dm_top.sv:105.37" *)
  wire sbreadondata;
  (* src = "rtl/riscv-dbg/dm_top.sv:50.33" *)
  input [31:0] slave_addr_i;
  wire [31:0] slave_addr_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:51.33" *)
  input [3:0] slave_be_i;
  wire [3:0] slave_be_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:53.33" *)
  output [31:0] slave_rdata_o;
  wire [31:0] slave_rdata_o;
  (* src = "rtl/riscv-dbg/dm_top.sv:48.33" *)
  input slave_req_i;
  wire slave_req_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:52.33" *)
  input [31:0] slave_wdata_i;
  wire [31:0] slave_wdata_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:49.33" *)
  input slave_we_i;
  wire slave_we_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:39.33" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:45.33" *)
  input unavailable_i;
  wire unavailable_i;
  (* src = "rtl/riscv-dbg/dm_top.sv:121.5" *)
  \dm_csrs$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_csrs  i_dm_csrs (
    .clear_resumeack_o(clear_resumeack),
    .clk_i(clk_i),
    .cmd_o(cmd),
    .cmd_valid_o(cmd_valid),
    .cmdbusy_i(cmdbusy),
    .cmderror_i(cmderror),
    .cmderror_valid_i(cmderror_valid),
    .data_i(data_mem_csrs),
    .data_o(data_csrs_mem),
    .data_valid_i(data_valid),
    .dmactive_o(dmactive_o),
    .dmi_req_i(dmi_req_i),
    .dmi_req_ready_o(dmi_req_ready_o),
    .dmi_req_valid_i(dmi_req_valid_i),
    .dmi_resp_o(dmi_resp_o),
    .dmi_resp_ready_i(dmi_resp_ready_i),
    .dmi_resp_valid_o(dmi_resp_valid_o),
    .dmi_rst_ni(dmi_rst_ni),
    .halted_i(halted),
    .haltreq_o(haltreq),
    .hartinfo_i(hartinfo_i),
    .hartsel_o(hartsel),
    .ndmreset_ack_i(ndmreset_ack_i),
    .ndmreset_o(ndmreset_o),
    .next_dm_addr_i(next_dm_addr_i),
    .progbuf_o(progbuf),
    .resumeack_i(resumeack),
    .resumereq_o(resumereq),
    .rst_ni(rst_ni),
    .sbaccess_o(sbaccess),
    .sbaddress_i(sbaddress_sba_csrs),
    .sbaddress_o(sbaddress_csrs_sba),
    .sbaddress_write_valid_o(sbaddress_write_valid),
    .sbautoincrement_o(sbautoincrement),
    .sbbusy_i(sbbusy),
    .sbdata_i(sbdata_read),
    .sbdata_o(sbdata_write),
    .sbdata_read_valid_o(sbdata_read_valid),
    .sbdata_valid_i(sbdata_valid),
    .sbdata_write_valid_o(sbdata_write_valid),
    .sberror_i(sberror),
    .sberror_valid_i(sberror_valid),
    .sbreadonaddr_o(sbreadonaddr),
    .sbreadondata_o(sbreadondata),
    .testmode_i(testmode_i),
    .unavailable_i(unavailable_i)
  );
  (* src = "rtl/riscv-dbg/dm_top.sv:211.5" *)
  \dm_mem$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_mem  i_dm_mem (
    .addr_i(slave_addr_i),
    .be_i(slave_be_i),
    .clear_resumeack_i(clear_resumeack),
    .clk_i(clk_i),
    .cmd_i(cmd),
    .cmd_valid_i(cmd_valid),
    .cmdbusy_o(cmdbusy),
    .cmderror_o(cmderror),
    .cmderror_valid_o(cmderror_valid),
    .data_i(data_csrs_mem),
    .data_o(data_mem_csrs),
    .data_valid_o(data_valid),
    .debug_req_o(debug_req_o),
    .halted_o(halted),
    .haltreq_i(haltreq),
    .hartsel_i(hartsel),
    .ndmreset_i(ndmreset_o),
    .progbuf_i(progbuf),
    .rdata_o(slave_rdata_o),
    .req_i(slave_req_i),
    .resumereq_i(resumereq),
    .resuming_o(resumeack),
    .rst_ni(rst_ni),
    .wdata_i(slave_wdata_i),
    .we_i(slave_we_i)
  );
  (* src = "rtl/riscv-dbg/dm_top.sv:173.5" *)
  \dm_sba$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_sba  i_dm_sba (
    .clk_i(clk_i),
    .dmactive_i(dmactive_o),
    .master_add_o(master_add_o),
    .master_be_o(master_be_o),
    .master_gnt_i(master_gnt_i),
    .master_r_err_i(master_r_err_i),
    .master_r_other_err_i(master_r_other_err_i),
    .master_r_rdata_i(master_r_rdata_i),
    .master_r_valid_i(master_r_valid_i),
    .master_req_o(master_req_o),
    .master_wdata_o(master_wdata_o),
    .master_we_o(master_we_o),
    .rst_ni(rst_ni),
    .sbaccess_i(sbaccess),
    .sbaddress_i(sbaddress_csrs_sba),
    .sbaddress_o(sbaddress_sba_csrs),
    .sbaddress_write_valid_i(sbaddress_write_valid),
    .sbautoincrement_i(sbautoincrement),
    .sbbusy_o(sbbusy),
    .sbdata_i(sbdata_write),
    .sbdata_o(sbdata_read),
    .sbdata_read_valid_i(sbdata_read_valid),
    .sbdata_valid_o(sbdata_valid),
    .sbdata_write_valid_i(sbdata_write_valid),
    .sberror_o(sberror),
    .sberror_valid_o(sberror_valid),
    .sbreadonaddr_i(sbreadonaddr),
    .sbreadondata_i(sbreadondata)
  );
endmodule

(* src = "rtl/riscv-dbg/dmi_cdc.sv:19.8" *)
module \dmi_cdc$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc (clk_i, rst_ni, tck_i, trst_ni, jtag_dmi_req_i, jtag_dmi_ready_o, jtag_dmi_valid_i, jtag_dmi_cdc_clear_i, jtag_dmi_resp_o, jtag_dmi_valid_o, jtag_dmi_ready_i, core_dmi_rst_no, core_dmi_req_o, core_dmi_valid_o, core_dmi_ready_i, core_dmi_resp_i, core_dmi_ready_o, core_dmi_valid_i);
  wire \$1 ;
  wire \$8 ;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:98.28" *)
  wire clear_pending_rise_edge_detect;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:35.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:48.28" *)
  wire core_clear_pending;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:96.28" *)
  reg core_clear_pending_q;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:41.28" *)
  input core_dmi_ready_i;
  wire core_dmi_ready_i;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:44.28" *)
  output core_dmi_ready_o;
  wire core_dmi_ready_o;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:39.28" *)
  output [40:0] core_dmi_req_o;
  wire [40:0] core_dmi_req_o;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:43.28" *)
  input [33:0] core_dmi_resp_i;
  wire [33:0] core_dmi_resp_i;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:38.28" *)
  output core_dmi_rst_no;
  reg core_dmi_rst_no;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:45.28" *)
  input core_dmi_valid_i;
  wire core_dmi_valid_i;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:40.28" *)
  output core_dmi_valid_o;
  wire core_dmi_valid_o;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:26.28" *)
  input jtag_dmi_cdc_clear_i;
  wire jtag_dmi_cdc_clear_i;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:32.28" *)
  input jtag_dmi_ready_i;
  wire jtag_dmi_ready_i;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:24.28" *)
  output jtag_dmi_ready_o;
  wire jtag_dmi_ready_o;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:23.28" *)
  input [40:0] jtag_dmi_req_i;
  wire [40:0] jtag_dmi_req_i;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:30.28" *)
  output [33:0] jtag_dmi_resp_o;
  wire [33:0] jtag_dmi_resp_o;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:25.28" *)
  input jtag_dmi_valid_i;
  wire jtag_dmi_valid_i;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:31.28" *)
  output jtag_dmi_valid_o;
  wire jtag_dmi_valid_o;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:36.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:21.28" *)
  input tck_i;
  wire tck_i;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:22.28" *)
  input trst_ni;
  wire trst_ni;
  assign \$1  = ! core_clear_pending_q;
  assign clear_pending_rise_edge_detect = \$1  && core_clear_pending;
  assign \$8  = ~ clear_pending_rise_edge_detect;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:102.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) core_clear_pending_q <= 1'h0;
    else core_clear_pending_q <= core_clear_pending;
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:102.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) core_dmi_rst_no <= 1'h1;
    else core_dmi_rst_no <= \$8 ;
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:50.45" *)
  \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req  i_cdc_req (
    .dst_clear_i(1'h0),
    .dst_clear_pending_o(core_clear_pending),
    .dst_clk_i(clk_i),
    .dst_data_o(core_dmi_req_o),
    .dst_ready_i(core_dmi_ready_i),
    .dst_rst_ni(rst_ni),
    .dst_valid_o(core_dmi_valid_o),
    .src_clear_i(jtag_dmi_cdc_clear_i),
    .src_clk_i(tck_i),
    .src_data_i(jtag_dmi_req_i),
    .src_ready_o(jtag_dmi_ready_o),
    .src_rst_ni(trst_ni),
    .src_valid_i(jtag_dmi_valid_i)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/riscv-dbg/dmi_cdc.sv:72.46" *)
  \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp  i_cdc_resp (
    .dst_clear_i(jtag_dmi_cdc_clear_i),
    .dst_clk_i(tck_i),
    .dst_data_o(jtag_dmi_resp_o),
    .dst_ready_i(jtag_dmi_ready_i),
    .dst_rst_ni(trst_ni),
    .dst_valid_o(jtag_dmi_valid_o),
    .src_clear_i(1'h0),
    .src_clk_i(clk_i),
    .src_data_i(core_dmi_resp_i),
    .src_ready_o(core_dmi_ready_o),
    .src_rst_ni(rst_ni),
    .src_valid_i(core_dmi_valid_i)
  );
endmodule

(* src = "rtl/riscv-dbg/dmi_jtag.sv:19.8" *)
module \dmi_jtag$croc_chip.i_croc_soc.i_croc.i_dmi_jtag (clk_i, rst_ni, testmode_i, dmi_rst_no, dmi_req_o, dmi_req_valid_o, dmi_req_ready_i, dmi_resp_i, dmi_resp_ready_o, dmi_resp_valid_i, tck_i, tms_i, trst_ni, td_i, td_o, tdo_oe_o);
  wire \$1 ;
  wire \$17 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$3 ;
  wire \$57 ;
  wire \$59 ;
  wire \$65 ;
  wire \$70 ;
  wire \$75 ;
  wire \$78 ;
  wire \$80 ;
  wire \$93 ;
  wire \$95 ;
  wire \$97 ;
  wire \$99 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17973 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17975 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17977 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17979 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17981 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17986 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17989 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17993 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18000 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17983 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17995 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18002 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16866 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16912 ;
  wire \$auto$rtlil.cc:2964:ReduceBool$10 ;
  wire \$auto$rtlil.cc:3011:Eq$8 ;
  wire \$auto$rtlil.cc:3011:Eq$9 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" *)
  wire [31:0] \$data_d$36 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" *)
  wire [31:0] \$data_d$53 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:272.20-274.14" *)
  wire [40:0] \$dr_d$100 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:269.11-274.14" *)
  wire [40:0] \$dr_d$101 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:268.9-275.12" *)
  wire [40:0] \$dr_d$102 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:267.7-276.10" *)
  wire [40:0] \$dr_d$103 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:279.9-281.12" *)
  wire [40:0] \$dr_d$104 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:278.7-282.10" *)
  wire [40:0] \$dr_d$105 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:89.7-89.61" *)
  wire [31:0] \$dtmcs_d$11 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:74.7-85.10" *)
  wire [31:0] \$dtmcs_d$7 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:73.5-86.8" *)
  wire [31:0] \$dtmcs_d$8 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:248.7-250.10" *)
  wire [1:0] \$error_d$76 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:253.7-255.10" *)
  wire [1:0] \$error_d$81 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" *)
  wire \$error_dmi_busy$37 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" *)
  wire \$error_dmi_busy$41 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" *)
  wire \$error_dmi_busy$54 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:233.7-235.10" *)
  wire \$error_dmi_busy$60 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:240.7-242.10" *)
  wire \$error_dmi_busy$66 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" *)
  wire \$error_dmi_op_failed$38 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" *)
  wire \$error_dmi_op_failed$42 ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" *)
  wire \$error_dmi_op_failed$55 ;
  wire \$procmux$16199_CMP ;
  wire \$procmux$16203_CMP ;
  wire \$procmux$16273_CMP ;
  wire [2:0] \$procmux$16366_Y ;
  wire [2:0] \$procmux$16403_Y ;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:126.15" *)
  wire [6:0] address_d;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:126.26" *)
  reg [6:0] address_q;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:56.9" *)
  wire capture;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:22.24" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:127.16" *)
  wire [31:0] data_d;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:127.24" *)
  reg [31:0] data_q;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:129.10" *)
  reg [40:0] dmi;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:54.9" *)
  wire dmi_clear;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:108.18" *)
  wire [40:0] dmi_req;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:29.24" *)
  output [40:0] dmi_req_o;
  wire [40:0] dmi_req_o;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:109.18" *)
  wire dmi_req_ready;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:31.24" *)
  input dmi_req_ready_i;
  wire dmi_req_ready_i;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:110.18" *)
  wire dmi_req_valid;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:30.24" *)
  output dmi_req_valid_o;
  wire dmi_req_valid_o;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:112.18" *)
  wire [33:0] dmi_resp;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:33.24" *)
  input [33:0] dmi_resp_i;
  wire [33:0] dmi_resp_i;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:34.24" *)
  output dmi_resp_ready_o;
  wire dmi_resp_ready_o;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:113.18" *)
  wire dmi_resp_valid;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:35.24" *)
  input dmi_resp_valid_i;
  wire dmi_resp_valid_i;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:28.24" *)
  output dmi_rst_no;
  wire dmi_rst_no;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:105.16" *)
  wire dmi_select;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:125.28" *)
  wire [40:0] dr_d;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:62.15" *)
  wire [31:0] dtmcs_d;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:62.24" *)
  reg [31:0] dtmcs_q;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:60.9" *)
  wire dtmcs_select;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:49.15" *)
  wire [1:0] error_d;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:137.9" *)
  wire error_dmi_busy;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:49.24" *)
  reg [1:0] error_q;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:52.9" *)
  wire jtag_dmi_clear;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:23.24" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:57.9" *)
  wire shift;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:123.11" *)
  wire [2:0] state_d;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:123.20" *)
  reg [2:0] state_q;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:51.9" *)
  wire tck;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:37.24" *)
  input tck_i;
  wire tck_i;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:40.24" *)
  input td_i;
  wire td_i;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:41.24" *)
  output td_o;
  wire td_o;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:58.9" *)
  wire tdi;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:42.24" *)
  output tdo_oe_o;
  wire tdo_oe_o;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:24.24" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:38.24" *)
  input tms_i;
  wire tms_i;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:39.24" *)
  input trst_ni;
  wire trst_ni;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:55.9" *)
  wire update;
  assign \$1  = dtmcs_select && update;
  assign \$17  = state_q == 2'h3;
  assign dmi_req[33:32] = \$17  ? 2'h2 : 2'h1;
  assign \$3  = \$1  && dtmcs_q[17];
  assign \$21  = dmi_select && update;
  assign \$23  = ! error_q;
  assign \$25  = \$21  && \$23 ;
  assign \$27  = dmi[1:0] == 1'h1;
  assign \$29  = dmi[1:0] == 2'h2;
  assign dmi_clear = jtag_dmi_clear || \$3 ;
  assign \$57  = | state_q;
  assign \$59  = update && \$57 ;
  assign \$auto$rtlil.cc:3011:Eq$8  = state_q == 1'h1;
  assign \$auto$rtlil.cc:3011:Eq$9  = state_q == 2'h2;
  assign \$auto$rtlil.cc:2964:ReduceBool$10  = | { \$auto$rtlil.cc:3011:Eq$9 , \$auto$rtlil.cc:3011:Eq$8  };
  assign \$65  = capture && \$auto$rtlil.cc:2964:ReduceBool$10 ;
  assign \$70  = \$error_dmi_busy$66  && \$23 ;
  assign \$75  = \$error_dmi_op_failed$55  && \$23 ;
  assign \$78  = update && dtmcs_q[16];
  assign \$80  = \$78  && dtmcs_select;
  assign \$93  = ! error_dmi_busy;
  assign \$95  = \$23  && \$93 ;
  assign \$97  = error_q == 2'h3;
  assign \$99  = \$97  || error_dmi_busy;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) state_q <= 3'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17983 ) state_q <= state_d;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) error_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17986 ) error_q <= error_d;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) data_q <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17995 ) data_q <= data_d;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) address_q <= 7'h00;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18002 ) address_q <= address_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17973  = { \$17 , dmi_clear, dmi_req_ready } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17975  = { \$auto$rtlil.cc:3011:Eq$8 , dmi_clear, dmi_req_ready } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17977  = | { \$procmux$16203_CMP , \$auto$rtlil.cc:3011:Eq$8 , \$17 , dmi_clear, dmi_resp_valid };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17979  = { \$procmux$16203_CMP , \$25 , dmi_clear } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17981  = { \$procmux$16203_CMP , \$29 , \$27 , \$25 , dmi_clear } != 5'h12;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17986  = | { \$80 , \$75 , \$70 , dmi_clear };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17989  = { \$auto$rtlil.cc:3011:Eq$9 , dmi_clear, dmi_resp_valid } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17993  = | { \$procmux$16203_CMP , \$auto$rtlil.cc:3011:Eq$9 , dmi_clear };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18000  = | { \$procmux$16203_CMP , dmi_clear };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17983  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17981 , \$auto$opt_dff.cc:194:make_patterns_logic$17979 , \$auto$opt_dff.cc:194:make_patterns_logic$17977 , \$auto$opt_dff.cc:194:make_patterns_logic$17975 , \$auto$opt_dff.cc:194:make_patterns_logic$17973  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17995  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17993 , \$auto$opt_dff.cc:194:make_patterns_logic$17989 , \$auto$opt_dff.cc:194:make_patterns_logic$17979  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18002  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18000 , \$auto$opt_dff.cc:194:make_patterns_logic$17979  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16866  = | { \$auto$rtlil.cc:3011:Eq$8 , \$17  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16912  = | { \$procmux$16199_CMP , \$auto$rtlil.cc:3011:Eq$9  };
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dmi <= 41'h00000000000;
    else dmi <= dr_d;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[9:4] <= 6'h00;
    else dtmcs_q[9:4] <= dtmcs_d[9:4];
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[17] <= 1'h0;
    else dtmcs_q[17] <= dtmcs_d[17];
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[16] <= 1'h0;
    else dtmcs_q[16] <= dtmcs_d[16];
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[11:10] <= 2'h0;
    else dtmcs_q[11:10] <= dtmcs_d[11:10];
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[14:12] <= 3'h0;
    else dtmcs_q[14:12] <= dtmcs_d[14:12];
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[3:0] <= 4'h0;
    else dtmcs_q[3:0] <= dtmcs_d[3:0];
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[15] <= 1'h0;
    else dtmcs_q[15] <= dtmcs_d[15];
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[31:18] <= 14'h0000;
    else dtmcs_q[31:18] <= dtmcs_d[31:18];
  assign \$error_d$81  = \$80  ? (* src = "rtl/riscv-dbg/dmi_jtag.sv:254.9-254.30|rtl/riscv-dbg/dmi_jtag.sv:253.7-255.10" *) 2'h0 : { 1'h1, \$error_d$76 [0] };
  assign \$error_d$76 [0] = ~ (* src = "rtl/riscv-dbg/dmi_jtag.sv:249.9-249.31|rtl/riscv-dbg/dmi_jtag.sv:248.7-250.10" *) \$75 ;
  assign \$error_dmi_busy$66  = \$error_dmi_busy$60  | (* src = "rtl/riscv-dbg/dmi_jtag.sv:241.9-241.31|rtl/riscv-dbg/dmi_jtag.sv:240.7-242.10" *) \$65 ;
  assign \$error_dmi_busy$60  = \$error_dmi_busy$54  | (* src = "rtl/riscv-dbg/dmi_jtag.sv:234.9-234.31|rtl/riscv-dbg/dmi_jtag.sv:233.7-235.10" *) \$59 ;
  assign \$procmux$16199_CMP  = state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" *) 3'h4;
  assign \$procmux$16203_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" *) state_q;
  assign \$error_dmi_op_failed$38  = dmi_resp[1:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:215.28-215.55|rtl/riscv-dbg/dmi_jtag.sv:214.13-218.20" *) 2'h2;
  assign \$error_dmi_busy$37  = dmi_resp[1:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:216.29-216.51|rtl/riscv-dbg/dmi_jtag.sv:214.13-218.20" *) 2'h3;
  assign \$error_dmi_busy$41  = dmi_resp_valid & (* src = "rtl/riscv-dbg/dmi_jtag.sv:213.31-220.14|rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14" *) \$error_dmi_busy$37 ;
  function [31:0] \$procmux$16270 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dmi_jtag.sv:191.29-194.18|rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$16270  = b[31:0];
      3'b?1?:
        \$procmux$16270  = b[63:32];
      3'b1??:
        \$procmux$16270  = b[95:64];
      default:
        \$procmux$16270  = a;
    endcase
  endfunction
  assign \$data_d$36  = \$procmux$16270 (32'd3131949278, { dmi_resp[33:2], 64'hdeadbeefb051b051 }, { \$procmux$16273_CMP , \$error_dmi_op_failed$38 , \$error_dmi_busy$37  });
  assign \$procmux$16273_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:185.17-185.40|rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" *) dmi_resp[1:0];
  assign \$error_dmi_op_failed$42  = dmi_resp_valid & (* src = "rtl/riscv-dbg/dmi_jtag.sv:182.31-200.14|rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" *) \$error_dmi_op_failed$38 ;
  function [2:0] \$procmux$16366 ;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$16366  = b[2:0];
      3'b?1?:
        \$procmux$16366  = b[5:3];
      3'b1??:
        \$procmux$16366  = b[8:6];
      default:
        \$procmux$16366  = a;
    endcase
  endfunction
  assign \$procmux$16366_Y  = \$procmux$16366 (3'h0, { 1'h0, \$procmux$16403_Y [1], 7'h54 }, { \$procmux$16203_CMP , \$auto$rtlil.cc:3011:Eq$8 , \$17  });
  assign \$procmux$16403_Y [1] = ~ (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:165.15-165.30|rtl/riscv-dbg/dmi_jtag.sv:164.13-168.16" *) \$27 ;
  assign \$error_dmi_op_failed$55  = \$auto$opt_reduce.cc:137:opt_pmux$16912  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" *) \$error_dmi_op_failed$42 ;
  assign \$error_dmi_busy$54  = \$auto$opt_reduce.cc:137:opt_pmux$16912  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" *) \$error_dmi_busy$41 ;
  assign \$data_d$53  = \$auto$rtlil.cc:3011:Eq$9  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" *) \$data_d$36  : dmi[33:2];
  assign data_d = dmi_clear ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" *) 32'd0 : \$data_d$53 ;
  assign address_d = dmi_clear ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" *) 7'h00 : dmi[40:34];
  assign state_d = dmi_clear ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" *) 3'h0 : \$procmux$16366_Y ;
  assign error_d = dmi_clear ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" *) 2'h0 : \$error_d$81 ;
  assign error_dmi_busy = dmi_clear ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" *) 1'h0 : \$error_dmi_busy$66 ;
  assign dmi_req_valid = dmi_clear ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" *) 1'h0 : \$auto$opt_reduce.cc:137:opt_pmux$16866 ;
  assign \$dr_d$104  = dmi_select ? (* src = "rtl/riscv-dbg/dmi_jtag.sv:280.11-280.47|rtl/riscv-dbg/dmi_jtag.sv:279.9-281.12" *) { tdi, dmi[40:1] } : \$dr_d$103 ;
  assign \$dr_d$105  = shift ? (* src = "rtl/riscv-dbg/dmi_jtag.sv:279.9-281.12|rtl/riscv-dbg/dmi_jtag.sv:278.7-282.10" *) \$dr_d$104  : \$dr_d$103 ;
  assign \$dr_d$100  = \$99  ? (* src = "rtl/riscv-dbg/dmi_jtag.sv:273.13-273.49|rtl/riscv-dbg/dmi_jtag.sv:272.20-274.14" *) { address_q, data_q, 2'h3 } : dmi;
  assign \$dr_d$101  = \$95  ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:270.13-270.52|rtl/riscv-dbg/dmi_jtag.sv:269.11-274.14" *) { address_q, data_q, 2'h0 } : \$dr_d$100 ;
  assign \$dr_d$102  = dmi_select ? (* src = "rtl/riscv-dbg/dmi_jtag.sv:269.11-274.14|rtl/riscv-dbg/dmi_jtag.sv:268.9-275.12" *) \$dr_d$101  : dmi;
  assign \$dr_d$103  = capture ? (* src = "rtl/riscv-dbg/dmi_jtag.sv:268.9-275.12|rtl/riscv-dbg/dmi_jtag.sv:267.7-276.10" *) \$dr_d$102  : dmi;
  assign dr_d = dmi_clear ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag.sv:265.7-265.17|rtl/riscv-dbg/dmi_jtag.sv:264.5-283.8" *) 41'h00000000000 : \$dr_d$105 ;
  assign \$dtmcs_d$11  = dtmcs_select ? (* src = "rtl/riscv-dbg/dmi_jtag.sv:89.25-89.61|rtl/riscv-dbg/dmi_jtag.sv:89.7-89.61" *) { tdi, dtmcs_q[31:1] } : \$dtmcs_d$8 ;
  assign dtmcs_d = shift ? (* src = "rtl/riscv-dbg/dmi_jtag.sv:89.7-89.61|rtl/riscv-dbg/dmi_jtag.sv:88.5-90.8" *) \$dtmcs_d$11  : \$dtmcs_d$8 ;
  assign \$dtmcs_d$7  = dtmcs_select ? (* src = "rtl/riscv-dbg/dmi_jtag.sv:75.9-84.23|rtl/riscv-dbg/dmi_jtag.sv:74.7-85.10" *) { 20'h00001, error_q, 10'h071 } : dtmcs_q;
  assign \$dtmcs_d$8  = capture ? (* src = "rtl/riscv-dbg/dmi_jtag.sv:74.7-85.10|rtl/riscv-dbg/dmi_jtag.sv:73.5-86.8" *) \$dtmcs_d$7  : dtmcs_q;
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:331.11" *)
  \dmi_cdc$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc  i_dmi_cdc (
    .clk_i(clk_i),
    .core_dmi_ready_i(dmi_req_ready_i),
    .core_dmi_ready_o(dmi_resp_ready_o),
    .core_dmi_req_o(dmi_req_o),
    .core_dmi_resp_i(dmi_resp_i),
    .core_dmi_rst_no(dmi_rst_no),
    .core_dmi_valid_i(dmi_resp_valid_i),
    .core_dmi_valid_o(dmi_req_valid_o),
    .jtag_dmi_cdc_clear_i(dmi_clear),
    .jtag_dmi_ready_i(1'h1),
    .jtag_dmi_ready_o(dmi_req_ready),
    .jtag_dmi_req_i({ address_q, dmi_req[33:32], data_q }),
    .jtag_dmi_resp_o(dmi_resp),
    .jtag_dmi_valid_i(dmi_req_valid),
    .jtag_dmi_valid_o(dmi_resp_valid),
    .rst_ni(rst_ni),
    .tck_i(tck),
    .trst_ni(trst_ni)
  );
  (* src = "rtl/riscv-dbg/dmi_jtag.sv:308.5" *)
  \dmi_jtag_tap$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap  i_dmi_jtag_tap (
    .capture_o(capture),
    .dmi_clear_o(jtag_dmi_clear),
    .dmi_select_o(dmi_select),
    .dmi_tdo_i(dmi[0]),
    .dtmcs_select_o(dtmcs_select),
    .dtmcs_tdo_i(dtmcs_q[0]),
    .shift_o(shift),
    .tck_i(tck_i),
    .tck_o(tck),
    .td_i(td_i),
    .td_o(td_o),
    .tdi_o(tdi),
    .tdo_oe_o(tdo_oe_o),
    .testmode_i(testmode_i),
    .tms_i(tms_i),
    .trst_ni(trst_ni),
    .update_o(update)
  );
  assign \$error_d$76 [1] = 1'h1;
  assign { \$procmux$16403_Y [2], \$procmux$16403_Y [0] } = 2'h1;
  assign { dmi_req[40:34], dmi_req[31:0] } = { address_q, data_q };
endmodule

(* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:19.8" *)
module \dmi_jtag_tap$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap (testmode_i, tck_i, tms_i, trst_ni, td_i, td_o, tdo_oe_o, tck_o, dmi_clear_o, update_o, capture_o, shift_o, tdi_o, dtmcs_select_o, dtmcs_tdo_i, dmi_select_o, dmi_tdo_i);
  wire \$34 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18005 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18008 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16868 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16916 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16918 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16920 ;
  wire \$auto$rtlil.cc:3092:Mux$216 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$217 ;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:132.7-132.42" *)
  wire \$bypass_d$11 ;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" *)
  wire \$bypass_d$13 ;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:137.7-137.43" *)
  wire \$bypass_d$17 ;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" *)
  wire \$bypass_d$19 ;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:131.7-131.49" *)
  wire [31:0] \$idcode_d$10 ;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" *)
  wire [31:0] \$idcode_d$12 ;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:136.7-136.65" *)
  wire [31:0] \$idcode_d$16 ;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" *)
  wire [31:0] \$idcode_d$18 ;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:88.5-90.8" *)
  wire [4:0] \$jtag_ir_shift_d$2 ;
  wire \$procmux$14106_Y ;
  wire \$procmux$14186_CMP ;
  wire \$procmux$14187_CMP ;
  wire \$procmux$14188_CMP ;
  wire \$procmux$14191_CMP ;
  wire \$procmux$14193_CMP ;
  wire \$procmux$14194_CMP ;
  wire \$procmux$14195_CMP ;
  wire \$procmux$14198_CMP ;
  wire \$procmux$14199_CMP ;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:124.16" *)
  wire bypass_d;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:124.26" *)
  reg bypass_q;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:76.9" *)
  wire capture_ir;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:40.23" *)
  output capture_o;
  wire capture_o;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:38.23" *)
  output dmi_clear_o;
  wire dmi_clear_o;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:46.23" *)
  output dmi_select_o;
  wire dmi_select_o;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:47.23" *)
  input dmi_tdo_i;
  wire dmi_tdo_i;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:43.23" *)
  output dtmcs_select_o;
  wire dtmcs_select_o;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:44.23" *)
  input dtmcs_tdo_i;
  wire dtmcs_tdo_i;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:120.16" *)
  wire [31:0] idcode_d;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:120.26" *)
  reg [31:0] idcode_q;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:121.16" *)
  wire idcode_select;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:75.25" *)
  wire [4:0] jtag_ir_d;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:75.36" *)
  reg [4:0] jtag_ir_q;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:73.25" *)
  wire [4:0] jtag_ir_shift_d;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:73.42" *)
  reg [4:0] jtag_ir_shift_q;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:76.21" *)
  wire shift_ir;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:41.23" *)
  output shift_o;
  wire shift_o;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:57.28" *)
  wire [3:0] tap_state_d;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:57.15" *)
  reg [3:0] tap_state_q;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:28.23" *)
  input tck_i;
  wire tck_i;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:188.9" *)
  wire tck_n;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:188.16" *)
  wire tck_ni;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:36.23" *)
  output tck_o;
  wire tck_o;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:31.23" *)
  input td_i;
  wire td_i;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:32.23" *)
  output td_o;
  reg td_o;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:42.23" *)
  output tdi_o;
  wire tdi_o;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:168.9" *)
  wire tdo_mux;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:33.23" *)
  output tdo_oe_o;
  reg tdo_oe_o;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:34.23" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:29.23" *)
  input tms_i;
  wire tms_i;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:30.23" *)
  input trst_ni;
  wire trst_ni;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:76.31" *)
  wire update_ir;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:39.23" *)
  output update_o;
  wire update_o;
  assign \$34  = shift_ir | shift_o;
  assign \$auto$rtlil.cc:3092:Mux$217  = tms_i ? 2'h2 : 2'h1;
  assign \$auto$rtlil.cc:3092:Mux$216  = ~ tms_i;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:104.3" *)
  always @(posedge tck_i, negedge trst_ni)
    if (!trst_ni) jtag_ir_shift_q <= 5'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18005 ) jtag_ir_shift_q <= jtag_ir_shift_d;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:104.3" *)
  always @(posedge tck_i, negedge trst_ni)
    if (!trst_ni) jtag_ir_q <= 5'h01;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18008 ) jtag_ir_q <= jtag_ir_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18005  = | { dmi_clear_o, capture_ir, shift_ir };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18008  = | { dmi_clear_o, update_ir };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16868  = | { idcode_select, dmi_select_o, dtmcs_select_o };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16916  = | { \$procmux$14199_CMP , update_ir, update_o };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16918  = | { shift_ir, capture_ir };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16920  = | { shift_o, capture_o };
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" *)
  always @(posedge tck_i, negedge trst_ni)
    if (!trst_ni) bypass_q <= 1'h0;
    else bypass_q <= bypass_d;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" *)
  always @(posedge tck_i, negedge trst_ni)
    if (!trst_ni) idcode_q <= 32'd202137011;
    else idcode_q <= idcode_d;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" *)
  always @(posedge tck_i, negedge trst_ni)
    if (!trst_ni) tap_state_q <= 4'h1;
    else tap_state_q <= tap_state_d;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:203.3" *)
  always @(posedge tck_n, negedge trst_ni)
    if (!trst_ni) td_o <= 1'h0;
    else td_o <= tdo_mux;
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:203.3" *)
  always @(posedge tck_n, negedge trst_ni)
    if (!trst_ni) tdo_oe_o <= 1'h0;
    else tdo_oe_o <= \$34 ;
  function [0:0] \$procmux$14106 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:179.25-179.45|rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$14106  = b[0:0];
      3'b?1?:
        \$procmux$14106  = b[1:1];
      3'b1??:
        \$procmux$14106  = b[2:2];
      default:
        \$procmux$14106  = a;
    endcase
  endfunction
  assign \$procmux$14106_Y  = \$procmux$14106 (bypass_q, { idcode_q[0], dtmcs_tdo_i, dmi_tdo_i }, { idcode_select, dtmcs_select_o, dmi_select_o });
  assign dmi_select_o = jtag_ir_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:179.25-179.45|rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" *) 5'h11;
  assign dtmcs_select_o = jtag_ir_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:178.25-178.47|rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" *) 5'h10;
  assign idcode_select = jtag_ir_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:177.25-177.47|rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" *) 1'h1;
  assign tdo_mux = shift_ir ? (* full_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:173.7-173.36|rtl/riscv-dbg/dmi_jtag_tap.sv:172.5-182.8" *) jtag_ir_shift_q[0] : \$procmux$14106_Y ;
  assign bypass_d = dmi_clear_o ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:140.27-144.8|rtl/riscv-dbg/dmi_jtag_tap.sv:140.5-144.8" *) 1'h0 : \$bypass_d$19 ;
  assign idcode_d = dmi_clear_o ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:140.27-144.8|rtl/riscv-dbg/dmi_jtag_tap.sv:140.5-144.8" *) 32'd202137011 : \$idcode_d$18 ;
  assign \$bypass_d$17  = \$auto$opt_reduce.cc:137:opt_pmux$16868  ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:137.27-137.43|rtl/riscv-dbg/dmi_jtag_tap.sv:137.7-137.43" *) \$bypass_d$13  : td_i;
  assign \$idcode_d$16  = idcode_select ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:136.27-136.65|rtl/riscv-dbg/dmi_jtag_tap.sv:136.7-136.65" *) { td_i, idcode_q[31:1] } : \$idcode_d$12 ;
  assign \$bypass_d$19  = shift_o ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.19-138.8|rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" *) \$bypass_d$17  : \$bypass_d$13 ;
  assign \$idcode_d$18  = shift_o ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.19-138.8|rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" *) \$idcode_d$16  : \$idcode_d$12 ;
  assign \$bypass_d$11  = \$auto$opt_reduce.cc:137:opt_pmux$16868  & (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:132.26-132.42|rtl/riscv-dbg/dmi_jtag_tap.sv:132.7-132.42" *) bypass_q;
  assign \$idcode_d$10  = idcode_select ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:131.26-131.49|rtl/riscv-dbg/dmi_jtag_tap.sv:131.7-131.49" *) 32'd202137011 : idcode_q;
  assign \$bypass_d$13  = capture_o ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.21-133.8|rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" *) \$bypass_d$11  : bypass_q;
  assign \$idcode_d$12  = capture_o ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.21-133.8|rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" *) \$idcode_d$10  : idcode_q;
  function [3:0] \$procmux$14184 ;
    input [3:0] a;
    input [43:0] b;
    input [10:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:296.17-299.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *)
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \$procmux$14184  = b[3:0];
      11'b?????????1?:
        \$procmux$14184  = b[7:4];
      11'b????????1??:
        \$procmux$14184  = b[11:8];
      11'b???????1???:
        \$procmux$14184  = b[15:12];
      11'b??????1????:
        \$procmux$14184  = b[19:16];
      11'b?????1?????:
        \$procmux$14184  = b[23:20];
      11'b????1??????:
        \$procmux$14184  = b[27:24];
      11'b???1???????:
        \$procmux$14184  = b[31:28];
      11'b??1????????:
        \$procmux$14184  = b[35:32];
      11'b?1?????????:
        \$procmux$14184  = b[39:36];
      11'b1??????????:
        \$procmux$14184  = b[43:40];
      default:
        \$procmux$14184  = a;
    endcase
  endfunction
  assign tap_state_d = \$procmux$14184 ({ 3'h0, \$auto$rtlil.cc:3092:Mux$216  }, { \$auto$rtlil.cc:3092:Mux$217 [1], 1'h0, \$auto$rtlil.cc:3092:Mux$217 [0], 4'ha, tms_i, \$auto$rtlil.cc:3092:Mux$217 , \$auto$rtlil.cc:3092:Mux$217 [0], 4'h3, tms_i, \$auto$rtlil.cc:3092:Mux$217 , 2'h0, \$auto$rtlil.cc:3092:Mux$216 , 1'h0, \$auto$rtlil.cc:3092:Mux$216 , 2'h1, \$auto$rtlil.cc:3092:Mux$217 , \$auto$rtlil.cc:3092:Mux$217 [0], 2'h3, tms_i, 3'h7, \$auto$rtlil.cc:3092:Mux$217 , 1'h1, tms_i, 4'hc, \$auto$rtlil.cc:3092:Mux$217  }, { \$procmux$14198_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16920 , \$procmux$14195_CMP , \$procmux$14194_CMP , \$procmux$14193_CMP , \$procmux$14191_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16918 , \$procmux$14188_CMP , \$procmux$14187_CMP , \$procmux$14186_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16916  });
  assign update_ir = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:296.17-299.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'hf;
  assign \$procmux$14186_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:290.9-290.52|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'he;
  assign \$procmux$14187_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:287.9-287.51|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'hd;
  assign \$procmux$14188_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:283.9-283.52|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'hc;
  assign shift_ir = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:278.16-281.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'hb;
  assign capture_ir = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:270.18-273.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'ha;
  assign \$procmux$14191_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:264.9-264.60|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'h9;
  assign update_o = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:258.17-261.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'h8;
  assign \$procmux$14193_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:256.9-256.52|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 3'h7;
  assign \$procmux$14194_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:253.9-253.51|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 3'h6;
  assign \$procmux$14195_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:250.9-250.52|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 3'h5;
  assign shift_o = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:245.16-248.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 3'h4;
  assign capture_o = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:241.18-244.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 2'h3;
  assign \$procmux$14198_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:239.9-239.58|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 2'h2;
  assign \$procmux$14199_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:235.9-235.60|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 1'h1;
  assign dmi_clear_o = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:230.23-233.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) tap_state_q;
  assign jtag_ir_d = dmi_clear_o ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:97.27-101.8|rtl/riscv-dbg/dmi_jtag_tap.sv:97.5-101.8" *) 5'h01 : jtag_ir_shift_q;
  assign jtag_ir_shift_d = dmi_clear_o ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:97.27-101.8|rtl/riscv-dbg/dmi_jtag_tap.sv:97.5-101.8" *) 5'h00 : \$jtag_ir_shift_d$2 ;
  assign \$jtag_ir_shift_d$2  = capture_ir ? (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:89.7-89.45|rtl/riscv-dbg/dmi_jtag_tap.sv:88.5-90.8" *) 5'h05 : { td_i, jtag_ir_shift_q[4:1] };
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:195.15" *)
  \tc_clk_mux2$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_dft_tck_mux  i_dft_tck_mux (
    .clk0_i(tck_ni),
    .clk1_i(tck_i),
    .clk_o(tck_n),
    .clk_sel_i(testmode_i)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:190.19" *)
  \tc_clk_inverter$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_tck_inv  i_tck_inv (
    .clk_i(tck_i),
    .clk_o(tck_ni)
  );
  assign tck_o = tck_i;
  assign tdi_o = td_i;
endmodule

(* src = "rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_csrs.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$15 ;
  wire \$17 ;
  wire \$37 ;
  wire \$39 ;
  wire \$50 ;
  wire \$54 ;
  wire \$58 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18011 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18014 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18016 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18021 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18018 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18451 ;
  wire [67:0] \$auto$rtlil.cc:3114:Demux$1672 ;
  wire [1:0] \$procmux$3715_Y ;
  wire \$procmux$3718_Y ;
  wire \$procmux$3721_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/fifo_v3.sv:32.19" *)
  input [33:0] data_i;
  wire [33:0] data_i;
  (* src = "rtl/common_cells/fifo_v3.sv:35.19" *)
  output [33:0] data_o;
  wire [33:0] data_o;
  (* src = "rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "rtl/common_cells/fifo_v3.sv:49.29" *)
  wire [67:0] mem_n;
  (* src = "rtl/common_cells/fifo_v3.sv:49.36" *)
  reg [67:0] mem_q;
  (* src = "rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "rtl/common_cells/fifo_v3.sv:44.30" *)
  wire read_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.46" *)
  reg read_pointer_q;
  (* src = "rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  (* src = "rtl/common_cells/fifo_v3.sv:44.62" *)
  wire write_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.79" *)
  reg write_pointer_q;
  assign full_o = status_cnt_q == 2'h2;
  assign data_o = read_pointer_q ? mem_q[67:34] : mem_q[33:0];
  assign \$15  = ~ full_o;
  assign \$17  = push_i && \$15 ;
  assign empty_o = ! status_cnt_q;
  \$bwmux  #(
    .WIDTH(32'd68)
  ) \$24  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33] }),
    .Y(mem_n)
  );
  assign write_pointer_n = write_pointer_q + 1'h1;
  assign \$37  = ~ empty_o;
  assign \$39  = pop_i && \$37 ;
  assign read_pointer_n = read_pointer_q + 1'h1;
  assign status_cnt_n = status_cnt_q - { \$auto$rtlil.cc:3092:Mux$18451 [1], 1'h1 };
  assign \$50  = push_i && pop_i;
  assign \$54  = \$50  && \$15 ;
  assign \$58  = \$54  && \$37 ;
  assign \$auto$rtlil.cc:3114:Demux$1672 [33] = write_pointer_q == 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1672 [67] = write_pointer_q == 1'h1;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) write_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18011 ) write_pointer_q <= \$procmux$3718_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18018 ) status_cnt_q <= \$procmux$3715_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) read_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18021 ) read_pointer_q <= \$procmux$3721_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[67:34] <= 34'h000000000;
    else if (\$17 ) mem_q[67:34] <= mem_n[67:34];
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[33:0] <= 34'h000000000;
    else if (\$17 ) mem_q[33:0] <= mem_n[33:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18011  = | { flush_i, \$17  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18014  = | { flush_i, \$39 , \$58 , \$17  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18016  = { flush_i, \$58  } != 2'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18021  = | { flush_i, \$39  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18018  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18016 , \$auto$opt_dff.cc:194:make_patterns_logic$18014  };
  assign \$auto$rtlil.cc:3092:Mux$18451 [1] = ~ \$39 ;
  assign \$procmux$3715_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$procmux$3718_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : write_pointer_n;
  assign \$procmux$3721_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : read_pointer_n;
  assign \$auto$rtlil.cc:3092:Mux$18451 [0] = 1'h1;
  assign { \$auto$rtlil.cc:3114:Demux$1672 [66:34], \$auto$rtlil.cc:3114:Demux$1672 [32:0] } = { \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33] };
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$15 ;
  wire \$17 ;
  wire \$37 ;
  wire \$39 ;
  wire \$50 ;
  wire \$54 ;
  wire \$58 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18026 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18029 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18031 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18036 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18033 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18456 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1353 ;
  wire [1:0] \$procmux$8080_Y ;
  wire \$procmux$8083_Y ;
  wire \$procmux$8086_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/fifo_v3.sv:32.19" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* src = "rtl/common_cells/fifo_v3.sv:35.19" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "rtl/common_cells/fifo_v3.sv:49.29" *)
  wire [3:0] mem_n;
  (* src = "rtl/common_cells/fifo_v3.sv:49.36" *)
  reg [3:0] mem_q;
  (* src = "rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "rtl/common_cells/fifo_v3.sv:44.30" *)
  wire read_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.46" *)
  reg read_pointer_q;
  (* src = "rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  (* src = "rtl/common_cells/fifo_v3.sv:44.62" *)
  wire write_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.79" *)
  reg write_pointer_q;
  assign full_o = status_cnt_q == 2'h2;
  assign data_o = read_pointer_q ? mem_q[3:2] : mem_q[1:0];
  assign \$15  = ~ full_o;
  assign \$17  = push_i && \$15 ;
  assign empty_o = ! status_cnt_q;
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$24  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:3114:Demux$1353 [3], \$auto$rtlil.cc:3114:Demux$1353 [3], \$auto$rtlil.cc:3114:Demux$1353 [1], \$auto$rtlil.cc:3114:Demux$1353 [1] }),
    .Y(mem_n)
  );
  assign write_pointer_n = write_pointer_q + 1'h1;
  assign \$37  = ~ empty_o;
  assign \$39  = pop_i && \$37 ;
  assign read_pointer_n = read_pointer_q + 1'h1;
  assign status_cnt_n = status_cnt_q - { \$auto$rtlil.cc:3092:Mux$18456 [1], 1'h1 };
  assign \$50  = push_i && pop_i;
  assign \$54  = \$50  && \$15 ;
  assign \$58  = \$54  && \$37 ;
  assign \$auto$rtlil.cc:3114:Demux$1353 [1] = write_pointer_q == 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1353 [3] = write_pointer_q == 1'h1;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) write_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18026 ) write_pointer_q <= \$procmux$8083_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18033 ) status_cnt_q <= \$procmux$8080_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) read_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18036 ) read_pointer_q <= \$procmux$8086_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[3:2] <= 2'h0;
    else if (\$17 ) mem_q[3:2] <= mem_n[3:2];
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[1:0] <= 2'h0;
    else if (\$17 ) mem_q[1:0] <= mem_n[1:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18026  = | { flush_i, \$17  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18029  = | { flush_i, \$39 , \$58 , \$17  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18031  = { flush_i, \$58  } != 2'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18036  = | { flush_i, \$39  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18033  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18031 , \$auto$opt_dff.cc:194:make_patterns_logic$18029  };
  assign \$auto$rtlil.cc:3092:Mux$18456 [1] = ~ \$39 ;
  assign \$procmux$8080_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$procmux$8083_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : write_pointer_n;
  assign \$procmux$8086_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : read_pointer_n;
  assign \$auto$rtlil.cc:3092:Mux$18456 [0] = 1'h1;
  assign { \$auto$rtlil.cc:3114:Demux$1353 [2], \$auto$rtlil.cc:3114:Demux$1353 [0] } = { \$auto$rtlil.cc:3114:Demux$1353 [3], \$auto$rtlil.cc:3114:Demux$1353 [1] };
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$15 ;
  wire \$17 ;
  wire \$37 ;
  wire \$39 ;
  wire \$50 ;
  wire \$54 ;
  wire \$58 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18041 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18044 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18046 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18051 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18048 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18461 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1386 ;
  wire [1:0] \$procmux$8025_Y ;
  wire \$procmux$8028_Y ;
  wire \$procmux$8031_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/fifo_v3.sv:32.19" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* src = "rtl/common_cells/fifo_v3.sv:35.19" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "rtl/common_cells/fifo_v3.sv:49.29" *)
  wire [3:0] mem_n;
  (* src = "rtl/common_cells/fifo_v3.sv:49.36" *)
  reg [3:0] mem_q;
  (* src = "rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "rtl/common_cells/fifo_v3.sv:44.30" *)
  wire read_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.46" *)
  reg read_pointer_q;
  (* src = "rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  (* src = "rtl/common_cells/fifo_v3.sv:44.62" *)
  wire write_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.79" *)
  reg write_pointer_q;
  assign full_o = status_cnt_q == 2'h2;
  assign data_o = read_pointer_q ? mem_q[3:2] : mem_q[1:0];
  assign \$15  = ~ full_o;
  assign \$17  = push_i && \$15 ;
  assign empty_o = ! status_cnt_q;
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$24  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:3114:Demux$1386 [3], \$auto$rtlil.cc:3114:Demux$1386 [3], \$auto$rtlil.cc:3114:Demux$1386 [1], \$auto$rtlil.cc:3114:Demux$1386 [1] }),
    .Y(mem_n)
  );
  assign write_pointer_n = write_pointer_q + 1'h1;
  assign \$37  = ~ empty_o;
  assign \$39  = pop_i && \$37 ;
  assign read_pointer_n = read_pointer_q + 1'h1;
  assign status_cnt_n = status_cnt_q - { \$auto$rtlil.cc:3092:Mux$18461 [1], 1'h1 };
  assign \$50  = push_i && pop_i;
  assign \$54  = \$50  && \$15 ;
  assign \$58  = \$54  && \$37 ;
  assign \$auto$rtlil.cc:3114:Demux$1386 [1] = write_pointer_q == 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1386 [3] = write_pointer_q == 1'h1;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) write_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18041 ) write_pointer_q <= \$procmux$8028_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18048 ) status_cnt_q <= \$procmux$8025_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) read_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18051 ) read_pointer_q <= \$procmux$8031_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[3:2] <= 2'h0;
    else if (\$17 ) mem_q[3:2] <= mem_n[3:2];
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[1:0] <= 2'h0;
    else if (\$17 ) mem_q[1:0] <= mem_n[1:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18041  = | { flush_i, \$17  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18044  = | { flush_i, \$39 , \$58 , \$17  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18046  = { flush_i, \$58  } != 2'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18051  = | { flush_i, \$39  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18048  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18046 , \$auto$opt_dff.cc:194:make_patterns_logic$18044  };
  assign \$auto$rtlil.cc:3092:Mux$18461 [1] = ~ \$39 ;
  assign \$procmux$8025_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$procmux$8028_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : write_pointer_n;
  assign \$procmux$8031_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : read_pointer_n;
  assign \$auto$rtlil.cc:3092:Mux$18461 [0] = 1'h1;
  assign { \$auto$rtlil.cc:3114:Demux$1386 [2], \$auto$rtlil.cc:3114:Demux$1386 [0] } = { \$auto$rtlil.cc:3114:Demux$1386 [3], \$auto$rtlil.cc:3114:Demux$1386 [1] };
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$15 ;
  wire \$17 ;
  wire \$37 ;
  wire \$39 ;
  wire \$50 ;
  wire \$54 ;
  wire \$58 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18056 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18059 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18061 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18066 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18063 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18466 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1419 ;
  wire [1:0] \$procmux$7970_Y ;
  wire \$procmux$7973_Y ;
  wire \$procmux$7976_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/fifo_v3.sv:32.19" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* src = "rtl/common_cells/fifo_v3.sv:35.19" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "rtl/common_cells/fifo_v3.sv:49.29" *)
  wire [3:0] mem_n;
  (* src = "rtl/common_cells/fifo_v3.sv:49.36" *)
  reg [3:0] mem_q;
  (* src = "rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "rtl/common_cells/fifo_v3.sv:44.30" *)
  wire read_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.46" *)
  reg read_pointer_q;
  (* src = "rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  (* src = "rtl/common_cells/fifo_v3.sv:44.62" *)
  wire write_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.79" *)
  reg write_pointer_q;
  assign full_o = status_cnt_q == 2'h2;
  assign data_o = read_pointer_q ? mem_q[3:2] : mem_q[1:0];
  assign \$15  = ~ full_o;
  assign \$17  = push_i && \$15 ;
  assign empty_o = ! status_cnt_q;
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$24  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:3114:Demux$1419 [3], \$auto$rtlil.cc:3114:Demux$1419 [3], \$auto$rtlil.cc:3114:Demux$1419 [1], \$auto$rtlil.cc:3114:Demux$1419 [1] }),
    .Y(mem_n)
  );
  assign write_pointer_n = write_pointer_q + 1'h1;
  assign \$37  = ~ empty_o;
  assign \$39  = pop_i && \$37 ;
  assign read_pointer_n = read_pointer_q + 1'h1;
  assign status_cnt_n = status_cnt_q - { \$auto$rtlil.cc:3092:Mux$18466 [1], 1'h1 };
  assign \$50  = push_i && pop_i;
  assign \$54  = \$50  && \$15 ;
  assign \$58  = \$54  && \$37 ;
  assign \$auto$rtlil.cc:3114:Demux$1419 [1] = write_pointer_q == 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1419 [3] = write_pointer_q == 1'h1;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) write_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18056 ) write_pointer_q <= \$procmux$7973_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18063 ) status_cnt_q <= \$procmux$7970_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) read_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18066 ) read_pointer_q <= \$procmux$7976_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[3:2] <= 2'h0;
    else if (\$17 ) mem_q[3:2] <= mem_n[3:2];
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[1:0] <= 2'h0;
    else if (\$17 ) mem_q[1:0] <= mem_n[1:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18056  = | { flush_i, \$17  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18059  = | { flush_i, \$39 , \$58 , \$17  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18061  = { flush_i, \$58  } != 2'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18066  = | { flush_i, \$39  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18063  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18061 , \$auto$opt_dff.cc:194:make_patterns_logic$18059  };
  assign \$auto$rtlil.cc:3092:Mux$18466 [1] = ~ \$39 ;
  assign \$procmux$7970_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$procmux$7973_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : write_pointer_n;
  assign \$procmux$7976_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : read_pointer_n;
  assign \$auto$rtlil.cc:3092:Mux$18466 [0] = 1'h1;
  assign { \$auto$rtlil.cc:3114:Demux$1419 [2], \$auto$rtlil.cc:3114:Demux$1419 [0] } = { \$auto$rtlil.cc:3114:Demux$1419 [3], \$auto$rtlil.cc:3114:Demux$1419 [1] };
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$15 ;
  wire \$17 ;
  wire \$37 ;
  wire \$39 ;
  wire \$50 ;
  wire \$54 ;
  wire \$58 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18071 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18074 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18076 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18081 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18078 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18471 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1452 ;
  wire [1:0] \$procmux$7915_Y ;
  wire \$procmux$7918_Y ;
  wire \$procmux$7921_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/fifo_v3.sv:32.19" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* src = "rtl/common_cells/fifo_v3.sv:35.19" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "rtl/common_cells/fifo_v3.sv:49.29" *)
  wire [3:0] mem_n;
  (* src = "rtl/common_cells/fifo_v3.sv:49.36" *)
  reg [3:0] mem_q;
  (* src = "rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "rtl/common_cells/fifo_v3.sv:44.30" *)
  wire read_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.46" *)
  reg read_pointer_q;
  (* src = "rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  (* src = "rtl/common_cells/fifo_v3.sv:44.62" *)
  wire write_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.79" *)
  reg write_pointer_q;
  assign full_o = status_cnt_q == 2'h2;
  assign data_o = read_pointer_q ? mem_q[3:2] : mem_q[1:0];
  assign \$15  = ~ full_o;
  assign \$17  = push_i && \$15 ;
  assign empty_o = ! status_cnt_q;
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$24  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:3114:Demux$1452 [3], \$auto$rtlil.cc:3114:Demux$1452 [3], \$auto$rtlil.cc:3114:Demux$1452 [1], \$auto$rtlil.cc:3114:Demux$1452 [1] }),
    .Y(mem_n)
  );
  assign write_pointer_n = write_pointer_q + 1'h1;
  assign \$37  = ~ empty_o;
  assign \$39  = pop_i && \$37 ;
  assign read_pointer_n = read_pointer_q + 1'h1;
  assign status_cnt_n = status_cnt_q - { \$auto$rtlil.cc:3092:Mux$18471 [1], 1'h1 };
  assign \$50  = push_i && pop_i;
  assign \$54  = \$50  && \$15 ;
  assign \$58  = \$54  && \$37 ;
  assign \$auto$rtlil.cc:3114:Demux$1452 [1] = write_pointer_q == 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1452 [3] = write_pointer_q == 1'h1;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) write_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18071 ) write_pointer_q <= \$procmux$7918_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18078 ) status_cnt_q <= \$procmux$7915_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) read_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18081 ) read_pointer_q <= \$procmux$7921_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[3:2] <= 2'h0;
    else if (\$17 ) mem_q[3:2] <= mem_n[3:2];
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[1:0] <= 2'h0;
    else if (\$17 ) mem_q[1:0] <= mem_n[1:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18071  = | { flush_i, \$17  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18074  = | { flush_i, \$39 , \$58 , \$17  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18076  = { flush_i, \$58  } != 2'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18081  = | { flush_i, \$39  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18078  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18076 , \$auto$opt_dff.cc:194:make_patterns_logic$18074  };
  assign \$auto$rtlil.cc:3092:Mux$18471 [1] = ~ \$39 ;
  assign \$procmux$7915_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$procmux$7918_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : write_pointer_n;
  assign \$procmux$7921_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : read_pointer_n;
  assign \$auto$rtlil.cc:3092:Mux$18471 [0] = 1'h1;
  assign { \$auto$rtlil.cc:3114:Demux$1452 [2], \$auto$rtlil.cc:3114:Demux$1452 [0] } = { \$auto$rtlil.cc:3114:Demux$1452 [3], \$auto$rtlil.cc:3114:Demux$1452 [1] };
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$15 ;
  wire \$17 ;
  wire \$37 ;
  wire \$39 ;
  wire \$50 ;
  wire \$54 ;
  wire \$58 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18086 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18089 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18091 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18096 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18093 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18476 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1485 ;
  wire [1:0] \$procmux$7860_Y ;
  wire \$procmux$7863_Y ;
  wire \$procmux$7866_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/fifo_v3.sv:32.19" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* src = "rtl/common_cells/fifo_v3.sv:35.19" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "rtl/common_cells/fifo_v3.sv:49.29" *)
  wire [3:0] mem_n;
  (* src = "rtl/common_cells/fifo_v3.sv:49.36" *)
  reg [3:0] mem_q;
  (* src = "rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "rtl/common_cells/fifo_v3.sv:44.30" *)
  wire read_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.46" *)
  reg read_pointer_q;
  (* src = "rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  (* src = "rtl/common_cells/fifo_v3.sv:44.62" *)
  wire write_pointer_n;
  (* src = "rtl/common_cells/fifo_v3.sv:44.79" *)
  reg write_pointer_q;
  assign full_o = status_cnt_q == 2'h2;
  assign data_o = read_pointer_q ? mem_q[3:2] : mem_q[1:0];
  assign \$15  = ~ full_o;
  assign \$17  = push_i && \$15 ;
  assign empty_o = ! status_cnt_q;
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$24  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:3114:Demux$1485 [3], \$auto$rtlil.cc:3114:Demux$1485 [3], \$auto$rtlil.cc:3114:Demux$1485 [1], \$auto$rtlil.cc:3114:Demux$1485 [1] }),
    .Y(mem_n)
  );
  assign write_pointer_n = write_pointer_q + 1'h1;
  assign \$37  = ~ empty_o;
  assign \$39  = pop_i && \$37 ;
  assign read_pointer_n = read_pointer_q + 1'h1;
  assign status_cnt_n = status_cnt_q - { \$auto$rtlil.cc:3092:Mux$18476 [1], 1'h1 };
  assign \$50  = push_i && pop_i;
  assign \$54  = \$50  && \$15 ;
  assign \$58  = \$54  && \$37 ;
  assign \$auto$rtlil.cc:3114:Demux$1485 [1] = write_pointer_q == 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1485 [3] = write_pointer_q == 1'h1;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) write_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18086 ) write_pointer_q <= \$procmux$7863_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18093 ) status_cnt_q <= \$procmux$7860_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) read_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18096 ) read_pointer_q <= \$procmux$7866_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[3:2] <= 2'h0;
    else if (\$17 ) mem_q[3:2] <= mem_n[3:2];
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[1:0] <= 2'h0;
    else if (\$17 ) mem_q[1:0] <= mem_n[1:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18086  = | { flush_i, \$17  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18089  = | { flush_i, \$39 , \$58 , \$17  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18091  = { flush_i, \$58  } != 2'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18096  = | { flush_i, \$39  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18093  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18091 , \$auto$opt_dff.cc:194:make_patterns_logic$18089  };
  assign \$auto$rtlil.cc:3092:Mux$18476 [1] = ~ \$39 ;
  assign \$procmux$7860_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$procmux$7863_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : write_pointer_n;
  assign \$procmux$7866_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : read_pointer_n;
  assign \$auto$rtlil.cc:3092:Mux$18476 [0] = 1'h1;
  assign { \$auto$rtlil.cc:3114:Demux$1485 [2], \$auto$rtlil.cc:3114:Demux$1485 [0] } = { \$auto$rtlil.cc:3114:Demux$1485 [3], \$auto$rtlil.cc:3114:Demux$1485 [1] };
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_periph_err.i_id_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$14 ;
  wire \$16 ;
  wire \$34 ;
  wire \$36 ;
  wire \$47 ;
  wire \$51 ;
  wire \$55 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18104 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18106 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18108 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18481 ;
  wire [1:0] \$procmux$13825_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/fifo_v3.sv:32.19" *)
  input [2:0] data_i;
  wire [2:0] data_i;
  (* src = "rtl/common_cells/fifo_v3.sv:35.19" *)
  output [2:0] data_o;
  reg [2:0] data_o;
  (* src = "rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  assign full_o = status_cnt_q == 1'h1;
  assign \$14  = ~ full_o;
  assign \$16  = push_i && \$14 ;
  assign empty_o = ! status_cnt_q;
  assign \$34  = ~ empty_o;
  assign \$36  = pop_i && \$34 ;
  assign status_cnt_n = status_cnt_q - { \$auto$rtlil.cc:3092:Mux$18481 [1], 1'h1 };
  assign \$47  = push_i && pop_i;
  assign \$51  = \$47  && \$14 ;
  assign \$55  = \$51  && \$34 ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18108 ) status_cnt_q <= \$procmux$13825_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_o <= 3'h0;
    else if (\$16 ) data_o <= data_i;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18104  = | { \$36 , flush_i, \$55 , \$16  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18106  = { flush_i, \$55  } != 2'h1;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18108  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18106 , \$auto$opt_dff.cc:194:make_patterns_logic$18104  };
  assign \$auto$rtlil.cc:3092:Mux$18481 [1] = ~ \$36 ;
  assign \$procmux$13825_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$auto$rtlil.cc:3092:Mux$18481 [0] = 1'h1;
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_xbar_err.i_id_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$14 ;
  wire \$16 ;
  wire \$34 ;
  wire \$36 ;
  wire \$47 ;
  wire \$51 ;
  wire \$55 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18118 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18120 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18122 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18486 ;
  wire [1:0] \$procmux$13982_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/fifo_v3.sv:32.19" *)
  input [2:0] data_i;
  wire [2:0] data_i;
  (* src = "rtl/common_cells/fifo_v3.sv:35.19" *)
  output [2:0] data_o;
  reg [2:0] data_o;
  (* src = "rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  assign full_o = status_cnt_q == 1'h1;
  assign \$14  = ~ full_o;
  assign \$16  = push_i && \$14 ;
  assign empty_o = ! status_cnt_q;
  assign \$34  = ~ empty_o;
  assign \$36  = pop_i && \$34 ;
  assign status_cnt_n = status_cnt_q - { \$auto$rtlil.cc:3092:Mux$18486 [1], 1'h1 };
  assign \$47  = push_i && pop_i;
  assign \$51  = \$47  && \$14 ;
  assign \$55  = \$51  && \$34 ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18122 ) status_cnt_q <= \$procmux$13982_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_o <= 3'h0;
    else if (\$16 ) data_o <= data_i;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18118  = | { \$36 , flush_i, \$55 , \$16  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18120  = { flush_i, \$55  } != 2'h1;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18122  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18120 , \$auto$opt_dff.cc:194:make_patterns_logic$18118  };
  assign \$auto$rtlil.cc:3092:Mux$18486 [1] = ~ \$36 ;
  assign \$procmux$13982_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$auto$rtlil.cc:3092:Mux$18486 [0] = 1'h1;
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_user.i_user_err.i_id_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$14 ;
  wire \$16 ;
  wire \$34 ;
  wire \$36 ;
  wire \$47 ;
  wire \$51 ;
  wire \$55 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18132 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18134 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18136 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18491 ;
  wire [1:0] \$procmux$13080_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/fifo_v3.sv:32.19" *)
  input [2:0] data_i;
  wire [2:0] data_i;
  (* src = "rtl/common_cells/fifo_v3.sv:35.19" *)
  output [2:0] data_o;
  reg [2:0] data_o;
  (* src = "rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  assign full_o = status_cnt_q == 1'h1;
  assign \$14  = ~ full_o;
  assign \$16  = push_i && \$14 ;
  assign empty_o = ! status_cnt_q;
  assign \$34  = ~ empty_o;
  assign \$36  = pop_i && \$34 ;
  assign status_cnt_n = status_cnt_q - { \$auto$rtlil.cc:3092:Mux$18491 [1], 1'h1 };
  assign \$47  = push_i && pop_i;
  assign \$51  = \$47  && \$14 ;
  assign \$55  = \$51  && \$34 ;
  (* src = "rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18136 ) status_cnt_q <= \$procmux$13080_Y ;
  (* src = "rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_o <= 3'h0;
    else if (\$16 ) data_o <= data_i;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18132  = | { \$36 , flush_i, \$55 , \$16  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18134  = { flush_i, \$55  } != 2'h1;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18136  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18134 , \$auto$opt_dff.cc:194:make_patterns_logic$18132  };
  assign \$auto$rtlil.cc:3092:Mux$18491 [1] = ~ \$36 ;
  assign \$procmux$13080_Y  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$auto$rtlil.cc:3092:Mux$18491 [0] = 1'h1;
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "rtl/gpio/gpio.sv:12.8" *)
module \gpio$croc_chip.i_croc_soc.i_croc.i_gpio (clk_i, rst_ni, gpio_i, gpio_o, gpio_out_en_o, gpio_in_sync_o, obi_req_i, obi_rsp_o, interrupt_o);
  wire \$100 ;
  wire \$1000 ;
  wire \$1005 ;
  wire \$1016 ;
  wire \$1018 ;
  wire \$1021 ;
  wire \$1028 ;
  wire \$1030 ;
  wire \$1032 ;
  wire \$1034 ;
  wire \$1036 ;
  wire \$1038 ;
  wire \$104 ;
  wire \$1040 ;
  wire \$1042 ;
  wire \$1044 ;
  wire \$1046 ;
  wire \$1048 ;
  wire \$1050 ;
  wire \$1052 ;
  wire \$1054 ;
  wire \$1056 ;
  wire \$1058 ;
  wire \$1060 ;
  wire \$1062 ;
  wire \$1064 ;
  wire \$1066 ;
  wire \$1068 ;
  wire \$1070 ;
  wire \$1072 ;
  wire \$1074 ;
  wire \$1076 ;
  wire \$1078 ;
  wire \$1080 ;
  wire \$1082 ;
  wire \$1084 ;
  wire \$1086 ;
  wire \$109 ;
  wire \$120 ;
  wire \$122 ;
  wire \$125 ;
  wire \$13 ;
  wire \$132 ;
  wire \$136 ;
  wire \$141 ;
  wire \$152 ;
  wire \$154 ;
  wire \$157 ;
  wire \$164 ;
  wire \$168 ;
  wire \$173 ;
  wire \$184 ;
  wire \$186 ;
  wire \$189 ;
  wire \$196 ;
  wire \$200 ;
  wire \$205 ;
  wire \$216 ;
  wire \$218 ;
  wire \$221 ;
  wire \$228 ;
  wire \$232 ;
  wire \$237 ;
  wire \$24 ;
  wire \$248 ;
  wire \$250 ;
  wire \$253 ;
  wire \$26 ;
  wire \$260 ;
  wire \$264 ;
  wire \$269 ;
  wire \$280 ;
  wire \$282 ;
  wire \$285 ;
  wire \$29 ;
  wire \$292 ;
  wire \$296 ;
  wire \$301 ;
  wire \$312 ;
  wire \$314 ;
  wire \$317 ;
  wire \$324 ;
  wire \$328 ;
  wire \$333 ;
  wire \$344 ;
  wire \$346 ;
  wire \$349 ;
  wire \$356 ;
  wire \$36 ;
  wire \$360 ;
  wire \$365 ;
  wire \$376 ;
  wire \$378 ;
  wire \$381 ;
  wire \$388 ;
  wire \$392 ;
  wire \$397 ;
  wire \$4 ;
  wire \$40 ;
  wire \$408 ;
  wire \$410 ;
  wire \$413 ;
  wire \$420 ;
  wire \$424 ;
  wire \$429 ;
  wire \$440 ;
  wire \$442 ;
  wire \$445 ;
  wire \$45 ;
  wire \$452 ;
  wire \$456 ;
  wire \$461 ;
  wire \$472 ;
  wire \$474 ;
  wire \$477 ;
  wire \$484 ;
  wire \$488 ;
  wire \$493 ;
  wire \$504 ;
  wire \$506 ;
  wire \$509 ;
  wire \$516 ;
  wire \$520 ;
  wire \$525 ;
  wire \$536 ;
  wire \$538 ;
  wire \$541 ;
  wire \$548 ;
  wire \$552 ;
  wire \$557 ;
  wire \$56 ;
  wire \$568 ;
  wire \$570 ;
  wire \$573 ;
  wire \$58 ;
  wire \$580 ;
  wire \$584 ;
  wire \$589 ;
  wire \$600 ;
  wire \$602 ;
  wire \$605 ;
  wire \$61 ;
  wire \$612 ;
  wire \$616 ;
  wire \$621 ;
  wire \$632 ;
  wire \$634 ;
  wire \$637 ;
  wire \$644 ;
  wire \$648 ;
  wire \$653 ;
  wire \$664 ;
  wire \$666 ;
  wire \$669 ;
  wire \$676 ;
  wire \$68 ;
  wire \$680 ;
  wire \$685 ;
  wire \$696 ;
  wire \$698 ;
  wire \$701 ;
  wire \$708 ;
  wire \$712 ;
  wire \$717 ;
  wire \$72 ;
  wire \$728 ;
  wire \$730 ;
  wire \$733 ;
  wire \$740 ;
  wire \$744 ;
  wire \$749 ;
  wire \$760 ;
  wire \$762 ;
  wire \$765 ;
  wire \$77 ;
  wire \$772 ;
  wire \$776 ;
  wire \$781 ;
  wire \$792 ;
  wire \$794 ;
  wire \$797 ;
  wire \$8 ;
  wire \$804 ;
  wire \$808 ;
  wire \$813 ;
  wire \$824 ;
  wire \$826 ;
  wire \$829 ;
  wire \$836 ;
  wire \$840 ;
  wire \$845 ;
  wire \$856 ;
  wire \$858 ;
  wire \$861 ;
  wire \$868 ;
  wire \$872 ;
  wire \$877 ;
  wire \$88 ;
  wire \$888 ;
  wire \$890 ;
  wire \$893 ;
  wire \$90 ;
  wire \$900 ;
  wire \$904 ;
  wire \$909 ;
  wire \$920 ;
  wire \$922 ;
  wire \$925 ;
  wire \$93 ;
  wire \$932 ;
  wire \$936 ;
  wire \$941 ;
  wire \$952 ;
  wire \$954 ;
  wire \$957 ;
  wire \$964 ;
  wire \$968 ;
  wire \$973 ;
  wire \$984 ;
  wire \$986 ;
  wire \$989 ;
  wire \$996 ;
  (* src = "rtl/gpio/gpio.sv:25.34" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[0].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[0].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[0].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[0].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[0].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[0].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[10].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[10].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[10].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[10].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[10].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[10].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[11].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[11].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[11].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[11].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[11].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[11].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[12].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[12].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[12].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[12].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[12].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[12].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[13].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[13].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[13].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[13].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[13].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[13].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[14].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[14].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[14].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[14].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[14].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[14].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[15].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[15].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[15].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[15].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[15].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[15].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[16].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[16].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[16].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[16].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[16].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[16].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[17].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[17].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[17].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[17].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[17].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[17].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[18].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[18].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[18].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[18].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[18].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[18].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[19].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[19].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[19].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[19].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[19].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[19].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[1].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[1].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[1].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[1].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[1].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[1].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[20].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[20].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[20].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[20].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[20].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[20].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[21].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[21].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[21].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[21].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[21].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[21].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[22].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[22].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[22].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[22].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[22].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[22].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[23].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[23].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[23].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[23].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[23].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[23].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[24].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[24].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[24].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[24].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[24].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[24].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[25].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[25].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[25].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[25].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[25].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[25].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[26].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[26].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[26].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[26].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[26].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[26].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[27].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[27].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[27].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[27].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[27].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[27].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[28].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[28].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[28].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[28].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[28].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[28].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[29].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[29].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[29].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[29].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[29].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[29].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[2].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[2].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[2].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[2].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[2].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[2].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[30].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[30].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[30].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[30].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[30].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[30].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[31].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[31].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[31].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[31].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[31].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[31].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[3].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[3].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[3].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[3].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[3].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[3].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[4].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[4].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[4].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[4].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[4].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[4].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[5].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[5].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[5].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[5].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[5].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[5].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[6].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[6].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[6].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[6].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[6].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[6].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[7].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[7].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[7].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[7].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[7].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[7].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[8].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[8].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[8].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[8].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[8].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[8].serial_q ;
  (* src = "rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[9].f_edge ;
  (* src = "rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[9].is_input ;
  (* src = "rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[9].is_output ;
  (* src = "rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[9].r_edge ;
  (* src = "rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[9].serial_d ;
  (* src = "rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[9].serial_q ;
  (* src = "rtl/gpio/gpio.sv:64.25" *)
  wire [31:0] gpio_edge;
  (* src = "rtl/gpio/gpio.sv:30.34" *)
  input [31:0] gpio_i;
  wire [31:0] gpio_i;
  (* src = "rtl/gpio/gpio.sv:39.34" *)
  output [31:0] gpio_in_sync_o;
  wire [31:0] gpio_in_sync_o;
  (* src = "rtl/gpio/gpio.sv:65.25" *)
  wire [31:0] gpio_intrpt;
  (* src = "rtl/gpio/gpio.sv:32.34" *)
  output [31:0] gpio_o;
  wire [31:0] gpio_o;
  (* src = "rtl/gpio/gpio.sv:36.34" *)
  output [31:0] gpio_out_en_o;
  wire [31:0] gpio_out_en_o;
  (* src = "rtl/gpio/gpio.sv:58.33" *)
  wire [159:0] hw2reg;
  (* src = "rtl/gpio/gpio.sv:42.34" *)
  output interrupt_o;
  wire interrupt_o;
  (* src = "rtl/gpio/gpio.sv:45.34" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "rtl/gpio/gpio.sv:47.34" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "rtl/gpio/gpio.sv:57.33" *)
  wire [223:0] reg2hw;
  (* src = "rtl/gpio/gpio.sv:27.34" *)
  input rst_ni;
  wire rst_ni;
  assign \gen_gpios[31].r_edge  = \gen_gpios[31].serial_d  & \$1000 ;
  assign gpio_edge[31] = reg2hw[217] ? \gen_gpios[31].r_edge  : \gen_gpios[31].f_edge ;
  assign \$1005  = ~ reg2hw[223];
  assign \gen_gpios[31].is_input  = reg2hw[222] & \$1005 ;
  assign \gen_gpios[31].is_output  = reg2hw[222] & reg2hw[223];
  assign \gen_gpios[3].f_edge  = \$100  & \gen_gpios[3].serial_q ;
  assign hw2reg[159] = \gen_gpios[31].serial_q  & \gen_gpios[31].is_input ;
  assign gpio_o[31] = reg2hw[221] & \gen_gpios[31].is_output ;
  assign \$1016  = \gen_gpios[31].is_output  & reg2hw[220];
  assign \$1018  = ~ reg2hw[221];
  assign \$1021  = gpio_edge[31] & reg2hw[219];
  assign gpio_intrpt[31] = \$1021  & \gen_gpios[31].is_input ;
  assign \$1028  = reg2hw[1] | reg2hw[8];
  assign \$1030  = \$1028  | reg2hw[15];
  assign \$104  = ~ \gen_gpios[3].serial_q ;
  assign \$1032  = \$1030  | reg2hw[22];
  assign \$1034  = \$1032  | reg2hw[29];
  assign \$1036  = \$1034  | reg2hw[36];
  assign \$1038  = \$1036  | reg2hw[43];
  assign \$1040  = \$1038  | reg2hw[50];
  assign \$1042  = \$1040  | reg2hw[57];
  assign \$1044  = \$1042  | reg2hw[64];
  assign \$1046  = \$1044  | reg2hw[71];
  assign \$1048  = \$1046  | reg2hw[78];
  assign \$1050  = \$1048  | reg2hw[85];
  assign \gen_gpios[3].r_edge  = \gen_gpios[3].serial_d  & \$104 ;
  assign \$1052  = \$1050  | reg2hw[92];
  assign \$1054  = \$1052  | reg2hw[99];
  assign \$1056  = \$1054  | reg2hw[106];
  assign \$1058  = \$1056  | reg2hw[113];
  assign \$1060  = \$1058  | reg2hw[120];
  assign \$1062  = \$1060  | reg2hw[127];
  assign \$1064  = \$1062  | reg2hw[134];
  assign \$1066  = \$1064  | reg2hw[141];
  assign \$1068  = \$1066  | reg2hw[148];
  assign \$1070  = \$1068  | reg2hw[155];
  assign gpio_edge[3] = reg2hw[21] ? \gen_gpios[3].r_edge  : \gen_gpios[3].f_edge ;
  assign \$1072  = \$1070  | reg2hw[162];
  assign \$1074  = \$1072  | reg2hw[169];
  assign \$1076  = \$1074  | reg2hw[176];
  assign \$1078  = \$1076  | reg2hw[183];
  assign \$1080  = \$1078  | reg2hw[190];
  assign \$109  = ~ reg2hw[27];
  assign \$1082  = \$1080  | reg2hw[197];
  assign \$1084  = \$1082  | reg2hw[204];
  assign \$1086  = \$1084  | reg2hw[211];
  assign interrupt_o = \$1086  | reg2hw[218];
  assign gpio_edge[0] = reg2hw[0] ? \gen_gpios[0].r_edge  : \gen_gpios[0].f_edge ;
  assign \gen_gpios[3].is_input  = reg2hw[26] & \$109 ;
  assign \gen_gpios[3].is_output  = reg2hw[26] & reg2hw[27];
  assign hw2reg[19] = \gen_gpios[3].serial_q  & \gen_gpios[3].is_input ;
  assign gpio_o[3] = reg2hw[25] & \gen_gpios[3].is_output ;
  assign \$120  = \gen_gpios[3].is_output  & reg2hw[24];
  assign \$13  = ~ reg2hw[6];
  assign \$122  = ~ reg2hw[25];
  assign \$125  = gpio_edge[3] & reg2hw[23];
  assign gpio_intrpt[3] = \$125  & \gen_gpios[3].is_input ;
  assign \$132  = ~ \gen_gpios[4].serial_d ;
  assign \gen_gpios[4].f_edge  = \$132  & \gen_gpios[4].serial_q ;
  assign \$136  = ~ \gen_gpios[4].serial_q ;
  assign \gen_gpios[4].r_edge  = \gen_gpios[4].serial_d  & \$136 ;
  assign gpio_edge[4] = reg2hw[28] ? \gen_gpios[4].r_edge  : \gen_gpios[4].f_edge ;
  assign \gen_gpios[0].is_input  = reg2hw[5] & \$13 ;
  assign \$141  = ~ reg2hw[34];
  assign \gen_gpios[4].is_input  = reg2hw[33] & \$141 ;
  assign \gen_gpios[4].is_output  = reg2hw[33] & reg2hw[34];
  assign hw2reg[24] = \gen_gpios[4].serial_q  & \gen_gpios[4].is_input ;
  assign gpio_o[4] = reg2hw[32] & \gen_gpios[4].is_output ;
  assign \$152  = \gen_gpios[4].is_output  & reg2hw[31];
  assign \$154  = ~ reg2hw[32];
  assign \$157  = gpio_edge[4] & reg2hw[30];
  assign gpio_intrpt[4] = \$157  & \gen_gpios[4].is_input ;
  assign \gen_gpios[0].is_output  = reg2hw[5] & reg2hw[6];
  assign \$164  = ~ \gen_gpios[5].serial_d ;
  assign \gen_gpios[5].f_edge  = \$164  & \gen_gpios[5].serial_q ;
  assign \$168  = ~ \gen_gpios[5].serial_q ;
  assign \gen_gpios[5].r_edge  = \gen_gpios[5].serial_d  & \$168 ;
  assign gpio_edge[5] = reg2hw[35] ? \gen_gpios[5].r_edge  : \gen_gpios[5].f_edge ;
  assign \$173  = ~ reg2hw[41];
  assign \gen_gpios[5].is_input  = reg2hw[40] & \$173 ;
  assign \gen_gpios[5].is_output  = reg2hw[40] & reg2hw[41];
  assign hw2reg[29] = \gen_gpios[5].serial_q  & \gen_gpios[5].is_input ;
  assign hw2reg[4] = \gen_gpios[0].serial_q  & \gen_gpios[0].is_input ;
  assign gpio_o[5] = reg2hw[39] & \gen_gpios[5].is_output ;
  assign \$184  = \gen_gpios[5].is_output  & reg2hw[38];
  assign \$186  = ~ reg2hw[39];
  assign \$189  = gpio_edge[5] & reg2hw[37];
  assign gpio_intrpt[5] = \$189  & \gen_gpios[5].is_input ;
  assign \$196  = ~ \gen_gpios[6].serial_d ;
  assign \gen_gpios[6].f_edge  = \$196  & \gen_gpios[6].serial_q ;
  assign \$200  = ~ \gen_gpios[6].serial_q ;
  assign gpio_o[0] = reg2hw[4] & \gen_gpios[0].is_output ;
  assign \gen_gpios[6].r_edge  = \gen_gpios[6].serial_d  & \$200 ;
  assign gpio_edge[6] = reg2hw[42] ? \gen_gpios[6].r_edge  : \gen_gpios[6].f_edge ;
  assign \$205  = ~ reg2hw[48];
  assign \gen_gpios[6].is_input  = reg2hw[47] & \$205 ;
  assign \gen_gpios[6].is_output  = reg2hw[47] & reg2hw[48];
  assign hw2reg[34] = \gen_gpios[6].serial_q  & \gen_gpios[6].is_input ;
  assign gpio_o[6] = reg2hw[46] & \gen_gpios[6].is_output ;
  assign \$216  = \gen_gpios[6].is_output  & reg2hw[45];
  assign \$218  = ~ reg2hw[46];
  assign \$221  = gpio_edge[6] & reg2hw[44];
  assign gpio_intrpt[6] = \$221  & \gen_gpios[6].is_input ;
  assign \$228  = ~ \gen_gpios[7].serial_d ;
  assign \gen_gpios[7].f_edge  = \$228  & \gen_gpios[7].serial_q ;
  assign \$24  = \gen_gpios[0].is_output  & reg2hw[3];
  assign \$232  = ~ \gen_gpios[7].serial_q ;
  assign \gen_gpios[7].r_edge  = \gen_gpios[7].serial_d  & \$232 ;
  assign gpio_edge[7] = reg2hw[49] ? \gen_gpios[7].r_edge  : \gen_gpios[7].f_edge ;
  assign \$237  = ~ reg2hw[55];
  assign \gen_gpios[7].is_input  = reg2hw[54] & \$237 ;
  assign \gen_gpios[7].is_output  = reg2hw[54] & reg2hw[55];
  assign hw2reg[39] = \gen_gpios[7].serial_q  & \gen_gpios[7].is_input ;
  assign gpio_o[7] = reg2hw[53] & \gen_gpios[7].is_output ;
  assign \$248  = \gen_gpios[7].is_output  & reg2hw[52];
  assign \$250  = ~ reg2hw[53];
  assign \$26  = ~ reg2hw[4];
  assign \$253  = gpio_edge[7] & reg2hw[51];
  assign gpio_intrpt[7] = \$253  & \gen_gpios[7].is_input ;
  assign \$260  = ~ \gen_gpios[8].serial_d ;
  assign \gen_gpios[8].f_edge  = \$260  & \gen_gpios[8].serial_q ;
  assign \$264  = ~ \gen_gpios[8].serial_q ;
  assign \gen_gpios[8].r_edge  = \gen_gpios[8].serial_d  & \$264 ;
  assign gpio_edge[8] = reg2hw[56] ? \gen_gpios[8].r_edge  : \gen_gpios[8].f_edge ;
  assign \$269  = ~ reg2hw[62];
  assign \gen_gpios[8].is_input  = reg2hw[61] & \$269 ;
  assign \gen_gpios[8].is_output  = reg2hw[61] & reg2hw[62];
  assign hw2reg[44] = \gen_gpios[8].serial_q  & \gen_gpios[8].is_input ;
  assign gpio_o[8] = reg2hw[60] & \gen_gpios[8].is_output ;
  assign \$280  = \gen_gpios[8].is_output  & reg2hw[59];
  assign \$29  = gpio_edge[0] & reg2hw[2];
  assign \$282  = ~ reg2hw[60];
  assign \$285  = gpio_edge[8] & reg2hw[58];
  assign gpio_intrpt[8] = \$285  & \gen_gpios[8].is_input ;
  assign \$292  = ~ \gen_gpios[9].serial_d ;
  assign \gen_gpios[9].f_edge  = \$292  & \gen_gpios[9].serial_q ;
  assign \$296  = ~ \gen_gpios[9].serial_q ;
  assign \gen_gpios[9].r_edge  = \gen_gpios[9].serial_d  & \$296 ;
  assign gpio_edge[9] = reg2hw[63] ? \gen_gpios[9].r_edge  : \gen_gpios[9].f_edge ;
  assign \$4  = ~ \gen_gpios[0].serial_d ;
  assign gpio_intrpt[0] = \$29  & \gen_gpios[0].is_input ;
  assign \$301  = ~ reg2hw[69];
  assign \gen_gpios[9].is_input  = reg2hw[68] & \$301 ;
  assign \gen_gpios[9].is_output  = reg2hw[68] & reg2hw[69];
  assign hw2reg[49] = \gen_gpios[9].serial_q  & \gen_gpios[9].is_input ;
  assign gpio_o[9] = reg2hw[67] & \gen_gpios[9].is_output ;
  assign \$312  = \gen_gpios[9].is_output  & reg2hw[66];
  assign \$314  = ~ reg2hw[67];
  assign \$317  = gpio_edge[9] & reg2hw[65];
  assign gpio_intrpt[9] = \$317  & \gen_gpios[9].is_input ;
  assign \$324  = ~ \gen_gpios[10].serial_d ;
  assign \gen_gpios[10].f_edge  = \$324  & \gen_gpios[10].serial_q ;
  assign \$328  = ~ \gen_gpios[10].serial_q ;
  assign \gen_gpios[10].r_edge  = \gen_gpios[10].serial_d  & \$328 ;
  assign gpio_edge[10] = reg2hw[70] ? \gen_gpios[10].r_edge  : \gen_gpios[10].f_edge ;
  assign \$333  = ~ reg2hw[76];
  assign \gen_gpios[10].is_input  = reg2hw[75] & \$333 ;
  assign \gen_gpios[10].is_output  = reg2hw[75] & reg2hw[76];
  assign hw2reg[54] = \gen_gpios[10].serial_q  & \gen_gpios[10].is_input ;
  assign gpio_o[10] = reg2hw[74] & \gen_gpios[10].is_output ;
  assign \$344  = \gen_gpios[10].is_output  & reg2hw[73];
  assign \$346  = ~ reg2hw[74];
  assign \$349  = gpio_edge[10] & reg2hw[72];
  assign \$36  = ~ \gen_gpios[1].serial_d ;
  assign gpio_intrpt[10] = \$349  & \gen_gpios[10].is_input ;
  assign \$356  = ~ \gen_gpios[11].serial_d ;
  assign \gen_gpios[11].f_edge  = \$356  & \gen_gpios[11].serial_q ;
  assign \$360  = ~ \gen_gpios[11].serial_q ;
  assign \gen_gpios[11].r_edge  = \gen_gpios[11].serial_d  & \$360 ;
  assign gpio_edge[11] = reg2hw[77] ? \gen_gpios[11].r_edge  : \gen_gpios[11].f_edge ;
  assign \$365  = ~ reg2hw[83];
  assign \gen_gpios[11].is_input  = reg2hw[82] & \$365 ;
  assign \gen_gpios[11].is_output  = reg2hw[82] & reg2hw[83];
  assign \gen_gpios[1].f_edge  = \$36  & \gen_gpios[1].serial_q ;
  assign hw2reg[59] = \gen_gpios[11].serial_q  & \gen_gpios[11].is_input ;
  assign gpio_o[11] = reg2hw[81] & \gen_gpios[11].is_output ;
  assign \$376  = \gen_gpios[11].is_output  & reg2hw[80];
  assign \$378  = ~ reg2hw[81];
  assign \$381  = gpio_edge[11] & reg2hw[79];
  assign gpio_intrpt[11] = \$381  & \gen_gpios[11].is_input ;
  assign \$388  = ~ \gen_gpios[12].serial_d ;
  assign \gen_gpios[12].f_edge  = \$388  & \gen_gpios[12].serial_q ;
  assign \$40  = ~ \gen_gpios[1].serial_q ;
  assign \$392  = ~ \gen_gpios[12].serial_q ;
  assign \gen_gpios[12].r_edge  = \gen_gpios[12].serial_d  & \$392 ;
  assign gpio_edge[12] = reg2hw[84] ? \gen_gpios[12].r_edge  : \gen_gpios[12].f_edge ;
  assign \$397  = ~ reg2hw[90];
  assign \gen_gpios[12].is_input  = reg2hw[89] & \$397 ;
  assign \gen_gpios[12].is_output  = reg2hw[89] & reg2hw[90];
  assign hw2reg[64] = \gen_gpios[12].serial_q  & \gen_gpios[12].is_input ;
  assign gpio_o[12] = reg2hw[88] & \gen_gpios[12].is_output ;
  assign \$408  = \gen_gpios[12].is_output  & reg2hw[87];
  assign \$410  = ~ reg2hw[88];
  assign \gen_gpios[1].r_edge  = \gen_gpios[1].serial_d  & \$40 ;
  assign \$413  = gpio_edge[12] & reg2hw[86];
  assign gpio_intrpt[12] = \$413  & \gen_gpios[12].is_input ;
  assign \$420  = ~ \gen_gpios[13].serial_d ;
  assign \gen_gpios[13].f_edge  = \$420  & \gen_gpios[13].serial_q ;
  assign \$424  = ~ \gen_gpios[13].serial_q ;
  assign \gen_gpios[13].r_edge  = \gen_gpios[13].serial_d  & \$424 ;
  assign gpio_edge[13] = reg2hw[91] ? \gen_gpios[13].r_edge  : \gen_gpios[13].f_edge ;
  assign \$429  = ~ reg2hw[97];
  assign gpio_edge[1] = reg2hw[7] ? \gen_gpios[1].r_edge  : \gen_gpios[1].f_edge ;
  assign \gen_gpios[13].is_input  = reg2hw[96] & \$429 ;
  assign \gen_gpios[13].is_output  = reg2hw[96] & reg2hw[97];
  assign hw2reg[69] = \gen_gpios[13].serial_q  & \gen_gpios[13].is_input ;
  assign gpio_o[13] = reg2hw[95] & \gen_gpios[13].is_output ;
  assign \$440  = \gen_gpios[13].is_output  & reg2hw[94];
  assign \$45  = ~ reg2hw[13];
  assign \$442  = ~ reg2hw[95];
  assign \$445  = gpio_edge[13] & reg2hw[93];
  assign gpio_intrpt[13] = \$445  & \gen_gpios[13].is_input ;
  assign \$452  = ~ \gen_gpios[14].serial_d ;
  assign \gen_gpios[14].f_edge  = \$452  & \gen_gpios[14].serial_q ;
  assign \$456  = ~ \gen_gpios[14].serial_q ;
  assign \gen_gpios[14].r_edge  = \gen_gpios[14].serial_d  & \$456 ;
  assign gpio_edge[14] = reg2hw[98] ? \gen_gpios[14].r_edge  : \gen_gpios[14].f_edge ;
  assign \gen_gpios[1].is_input  = reg2hw[12] & \$45 ;
  assign \$461  = ~ reg2hw[104];
  assign \gen_gpios[14].is_input  = reg2hw[103] & \$461 ;
  assign \gen_gpios[14].is_output  = reg2hw[103] & reg2hw[104];
  assign hw2reg[74] = \gen_gpios[14].serial_q  & \gen_gpios[14].is_input ;
  assign gpio_o[14] = reg2hw[102] & \gen_gpios[14].is_output ;
  assign \$472  = \gen_gpios[14].is_output  & reg2hw[101];
  assign \$474  = ~ reg2hw[102];
  assign \$477  = gpio_edge[14] & reg2hw[100];
  assign gpio_intrpt[14] = \$477  & \gen_gpios[14].is_input ;
  assign \gen_gpios[1].is_output  = reg2hw[12] & reg2hw[13];
  assign \$484  = ~ \gen_gpios[15].serial_d ;
  assign \gen_gpios[15].f_edge  = \$484  & \gen_gpios[15].serial_q ;
  assign \$488  = ~ \gen_gpios[15].serial_q ;
  assign \gen_gpios[15].r_edge  = \gen_gpios[15].serial_d  & \$488 ;
  assign gpio_edge[15] = reg2hw[105] ? \gen_gpios[15].r_edge  : \gen_gpios[15].f_edge ;
  assign \$493  = ~ reg2hw[111];
  assign \gen_gpios[15].is_input  = reg2hw[110] & \$493 ;
  assign \gen_gpios[15].is_output  = reg2hw[110] & reg2hw[111];
  assign hw2reg[79] = \gen_gpios[15].serial_q  & \gen_gpios[15].is_input ;
  assign \gen_gpios[0].f_edge  = \$4  & \gen_gpios[0].serial_q ;
  assign hw2reg[9] = \gen_gpios[1].serial_q  & \gen_gpios[1].is_input ;
  assign gpio_o[15] = reg2hw[109] & \gen_gpios[15].is_output ;
  assign \$504  = \gen_gpios[15].is_output  & reg2hw[108];
  assign \$506  = ~ reg2hw[109];
  assign \$509  = gpio_edge[15] & reg2hw[107];
  assign gpio_intrpt[15] = \$509  & \gen_gpios[15].is_input ;
  assign \$516  = ~ \gen_gpios[16].serial_d ;
  assign \gen_gpios[16].f_edge  = \$516  & \gen_gpios[16].serial_q ;
  assign \$520  = ~ \gen_gpios[16].serial_q ;
  assign gpio_o[1] = reg2hw[11] & \gen_gpios[1].is_output ;
  assign \gen_gpios[16].r_edge  = \gen_gpios[16].serial_d  & \$520 ;
  assign gpio_edge[16] = reg2hw[112] ? \gen_gpios[16].r_edge  : \gen_gpios[16].f_edge ;
  assign \$525  = ~ reg2hw[118];
  assign \gen_gpios[16].is_input  = reg2hw[117] & \$525 ;
  assign \gen_gpios[16].is_output  = reg2hw[117] & reg2hw[118];
  assign hw2reg[84] = \gen_gpios[16].serial_q  & \gen_gpios[16].is_input ;
  assign gpio_o[16] = reg2hw[116] & \gen_gpios[16].is_output ;
  assign \$536  = \gen_gpios[16].is_output  & reg2hw[115];
  assign \$538  = ~ reg2hw[116];
  assign \$541  = gpio_edge[16] & reg2hw[114];
  assign gpio_intrpt[16] = \$541  & \gen_gpios[16].is_input ;
  assign \$548  = ~ \gen_gpios[17].serial_d ;
  assign \gen_gpios[17].f_edge  = \$548  & \gen_gpios[17].serial_q ;
  assign \$56  = \gen_gpios[1].is_output  & reg2hw[10];
  assign \$552  = ~ \gen_gpios[17].serial_q ;
  assign \gen_gpios[17].r_edge  = \gen_gpios[17].serial_d  & \$552 ;
  assign gpio_edge[17] = reg2hw[119] ? \gen_gpios[17].r_edge  : \gen_gpios[17].f_edge ;
  assign \$557  = ~ reg2hw[125];
  assign \gen_gpios[17].is_input  = reg2hw[124] & \$557 ;
  assign \gen_gpios[17].is_output  = reg2hw[124] & reg2hw[125];
  assign hw2reg[89] = \gen_gpios[17].serial_q  & \gen_gpios[17].is_input ;
  assign gpio_o[17] = reg2hw[123] & \gen_gpios[17].is_output ;
  assign \$568  = \gen_gpios[17].is_output  & reg2hw[122];
  assign \$570  = ~ reg2hw[123];
  assign \$58  = ~ reg2hw[11];
  assign \$573  = gpio_edge[17] & reg2hw[121];
  assign gpio_intrpt[17] = \$573  & \gen_gpios[17].is_input ;
  assign \$580  = ~ \gen_gpios[18].serial_d ;
  assign \gen_gpios[18].f_edge  = \$580  & \gen_gpios[18].serial_q ;
  assign \$584  = ~ \gen_gpios[18].serial_q ;
  assign \gen_gpios[18].r_edge  = \gen_gpios[18].serial_d  & \$584 ;
  assign gpio_edge[18] = reg2hw[126] ? \gen_gpios[18].r_edge  : \gen_gpios[18].f_edge ;
  assign \$589  = ~ reg2hw[132];
  assign \gen_gpios[18].is_input  = reg2hw[131] & \$589 ;
  assign \gen_gpios[18].is_output  = reg2hw[131] & reg2hw[132];
  assign hw2reg[94] = \gen_gpios[18].serial_q  & \gen_gpios[18].is_input ;
  assign gpio_o[18] = reg2hw[130] & \gen_gpios[18].is_output ;
  assign \$600  = \gen_gpios[18].is_output  & reg2hw[129];
  assign \$61  = gpio_edge[1] & reg2hw[9];
  assign \$602  = ~ reg2hw[130];
  assign \$605  = gpio_edge[18] & reg2hw[128];
  assign gpio_intrpt[18] = \$605  & \gen_gpios[18].is_input ;
  assign \$612  = ~ \gen_gpios[19].serial_d ;
  assign \gen_gpios[19].f_edge  = \$612  & \gen_gpios[19].serial_q ;
  assign \$616  = ~ \gen_gpios[19].serial_q ;
  assign \gen_gpios[19].r_edge  = \gen_gpios[19].serial_d  & \$616 ;
  assign gpio_edge[19] = reg2hw[133] ? \gen_gpios[19].r_edge  : \gen_gpios[19].f_edge ;
  assign gpio_intrpt[1] = \$61  & \gen_gpios[1].is_input ;
  assign \$621  = ~ reg2hw[139];
  assign \gen_gpios[19].is_input  = reg2hw[138] & \$621 ;
  assign \gen_gpios[19].is_output  = reg2hw[138] & reg2hw[139];
  assign hw2reg[99] = \gen_gpios[19].serial_q  & \gen_gpios[19].is_input ;
  assign gpio_o[19] = reg2hw[137] & \gen_gpios[19].is_output ;
  assign \$632  = \gen_gpios[19].is_output  & reg2hw[136];
  assign \$634  = ~ reg2hw[137];
  assign \$637  = gpio_edge[19] & reg2hw[135];
  assign gpio_intrpt[19] = \$637  & \gen_gpios[19].is_input ;
  assign \$644  = ~ \gen_gpios[20].serial_d ;
  assign \gen_gpios[20].f_edge  = \$644  & \gen_gpios[20].serial_q ;
  assign \$648  = ~ \gen_gpios[20].serial_q ;
  assign \gen_gpios[20].r_edge  = \gen_gpios[20].serial_d  & \$648 ;
  assign gpio_edge[20] = reg2hw[140] ? \gen_gpios[20].r_edge  : \gen_gpios[20].f_edge ;
  assign \$653  = ~ reg2hw[146];
  assign \gen_gpios[20].is_input  = reg2hw[145] & \$653 ;
  assign \gen_gpios[20].is_output  = reg2hw[145] & reg2hw[146];
  assign hw2reg[104] = \gen_gpios[20].serial_q  & \gen_gpios[20].is_input ;
  assign gpio_o[20] = reg2hw[144] & \gen_gpios[20].is_output ;
  assign \$664  = \gen_gpios[20].is_output  & reg2hw[143];
  assign \$666  = ~ reg2hw[144];
  assign \$669  = gpio_edge[20] & reg2hw[142];
  assign \$68  = ~ \gen_gpios[2].serial_d ;
  assign gpio_intrpt[20] = \$669  & \gen_gpios[20].is_input ;
  assign \$676  = ~ \gen_gpios[21].serial_d ;
  assign \gen_gpios[21].f_edge  = \$676  & \gen_gpios[21].serial_q ;
  assign \$680  = ~ \gen_gpios[21].serial_q ;
  assign \gen_gpios[21].r_edge  = \gen_gpios[21].serial_d  & \$680 ;
  assign gpio_edge[21] = reg2hw[147] ? \gen_gpios[21].r_edge  : \gen_gpios[21].f_edge ;
  assign \$685  = ~ reg2hw[153];
  assign \gen_gpios[21].is_input  = reg2hw[152] & \$685 ;
  assign \gen_gpios[21].is_output  = reg2hw[152] & reg2hw[153];
  assign \gen_gpios[2].f_edge  = \$68  & \gen_gpios[2].serial_q ;
  assign hw2reg[109] = \gen_gpios[21].serial_q  & \gen_gpios[21].is_input ;
  assign gpio_o[21] = reg2hw[151] & \gen_gpios[21].is_output ;
  assign \$696  = \gen_gpios[21].is_output  & reg2hw[150];
  assign \$698  = ~ reg2hw[151];
  assign \$8  = ~ \gen_gpios[0].serial_q ;
  assign \$701  = gpio_edge[21] & reg2hw[149];
  assign gpio_intrpt[21] = \$701  & \gen_gpios[21].is_input ;
  assign \$708  = ~ \gen_gpios[22].serial_d ;
  assign \gen_gpios[22].f_edge  = \$708  & \gen_gpios[22].serial_q ;
  assign \$72  = ~ \gen_gpios[2].serial_q ;
  assign \$712  = ~ \gen_gpios[22].serial_q ;
  assign \gen_gpios[22].r_edge  = \gen_gpios[22].serial_d  & \$712 ;
  assign gpio_edge[22] = reg2hw[154] ? \gen_gpios[22].r_edge  : \gen_gpios[22].f_edge ;
  assign \$717  = ~ reg2hw[160];
  assign \gen_gpios[22].is_input  = reg2hw[159] & \$717 ;
  assign \gen_gpios[22].is_output  = reg2hw[159] & reg2hw[160];
  assign hw2reg[114] = \gen_gpios[22].serial_q  & \gen_gpios[22].is_input ;
  assign gpio_o[22] = reg2hw[158] & \gen_gpios[22].is_output ;
  assign \$728  = \gen_gpios[22].is_output  & reg2hw[157];
  assign \$730  = ~ reg2hw[158];
  assign \gen_gpios[2].r_edge  = \gen_gpios[2].serial_d  & \$72 ;
  assign \$733  = gpio_edge[22] & reg2hw[156];
  assign gpio_intrpt[22] = \$733  & \gen_gpios[22].is_input ;
  assign \$740  = ~ \gen_gpios[23].serial_d ;
  assign \gen_gpios[23].f_edge  = \$740  & \gen_gpios[23].serial_q ;
  assign \$744  = ~ \gen_gpios[23].serial_q ;
  assign \gen_gpios[23].r_edge  = \gen_gpios[23].serial_d  & \$744 ;
  assign gpio_edge[23] = reg2hw[161] ? \gen_gpios[23].r_edge  : \gen_gpios[23].f_edge ;
  assign \$749  = ~ reg2hw[167];
  assign gpio_edge[2] = reg2hw[14] ? \gen_gpios[2].r_edge  : \gen_gpios[2].f_edge ;
  assign \gen_gpios[23].is_input  = reg2hw[166] & \$749 ;
  assign \gen_gpios[23].is_output  = reg2hw[166] & reg2hw[167];
  assign hw2reg[119] = \gen_gpios[23].serial_q  & \gen_gpios[23].is_input ;
  assign gpio_o[23] = reg2hw[165] & \gen_gpios[23].is_output ;
  assign \$760  = \gen_gpios[23].is_output  & reg2hw[164];
  assign \$77  = ~ reg2hw[20];
  assign \$762  = ~ reg2hw[165];
  assign \$765  = gpio_edge[23] & reg2hw[163];
  assign gpio_intrpt[23] = \$765  & \gen_gpios[23].is_input ;
  assign \$772  = ~ \gen_gpios[24].serial_d ;
  assign \gen_gpios[24].f_edge  = \$772  & \gen_gpios[24].serial_q ;
  assign \$776  = ~ \gen_gpios[24].serial_q ;
  assign \gen_gpios[24].r_edge  = \gen_gpios[24].serial_d  & \$776 ;
  assign gpio_edge[24] = reg2hw[168] ? \gen_gpios[24].r_edge  : \gen_gpios[24].f_edge ;
  assign \gen_gpios[2].is_input  = reg2hw[19] & \$77 ;
  assign \$781  = ~ reg2hw[174];
  assign \gen_gpios[24].is_input  = reg2hw[173] & \$781 ;
  assign \gen_gpios[24].is_output  = reg2hw[173] & reg2hw[174];
  assign hw2reg[124] = \gen_gpios[24].serial_q  & \gen_gpios[24].is_input ;
  assign gpio_o[24] = reg2hw[172] & \gen_gpios[24].is_output ;
  assign \$792  = \gen_gpios[24].is_output  & reg2hw[171];
  assign \$794  = ~ reg2hw[172];
  assign \$797  = gpio_edge[24] & reg2hw[170];
  assign gpio_intrpt[24] = \$797  & \gen_gpios[24].is_input ;
  assign \gen_gpios[2].is_output  = reg2hw[19] & reg2hw[20];
  assign \$804  = ~ \gen_gpios[25].serial_d ;
  assign \gen_gpios[25].f_edge  = \$804  & \gen_gpios[25].serial_q ;
  assign \$808  = ~ \gen_gpios[25].serial_q ;
  assign \gen_gpios[25].r_edge  = \gen_gpios[25].serial_d  & \$808 ;
  assign gpio_edge[25] = reg2hw[175] ? \gen_gpios[25].r_edge  : \gen_gpios[25].f_edge ;
  assign \$813  = ~ reg2hw[181];
  assign \gen_gpios[25].is_input  = reg2hw[180] & \$813 ;
  assign \gen_gpios[25].is_output  = reg2hw[180] & reg2hw[181];
  assign hw2reg[129] = \gen_gpios[25].serial_q  & \gen_gpios[25].is_input ;
  assign hw2reg[14] = \gen_gpios[2].serial_q  & \gen_gpios[2].is_input ;
  assign gpio_o[25] = reg2hw[179] & \gen_gpios[25].is_output ;
  assign \$824  = \gen_gpios[25].is_output  & reg2hw[178];
  assign \$826  = ~ reg2hw[179];
  assign \$829  = gpio_edge[25] & reg2hw[177];
  assign gpio_intrpt[25] = \$829  & \gen_gpios[25].is_input ;
  assign \$836  = ~ \gen_gpios[26].serial_d ;
  assign \gen_gpios[26].f_edge  = \$836  & \gen_gpios[26].serial_q ;
  assign \$840  = ~ \gen_gpios[26].serial_q ;
  assign gpio_o[2] = reg2hw[18] & \gen_gpios[2].is_output ;
  assign \gen_gpios[26].r_edge  = \gen_gpios[26].serial_d  & \$840 ;
  assign gpio_edge[26] = reg2hw[182] ? \gen_gpios[26].r_edge  : \gen_gpios[26].f_edge ;
  assign \$845  = ~ reg2hw[188];
  assign \gen_gpios[26].is_input  = reg2hw[187] & \$845 ;
  assign \gen_gpios[26].is_output  = reg2hw[187] & reg2hw[188];
  assign hw2reg[134] = \gen_gpios[26].serial_q  & \gen_gpios[26].is_input ;
  assign gpio_o[26] = reg2hw[186] & \gen_gpios[26].is_output ;
  assign \$856  = \gen_gpios[26].is_output  & reg2hw[185];
  assign \$858  = ~ reg2hw[186];
  assign \$861  = gpio_edge[26] & reg2hw[184];
  assign gpio_intrpt[26] = \$861  & \gen_gpios[26].is_input ;
  assign \$868  = ~ \gen_gpios[27].serial_d ;
  assign \gen_gpios[27].f_edge  = \$868  & \gen_gpios[27].serial_q ;
  assign \$88  = \gen_gpios[2].is_output  & reg2hw[17];
  assign \$872  = ~ \gen_gpios[27].serial_q ;
  assign \gen_gpios[27].r_edge  = \gen_gpios[27].serial_d  & \$872 ;
  assign gpio_edge[27] = reg2hw[189] ? \gen_gpios[27].r_edge  : \gen_gpios[27].f_edge ;
  assign \$877  = ~ reg2hw[195];
  assign \gen_gpios[27].is_input  = reg2hw[194] & \$877 ;
  assign \gen_gpios[27].is_output  = reg2hw[194] & reg2hw[195];
  assign hw2reg[139] = \gen_gpios[27].serial_q  & \gen_gpios[27].is_input ;
  assign gpio_o[27] = reg2hw[193] & \gen_gpios[27].is_output ;
  assign \$888  = \gen_gpios[27].is_output  & reg2hw[192];
  assign \$890  = ~ reg2hw[193];
  assign \$90  = ~ reg2hw[18];
  assign \$893  = gpio_edge[27] & reg2hw[191];
  assign gpio_intrpt[27] = \$893  & \gen_gpios[27].is_input ;
  assign \$900  = ~ \gen_gpios[28].serial_d ;
  assign \gen_gpios[0].r_edge  = \gen_gpios[0].serial_d  & \$8 ;
  assign \gen_gpios[28].f_edge  = \$900  & \gen_gpios[28].serial_q ;
  assign \$904  = ~ \gen_gpios[28].serial_q ;
  assign \gen_gpios[28].r_edge  = \gen_gpios[28].serial_d  & \$904 ;
  assign gpio_edge[28] = reg2hw[196] ? \gen_gpios[28].r_edge  : \gen_gpios[28].f_edge ;
  assign \$909  = ~ reg2hw[202];
  assign \gen_gpios[28].is_input  = reg2hw[201] & \$909 ;
  assign \gen_gpios[28].is_output  = reg2hw[201] & reg2hw[202];
  assign hw2reg[144] = \gen_gpios[28].serial_q  & \gen_gpios[28].is_input ;
  assign gpio_o[28] = reg2hw[200] & \gen_gpios[28].is_output ;
  assign \$920  = \gen_gpios[28].is_output  & reg2hw[199];
  assign \$93  = gpio_edge[2] & reg2hw[16];
  assign \$922  = ~ reg2hw[200];
  assign \$925  = gpio_edge[28] & reg2hw[198];
  assign gpio_intrpt[28] = \$925  & \gen_gpios[28].is_input ;
  assign \$932  = ~ \gen_gpios[29].serial_d ;
  assign \gen_gpios[29].f_edge  = \$932  & \gen_gpios[29].serial_q ;
  assign \$936  = ~ \gen_gpios[29].serial_q ;
  assign \gen_gpios[29].r_edge  = \gen_gpios[29].serial_d  & \$936 ;
  assign gpio_edge[29] = reg2hw[203] ? \gen_gpios[29].r_edge  : \gen_gpios[29].f_edge ;
  assign gpio_intrpt[2] = \$93  & \gen_gpios[2].is_input ;
  assign \$941  = ~ reg2hw[209];
  assign \gen_gpios[29].is_input  = reg2hw[208] & \$941 ;
  assign \gen_gpios[29].is_output  = reg2hw[208] & reg2hw[209];
  assign hw2reg[149] = \gen_gpios[29].serial_q  & \gen_gpios[29].is_input ;
  assign gpio_o[29] = reg2hw[207] & \gen_gpios[29].is_output ;
  assign \$952  = \gen_gpios[29].is_output  & reg2hw[206];
  assign \$954  = ~ reg2hw[207];
  assign \$957  = gpio_edge[29] & reg2hw[205];
  assign gpio_intrpt[29] = \$957  & \gen_gpios[29].is_input ;
  assign \$964  = ~ \gen_gpios[30].serial_d ;
  assign \gen_gpios[30].f_edge  = \$964  & \gen_gpios[30].serial_q ;
  assign \$968  = ~ \gen_gpios[30].serial_q ;
  assign \gen_gpios[30].r_edge  = \gen_gpios[30].serial_d  & \$968 ;
  assign gpio_edge[30] = reg2hw[210] ? \gen_gpios[30].r_edge  : \gen_gpios[30].f_edge ;
  assign \$973  = ~ reg2hw[216];
  assign \gen_gpios[30].is_input  = reg2hw[215] & \$973 ;
  assign \gen_gpios[30].is_output  = reg2hw[215] & reg2hw[216];
  assign hw2reg[154] = \gen_gpios[30].serial_q  & \gen_gpios[30].is_input ;
  assign gpio_o[30] = reg2hw[214] & \gen_gpios[30].is_output ;
  assign \$984  = \gen_gpios[30].is_output  & reg2hw[213];
  assign \$986  = ~ reg2hw[214];
  assign \$989  = gpio_edge[30] & reg2hw[212];
  assign \$100  = ~ \gen_gpios[3].serial_d ;
  assign gpio_intrpt[30] = \$989  & \gen_gpios[30].is_input ;
  assign \$996  = ~ \gen_gpios[31].serial_d ;
  assign \gen_gpios[31].f_edge  = \$996  & \gen_gpios[31].serial_q ;
  assign \$1000  = ~ \gen_gpios[31].serial_q ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[0].serial_q  <= 1'h0;
    else \gen_gpios[0].serial_q  <= \gen_gpios[0].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[10].serial_q  <= 1'h0;
    else \gen_gpios[10].serial_q  <= \gen_gpios[10].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[11].serial_q  <= 1'h0;
    else \gen_gpios[11].serial_q  <= \gen_gpios[11].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[12].serial_q  <= 1'h0;
    else \gen_gpios[12].serial_q  <= \gen_gpios[12].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[13].serial_q  <= 1'h0;
    else \gen_gpios[13].serial_q  <= \gen_gpios[13].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[14].serial_q  <= 1'h0;
    else \gen_gpios[14].serial_q  <= \gen_gpios[14].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[15].serial_q  <= 1'h0;
    else \gen_gpios[15].serial_q  <= \gen_gpios[15].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[16].serial_q  <= 1'h0;
    else \gen_gpios[16].serial_q  <= \gen_gpios[16].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[17].serial_q  <= 1'h0;
    else \gen_gpios[17].serial_q  <= \gen_gpios[17].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[18].serial_q  <= 1'h0;
    else \gen_gpios[18].serial_q  <= \gen_gpios[18].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[19].serial_q  <= 1'h0;
    else \gen_gpios[19].serial_q  <= \gen_gpios[19].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[1].serial_q  <= 1'h0;
    else \gen_gpios[1].serial_q  <= \gen_gpios[1].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[20].serial_q  <= 1'h0;
    else \gen_gpios[20].serial_q  <= \gen_gpios[20].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[21].serial_q  <= 1'h0;
    else \gen_gpios[21].serial_q  <= \gen_gpios[21].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[22].serial_q  <= 1'h0;
    else \gen_gpios[22].serial_q  <= \gen_gpios[22].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[23].serial_q  <= 1'h0;
    else \gen_gpios[23].serial_q  <= \gen_gpios[23].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[24].serial_q  <= 1'h0;
    else \gen_gpios[24].serial_q  <= \gen_gpios[24].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[25].serial_q  <= 1'h0;
    else \gen_gpios[25].serial_q  <= \gen_gpios[25].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[26].serial_q  <= 1'h0;
    else \gen_gpios[26].serial_q  <= \gen_gpios[26].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[27].serial_q  <= 1'h0;
    else \gen_gpios[27].serial_q  <= \gen_gpios[27].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[28].serial_q  <= 1'h0;
    else \gen_gpios[28].serial_q  <= \gen_gpios[28].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[29].serial_q  <= 1'h0;
    else \gen_gpios[29].serial_q  <= \gen_gpios[29].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[2].serial_q  <= 1'h0;
    else \gen_gpios[2].serial_q  <= \gen_gpios[2].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[30].serial_q  <= 1'h0;
    else \gen_gpios[30].serial_q  <= \gen_gpios[30].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[31].serial_q  <= 1'h0;
    else \gen_gpios[31].serial_q  <= \gen_gpios[31].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[3].serial_q  <= 1'h0;
    else \gen_gpios[3].serial_q  <= \gen_gpios[3].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[4].serial_q  <= 1'h0;
    else \gen_gpios[4].serial_q  <= \gen_gpios[4].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[5].serial_q  <= 1'h0;
    else \gen_gpios[5].serial_q  <= \gen_gpios[5].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[6].serial_q  <= 1'h0;
    else \gen_gpios[6].serial_q  <= \gen_gpios[6].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[7].serial_q  <= 1'h0;
    else \gen_gpios[7].serial_q  <= \gen_gpios[7].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[8].serial_q  <= 1'h0;
    else \gen_gpios[8].serial_q  <= \gen_gpios[8].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[9].serial_q  <= 1'h0;
    else \gen_gpios[9].serial_q  <= \gen_gpios[9].serial_d ;
  assign hw2reg[78:77] = \$504  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$506 , 1'h1 } : 2'h0;
  assign hw2reg[118:117] = \$760  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$762 , 1'h1 } : 2'h0;
  assign hw2reg[73:72] = \$472  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$474 , 1'h1 } : 2'h0;
  assign hw2reg[138:137] = \$888  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$890 , 1'h1 } : 2'h0;
  assign hw2reg[68:67] = \$440  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$442 , 1'h1 } : 2'h0;
  assign hw2reg[113:112] = \$728  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$730 , 1'h1 } : 2'h0;
  assign hw2reg[63:62] = \$408  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$410 , 1'h1 } : 2'h0;
  assign hw2reg[148:147] = \$952  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$954 , 1'h1 } : 2'h0;
  assign hw2reg[58:57] = \$376  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$378 , 1'h1 } : 2'h0;
  assign hw2reg[108:107] = \$696  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$698 , 1'h1 } : 2'h0;
  assign hw2reg[53:52] = \$344  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$346 , 1'h1 } : 2'h0;
  assign hw2reg[133:132] = \$856  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$858 , 1'h1 } : 2'h0;
  assign hw2reg[48:47] = \$312  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$314 , 1'h1 } : 2'h0;
  assign hw2reg[103:102] = \$664  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$666 , 1'h1 } : 2'h0;
  assign hw2reg[43:42] = \$280  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$282 , 1'h1 } : 2'h0;
  assign hw2reg[153:152] = \$984  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$986 , 1'h1 } : 2'h0;
  assign hw2reg[38:37] = \$248  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$250 , 1'h1 } : 2'h0;
  assign hw2reg[98:97] = \$632  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$634 , 1'h1 } : 2'h0;
  assign hw2reg[33:32] = \$216  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$218 , 1'h1 } : 2'h0;
  assign hw2reg[128:127] = \$824  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$826 , 1'h1 } : 2'h0;
  assign hw2reg[28:27] = \$184  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$186 , 1'h1 } : 2'h0;
  assign hw2reg[93:92] = \$600  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$602 , 1'h1 } : 2'h0;
  assign hw2reg[23:22] = \$152  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$154 , 1'h1 } : 2'h0;
  assign hw2reg[143:142] = \$920  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$922 , 1'h1 } : 2'h0;
  assign hw2reg[18:17] = \$120  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$122 , 1'h1 } : 2'h0;
  assign hw2reg[88:87] = \$568  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$570 , 1'h1 } : 2'h0;
  assign hw2reg[13:12] = \$88  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$90 , 1'h1 } : 2'h0;
  assign hw2reg[123:122] = \$792  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$794 , 1'h1 } : 2'h0;
  assign hw2reg[8:7] = \$56  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$58 , 1'h1 } : 2'h0;
  assign hw2reg[83:82] = \$536  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$538 , 1'h1 } : 2'h0;
  assign hw2reg[3:2] = \$24  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$26 , 1'h1 } : 2'h0;
  assign hw2reg[158:157] = \$1016  ? (* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" *) { \$1018 , 1'h1 } : 2'h0;
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[0].i_sync  \gen_gpios[0].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[0]),
    .serial_o(\gen_gpios[0].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[10].i_sync  \gen_gpios[10].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[10]),
    .serial_o(\gen_gpios[10].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[11].i_sync  \gen_gpios[11].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[11]),
    .serial_o(\gen_gpios[11].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[12].i_sync  \gen_gpios[12].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[12]),
    .serial_o(\gen_gpios[12].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[13].i_sync  \gen_gpios[13].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[13]),
    .serial_o(\gen_gpios[13].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[14].i_sync  \gen_gpios[14].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[14]),
    .serial_o(\gen_gpios[14].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[15].i_sync  \gen_gpios[15].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[15]),
    .serial_o(\gen_gpios[15].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[16].i_sync  \gen_gpios[16].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[16]),
    .serial_o(\gen_gpios[16].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[17].i_sync  \gen_gpios[17].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[17]),
    .serial_o(\gen_gpios[17].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[18].i_sync  \gen_gpios[18].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[18]),
    .serial_o(\gen_gpios[18].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[19].i_sync  \gen_gpios[19].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[19]),
    .serial_o(\gen_gpios[19].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[1].i_sync  \gen_gpios[1].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[1]),
    .serial_o(\gen_gpios[1].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[20].i_sync  \gen_gpios[20].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[20]),
    .serial_o(\gen_gpios[20].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[21].i_sync  \gen_gpios[21].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[21]),
    .serial_o(\gen_gpios[21].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[22].i_sync  \gen_gpios[22].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[22]),
    .serial_o(\gen_gpios[22].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[23].i_sync  \gen_gpios[23].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[23]),
    .serial_o(\gen_gpios[23].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[24].i_sync  \gen_gpios[24].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[24]),
    .serial_o(\gen_gpios[24].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[25].i_sync  \gen_gpios[25].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[25]),
    .serial_o(\gen_gpios[25].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[26].i_sync  \gen_gpios[26].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[26]),
    .serial_o(\gen_gpios[26].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[27].i_sync  \gen_gpios[27].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[27]),
    .serial_o(\gen_gpios[27].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[28].i_sync  \gen_gpios[28].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[28]),
    .serial_o(\gen_gpios[28].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[29].i_sync  \gen_gpios[29].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[29]),
    .serial_o(\gen_gpios[29].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[2].i_sync  \gen_gpios[2].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[2]),
    .serial_o(\gen_gpios[2].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[30].i_sync  \gen_gpios[30].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[30]),
    .serial_o(\gen_gpios[30].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[31].i_sync  \gen_gpios[31].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[31]),
    .serial_o(\gen_gpios[31].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[3].i_sync  \gen_gpios[3].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[3]),
    .serial_o(\gen_gpios[3].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[4].i_sync  \gen_gpios[4].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[4]),
    .serial_o(\gen_gpios[4].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[5].i_sync  \gen_gpios[5].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[5]),
    .serial_o(\gen_gpios[5].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[6].i_sync  \gen_gpios[6].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[6]),
    .serial_o(\gen_gpios[6].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[7].i_sync  \gen_gpios[7].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[7]),
    .serial_o(\gen_gpios[7].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[8].i_sync  \gen_gpios[8].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[8]),
    .serial_o(\gen_gpios[8].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[9].i_sync  \gen_gpios[9].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[9]),
    .serial_o(\gen_gpios[9].serial_d )
  );
  (* src = "rtl/gpio/gpio.sv:74.5" *)
  \gpio_reg_top$croc_chip.i_croc_soc.i_croc.i_gpio.i_reg_file  i_reg_file (
    .clk_i(clk_i),
    .hw2reg({ hw2reg[159:157], gpio_intrpt[31], gpio_intrpt[31], hw2reg[154:152], gpio_intrpt[30], gpio_intrpt[30], hw2reg[149:147], gpio_intrpt[29], gpio_intrpt[29], hw2reg[144:142], gpio_intrpt[28], gpio_intrpt[28], hw2reg[139:137], gpio_intrpt[27], gpio_intrpt[27], hw2reg[134:132], gpio_intrpt[26], gpio_intrpt[26], hw2reg[129:127], gpio_intrpt[25], gpio_intrpt[25], hw2reg[124:122], gpio_intrpt[24], gpio_intrpt[24], hw2reg[119:117], gpio_intrpt[23], gpio_intrpt[23], hw2reg[114:112], gpio_intrpt[22], gpio_intrpt[22], hw2reg[109:107], gpio_intrpt[21], gpio_intrpt[21], hw2reg[104:102], gpio_intrpt[20], gpio_intrpt[20], hw2reg[99:97], gpio_intrpt[19], gpio_intrpt[19], hw2reg[94:92], gpio_intrpt[18], gpio_intrpt[18], hw2reg[89:87], gpio_intrpt[17], gpio_intrpt[17], hw2reg[84:82], gpio_intrpt[16], gpio_intrpt[16], hw2reg[79:77], gpio_intrpt[15], gpio_intrpt[15], hw2reg[74:72], gpio_intrpt[14], gpio_intrpt[14], hw2reg[69:67], gpio_intrpt[13], gpio_intrpt[13], hw2reg[64:62], gpio_intrpt[12], gpio_intrpt[12], hw2reg[59:57], gpio_intrpt[11], gpio_intrpt[11], hw2reg[54:52], gpio_intrpt[10], gpio_intrpt[10], hw2reg[49:47], gpio_intrpt[9], gpio_intrpt[9], hw2reg[44:42], gpio_intrpt[8], gpio_intrpt[8], hw2reg[39:37], gpio_intrpt[7], gpio_intrpt[7], hw2reg[34:32], gpio_intrpt[6], gpio_intrpt[6], hw2reg[29:27], gpio_intrpt[5], gpio_intrpt[5], hw2reg[24:22], gpio_intrpt[4], gpio_intrpt[4], hw2reg[19:17], gpio_intrpt[3], gpio_intrpt[3], hw2reg[14:12], gpio_intrpt[2], gpio_intrpt[2], hw2reg[9:7], gpio_intrpt[1], gpio_intrpt[1], hw2reg[4:2], gpio_intrpt[0], gpio_intrpt[0] }),
    .obi_req_i(obi_req_i),
    .obi_rsp_o(obi_rsp_o),
    .reg2hw(reg2hw),
    .rst_ni(rst_ni)
  );
  assign gpio_in_sync_o = { \gen_gpios[31].serial_q , \gen_gpios[30].serial_q , \gen_gpios[29].serial_q , \gen_gpios[28].serial_q , \gen_gpios[27].serial_q , \gen_gpios[26].serial_q , \gen_gpios[25].serial_q , \gen_gpios[24].serial_q , \gen_gpios[23].serial_q , \gen_gpios[22].serial_q , \gen_gpios[21].serial_q , \gen_gpios[20].serial_q , \gen_gpios[19].serial_q , \gen_gpios[18].serial_q , \gen_gpios[17].serial_q , \gen_gpios[16].serial_q , \gen_gpios[15].serial_q , \gen_gpios[14].serial_q , \gen_gpios[13].serial_q , \gen_gpios[12].serial_q , \gen_gpios[11].serial_q , \gen_gpios[10].serial_q , \gen_gpios[9].serial_q , \gen_gpios[8].serial_q , \gen_gpios[7].serial_q , \gen_gpios[6].serial_q , \gen_gpios[5].serial_q , \gen_gpios[4].serial_q , \gen_gpios[3].serial_q , \gen_gpios[2].serial_q , \gen_gpios[1].serial_q , \gen_gpios[0].serial_q  };
  assign gpio_out_en_o = { \gen_gpios[31].is_output , \gen_gpios[30].is_output , \gen_gpios[29].is_output , \gen_gpios[28].is_output , \gen_gpios[27].is_output , \gen_gpios[26].is_output , \gen_gpios[25].is_output , \gen_gpios[24].is_output , \gen_gpios[23].is_output , \gen_gpios[22].is_output , \gen_gpios[21].is_output , \gen_gpios[20].is_output , \gen_gpios[19].is_output , \gen_gpios[18].is_output , \gen_gpios[17].is_output , \gen_gpios[16].is_output , \gen_gpios[15].is_output , \gen_gpios[14].is_output , \gen_gpios[13].is_output , \gen_gpios[12].is_output , \gen_gpios[11].is_output , \gen_gpios[10].is_output , \gen_gpios[9].is_output , \gen_gpios[8].is_output , \gen_gpios[7].is_output , \gen_gpios[6].is_output , \gen_gpios[5].is_output , \gen_gpios[4].is_output , \gen_gpios[3].is_output , \gen_gpios[2].is_output , \gen_gpios[1].is_output , \gen_gpios[0].is_output  };
  assign { hw2reg[156:155], hw2reg[151:150], hw2reg[146:145], hw2reg[141:140], hw2reg[136:135], hw2reg[131:130], hw2reg[126:125], hw2reg[121:120], hw2reg[116:115], hw2reg[111:110], hw2reg[106:105], hw2reg[101:100], hw2reg[96:95], hw2reg[91:90], hw2reg[86:85], hw2reg[81:80], hw2reg[76:75], hw2reg[71:70], hw2reg[66:65], hw2reg[61:60], hw2reg[56:55], hw2reg[51:50], hw2reg[46:45], hw2reg[41:40], hw2reg[36:35], hw2reg[31:30], hw2reg[26:25], hw2reg[21:20], hw2reg[16:15], hw2reg[11:10], hw2reg[6:5], hw2reg[1:0] } = { gpio_intrpt[31], gpio_intrpt[31:30], gpio_intrpt[30:29], gpio_intrpt[29:28], gpio_intrpt[28:27], gpio_intrpt[27:26], gpio_intrpt[26:25], gpio_intrpt[25:24], gpio_intrpt[24:23], gpio_intrpt[23:22], gpio_intrpt[22:21], gpio_intrpt[21:20], gpio_intrpt[20:19], gpio_intrpt[19:18], gpio_intrpt[18:17], gpio_intrpt[17:16], gpio_intrpt[16:15], gpio_intrpt[15:14], gpio_intrpt[14:13], gpio_intrpt[13:12], gpio_intrpt[12:11], gpio_intrpt[11:10], gpio_intrpt[10:9], gpio_intrpt[9:8], gpio_intrpt[8:7], gpio_intrpt[7:6], gpio_intrpt[6:5], gpio_intrpt[5:4], gpio_intrpt[4:3], gpio_intrpt[3:2], gpio_intrpt[2:1], gpio_intrpt[1:0], gpio_intrpt[0] };
endmodule

(* src = "rtl/gpio/gpio_reg_top.sv:12.8" *)
module \gpio_reg_top$croc_chip.i_croc_soc.i_croc.i_gpio.i_reg_file (clk_i, rst_ni, obi_req_i, obi_rsp_o, reg2hw, hw2reg);
  wire [31:0] \$159 ;
  wire [31:0] \$161 ;
  wire [31:0] \$163 ;
  wire [31:0] \$165 ;
  wire [31:0] \$169 ;
  wire [31:0] \$173 ;
  wire [31:0] \$177 ;
  wire [31:0] \$181 ;
  wire [31:0] \$187 ;
  wire [31:0] \$191 ;
  wire [31:0] \$195 ;
  wire [31:0] \$199 ;
  wire \$2 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18143 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18146 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18149 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18152 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16870 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16872 ;
  (* src = "rtl/gpio/gpio_reg_top.sv:165.5-199.8" *)
  wire \$obi_err$206 ;
  (* src = "rtl/gpio/gpio_reg_top.sv:205.7-244.14" *)
  wire \$obi_err$213 ;
  (* src = "rtl/gpio/gpio_reg_top.sv:205.7-244.14" *)
  wire [31:0] \$obi_rdata$214 ;
  wire \$procmux$13252_CMP ;
  wire \$procmux$13253_CMP ;
  wire \$procmux$13254_CMP ;
  wire \$procmux$13255_CMP ;
  wire \$procmux$13256_CMP ;
  wire \$procmux$13257_CMP ;
  wire \$procmux$13258_CMP ;
  wire \$procmux$13259_CMP ;
  wire [31:0] \$procmux$13265_Y ;
  wire \$procmux$13302_CMP ;
  wire \$procmux$13311_CMP ;
  wire [31:0] \$procmux$13317_Y ;
  wire \$procmux$13318_CMP ;
  wire [31:0] \$procmux$13325_Y ;
  wire \$procmux$13326_CMP ;
  wire \$procmux$13332_CMP ;
  wire \$procmux$13337_CMP ;
  wire \$procmux$13341_Y ;
  (* src = "rtl/gpio/gpio_reg_top.sv:23.18" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/gpio/gpio_reg_top.sv:37.43" *)
  input [159:0] hw2reg;
  wire [159:0] hw2reg;
  (* src = "rtl/gpio/gpio_reg_top.sv:50.41" *)
  reg id_q;
  (* src = "rtl/gpio/gpio_reg_top.sv:113.25" *)
  wire [31:0] new_intrpt;
  (* src = "rtl/gpio/gpio_reg_top.sv:108.21" *)
  wire [255:0] new_reg;
  (* src = "rtl/gpio/gpio_reg_top.sv:51.35" *)
  wire obi_err;
  (* src = "rtl/gpio/gpio_reg_top.sv:54.35" *)
  wire [31:0] obi_rdata;
  (* src = "rtl/gpio/gpio_reg_top.sv:55.35" *)
  wire obi_read_request;
  (* src = "rtl/gpio/gpio_reg_top.sv:29.23" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "rtl/gpio/gpio_reg_top.sv:31.22" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "rtl/gpio/gpio_reg_top.sv:55.53" *)
  wire obi_write_request;
  (* src = "rtl/gpio/gpio_reg_top.sv:49.48" *)
  wire [11:0] read_addr_q;
  (* src = "rtl/gpio/gpio_reg_top.sv:35.42" *)
  output [223:0] reg2hw;
  wire [223:0] reg2hw;
  (* src = "rtl/gpio/gpio_reg_top.sv:105.21" *)
  wire [255:0] reg_d;
  (* src = "rtl/gpio/gpio_reg_top.sv:105.28" *)
  wire [255:0] reg_q;
  (* src = "rtl/gpio/gpio_reg_top.sv:47.42" *)
  reg req_q;
  (* src = "rtl/gpio/gpio_reg_top.sv:25.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/gpio/gpio_reg_top.sv:114.25" *)
  wire [31:0] toggle_out;
  (* src = "rtl/gpio/gpio_reg_top.sv:52.35" *)
  wire w_err_d;
  (* src = "rtl/gpio/gpio_reg_top.sv:52.44" *)
  reg w_err_q;
  (* src = "rtl/gpio/gpio_reg_top.sv:46.41" *)
  reg we_q;
  assign \$2  = ~ we_q;
  assign new_intrpt[17] = hw2reg[85] & hw2reg[86];
  assign new_reg[146] = hw2reg[92] ? hw2reg[93] : reg2hw[130];
  assign new_reg[50] = hw2reg[90] ? hw2reg[91] : reg2hw[127];
  assign new_intrpt[18] = hw2reg[90] & hw2reg[91];
  assign new_reg[147] = hw2reg[97] ? hw2reg[98] : reg2hw[137];
  assign new_reg[51] = hw2reg[95] ? hw2reg[96] : reg2hw[134];
  assign new_intrpt[19] = hw2reg[95] & hw2reg[96];
  assign new_reg[148] = hw2reg[102] ? hw2reg[103] : reg2hw[144];
  assign new_reg[52] = hw2reg[100] ? hw2reg[101] : reg2hw[141];
  assign new_intrpt[20] = hw2reg[100] & hw2reg[101];
  assign new_reg[149] = hw2reg[107] ? hw2reg[108] : reg2hw[151];
  assign new_reg[53] = hw2reg[105] ? hw2reg[106] : reg2hw[148];
  assign new_intrpt[21] = hw2reg[105] & hw2reg[106];
  assign new_reg[150] = hw2reg[112] ? hw2reg[113] : reg2hw[158];
  assign new_reg[54] = hw2reg[110] ? hw2reg[111] : reg2hw[155];
  assign new_intrpt[22] = hw2reg[110] & hw2reg[111];
  assign new_reg[151] = hw2reg[117] ? hw2reg[118] : reg2hw[165];
  assign new_reg[55] = hw2reg[115] ? hw2reg[116] : reg2hw[162];
  assign new_intrpt[23] = hw2reg[115] & hw2reg[116];
  assign new_reg[152] = hw2reg[122] ? hw2reg[123] : reg2hw[172];
  assign new_reg[56] = hw2reg[120] ? hw2reg[121] : reg2hw[169];
  assign new_intrpt[24] = hw2reg[120] & hw2reg[121];
  assign new_reg[153] = hw2reg[127] ? hw2reg[128] : reg2hw[179];
  assign new_reg[57] = hw2reg[125] ? hw2reg[126] : reg2hw[176];
  assign new_intrpt[25] = hw2reg[125] & hw2reg[126];
  assign new_reg[154] = hw2reg[132] ? hw2reg[133] : reg2hw[186];
  assign new_reg[58] = hw2reg[130] ? hw2reg[131] : reg2hw[183];
  assign new_intrpt[26] = hw2reg[130] & hw2reg[131];
  assign new_reg[155] = hw2reg[137] ? hw2reg[138] : reg2hw[193];
  assign new_reg[59] = hw2reg[135] ? hw2reg[136] : reg2hw[190];
  assign new_intrpt[27] = hw2reg[135] & hw2reg[136];
  assign new_reg[156] = hw2reg[142] ? hw2reg[143] : reg2hw[200];
  assign new_reg[60] = hw2reg[140] ? hw2reg[141] : reg2hw[197];
  assign new_intrpt[28] = hw2reg[140] & hw2reg[141];
  assign new_reg[157] = hw2reg[147] ? hw2reg[148] : reg2hw[207];
  assign new_reg[61] = hw2reg[145] ? hw2reg[146] : reg2hw[204];
  assign new_intrpt[29] = hw2reg[145] & hw2reg[146];
  assign new_reg[158] = hw2reg[152] ? hw2reg[153] : reg2hw[214];
  assign new_reg[62] = hw2reg[150] ? hw2reg[151] : reg2hw[211];
  assign new_intrpt[30] = hw2reg[150] & hw2reg[151];
  assign new_reg[159] = hw2reg[157] ? hw2reg[158] : reg2hw[221];
  assign new_reg[63] = hw2reg[155] ? hw2reg[156] : reg2hw[218];
  assign new_intrpt[31] = hw2reg[155] & hw2reg[156];
  assign \$161  = { \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7] } & { reg2hw[223], reg2hw[216], reg2hw[209], reg2hw[202], reg2hw[195], reg2hw[188], reg2hw[181], reg2hw[174], reg2hw[167], reg2hw[160], reg2hw[153], reg2hw[146], reg2hw[139], reg2hw[132], reg2hw[125], reg2hw[118], reg2hw[111], reg2hw[104], reg2hw[97], reg2hw[90], reg2hw[83], reg2hw[76], reg2hw[69], reg2hw[62], reg2hw[55], reg2hw[48], reg2hw[41], reg2hw[34], reg2hw[27], reg2hw[20], reg2hw[13], reg2hw[6] };
  assign \$163  = { obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40:39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39:38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38:37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37] } & obi_req_i[36:5];
  assign \$165  = \$161  | \$163 ;
  assign \$169  = { \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7] } & { reg2hw[222], reg2hw[215], reg2hw[208], reg2hw[201], reg2hw[194], reg2hw[187], reg2hw[180], reg2hw[173], reg2hw[166], reg2hw[159], reg2hw[152], reg2hw[145], reg2hw[138], reg2hw[131], reg2hw[124], reg2hw[117], reg2hw[110], reg2hw[103], reg2hw[96], reg2hw[89], reg2hw[82], reg2hw[75], reg2hw[68], reg2hw[61], reg2hw[54], reg2hw[47], reg2hw[40], reg2hw[33], reg2hw[26], reg2hw[19], reg2hw[12], reg2hw[5] };
  assign \$173  = \$169  | \$163 ;
  assign \$177  = { \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7] } & new_reg[159:128];
  assign \$181  = \$177  | \$163 ;
  assign \$187  = { \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7] } & { reg2hw[219], reg2hw[212], reg2hw[205], reg2hw[198], reg2hw[191], reg2hw[184], reg2hw[177], reg2hw[170], reg2hw[163], reg2hw[156], reg2hw[149], reg2hw[142], reg2hw[135], reg2hw[128], reg2hw[121], reg2hw[114], reg2hw[107], reg2hw[100], reg2hw[93], reg2hw[86], reg2hw[79], reg2hw[72], reg2hw[65], reg2hw[58], reg2hw[51], reg2hw[44], reg2hw[37], reg2hw[30], reg2hw[23], reg2hw[16], reg2hw[9], reg2hw[2] };
  assign \$191  = \$187  | \$163 ;
  assign \$195  = { \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7] } & { reg2hw[217], reg2hw[210], reg2hw[203], reg2hw[196], reg2hw[189], reg2hw[182], reg2hw[175], reg2hw[168], reg2hw[161], reg2hw[154], reg2hw[147], reg2hw[140], reg2hw[133], reg2hw[126], reg2hw[119], reg2hw[112], reg2hw[105], reg2hw[98], reg2hw[91], reg2hw[84], reg2hw[77], reg2hw[70], reg2hw[63], reg2hw[56], reg2hw[49], reg2hw[42], reg2hw[35], reg2hw[28], reg2hw[21], reg2hw[14], reg2hw[7], reg2hw[0] };
  assign \$199  = \$195  | \$163 ;
  assign obi_read_request = req_q & \$2 ;
  assign new_reg[128] = hw2reg[2] ? hw2reg[3] : reg2hw[4];
  assign new_reg[32] = hw2reg[0] ? hw2reg[1] : reg2hw[1];
  assign new_intrpt[0] = hw2reg[0] & hw2reg[1];
  assign new_reg[129] = hw2reg[7] ? hw2reg[8] : reg2hw[11];
  assign new_reg[33] = hw2reg[5] ? hw2reg[6] : reg2hw[8];
  assign new_intrpt[1] = hw2reg[5] & hw2reg[6];
  assign new_reg[130] = hw2reg[12] ? hw2reg[13] : reg2hw[18];
  assign new_reg[34] = hw2reg[10] ? hw2reg[11] : reg2hw[15];
  assign new_intrpt[2] = hw2reg[10] & hw2reg[11];
  assign new_reg[131] = hw2reg[17] ? hw2reg[18] : reg2hw[25];
  assign new_reg[35] = hw2reg[15] ? hw2reg[16] : reg2hw[22];
  assign new_intrpt[3] = hw2reg[15] & hw2reg[16];
  assign new_reg[132] = hw2reg[22] ? hw2reg[23] : reg2hw[32];
  assign new_reg[36] = hw2reg[20] ? hw2reg[21] : reg2hw[29];
  assign new_intrpt[4] = hw2reg[20] & hw2reg[21];
  assign obi_write_request = obi_req_i[0] & obi_req_i[41];
  assign new_reg[133] = hw2reg[27] ? hw2reg[28] : reg2hw[39];
  assign new_reg[37] = hw2reg[25] ? hw2reg[26] : reg2hw[36];
  assign new_intrpt[5] = hw2reg[25] & hw2reg[26];
  assign new_reg[134] = hw2reg[32] ? hw2reg[33] : reg2hw[46];
  assign new_reg[38] = hw2reg[30] ? hw2reg[31] : reg2hw[43];
  assign new_intrpt[6] = hw2reg[30] & hw2reg[31];
  assign new_reg[135] = hw2reg[37] ? hw2reg[38] : reg2hw[53];
  assign new_reg[39] = hw2reg[35] ? hw2reg[36] : reg2hw[50];
  assign new_intrpt[7] = hw2reg[35] & hw2reg[36];
  assign new_reg[136] = hw2reg[42] ? hw2reg[43] : reg2hw[60];
  assign new_reg[40] = hw2reg[40] ? hw2reg[41] : reg2hw[57];
  assign new_intrpt[8] = hw2reg[40] & hw2reg[41];
  assign new_reg[137] = hw2reg[47] ? hw2reg[48] : reg2hw[67];
  assign new_reg[41] = hw2reg[45] ? hw2reg[46] : reg2hw[64];
  assign new_intrpt[9] = hw2reg[45] & hw2reg[46];
  assign new_reg[138] = hw2reg[52] ? hw2reg[53] : reg2hw[74];
  assign new_reg[42] = hw2reg[50] ? hw2reg[51] : reg2hw[71];
  assign new_intrpt[10] = hw2reg[50] & hw2reg[51];
  assign new_reg[139] = hw2reg[57] ? hw2reg[58] : reg2hw[81];
  assign new_reg[43] = hw2reg[55] ? hw2reg[56] : reg2hw[78];
  assign new_intrpt[11] = hw2reg[55] & hw2reg[56];
  assign new_reg[140] = hw2reg[62] ? hw2reg[63] : reg2hw[88];
  assign new_reg[44] = hw2reg[60] ? hw2reg[61] : reg2hw[85];
  assign new_intrpt[12] = hw2reg[60] & hw2reg[61];
  assign new_reg[141] = hw2reg[67] ? hw2reg[68] : reg2hw[95];
  assign new_reg[45] = hw2reg[65] ? hw2reg[66] : reg2hw[92];
  assign new_intrpt[13] = hw2reg[65] & hw2reg[66];
  assign new_reg[142] = hw2reg[72] ? hw2reg[73] : reg2hw[102];
  assign new_reg[46] = hw2reg[70] ? hw2reg[71] : reg2hw[99];
  assign new_intrpt[14] = hw2reg[70] & hw2reg[71];
  assign new_reg[143] = hw2reg[77] ? hw2reg[78] : reg2hw[109];
  assign new_reg[47] = hw2reg[75] ? hw2reg[76] : reg2hw[106];
  assign new_intrpt[15] = hw2reg[75] & hw2reg[76];
  assign new_reg[144] = hw2reg[82] ? hw2reg[83] : reg2hw[116];
  assign new_reg[48] = hw2reg[80] ? hw2reg[81] : reg2hw[113];
  assign new_intrpt[16] = hw2reg[80] & hw2reg[81];
  assign new_reg[145] = hw2reg[87] ? hw2reg[88] : reg2hw[123];
  assign new_reg[49] = hw2reg[85] ? hw2reg[86] : reg2hw[120];
  reg [31:0] \$auto$ff.cc:266:slice$18142 ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$18142  <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18143 ) \$auto$ff.cc:266:slice$18142  <= \$191 ;
  assign { reg2hw[219], reg2hw[212], reg2hw[205], reg2hw[198], reg2hw[191], reg2hw[184], reg2hw[177], reg2hw[170], reg2hw[163], reg2hw[156], reg2hw[149], reg2hw[142], reg2hw[135], reg2hw[128], reg2hw[121], reg2hw[114], reg2hw[107], reg2hw[100], reg2hw[93], reg2hw[86], reg2hw[79], reg2hw[72], reg2hw[65], reg2hw[58], reg2hw[51], reg2hw[44], reg2hw[37], reg2hw[30], reg2hw[23], reg2hw[16], reg2hw[9], reg2hw[2] } = \$auto$ff.cc:266:slice$18142 ;
  reg [31:0] \$auto$ff.cc:266:slice$18145 ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$18145  <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18146 ) \$auto$ff.cc:266:slice$18145  <= \$199 ;
  assign { reg2hw[217], reg2hw[210], reg2hw[203], reg2hw[196], reg2hw[189], reg2hw[182], reg2hw[175], reg2hw[168], reg2hw[161], reg2hw[154], reg2hw[147], reg2hw[140], reg2hw[133], reg2hw[126], reg2hw[119], reg2hw[112], reg2hw[105], reg2hw[98], reg2hw[91], reg2hw[84], reg2hw[77], reg2hw[70], reg2hw[63], reg2hw[56], reg2hw[49], reg2hw[42], reg2hw[35], reg2hw[28], reg2hw[21], reg2hw[14], reg2hw[7], reg2hw[0] } = \$auto$ff.cc:266:slice$18145 ;
  reg [31:0] \$auto$ff.cc:266:slice$18148 ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$18148  <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18149 ) \$auto$ff.cc:266:slice$18148  <= \$173 ;
  assign { reg2hw[222], reg2hw[215], reg2hw[208], reg2hw[201], reg2hw[194], reg2hw[187], reg2hw[180], reg2hw[173], reg2hw[166], reg2hw[159], reg2hw[152], reg2hw[145], reg2hw[138], reg2hw[131], reg2hw[124], reg2hw[117], reg2hw[110], reg2hw[103], reg2hw[96], reg2hw[89], reg2hw[82], reg2hw[75], reg2hw[68], reg2hw[61], reg2hw[54], reg2hw[47], reg2hw[40], reg2hw[33], reg2hw[26], reg2hw[19], reg2hw[12], reg2hw[5] } = \$auto$ff.cc:266:slice$18148 ;
  reg [31:0] \$auto$ff.cc:266:slice$18151 ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$18151  <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18152 ) \$auto$ff.cc:266:slice$18151  <= \$165 ;
  assign { reg2hw[223], reg2hw[216], reg2hw[209], reg2hw[202], reg2hw[195], reg2hw[188], reg2hw[181], reg2hw[174], reg2hw[167], reg2hw[160], reg2hw[153], reg2hw[146], reg2hw[139], reg2hw[132], reg2hw[125], reg2hw[118], reg2hw[111], reg2hw[104], reg2hw[97], reg2hw[90], reg2hw[83], reg2hw[76], reg2hw[69], reg2hw[62], reg2hw[55], reg2hw[48], reg2hw[41], reg2hw[34], reg2hw[27], reg2hw[20], reg2hw[13], reg2hw[6] } = \$auto$ff.cc:266:slice$18151 ;
  reg [9:0] \$auto$ff.cc:266:slice$18154 ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$18154  <= 10'h000;
    else \$auto$ff.cc:266:slice$18154  <= obi_req_i[53:44];
  assign read_addr_q[9:0] = \$auto$ff.cc:266:slice$18154 ;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18143  = & { \$procmux$13332_CMP , obi_write_request };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18146  = & { \$procmux$13337_CMP , obi_write_request };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18149  = & { \$procmux$13311_CMP , obi_write_request };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18152  = & { \$procmux$13302_CMP , obi_write_request };
  assign { \$159 [31], \$159 [23], \$159 [15], \$159 [7] } = ~ obi_req_i[40:37];
  assign \$auto$opt_reduce.cc:137:opt_pmux$16870  = | { \$procmux$13259_CMP , \$procmux$13258_CMP , \$procmux$13257_CMP , \$procmux$13256_CMP , \$procmux$13255_CMP , \$procmux$13254_CMP , \$procmux$13253_CMP , \$procmux$13252_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16872  = | { \$procmux$13337_CMP , \$procmux$13332_CMP , \$procmux$13326_CMP , \$procmux$13318_CMP , \$procmux$13311_CMP , \$procmux$13302_CMP  };
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) id_q <= 1'h0;
    else id_q <= obi_req_i[2];
  reg [31:0] \$driver$reg_q.in ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$driver$reg_q.in  <= 32'd0;
    else \$driver$reg_q.in  <= { hw2reg[159], hw2reg[154], hw2reg[149], hw2reg[144], hw2reg[139], hw2reg[134], hw2reg[129], hw2reg[124], hw2reg[119], hw2reg[114], hw2reg[109], hw2reg[104], hw2reg[99], hw2reg[94], hw2reg[89], hw2reg[84], hw2reg[79], hw2reg[74], hw2reg[69], hw2reg[64], hw2reg[59], hw2reg[54], hw2reg[49], hw2reg[44], hw2reg[39], hw2reg[34], hw2reg[29], hw2reg[24], hw2reg[19], hw2reg[14], hw2reg[9], hw2reg[4] };
  assign reg_q[191:160] = \$driver$reg_q.in ;
  reg [31:0] \$driver$reg_q.intrpt ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$driver$reg_q.intrpt  <= 32'd0;
    else \$driver$reg_q.intrpt  <= reg_d[63:32];
  assign { reg2hw[218], reg2hw[211], reg2hw[204], reg2hw[197], reg2hw[190], reg2hw[183], reg2hw[176], reg2hw[169], reg2hw[162], reg2hw[155], reg2hw[148], reg2hw[141], reg2hw[134], reg2hw[127], reg2hw[120], reg2hw[113], reg2hw[106], reg2hw[99], reg2hw[92], reg2hw[85], reg2hw[78], reg2hw[71], reg2hw[64], reg2hw[57], reg2hw[50], reg2hw[43], reg2hw[36], reg2hw[29], reg2hw[22], reg2hw[15], reg2hw[8], reg2hw[1] } = \$driver$reg_q.intrpt ;
  reg [31:0] \$driver$reg_q.out ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$driver$reg_q.out  <= 32'd0;
    else \$driver$reg_q.out  <= reg_d[159:128];
  assign { reg2hw[221], reg2hw[214], reg2hw[207], reg2hw[200], reg2hw[193], reg2hw[186], reg2hw[179], reg2hw[172], reg2hw[165], reg2hw[158], reg2hw[151], reg2hw[144], reg2hw[137], reg2hw[130], reg2hw[123], reg2hw[116], reg2hw[109], reg2hw[102], reg2hw[95], reg2hw[88], reg2hw[81], reg2hw[74], reg2hw[67], reg2hw[60], reg2hw[53], reg2hw[46], reg2hw[39], reg2hw[32], reg2hw[25], reg2hw[18], reg2hw[11], reg2hw[4] } = \$driver$reg_q.out ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) req_q <= 1'h0;
    else req_q <= obi_req_i[0];
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) w_err_q <= 1'h0;
    else w_err_q <= w_err_d;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) we_q <= 1'h0;
    else we_q <= obi_req_i[41];
  function [31:0] \$procmux$13251 ;
    input [31:0] a;
    input [255:0] b;
    input [7:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/gpio/gpio_reg_top.sv:237.11-237.41|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *)
    (* parallel_case *)
    casez (s)
      8'b???????1:
        \$procmux$13251  = b[31:0];
      8'b??????1?:
        \$procmux$13251  = b[63:32];
      8'b?????1??:
        \$procmux$13251  = b[95:64];
      8'b????1???:
        \$procmux$13251  = b[127:96];
      8'b???1????:
        \$procmux$13251  = b[159:128];
      8'b??1?????:
        \$procmux$13251  = b[191:160];
      8'b?1??????:
        \$procmux$13251  = b[223:192];
      8'b1???????:
        \$procmux$13251  = b[255:224];
      default:
        \$procmux$13251  = a;
    endcase
  endfunction
  assign \$obi_rdata$214  = \$procmux$13251 (32'd3135023902, { reg2hw[223], reg2hw[216], reg2hw[209], reg2hw[202], reg2hw[195], reg2hw[188], reg2hw[181], reg2hw[174], reg2hw[167], reg2hw[160], reg2hw[153], reg2hw[146], reg2hw[139], reg2hw[132], reg2hw[125], reg2hw[118], reg2hw[111], reg2hw[104], reg2hw[97], reg2hw[90], reg2hw[83], reg2hw[76], reg2hw[69], reg2hw[62], reg2hw[55], reg2hw[48], reg2hw[41], reg2hw[34], reg2hw[27], reg2hw[20], reg2hw[13], reg2hw[6], reg2hw[222], reg2hw[215], reg2hw[208], reg2hw[201], reg2hw[194], reg2hw[187], reg2hw[180], reg2hw[173], reg2hw[166], reg2hw[159], reg2hw[152], reg2hw[145], reg2hw[138], reg2hw[131], reg2hw[124], reg2hw[117], reg2hw[110], reg2hw[103], reg2hw[96], reg2hw[89], reg2hw[82], reg2hw[75], reg2hw[68], reg2hw[61], reg2hw[54], reg2hw[47], reg2hw[40], reg2hw[33], reg2hw[26], reg2hw[19], reg2hw[12], reg2hw[5], reg_q[191:160], reg2hw[221], reg2hw[214], reg2hw[207], reg2hw[200], reg2hw[193], reg2hw[186], reg2hw[179], reg2hw[172], reg2hw[165], reg2hw[158], reg2hw[151], reg2hw[144], reg2hw[137], reg2hw[130], reg2hw[123], reg2hw[116], reg2hw[109], reg2hw[102], reg2hw[95], reg2hw[88], reg2hw[81], reg2hw[74], reg2hw[67], reg2hw[60], reg2hw[53], reg2hw[46], reg2hw[39], reg2hw[32], reg2hw[25], reg2hw[18], reg2hw[11], reg2hw[4], 32'h00000000, reg2hw[219], reg2hw[212], reg2hw[205], reg2hw[198], reg2hw[191], reg2hw[184], reg2hw[177], reg2hw[170], reg2hw[163], reg2hw[156], reg2hw[149], reg2hw[142], reg2hw[135], reg2hw[128], reg2hw[121], reg2hw[114], reg2hw[107], reg2hw[100], reg2hw[93], reg2hw[86], reg2hw[79], reg2hw[72], reg2hw[65], reg2hw[58], reg2hw[51], reg2hw[44], reg2hw[37], reg2hw[30], reg2hw[23], reg2hw[16], reg2hw[9], reg2hw[2], reg2hw[218], reg2hw[211], reg2hw[204], reg2hw[197], reg2hw[190], reg2hw[183], reg2hw[176], reg2hw[169], reg2hw[162], reg2hw[155], reg2hw[148], reg2hw[141], reg2hw[134], reg2hw[127], reg2hw[120], reg2hw[113], reg2hw[106], reg2hw[99], reg2hw[92], reg2hw[85], reg2hw[78], reg2hw[71], reg2hw[64], reg2hw[57], reg2hw[50], reg2hw[43], reg2hw[36], reg2hw[29], reg2hw[22], reg2hw[15], reg2hw[8], reg2hw[1], reg2hw[217], reg2hw[210], reg2hw[203], reg2hw[196], reg2hw[189], reg2hw[182], reg2hw[175], reg2hw[168], reg2hw[161], reg2hw[154], reg2hw[147], reg2hw[140], reg2hw[133], reg2hw[126], reg2hw[119], reg2hw[112], reg2hw[105], reg2hw[98], reg2hw[91], reg2hw[84], reg2hw[77], reg2hw[70], reg2hw[63], reg2hw[56], reg2hw[49], reg2hw[42], reg2hw[35], reg2hw[28], reg2hw[21], reg2hw[14], reg2hw[7], reg2hw[0] }, { \$procmux$13259_CMP , \$procmux$13258_CMP , \$procmux$13257_CMP , \$procmux$13256_CMP , \$procmux$13255_CMP , \$procmux$13254_CMP , \$procmux$13253_CMP , \$procmux$13252_CMP  });
  assign \$procmux$13252_CMP  = read_addr_q[9:0] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:237.11-237.41|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) 10'h0e0;
  assign \$procmux$13253_CMP  = read_addr_q[9:0] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:230.36-234.12|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) 10'h0c0;
  assign \$procmux$13254_CMP  = read_addr_q[9:0] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:227.11-227.39|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) 10'h0a0;
  assign \$procmux$13255_CMP  = read_addr_q[9:0] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:223.11-223.26|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) 10'h080;
  assign \$procmux$13256_CMP  = read_addr_q[9:0] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:219.11-219.33|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) 10'h060;
  assign \$procmux$13257_CMP  = read_addr_q[9:0] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:215.11-215.32|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) 10'h040;
  assign \$procmux$13258_CMP  = read_addr_q[9:0] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:211.11-211.32|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) 10'h020;
  assign \$procmux$13259_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:207.11-207.33|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) read_addr_q[9:0];
  assign \$procmux$13265_Y  = \$procmux$13253_CMP  ? (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:230.36-234.12|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) new_intrpt : new_reg[63:32];
  assign \$obi_err$213  = ~ (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:237.11-237.41|rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) \$auto$opt_reduce.cc:137:opt_pmux$16870 ;
  assign reg_d[63:32] = obi_read_request ? (* src = "rtl/gpio/gpio_reg_top.sv:203.27-245.8|rtl/gpio/gpio_reg_top.sv:203.5-245.8" *) \$procmux$13265_Y  : new_reg[63:32];
  assign obi_rdata = obi_read_request ? (* src = "rtl/gpio/gpio_reg_top.sv:203.27-245.8|rtl/gpio/gpio_reg_top.sv:203.5-245.8" *) \$obi_rdata$214  : 32'd0;
  assign obi_err = obi_read_request ? (* src = "rtl/gpio/gpio_reg_top.sv:203.27-245.8|rtl/gpio/gpio_reg_top.sv:203.5-245.8" *) \$obi_err$213  : \$obi_err$206 ;
  assign \$procmux$13302_CMP  = ! (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:169.11-169.89|rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) obi_req_i[53:44];
  assign \$procmux$13311_CMP  = obi_req_i[53:44] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:173.11-173.87|rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) 6'h20;
  assign \$procmux$13317_Y  = \$procmux$13318_CMP  ? (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:182.11-182.60|rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) \$163  : 32'd0;
  assign \$procmux$13318_CMP  = obi_req_i[53:44] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:182.11-182.60|rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) 8'h80;
  assign \$procmux$13325_Y  = \$procmux$13326_CMP  ? (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:177.11-178.77|rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) \$181  : new_reg[159:128];
  assign \$procmux$13326_CMP  = obi_req_i[53:44] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:177.11-178.77|rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) 7'h60;
  assign \$procmux$13332_CMP  = obi_req_i[53:44] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:186.11-187.85|rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) 8'ha0;
  assign \$procmux$13337_CMP  = obi_req_i[53:44] == (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:191.11-192.87|rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) 8'he0;
  assign \$procmux$13341_Y  = ~ (* full_case = 32'd1 *) (* src = "rtl/gpio/gpio_reg_top.sv:191.11-192.87|rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) \$auto$opt_reduce.cc:137:opt_pmux$16872 ;
  assign toggle_out = obi_write_request ? (* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" *) \$procmux$13317_Y  : 32'd0;
  assign reg_d[159:128] = obi_write_request ? (* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" *) \$procmux$13325_Y  : new_reg[159:128];
  assign w_err_d = obi_write_request & (* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" *) \$procmux$13341_Y ;
  assign \$obi_err$206  = obi_write_request ? (* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" *) 1'h0 : w_err_q;
  assign { new_reg[255:160], new_reg[127:64], new_reg[31:0] } = { reg2hw[223], reg2hw[216], reg2hw[209], reg2hw[202], reg2hw[195], reg2hw[188], reg2hw[181], reg2hw[174], reg2hw[167], reg2hw[160], reg2hw[153], reg2hw[146], reg2hw[139], reg2hw[132], reg2hw[125], reg2hw[118], reg2hw[111], reg2hw[104], reg2hw[97], reg2hw[90], reg2hw[83], reg2hw[76], reg2hw[69], reg2hw[62], reg2hw[55], reg2hw[48], reg2hw[41], reg2hw[34], reg2hw[27], reg2hw[20], reg2hw[13], reg2hw[6], reg2hw[222], reg2hw[215], reg2hw[208], reg2hw[201], reg2hw[194], reg2hw[187], reg2hw[180], reg2hw[173], reg2hw[166], reg2hw[159], reg2hw[152], reg2hw[145], reg2hw[138], reg2hw[131], reg2hw[124], reg2hw[117], reg2hw[110], reg2hw[103], reg2hw[96], reg2hw[89], reg2hw[82], reg2hw[75], reg2hw[68], reg2hw[61], reg2hw[54], reg2hw[47], reg2hw[40], reg2hw[33], reg2hw[26], reg2hw[19], reg2hw[12], reg2hw[5], hw2reg[159], hw2reg[154], hw2reg[149], hw2reg[144], hw2reg[139], hw2reg[134], hw2reg[129], hw2reg[124], hw2reg[119], hw2reg[114], hw2reg[109], hw2reg[104], hw2reg[99], hw2reg[94], hw2reg[89], hw2reg[84], hw2reg[79], hw2reg[74], hw2reg[69], hw2reg[64], hw2reg[59], hw2reg[54], hw2reg[49], hw2reg[44], hw2reg[39], hw2reg[34], hw2reg[29], hw2reg[24], hw2reg[19], hw2reg[14], hw2reg[9], hw2reg[4], 32'h00000000, reg2hw[219], reg2hw[212], reg2hw[205], reg2hw[198], reg2hw[191], reg2hw[184], reg2hw[177], reg2hw[170], reg2hw[163], reg2hw[156], reg2hw[149], reg2hw[142], reg2hw[135], reg2hw[128], reg2hw[121], reg2hw[114], reg2hw[107], reg2hw[100], reg2hw[93], reg2hw[86], reg2hw[79], reg2hw[72], reg2hw[65], reg2hw[58], reg2hw[51], reg2hw[44], reg2hw[37], reg2hw[30], reg2hw[23], reg2hw[16], reg2hw[9], reg2hw[2], reg2hw[217], reg2hw[210], reg2hw[203], reg2hw[196], reg2hw[189], reg2hw[182], reg2hw[175], reg2hw[168], reg2hw[161], reg2hw[154], reg2hw[147], reg2hw[140], reg2hw[133], reg2hw[126], reg2hw[119], reg2hw[112], reg2hw[105], reg2hw[98], reg2hw[91], reg2hw[84], reg2hw[77], reg2hw[70], reg2hw[63], reg2hw[56], reg2hw[49], reg2hw[42], reg2hw[35], reg2hw[28], reg2hw[21], reg2hw[14], reg2hw[7], reg2hw[0] };
  assign obi_rsp_o = { obi_rdata, 2'h0, id_q, obi_err, 1'h0, obi_req_i[0], req_q };
  assign read_addr_q[11:10] = 2'h0;
  assign { reg2hw[220], reg2hw[213], reg2hw[206], reg2hw[199], reg2hw[192], reg2hw[185], reg2hw[178], reg2hw[171], reg2hw[164], reg2hw[157], reg2hw[150], reg2hw[143], reg2hw[136], reg2hw[129], reg2hw[122], reg2hw[115], reg2hw[108], reg2hw[101], reg2hw[94], reg2hw[87], reg2hw[80], reg2hw[73], reg2hw[66], reg2hw[59], reg2hw[52], reg2hw[45], reg2hw[38], reg2hw[31], reg2hw[24], reg2hw[17], reg2hw[10], reg2hw[3] } = toggle_out;
  assign { reg_d[255:160], reg_d[127:64], reg_d[31:0] } = { 64'hxxxxxxxxxxxxxxxx, hw2reg[159], hw2reg[154], hw2reg[149], hw2reg[144], hw2reg[139], hw2reg[134], hw2reg[129], hw2reg[124], hw2reg[119], hw2reg[114], hw2reg[109], hw2reg[104], hw2reg[99], hw2reg[94], hw2reg[89], hw2reg[84], hw2reg[79], hw2reg[74], hw2reg[69], hw2reg[64], hw2reg[59], hw2reg[54], hw2reg[49], hw2reg[44], hw2reg[39], hw2reg[34], hw2reg[29], hw2reg[24], hw2reg[19], hw2reg[14], hw2reg[9], hw2reg[4], 96'h00000000xxxxxxxxxxxxxxxx };
  assign { reg_q[255:192], reg_q[159:0] } = { reg2hw[223], reg2hw[216], reg2hw[209], reg2hw[202], reg2hw[195], reg2hw[188], reg2hw[181], reg2hw[174], reg2hw[167], reg2hw[160], reg2hw[153], reg2hw[146], reg2hw[139], reg2hw[132], reg2hw[125], reg2hw[118], reg2hw[111], reg2hw[104], reg2hw[97], reg2hw[90], reg2hw[83], reg2hw[76], reg2hw[69], reg2hw[62], reg2hw[55], reg2hw[48], reg2hw[41], reg2hw[34], reg2hw[27], reg2hw[20], reg2hw[13], reg2hw[6], reg2hw[222], reg2hw[215], reg2hw[208], reg2hw[201], reg2hw[194], reg2hw[187], reg2hw[180], reg2hw[173], reg2hw[166], reg2hw[159], reg2hw[152], reg2hw[145], reg2hw[138], reg2hw[131], reg2hw[124], reg2hw[117], reg2hw[110], reg2hw[103], reg2hw[96], reg2hw[89], reg2hw[82], reg2hw[75], reg2hw[68], reg2hw[61], reg2hw[54], reg2hw[47], reg2hw[40], reg2hw[33], reg2hw[26], reg2hw[19], reg2hw[12], reg2hw[5], reg2hw[221], reg2hw[214], reg2hw[207], reg2hw[200], reg2hw[193], reg2hw[186], reg2hw[179], reg2hw[172], reg2hw[165], reg2hw[158], reg2hw[151], reg2hw[144], reg2hw[137], reg2hw[130], reg2hw[123], reg2hw[116], reg2hw[109], reg2hw[102], reg2hw[95], reg2hw[88], reg2hw[81], reg2hw[74], reg2hw[67], reg2hw[60], reg2hw[53], reg2hw[46], reg2hw[39], reg2hw[32], reg2hw[25], reg2hw[18], reg2hw[11], reg2hw[4], 32'hxxxxxxxx, reg2hw[219], reg2hw[212], reg2hw[205], reg2hw[198], reg2hw[191], reg2hw[184], reg2hw[177], reg2hw[170], reg2hw[163], reg2hw[156], reg2hw[149], reg2hw[142], reg2hw[135], reg2hw[128], reg2hw[121], reg2hw[114], reg2hw[107], reg2hw[100], reg2hw[93], reg2hw[86], reg2hw[79], reg2hw[72], reg2hw[65], reg2hw[58], reg2hw[51], reg2hw[44], reg2hw[37], reg2hw[30], reg2hw[23], reg2hw[16], reg2hw[9], reg2hw[2], reg2hw[218], reg2hw[211], reg2hw[204], reg2hw[197], reg2hw[190], reg2hw[183], reg2hw[176], reg2hw[169], reg2hw[162], reg2hw[155], reg2hw[148], reg2hw[141], reg2hw[134], reg2hw[127], reg2hw[120], reg2hw[113], reg2hw[106], reg2hw[99], reg2hw[92], reg2hw[85], reg2hw[78], reg2hw[71], reg2hw[64], reg2hw[57], reg2hw[50], reg2hw[43], reg2hw[36], reg2hw[29], reg2hw[22], reg2hw[15], reg2hw[8], reg2hw[1], reg2hw[217], reg2hw[210], reg2hw[203], reg2hw[196], reg2hw[189], reg2hw[182], reg2hw[175], reg2hw[168], reg2hw[161], reg2hw[154], reg2hw[147], reg2hw[140], reg2hw[133], reg2hw[126], reg2hw[119], reg2hw[112], reg2hw[105], reg2hw[98], reg2hw[91], reg2hw[84], reg2hw[77], reg2hw[70], reg2hw[63], reg2hw[56], reg2hw[49], reg2hw[42], reg2hw[35], reg2hw[28], reg2hw[21], reg2hw[14], reg2hw[7], reg2hw[0] };
  assign { \$159 [30:24], \$159 [22:16], \$159 [14:8], \$159 [6:0] } = { \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7] };
endmodule

(* src = "rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  (* src = "rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.index_nodes [2] = ~ in_i[0];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign \gen_lzc.index_nodes [4] = ~ in_i[2];
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  (* src = "rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.index_nodes [2] = ~ in_i[0];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign \gen_lzc.index_nodes [4] = ~ in_i[2];
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  (* src = "rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.index_nodes [2] = ~ in_i[0];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign \gen_lzc.index_nodes [4] = ~ in_i[2];
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  (* src = "rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.index_nodes [2] = ~ in_i[0];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign \gen_lzc.index_nodes [4] = ~ in_i[2];
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  (* src = "rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.index_nodes [2] = ~ in_i[0];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign \gen_lzc.index_nodes [4] = ~ in_i[2];
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  (* src = "rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.index_nodes [2] = ~ in_i[0];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign \gen_lzc.index_nodes [4] = ~ in_i[2];
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  (* src = "rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.index_nodes [2] = ~ in_i[0];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign \gen_lzc.index_nodes [4] = ~ in_i[2];
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  (* src = "rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.index_nodes [2] = ~ in_i[0];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign \gen_lzc.index_nodes [4] = ~ in_i[2];
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  (* src = "rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.index_nodes [2] = ~ in_i[0];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign \gen_lzc.index_nodes [4] = ~ in_i[2];
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  (* src = "rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.index_nodes [2] = ~ in_i[0];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign \gen_lzc.index_nodes [4] = ~ in_i[2];
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "rtl/obi/obi_demux.sv:7.8" *)
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$12 ;
  wire \$14 ;
  wire \$4 ;
  wire \$58 ;
  wire \$6 ;
  wire \$8 ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$18932 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$18937 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$18940 ;
  wire [287:0] \$auto$bmuxmap.cc:84:execute$18942 ;
  wire [143:0] \$auto$bmuxmap.cc:84:execute$18947 ;
  wire [71:0] \$auto$bmuxmap.cc:84:execute$18950 ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$18952 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$18957 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$18960 ;
  wire [4:0] \$auto$opt_expr.cc:205:group_cell_inputs$17152 ;
  (* unused_bits = "0" *)
  wire [1:0] \$auto$rtlil.cc:3092:Mux$252 ;
  wire \$auto$rtlil.cc:3092:Mux$255 ;
  (* unused_bits = "1" *)
  wire [36:0] \$auto$rtlil.cc:3092:Mux$261 ;
  wire [359:0] \$auto$rtlil.cc:3093:Bwmux$249 ;
  (* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" *)
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$251 ;
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" *)
  wire [71:0] \$auto$rtlil.cc:3113:Bmux$254 ;
  (* unused_bits = "360 432 504" *)
  wire [575:0] \$auto$rtlil.cc:3114:Demux$240 ;
  (* src = "rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire [359:0] \$mgr_ports_req_o$33 ;
  wire \$procmux$14095_Y ;
  (* src = "rtl/obi/obi_demux.sv:21.38" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_demux.sv:39.9" *)
  wire cnt_up;
  (* src = "rtl/obi/obi_demux.sv:40.28" *)
  wire in_flight;
  (* src = "rtl/obi/obi_demux.sv:28.38" *)
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  (* src = "rtl/obi/obi_demux.sv:29.38" *)
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  (* src = "rtl/obi/obi_demux.sv:39.27" *)
  wire overflow;
  (* src = "rtl/obi/obi_demux.sv:22.38" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_demux.sv:41.9" *)
  wire sbr_port_gnt;
  (* src = "rtl/obi/obi_demux.sv:25.38" *)
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  (* src = "rtl/obi/obi_demux.sv:26.38" *)
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  (* src = "rtl/obi/obi_demux.sv:24.38" *)
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  (* src = "rtl/obi/obi_demux.sv:44.22" *)
  reg [2:0] select_q;
  assign \$12  = in_flight && sbr_port_rsp_o[0];
  assign \$14  = \$8  || \$12 ;
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$28  (
    .A({ 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17152 [4], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17152 [3], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17152 [2], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17152 [1], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17152 [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], 1'h0, \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], 1'h0, \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], 1'h0, \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], 1'h0, \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$249 )
  );
  assign \$4  = sbr_port_select_i == select_q;
  assign cnt_up = \$auto$rtlil.cc:3092:Mux$255  && \$auto$rtlil.cc:3092:Mux$252 [1];
  assign \$6  = ~ in_flight;
  assign \$58  = cnt_up ^ sbr_port_rsp_o[0];
  assign \$8  = \$4  || \$6 ;
  assign \$auto$bmuxmap.cc:84:execute$18932 [36:0] = sbr_port_select_i[0] ? mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$18932 [73:37] = sbr_port_select_i[0] ? mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$18932 [110:74] = sbr_port_select_i[0] ? 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$18932 [147:111] = sbr_port_select_i[0] ? 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18937 [36:0] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18932 [73:37] : \$auto$bmuxmap.cc:84:execute$18932 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$18937 [73:37] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18932 [147:111] : \$auto$bmuxmap.cc:84:execute$18932 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$18940  = sbr_port_select_i[2] ? \$auto$bmuxmap.cc:84:execute$18937 [73:37] : \$auto$bmuxmap.cc:84:execute$18937 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$18942 [71:0] = sbr_port_select_i[0] ? mgr_ports_req_o[143:72] : mgr_ports_req_o[71:0];
  assign \$auto$bmuxmap.cc:84:execute$18942 [143:72] = sbr_port_select_i[0] ? mgr_ports_req_o[287:216] : mgr_ports_req_o[215:144];
  assign \$auto$bmuxmap.cc:84:execute$18942 [215:144] = sbr_port_select_i[0] ? 72'hxxxxxxxxxxxxxxxxxx : mgr_ports_req_o[359:288];
  assign \$auto$bmuxmap.cc:84:execute$18942 [287:216] = sbr_port_select_i[0] ? 72'hxxxxxxxxxxxxxxxxxx : 72'hxxxxxxxxxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18947 [71:0] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18942 [143:72] : \$auto$bmuxmap.cc:84:execute$18942 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$18947 [143:72] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18942 [287:216] : \$auto$bmuxmap.cc:84:execute$18942 [215:144];
  assign \$auto$bmuxmap.cc:84:execute$18950  = sbr_port_select_i[2] ? \$auto$bmuxmap.cc:84:execute$18947 [143:72] : \$auto$bmuxmap.cc:84:execute$18947 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$18952 [36:0] = select_q[0] ? mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$18952 [73:37] = select_q[0] ? mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$18952 [110:74] = select_q[0] ? 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$18952 [147:111] = select_q[0] ? 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18957 [36:0] = select_q[1] ? \$auto$bmuxmap.cc:84:execute$18952 [73:37] : \$auto$bmuxmap.cc:84:execute$18952 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$18957 [73:37] = select_q[1] ? \$auto$bmuxmap.cc:84:execute$18952 [147:111] : \$auto$bmuxmap.cc:84:execute$18952 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$18960  = select_q[2] ? \$auto$bmuxmap.cc:84:execute$18957 [73:37] : \$auto$bmuxmap.cc:84:execute$18957 [36:0];
  assign \$auto$rtlil.cc:3114:Demux$240 [0] = sbr_port_select_i == 3'h0;
  assign \$auto$rtlil.cc:3114:Demux$240 [72] = sbr_port_select_i == 3'h1;
  assign \$auto$rtlil.cc:3114:Demux$240 [144] = sbr_port_select_i == 3'h2;
  assign \$auto$rtlil.cc:3114:Demux$240 [216] = sbr_port_select_i == 3'h3;
  assign \$auto$rtlil.cc:3114:Demux$240 [288] = sbr_port_select_i == 3'h4;
  assign \$auto$rtlil.cc:3114:Demux$240 [360] = sbr_port_select_i == 3'h5;
  assign \$auto$rtlil.cc:3114:Demux$240 [432] = sbr_port_select_i == 3'h6;
  assign \$auto$rtlil.cc:3114:Demux$240 [504] = sbr_port_select_i == 3'h7;
  (* src = "rtl/obi/obi_demux.sv:101.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) select_q <= 3'h0;
    else if (cnt_up) select_q <= sbr_port_select_i;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17152  = { sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] } & { \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [0] };
  assign \$mgr_ports_req_o$33  = \$14  ? (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:3093:Bwmux$249  : 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign \$procmux$14095_Y  = \$14  & (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:3092:Mux$252 [1];
  assign mgr_ports_req_o = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : \$mgr_ports_req_o$33 ;
  assign sbr_port_gnt = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 1'h0 : \$procmux$14095_Y ;
  (* src = "rtl/obi/obi_demux.sv:87.5" *)
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(sbr_port_rsp_o[0]),
    .en_i(\$58 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:3092:Mux$261 [36:2], \$auto$rtlil.cc:3092:Mux$261 [0] } = { sbr_port_rsp_o[36:2], sbr_port_rsp_o[0] };
  assign \$auto$rtlil.cc:3113:Bmux$251 [1:0] = \$auto$rtlil.cc:3092:Mux$252 ;
  assign \$auto$rtlil.cc:3113:Bmux$254 [0] = \$auto$rtlil.cc:3092:Mux$255 ;
  assign { \$auto$rtlil.cc:3114:Demux$240 [575:505], \$auto$rtlil.cc:3114:Demux$240 [503:433], \$auto$rtlil.cc:3114:Demux$240 [431:361], \$auto$rtlil.cc:3114:Demux$240 [359:289], \$auto$rtlil.cc:3114:Demux$240 [287:217], \$auto$rtlil.cc:3114:Demux$240 [215:145], \$auto$rtlil.cc:3114:Demux$240 [143:73], \$auto$rtlil.cc:3114:Demux$240 [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
  assign { \$auto$rtlil.cc:3113:Bmux$251 [36:2], \$auto$rtlil.cc:3092:Mux$252  } = \$auto$bmuxmap.cc:84:execute$18940 ;
  assign { \$auto$rtlil.cc:3113:Bmux$254 [71:1], \$auto$rtlil.cc:3092:Mux$255  } = \$auto$bmuxmap.cc:84:execute$18950 ;
  assign { sbr_port_rsp_o[36:2], \$auto$rtlil.cc:3092:Mux$261 [1], sbr_port_rsp_o[0] } = \$auto$bmuxmap.cc:84:execute$18960 ;
endmodule

(* src = "rtl/obi/obi_demux.sv:7.8" *)
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$12 ;
  wire \$14 ;
  wire \$4 ;
  wire \$58 ;
  wire \$6 ;
  wire \$8 ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$18962 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$18967 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$18970 ;
  wire [287:0] \$auto$bmuxmap.cc:84:execute$18972 ;
  wire [143:0] \$auto$bmuxmap.cc:84:execute$18977 ;
  wire [71:0] \$auto$bmuxmap.cc:84:execute$18980 ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$18982 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$18987 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$18990 ;
  wire [4:0] \$auto$opt_expr.cc:205:group_cell_inputs$17155 ;
  (* unused_bits = "0" *)
  wire [1:0] \$auto$rtlil.cc:3092:Mux$286 ;
  wire \$auto$rtlil.cc:3092:Mux$289 ;
  (* unused_bits = "1" *)
  wire [36:0] \$auto$rtlil.cc:3092:Mux$295 ;
  wire [359:0] \$auto$rtlil.cc:3093:Bwmux$283 ;
  (* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" *)
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$285 ;
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" *)
  wire [71:0] \$auto$rtlil.cc:3113:Bmux$288 ;
  (* unused_bits = "360 432 504" *)
  wire [575:0] \$auto$rtlil.cc:3114:Demux$274 ;
  (* src = "rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire [359:0] \$mgr_ports_req_o$33 ;
  wire \$procmux$14075_Y ;
  (* src = "rtl/obi/obi_demux.sv:21.38" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_demux.sv:39.9" *)
  wire cnt_up;
  (* src = "rtl/obi/obi_demux.sv:40.28" *)
  wire in_flight;
  (* src = "rtl/obi/obi_demux.sv:28.38" *)
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  (* src = "rtl/obi/obi_demux.sv:29.38" *)
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  (* src = "rtl/obi/obi_demux.sv:39.27" *)
  wire overflow;
  (* src = "rtl/obi/obi_demux.sv:22.38" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_demux.sv:41.9" *)
  wire sbr_port_gnt;
  (* src = "rtl/obi/obi_demux.sv:25.38" *)
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  (* src = "rtl/obi/obi_demux.sv:26.38" *)
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  (* src = "rtl/obi/obi_demux.sv:24.38" *)
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  (* src = "rtl/obi/obi_demux.sv:44.22" *)
  reg [2:0] select_q;
  assign \$12  = in_flight && sbr_port_rsp_o[0];
  assign \$14  = \$8  || \$12 ;
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$28  (
    .A({ 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17155 [4], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17155 [3], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17155 [2], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17155 [1], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17155 [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], 1'h0, \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], 1'h0, \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], 1'h0, \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], 1'h0, \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$283 )
  );
  assign \$4  = sbr_port_select_i == select_q;
  assign cnt_up = \$auto$rtlil.cc:3092:Mux$289  && \$auto$rtlil.cc:3092:Mux$286 [1];
  assign \$6  = ~ in_flight;
  assign \$58  = cnt_up ^ sbr_port_rsp_o[0];
  assign \$8  = \$4  || \$6 ;
  assign \$auto$bmuxmap.cc:84:execute$18962 [36:0] = sbr_port_select_i[0] ? mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$18962 [73:37] = sbr_port_select_i[0] ? mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$18962 [110:74] = sbr_port_select_i[0] ? 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$18962 [147:111] = sbr_port_select_i[0] ? 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18967 [36:0] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18962 [73:37] : \$auto$bmuxmap.cc:84:execute$18962 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$18967 [73:37] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18962 [147:111] : \$auto$bmuxmap.cc:84:execute$18962 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$18970  = sbr_port_select_i[2] ? \$auto$bmuxmap.cc:84:execute$18967 [73:37] : \$auto$bmuxmap.cc:84:execute$18967 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$18972 [71:0] = sbr_port_select_i[0] ? mgr_ports_req_o[143:72] : mgr_ports_req_o[71:0];
  assign \$auto$bmuxmap.cc:84:execute$18972 [143:72] = sbr_port_select_i[0] ? mgr_ports_req_o[287:216] : mgr_ports_req_o[215:144];
  assign \$auto$bmuxmap.cc:84:execute$18972 [215:144] = sbr_port_select_i[0] ? 72'hxxxxxxxxxxxxxxxxxx : mgr_ports_req_o[359:288];
  assign \$auto$bmuxmap.cc:84:execute$18972 [287:216] = sbr_port_select_i[0] ? 72'hxxxxxxxxxxxxxxxxxx : 72'hxxxxxxxxxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18977 [71:0] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18972 [143:72] : \$auto$bmuxmap.cc:84:execute$18972 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$18977 [143:72] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18972 [287:216] : \$auto$bmuxmap.cc:84:execute$18972 [215:144];
  assign \$auto$bmuxmap.cc:84:execute$18980  = sbr_port_select_i[2] ? \$auto$bmuxmap.cc:84:execute$18977 [143:72] : \$auto$bmuxmap.cc:84:execute$18977 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$18982 [36:0] = select_q[0] ? mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$18982 [73:37] = select_q[0] ? mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$18982 [110:74] = select_q[0] ? 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$18982 [147:111] = select_q[0] ? 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18987 [36:0] = select_q[1] ? \$auto$bmuxmap.cc:84:execute$18982 [73:37] : \$auto$bmuxmap.cc:84:execute$18982 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$18987 [73:37] = select_q[1] ? \$auto$bmuxmap.cc:84:execute$18982 [147:111] : \$auto$bmuxmap.cc:84:execute$18982 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$18990  = select_q[2] ? \$auto$bmuxmap.cc:84:execute$18987 [73:37] : \$auto$bmuxmap.cc:84:execute$18987 [36:0];
  assign \$auto$rtlil.cc:3114:Demux$274 [0] = sbr_port_select_i == 3'h0;
  assign \$auto$rtlil.cc:3114:Demux$274 [72] = sbr_port_select_i == 3'h1;
  assign \$auto$rtlil.cc:3114:Demux$274 [144] = sbr_port_select_i == 3'h2;
  assign \$auto$rtlil.cc:3114:Demux$274 [216] = sbr_port_select_i == 3'h3;
  assign \$auto$rtlil.cc:3114:Demux$274 [288] = sbr_port_select_i == 3'h4;
  assign \$auto$rtlil.cc:3114:Demux$274 [360] = sbr_port_select_i == 3'h5;
  assign \$auto$rtlil.cc:3114:Demux$274 [432] = sbr_port_select_i == 3'h6;
  assign \$auto$rtlil.cc:3114:Demux$274 [504] = sbr_port_select_i == 3'h7;
  (* src = "rtl/obi/obi_demux.sv:101.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) select_q <= 3'h0;
    else if (cnt_up) select_q <= sbr_port_select_i;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17155  = { sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] } & { \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [0] };
  assign \$mgr_ports_req_o$33  = \$14  ? (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:3093:Bwmux$283  : 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign \$procmux$14075_Y  = \$14  & (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:3092:Mux$286 [1];
  assign mgr_ports_req_o = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : \$mgr_ports_req_o$33 ;
  assign sbr_port_gnt = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 1'h0 : \$procmux$14075_Y ;
  (* src = "rtl/obi/obi_demux.sv:87.5" *)
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(sbr_port_rsp_o[0]),
    .en_i(\$58 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:3092:Mux$295 [36:2], \$auto$rtlil.cc:3092:Mux$295 [0] } = { sbr_port_rsp_o[36:2], sbr_port_rsp_o[0] };
  assign \$auto$rtlil.cc:3113:Bmux$285 [1:0] = \$auto$rtlil.cc:3092:Mux$286 ;
  assign \$auto$rtlil.cc:3113:Bmux$288 [0] = \$auto$rtlil.cc:3092:Mux$289 ;
  assign { \$auto$rtlil.cc:3114:Demux$274 [575:505], \$auto$rtlil.cc:3114:Demux$274 [503:433], \$auto$rtlil.cc:3114:Demux$274 [431:361], \$auto$rtlil.cc:3114:Demux$274 [359:289], \$auto$rtlil.cc:3114:Demux$274 [287:217], \$auto$rtlil.cc:3114:Demux$274 [215:145], \$auto$rtlil.cc:3114:Demux$274 [143:73], \$auto$rtlil.cc:3114:Demux$274 [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
  assign { \$auto$rtlil.cc:3113:Bmux$285 [36:2], \$auto$rtlil.cc:3092:Mux$286  } = \$auto$bmuxmap.cc:84:execute$18970 ;
  assign { \$auto$rtlil.cc:3113:Bmux$288 [71:1], \$auto$rtlil.cc:3092:Mux$289  } = \$auto$bmuxmap.cc:84:execute$18980 ;
  assign { sbr_port_rsp_o[36:2], \$auto$rtlil.cc:3092:Mux$295 [1], sbr_port_rsp_o[0] } = \$auto$bmuxmap.cc:84:execute$18990 ;
endmodule

(* src = "rtl/obi/obi_demux.sv:7.8" *)
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$12 ;
  wire \$14 ;
  wire \$4 ;
  wire \$58 ;
  wire \$6 ;
  wire \$8 ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$18992 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$18997 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$19000 ;
  wire [287:0] \$auto$bmuxmap.cc:84:execute$19002 ;
  wire [143:0] \$auto$bmuxmap.cc:84:execute$19007 ;
  wire [71:0] \$auto$bmuxmap.cc:84:execute$19010 ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$19012 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$19017 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$19020 ;
  wire [4:0] \$auto$opt_expr.cc:205:group_cell_inputs$17158 ;
  (* unused_bits = "0" *)
  wire [1:0] \$auto$rtlil.cc:3092:Mux$320 ;
  wire \$auto$rtlil.cc:3092:Mux$323 ;
  (* unused_bits = "1" *)
  wire [36:0] \$auto$rtlil.cc:3092:Mux$329 ;
  wire [359:0] \$auto$rtlil.cc:3093:Bwmux$317 ;
  (* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" *)
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$319 ;
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" *)
  wire [71:0] \$auto$rtlil.cc:3113:Bmux$322 ;
  (* unused_bits = "360 432 504" *)
  wire [575:0] \$auto$rtlil.cc:3114:Demux$308 ;
  (* src = "rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire [359:0] \$mgr_ports_req_o$33 ;
  wire \$procmux$14055_Y ;
  (* src = "rtl/obi/obi_demux.sv:21.38" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_demux.sv:39.9" *)
  wire cnt_up;
  (* src = "rtl/obi/obi_demux.sv:40.28" *)
  wire in_flight;
  (* src = "rtl/obi/obi_demux.sv:28.38" *)
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  (* src = "rtl/obi/obi_demux.sv:29.38" *)
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  (* src = "rtl/obi/obi_demux.sv:39.27" *)
  wire overflow;
  (* src = "rtl/obi/obi_demux.sv:22.38" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_demux.sv:41.9" *)
  wire sbr_port_gnt;
  (* src = "rtl/obi/obi_demux.sv:25.38" *)
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  (* src = "rtl/obi/obi_demux.sv:26.38" *)
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  (* src = "rtl/obi/obi_demux.sv:24.38" *)
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  (* src = "rtl/obi/obi_demux.sv:44.22" *)
  reg [2:0] select_q;
  assign \$12  = in_flight && sbr_port_rsp_o[0];
  assign \$14  = \$8  || \$12 ;
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$28  (
    .A({ 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17158 [4], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17158 [3], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17158 [2], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17158 [1], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17158 [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], 1'h0, \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], 1'h0, \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], 1'h0, \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], 1'h0, \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$317 )
  );
  assign \$4  = sbr_port_select_i == select_q;
  assign cnt_up = \$auto$rtlil.cc:3092:Mux$323  && \$auto$rtlil.cc:3092:Mux$320 [1];
  assign \$6  = ~ in_flight;
  assign \$58  = cnt_up ^ sbr_port_rsp_o[0];
  assign \$8  = \$4  || \$6 ;
  assign \$auto$bmuxmap.cc:84:execute$18992 [36:0] = sbr_port_select_i[0] ? mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$18992 [73:37] = sbr_port_select_i[0] ? mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$18992 [110:74] = sbr_port_select_i[0] ? 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$18992 [147:111] = sbr_port_select_i[0] ? 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18997 [36:0] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18992 [73:37] : \$auto$bmuxmap.cc:84:execute$18992 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$18997 [73:37] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18992 [147:111] : \$auto$bmuxmap.cc:84:execute$18992 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$19000  = sbr_port_select_i[2] ? \$auto$bmuxmap.cc:84:execute$18997 [73:37] : \$auto$bmuxmap.cc:84:execute$18997 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$19002 [71:0] = sbr_port_select_i[0] ? mgr_ports_req_o[143:72] : mgr_ports_req_o[71:0];
  assign \$auto$bmuxmap.cc:84:execute$19002 [143:72] = sbr_port_select_i[0] ? mgr_ports_req_o[287:216] : mgr_ports_req_o[215:144];
  assign \$auto$bmuxmap.cc:84:execute$19002 [215:144] = sbr_port_select_i[0] ? 72'hxxxxxxxxxxxxxxxxxx : mgr_ports_req_o[359:288];
  assign \$auto$bmuxmap.cc:84:execute$19002 [287:216] = sbr_port_select_i[0] ? 72'hxxxxxxxxxxxxxxxxxx : 72'hxxxxxxxxxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$19007 [71:0] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$19002 [143:72] : \$auto$bmuxmap.cc:84:execute$19002 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$19007 [143:72] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$19002 [287:216] : \$auto$bmuxmap.cc:84:execute$19002 [215:144];
  assign \$auto$bmuxmap.cc:84:execute$19010  = sbr_port_select_i[2] ? \$auto$bmuxmap.cc:84:execute$19007 [143:72] : \$auto$bmuxmap.cc:84:execute$19007 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$19012 [36:0] = select_q[0] ? mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$19012 [73:37] = select_q[0] ? mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$19012 [110:74] = select_q[0] ? 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$19012 [147:111] = select_q[0] ? 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$19017 [36:0] = select_q[1] ? \$auto$bmuxmap.cc:84:execute$19012 [73:37] : \$auto$bmuxmap.cc:84:execute$19012 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$19017 [73:37] = select_q[1] ? \$auto$bmuxmap.cc:84:execute$19012 [147:111] : \$auto$bmuxmap.cc:84:execute$19012 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$19020  = select_q[2] ? \$auto$bmuxmap.cc:84:execute$19017 [73:37] : \$auto$bmuxmap.cc:84:execute$19017 [36:0];
  assign \$auto$rtlil.cc:3114:Demux$308 [0] = sbr_port_select_i == 3'h0;
  assign \$auto$rtlil.cc:3114:Demux$308 [72] = sbr_port_select_i == 3'h1;
  assign \$auto$rtlil.cc:3114:Demux$308 [144] = sbr_port_select_i == 3'h2;
  assign \$auto$rtlil.cc:3114:Demux$308 [216] = sbr_port_select_i == 3'h3;
  assign \$auto$rtlil.cc:3114:Demux$308 [288] = sbr_port_select_i == 3'h4;
  assign \$auto$rtlil.cc:3114:Demux$308 [360] = sbr_port_select_i == 3'h5;
  assign \$auto$rtlil.cc:3114:Demux$308 [432] = sbr_port_select_i == 3'h6;
  assign \$auto$rtlil.cc:3114:Demux$308 [504] = sbr_port_select_i == 3'h7;
  (* src = "rtl/obi/obi_demux.sv:101.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) select_q <= 3'h0;
    else if (cnt_up) select_q <= sbr_port_select_i;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17158  = { sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] } & { \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [0] };
  assign \$mgr_ports_req_o$33  = \$14  ? (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:3093:Bwmux$317  : 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign \$procmux$14055_Y  = \$14  & (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:3092:Mux$320 [1];
  assign mgr_ports_req_o = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : \$mgr_ports_req_o$33 ;
  assign sbr_port_gnt = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 1'h0 : \$procmux$14055_Y ;
  (* src = "rtl/obi/obi_demux.sv:87.5" *)
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(sbr_port_rsp_o[0]),
    .en_i(\$58 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:3092:Mux$329 [36:2], \$auto$rtlil.cc:3092:Mux$329 [0] } = { sbr_port_rsp_o[36:2], sbr_port_rsp_o[0] };
  assign \$auto$rtlil.cc:3113:Bmux$319 [1:0] = \$auto$rtlil.cc:3092:Mux$320 ;
  assign \$auto$rtlil.cc:3113:Bmux$322 [0] = \$auto$rtlil.cc:3092:Mux$323 ;
  assign { \$auto$rtlil.cc:3114:Demux$308 [575:505], \$auto$rtlil.cc:3114:Demux$308 [503:433], \$auto$rtlil.cc:3114:Demux$308 [431:361], \$auto$rtlil.cc:3114:Demux$308 [359:289], \$auto$rtlil.cc:3114:Demux$308 [287:217], \$auto$rtlil.cc:3114:Demux$308 [215:145], \$auto$rtlil.cc:3114:Demux$308 [143:73], \$auto$rtlil.cc:3114:Demux$308 [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
  assign { \$auto$rtlil.cc:3113:Bmux$319 [36:2], \$auto$rtlil.cc:3092:Mux$320  } = \$auto$bmuxmap.cc:84:execute$19000 ;
  assign { \$auto$rtlil.cc:3113:Bmux$322 [71:1], \$auto$rtlil.cc:3092:Mux$323  } = \$auto$bmuxmap.cc:84:execute$19010 ;
  assign { sbr_port_rsp_o[36:2], \$auto$rtlil.cc:3092:Mux$329 [1], sbr_port_rsp_o[0] } = \$auto$bmuxmap.cc:84:execute$19020 ;
endmodule

(* src = "rtl/obi/obi_demux.sv:7.8" *)
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$12 ;
  wire \$14 ;
  wire \$4 ;
  wire \$58 ;
  wire \$6 ;
  wire \$8 ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$19022 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$19027 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$19030 ;
  wire [287:0] \$auto$bmuxmap.cc:84:execute$19032 ;
  wire [143:0] \$auto$bmuxmap.cc:84:execute$19037 ;
  wire [71:0] \$auto$bmuxmap.cc:84:execute$19040 ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$19042 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$19047 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$19050 ;
  wire [4:0] \$auto$opt_expr.cc:205:group_cell_inputs$17161 ;
  (* unused_bits = "0" *)
  wire [1:0] \$auto$rtlil.cc:3092:Mux$354 ;
  wire \$auto$rtlil.cc:3092:Mux$357 ;
  (* unused_bits = "1" *)
  wire [36:0] \$auto$rtlil.cc:3092:Mux$363 ;
  wire [359:0] \$auto$rtlil.cc:3093:Bwmux$351 ;
  (* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" *)
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$353 ;
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" *)
  wire [71:0] \$auto$rtlil.cc:3113:Bmux$356 ;
  (* unused_bits = "360 432 504" *)
  wire [575:0] \$auto$rtlil.cc:3114:Demux$342 ;
  (* src = "rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire [359:0] \$mgr_ports_req_o$33 ;
  wire \$procmux$14035_Y ;
  (* src = "rtl/obi/obi_demux.sv:21.38" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_demux.sv:39.9" *)
  wire cnt_up;
  (* src = "rtl/obi/obi_demux.sv:40.28" *)
  wire in_flight;
  (* src = "rtl/obi/obi_demux.sv:28.38" *)
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  (* src = "rtl/obi/obi_demux.sv:29.38" *)
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  (* src = "rtl/obi/obi_demux.sv:39.27" *)
  wire overflow;
  (* src = "rtl/obi/obi_demux.sv:22.38" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_demux.sv:41.9" *)
  wire sbr_port_gnt;
  (* src = "rtl/obi/obi_demux.sv:25.38" *)
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  (* src = "rtl/obi/obi_demux.sv:26.38" *)
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  (* src = "rtl/obi/obi_demux.sv:24.38" *)
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  (* src = "rtl/obi/obi_demux.sv:44.22" *)
  reg [2:0] select_q;
  assign \$12  = in_flight && sbr_port_rsp_o[0];
  assign \$14  = \$8  || \$12 ;
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$28  (
    .A({ 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17161 [4], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17161 [3], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17161 [2], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17161 [1], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17161 [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], 1'h0, \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], 1'h0, \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], 1'h0, \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], 1'h0, \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$351 )
  );
  assign \$4  = sbr_port_select_i == select_q;
  assign cnt_up = \$auto$rtlil.cc:3092:Mux$357  && \$auto$rtlil.cc:3092:Mux$354 [1];
  assign \$6  = ~ in_flight;
  assign \$58  = cnt_up ^ sbr_port_rsp_o[0];
  assign \$8  = \$4  || \$6 ;
  assign \$auto$bmuxmap.cc:84:execute$19022 [36:0] = sbr_port_select_i[0] ? mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$19022 [73:37] = sbr_port_select_i[0] ? mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$19022 [110:74] = sbr_port_select_i[0] ? 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$19022 [147:111] = sbr_port_select_i[0] ? 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$19027 [36:0] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$19022 [73:37] : \$auto$bmuxmap.cc:84:execute$19022 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$19027 [73:37] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$19022 [147:111] : \$auto$bmuxmap.cc:84:execute$19022 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$19030  = sbr_port_select_i[2] ? \$auto$bmuxmap.cc:84:execute$19027 [73:37] : \$auto$bmuxmap.cc:84:execute$19027 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$19032 [71:0] = sbr_port_select_i[0] ? mgr_ports_req_o[143:72] : mgr_ports_req_o[71:0];
  assign \$auto$bmuxmap.cc:84:execute$19032 [143:72] = sbr_port_select_i[0] ? mgr_ports_req_o[287:216] : mgr_ports_req_o[215:144];
  assign \$auto$bmuxmap.cc:84:execute$19032 [215:144] = sbr_port_select_i[0] ? 72'hxxxxxxxxxxxxxxxxxx : mgr_ports_req_o[359:288];
  assign \$auto$bmuxmap.cc:84:execute$19032 [287:216] = sbr_port_select_i[0] ? 72'hxxxxxxxxxxxxxxxxxx : 72'hxxxxxxxxxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$19037 [71:0] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$19032 [143:72] : \$auto$bmuxmap.cc:84:execute$19032 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$19037 [143:72] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$19032 [287:216] : \$auto$bmuxmap.cc:84:execute$19032 [215:144];
  assign \$auto$bmuxmap.cc:84:execute$19040  = sbr_port_select_i[2] ? \$auto$bmuxmap.cc:84:execute$19037 [143:72] : \$auto$bmuxmap.cc:84:execute$19037 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$19042 [36:0] = select_q[0] ? mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$19042 [73:37] = select_q[0] ? mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$19042 [110:74] = select_q[0] ? 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$19042 [147:111] = select_q[0] ? 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$19047 [36:0] = select_q[1] ? \$auto$bmuxmap.cc:84:execute$19042 [73:37] : \$auto$bmuxmap.cc:84:execute$19042 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$19047 [73:37] = select_q[1] ? \$auto$bmuxmap.cc:84:execute$19042 [147:111] : \$auto$bmuxmap.cc:84:execute$19042 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$19050  = select_q[2] ? \$auto$bmuxmap.cc:84:execute$19047 [73:37] : \$auto$bmuxmap.cc:84:execute$19047 [36:0];
  assign \$auto$rtlil.cc:3114:Demux$342 [0] = sbr_port_select_i == 3'h0;
  assign \$auto$rtlil.cc:3114:Demux$342 [72] = sbr_port_select_i == 3'h1;
  assign \$auto$rtlil.cc:3114:Demux$342 [144] = sbr_port_select_i == 3'h2;
  assign \$auto$rtlil.cc:3114:Demux$342 [216] = sbr_port_select_i == 3'h3;
  assign \$auto$rtlil.cc:3114:Demux$342 [288] = sbr_port_select_i == 3'h4;
  assign \$auto$rtlil.cc:3114:Demux$342 [360] = sbr_port_select_i == 3'h5;
  assign \$auto$rtlil.cc:3114:Demux$342 [432] = sbr_port_select_i == 3'h6;
  assign \$auto$rtlil.cc:3114:Demux$342 [504] = sbr_port_select_i == 3'h7;
  (* src = "rtl/obi/obi_demux.sv:101.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) select_q <= 3'h0;
    else if (cnt_up) select_q <= sbr_port_select_i;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17161  = { sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] } & { \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [0] };
  assign \$mgr_ports_req_o$33  = \$14  ? (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:3093:Bwmux$351  : 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign \$procmux$14035_Y  = \$14  & (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:3092:Mux$354 [1];
  assign mgr_ports_req_o = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : \$mgr_ports_req_o$33 ;
  assign sbr_port_gnt = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 1'h0 : \$procmux$14035_Y ;
  (* src = "rtl/obi/obi_demux.sv:87.5" *)
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(sbr_port_rsp_o[0]),
    .en_i(\$58 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:3092:Mux$363 [36:2], \$auto$rtlil.cc:3092:Mux$363 [0] } = { sbr_port_rsp_o[36:2], sbr_port_rsp_o[0] };
  assign \$auto$rtlil.cc:3113:Bmux$353 [1:0] = \$auto$rtlil.cc:3092:Mux$354 ;
  assign \$auto$rtlil.cc:3113:Bmux$356 [0] = \$auto$rtlil.cc:3092:Mux$357 ;
  assign { \$auto$rtlil.cc:3114:Demux$342 [575:505], \$auto$rtlil.cc:3114:Demux$342 [503:433], \$auto$rtlil.cc:3114:Demux$342 [431:361], \$auto$rtlil.cc:3114:Demux$342 [359:289], \$auto$rtlil.cc:3114:Demux$342 [287:217], \$auto$rtlil.cc:3114:Demux$342 [215:145], \$auto$rtlil.cc:3114:Demux$342 [143:73], \$auto$rtlil.cc:3114:Demux$342 [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
  assign { \$auto$rtlil.cc:3113:Bmux$353 [36:2], \$auto$rtlil.cc:3092:Mux$354  } = \$auto$bmuxmap.cc:84:execute$19030 ;
  assign { \$auto$rtlil.cc:3113:Bmux$356 [71:1], \$auto$rtlil.cc:3092:Mux$357  } = \$auto$bmuxmap.cc:84:execute$19040 ;
  assign { sbr_port_rsp_o[36:2], \$auto$rtlil.cc:3092:Mux$363 [1], sbr_port_rsp_o[0] } = \$auto$bmuxmap.cc:84:execute$19050 ;
endmodule

(* src = "rtl/obi/obi_demux.sv:7.8" *)
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_obi_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$12 ;
  wire \$14 ;
  wire \$4 ;
  wire \$58 ;
  wire \$6 ;
  wire \$8 ;
  wire [155:0] \$auto$bmuxmap.cc:84:execute$19052 ;
  wire [77:0] \$auto$bmuxmap.cc:84:execute$19057 ;
  wire [38:0] \$auto$bmuxmap.cc:84:execute$19060 ;
  wire [295:0] \$auto$bmuxmap.cc:84:execute$19062 ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$19067 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$19070 ;
  wire [155:0] \$auto$bmuxmap.cc:84:execute$19072 ;
  wire [77:0] \$auto$bmuxmap.cc:84:execute$19077 ;
  wire [38:0] \$auto$bmuxmap.cc:84:execute$19080 ;
  wire [5:0] \$auto$opt_expr.cc:205:group_cell_inputs$17164 ;
  (* unused_bits = "0" *)
  wire [1:0] \$auto$rtlil.cc:3092:Mux$39 ;
  wire \$auto$rtlil.cc:3092:Mux$42 ;
  (* unused_bits = "1" *)
  wire [38:0] \$auto$rtlil.cc:3092:Mux$48 ;
  wire [443:0] \$auto$rtlil.cc:3093:Bwmux$36 ;
  (* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38" *)
  wire [38:0] \$auto$rtlil.cc:3113:Bmux$38 ;
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73" *)
  wire [73:0] \$auto$rtlil.cc:3113:Bmux$41 ;
  (* unused_bits = "444 518" *)
  wire [591:0] \$auto$rtlil.cc:3114:Demux$27 ;
  (* src = "rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire [443:0] \$mgr_ports_req_o$33 ;
  wire \$procmux$14951_Y ;
  (* src = "rtl/obi/obi_demux.sv:21.38" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_demux.sv:39.9" *)
  wire cnt_up;
  (* src = "rtl/obi/obi_demux.sv:40.28" *)
  wire in_flight;
  (* src = "rtl/obi/obi_demux.sv:28.38" *)
  output [443:0] mgr_ports_req_o;
  wire [443:0] mgr_ports_req_o;
  (* src = "rtl/obi/obi_demux.sv:29.38" *)
  input [233:0] mgr_ports_rsp_i;
  wire [233:0] mgr_ports_rsp_i;
  (* src = "rtl/obi/obi_demux.sv:39.27" *)
  wire overflow;
  (* src = "rtl/obi/obi_demux.sv:22.38" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_demux.sv:41.9" *)
  wire sbr_port_gnt;
  (* src = "rtl/obi/obi_demux.sv:25.38" *)
  input [73:0] sbr_port_req_i;
  wire [73:0] sbr_port_req_i;
  (* src = "rtl/obi/obi_demux.sv:26.38" *)
  output [38:0] sbr_port_rsp_o;
  wire [38:0] sbr_port_rsp_o;
  (* src = "rtl/obi/obi_demux.sv:24.38" *)
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  (* src = "rtl/obi/obi_demux.sv:44.22" *)
  reg [2:0] select_q;
  assign \$12  = in_flight && sbr_port_rsp_o[0];
  assign \$14  = \$8  || \$12 ;
  \$bwmux  #(
    .WIDTH(32'd444)
  ) \$28  (
    .A({ 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17164 [5], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17164 [4], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17164 [3], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17164 [2], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17164 [1], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17164 [0] }),
    .B({ sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx }),
    .S({ \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], 1'h0, \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], 1'h0, \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], 1'h0, \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], 1'h0, \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], 1'h0, \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$36 )
  );
  assign \$4  = sbr_port_select_i == select_q;
  assign cnt_up = \$auto$rtlil.cc:3092:Mux$42  && \$auto$rtlil.cc:3092:Mux$39 [1];
  assign \$6  = ~ in_flight;
  assign \$58  = cnt_up ^ sbr_port_rsp_o[0];
  assign \$8  = \$4  || \$6 ;
  assign \$auto$bmuxmap.cc:84:execute$19052 [38:0] = sbr_port_select_i[0] ? mgr_ports_rsp_i[77:39] : mgr_ports_rsp_i[38:0];
  assign \$auto$bmuxmap.cc:84:execute$19052 [77:39] = sbr_port_select_i[0] ? mgr_ports_rsp_i[155:117] : mgr_ports_rsp_i[116:78];
  assign \$auto$bmuxmap.cc:84:execute$19052 [116:78] = sbr_port_select_i[0] ? mgr_ports_rsp_i[233:195] : mgr_ports_rsp_i[194:156];
  assign \$auto$bmuxmap.cc:84:execute$19052 [155:117] = sbr_port_select_i[0] ? 39'hxxxxxxxxxx : 39'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$19057 [38:0] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$19052 [77:39] : \$auto$bmuxmap.cc:84:execute$19052 [38:0];
  assign \$auto$bmuxmap.cc:84:execute$19057 [77:39] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$19052 [155:117] : \$auto$bmuxmap.cc:84:execute$19052 [116:78];
  assign \$auto$bmuxmap.cc:84:execute$19060  = sbr_port_select_i[2] ? \$auto$bmuxmap.cc:84:execute$19057 [77:39] : \$auto$bmuxmap.cc:84:execute$19057 [38:0];
  assign \$auto$bmuxmap.cc:84:execute$19062 [73:0] = sbr_port_select_i[0] ? mgr_ports_req_o[147:74] : mgr_ports_req_o[73:0];
  assign \$auto$bmuxmap.cc:84:execute$19062 [147:74] = sbr_port_select_i[0] ? mgr_ports_req_o[295:222] : mgr_ports_req_o[221:148];
  assign \$auto$bmuxmap.cc:84:execute$19062 [221:148] = sbr_port_select_i[0] ? mgr_ports_req_o[443:370] : mgr_ports_req_o[369:296];
  assign \$auto$bmuxmap.cc:84:execute$19062 [295:222] = sbr_port_select_i[0] ? 74'hxxxxxxxxxxxxxxxxxxx : 74'hxxxxxxxxxxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$19067 [73:0] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$19062 [147:74] : \$auto$bmuxmap.cc:84:execute$19062 [73:0];
  assign \$auto$bmuxmap.cc:84:execute$19067 [147:74] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$19062 [295:222] : \$auto$bmuxmap.cc:84:execute$19062 [221:148];
  assign \$auto$bmuxmap.cc:84:execute$19070  = sbr_port_select_i[2] ? \$auto$bmuxmap.cc:84:execute$19067 [147:74] : \$auto$bmuxmap.cc:84:execute$19067 [73:0];
  assign \$auto$bmuxmap.cc:84:execute$19072 [38:0] = select_q[0] ? mgr_ports_rsp_i[77:39] : mgr_ports_rsp_i[38:0];
  assign \$auto$bmuxmap.cc:84:execute$19072 [77:39] = select_q[0] ? mgr_ports_rsp_i[155:117] : mgr_ports_rsp_i[116:78];
  assign \$auto$bmuxmap.cc:84:execute$19072 [116:78] = select_q[0] ? mgr_ports_rsp_i[233:195] : mgr_ports_rsp_i[194:156];
  assign \$auto$bmuxmap.cc:84:execute$19072 [155:117] = select_q[0] ? 39'hxxxxxxxxxx : 39'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$19077 [38:0] = select_q[1] ? \$auto$bmuxmap.cc:84:execute$19072 [77:39] : \$auto$bmuxmap.cc:84:execute$19072 [38:0];
  assign \$auto$bmuxmap.cc:84:execute$19077 [77:39] = select_q[1] ? \$auto$bmuxmap.cc:84:execute$19072 [155:117] : \$auto$bmuxmap.cc:84:execute$19072 [116:78];
  assign \$auto$bmuxmap.cc:84:execute$19080  = select_q[2] ? \$auto$bmuxmap.cc:84:execute$19077 [77:39] : \$auto$bmuxmap.cc:84:execute$19077 [38:0];
  assign \$auto$rtlil.cc:3114:Demux$27 [0] = sbr_port_select_i == 3'h0;
  assign \$auto$rtlil.cc:3114:Demux$27 [74] = sbr_port_select_i == 3'h1;
  assign \$auto$rtlil.cc:3114:Demux$27 [148] = sbr_port_select_i == 3'h2;
  assign \$auto$rtlil.cc:3114:Demux$27 [222] = sbr_port_select_i == 3'h3;
  assign \$auto$rtlil.cc:3114:Demux$27 [296] = sbr_port_select_i == 3'h4;
  assign \$auto$rtlil.cc:3114:Demux$27 [370] = sbr_port_select_i == 3'h5;
  assign \$auto$rtlil.cc:3114:Demux$27 [444] = sbr_port_select_i == 3'h6;
  assign \$auto$rtlil.cc:3114:Demux$27 [518] = sbr_port_select_i == 3'h7;
  (* src = "rtl/obi/obi_demux.sv:101.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) select_q <= 3'h0;
    else if (cnt_up) select_q <= sbr_port_select_i;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17164  = { sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] } & { \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [0] };
  assign \$mgr_ports_req_o$33  = \$14  ? (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:3093:Bwmux$36  : 444'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign \$procmux$14951_Y  = \$14  & (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:3092:Mux$39 [1];
  assign mgr_ports_req_o = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 444'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : \$mgr_ports_req_o$33 ;
  assign sbr_port_gnt = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 1'h0 : \$procmux$14951_Y ;
  (* src = "rtl/obi/obi_demux.sv:87.5" *)
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_obi_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(sbr_port_rsp_o[0]),
    .en_i(\$58 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:3092:Mux$48 [38:2], \$auto$rtlil.cc:3092:Mux$48 [0] } = { sbr_port_rsp_o[38:2], sbr_port_rsp_o[0] };
  assign \$auto$rtlil.cc:3113:Bmux$38 [1:0] = \$auto$rtlil.cc:3092:Mux$39 ;
  assign \$auto$rtlil.cc:3113:Bmux$41 [0] = \$auto$rtlil.cc:3092:Mux$42 ;
  assign { \$auto$rtlil.cc:3114:Demux$27 [591:519], \$auto$rtlil.cc:3114:Demux$27 [517:445], \$auto$rtlil.cc:3114:Demux$27 [443:371], \$auto$rtlil.cc:3114:Demux$27 [369:297], \$auto$rtlil.cc:3114:Demux$27 [295:223], \$auto$rtlil.cc:3114:Demux$27 [221:149], \$auto$rtlil.cc:3114:Demux$27 [147:75], \$auto$rtlil.cc:3114:Demux$27 [73:1] } = 584'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
  assign { \$auto$rtlil.cc:3113:Bmux$38 [38:2], \$auto$rtlil.cc:3092:Mux$39  } = \$auto$bmuxmap.cc:84:execute$19060 ;
  assign { \$auto$rtlil.cc:3113:Bmux$41 [73:1], \$auto$rtlil.cc:3092:Mux$42  } = \$auto$bmuxmap.cc:84:execute$19070 ;
  assign { sbr_port_rsp_o[38:2], \$auto$rtlil.cc:3092:Mux$48 [1], sbr_port_rsp_o[0] } = \$auto$bmuxmap.cc:84:execute$19080 ;
endmodule

(* src = "rtl/obi/obi_demux.sv:7.8" *)
module \obi_demux$croc_chip.i_croc_soc.i_user.i_obi_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$12 ;
  wire \$14 ;
  wire \$4 ;
  wire \$58 ;
  wire \$6 ;
  wire \$8 ;
  wire [1:0] \$auto$opt_expr.cc:205:group_cell_inputs$17167 ;
  (* unused_bits = "0" *)
  wire [1:0] \$auto$rtlil.cc:3092:Mux$185 ;
  wire [73:0] \$auto$rtlil.cc:3092:Mux$188 ;
  (* unused_bits = "1" *)
  wire [38:0] \$auto$rtlil.cc:3092:Mux$194 ;
  wire [147:0] \$auto$rtlil.cc:3093:Bwmux$182 ;
  wire [147:0] \$auto$rtlil.cc:3114:Demux$173 ;
  (* src = "rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire [147:0] \$mgr_ports_req_o$33 ;
  wire \$procmux$14321_Y ;
  (* src = "rtl/obi/obi_demux.sv:21.38" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_demux.sv:39.9" *)
  wire cnt_up;
  (* src = "rtl/obi/obi_demux.sv:40.28" *)
  wire in_flight;
  (* src = "rtl/obi/obi_demux.sv:28.38" *)
  output [147:0] mgr_ports_req_o;
  wire [147:0] mgr_ports_req_o;
  (* src = "rtl/obi/obi_demux.sv:29.38" *)
  input [77:0] mgr_ports_rsp_i;
  wire [77:0] mgr_ports_rsp_i;
  (* src = "rtl/obi/obi_demux.sv:39.27" *)
  wire overflow;
  (* src = "rtl/obi/obi_demux.sv:22.38" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_demux.sv:41.9" *)
  wire sbr_port_gnt;
  (* src = "rtl/obi/obi_demux.sv:25.38" *)
  input [73:0] sbr_port_req_i;
  wire [73:0] sbr_port_req_i;
  (* src = "rtl/obi/obi_demux.sv:26.38" *)
  output [38:0] sbr_port_rsp_o;
  wire [38:0] sbr_port_rsp_o;
  (* src = "rtl/obi/obi_demux.sv:24.38" *)
  input sbr_port_select_i;
  wire sbr_port_select_i;
  (* src = "rtl/obi/obi_demux.sv:44.22" *)
  reg select_q;
  assign \$12  = in_flight && sbr_port_rsp_o[0];
  assign \$14  = \$8  || \$12 ;
  \$bwmux  #(
    .WIDTH(32'd148)
  ) \$28  (
    .A({ 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17167 [1], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17167 [0] }),
    .B({ sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx }),
    .S({ \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], 1'h0, \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$182 )
  );
  assign \$4  = sbr_port_select_i == select_q;
  assign \$auto$rtlil.cc:3092:Mux$185  = sbr_port_select_i ? mgr_ports_rsp_i[40:39] : mgr_ports_rsp_i[1:0];
  assign \$auto$rtlil.cc:3092:Mux$188 [0] = sbr_port_select_i ? mgr_ports_req_o[74] : mgr_ports_req_o[0];
  assign cnt_up = \$auto$rtlil.cc:3092:Mux$188 [0] && \$auto$rtlil.cc:3092:Mux$185 [1];
  assign { sbr_port_rsp_o[38:2], \$auto$rtlil.cc:3092:Mux$194 [1], sbr_port_rsp_o[0] } = select_q ? mgr_ports_rsp_i[77:39] : mgr_ports_rsp_i[38:0];
  assign \$6  = ~ in_flight;
  assign \$58  = cnt_up ^ sbr_port_rsp_o[0];
  assign \$8  = \$4  || \$6 ;
  assign \$auto$rtlil.cc:3114:Demux$173 [0] = sbr_port_select_i == 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$173 [74] = sbr_port_select_i == 1'h1;
  (* src = "rtl/obi/obi_demux.sv:101.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) select_q <= 1'h0;
    else if (cnt_up) select_q <= sbr_port_select_i;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17167  = { sbr_port_req_i[0], sbr_port_req_i[0] } & { \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [0] };
  assign \$mgr_ports_req_o$33  = \$14  ? (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:3093:Bwmux$182  : 148'h0000000000000000000000000000000000000;
  assign \$procmux$14321_Y  = \$14  & (* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:3092:Mux$185 [1];
  assign mgr_ports_req_o = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 148'h0000000000000000000000000000000000000 : \$mgr_ports_req_o$33 ;
  assign sbr_port_gnt = overflow ? (* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" *) 1'h0 : \$procmux$14321_Y ;
  (* src = "rtl/obi/obi_demux.sv:87.5" *)
  \delta_counter$croc_chip.i_croc_soc.i_user.i_obi_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(sbr_port_rsp_o[0]),
    .en_i(\$58 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign \$auto$rtlil.cc:3092:Mux$188 [73:1] = 73'hxxxxxxxxxxxxxxxxxxx;
  assign { \$auto$rtlil.cc:3092:Mux$194 [38:2], \$auto$rtlil.cc:3092:Mux$194 [0] } = { sbr_port_rsp_o[38:2], sbr_port_rsp_o[0] };
  assign { \$auto$rtlil.cc:3114:Demux$173 [147:75], \$auto$rtlil.cc:3114:Demux$173 [73:1] } = 146'h0000000000000000000000000000000000000;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
endmodule

(* src = "rtl/obi/obi_err_sbr.sv:7.8" *)
module \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_periph_err (clk_i, rst_ni, testmode_i, obi_req_i, obi_rsp_o);
  wire \$6 ;
  (* src = "rtl/obi/obi_err_sbr.sv:19.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_err_sbr.sv:28.20" *)
  wire fifo_empty;
  (* src = "rtl/obi/obi_err_sbr.sv:28.9" *)
  wire fifo_full;
  (* src = "rtl/obi/obi_err_sbr.sv:28.32" *)
  wire fifo_pop;
  (* src = "rtl/obi/obi_err_sbr.sv:23.20" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "rtl/obi/obi_err_sbr.sv:24.20" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "rtl/obi/obi_err_sbr.sv:27.30" *)
  wire [2:0] rid;
  (* src = "rtl/obi/obi_err_sbr.sv:20.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_err_sbr.sv:21.16" *)
  input testmode_i;
  wire testmode_i;
  assign obi_rsp_o[1] = ~ fifo_full;
  assign fifo_pop = ~ fifo_empty;
  assign \$6  = obi_req_i[0] && obi_rsp_o[1];
  (* src = "rtl/obi/obi_err_sbr.sv:50.5" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_periph_err.i_id_fifo  i_id_fifo (
    .clk_i(clk_i),
    .data_i(obi_req_i[4:2]),
    .data_o(rid),
    .empty_o(fifo_empty),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$6 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { obi_rsp_o[38:2], obi_rsp_o[0] } = { 32'hbadcab1e, rid, 2'h2, fifo_pop };
endmodule

(* src = "rtl/obi/obi_err_sbr.sv:7.8" *)
module \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_xbar_err (clk_i, rst_ni, testmode_i, obi_req_i, obi_rsp_o);
  wire \$6 ;
  (* src = "rtl/obi/obi_err_sbr.sv:19.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_err_sbr.sv:28.20" *)
  wire fifo_empty;
  (* src = "rtl/obi/obi_err_sbr.sv:28.9" *)
  wire fifo_full;
  (* src = "rtl/obi/obi_err_sbr.sv:28.32" *)
  wire fifo_pop;
  (* src = "rtl/obi/obi_err_sbr.sv:23.20" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "rtl/obi/obi_err_sbr.sv:24.20" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "rtl/obi/obi_err_sbr.sv:27.30" *)
  wire [2:0] rid;
  (* src = "rtl/obi/obi_err_sbr.sv:20.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_err_sbr.sv:21.16" *)
  input testmode_i;
  wire testmode_i;
  assign obi_rsp_o[1] = ~ fifo_full;
  assign fifo_pop = ~ fifo_empty;
  assign \$6  = obi_req_i[0] && obi_rsp_o[1];
  (* src = "rtl/obi/obi_err_sbr.sv:50.5" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_xbar_err.i_id_fifo  i_id_fifo (
    .clk_i(clk_i),
    .data_i(obi_req_i[4:2]),
    .data_o(rid),
    .empty_o(fifo_empty),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$6 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { obi_rsp_o[38:2], obi_rsp_o[0] } = { 32'hbadcab1e, rid, 2'h2, fifo_pop };
endmodule

(* src = "rtl/obi/obi_err_sbr.sv:7.8" *)
module \obi_err_sbr$croc_chip.i_croc_soc.i_user.i_user_err (clk_i, rst_ni, testmode_i, obi_req_i, obi_rsp_o);
  wire \$6 ;
  (* src = "rtl/obi/obi_err_sbr.sv:19.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_err_sbr.sv:28.20" *)
  wire fifo_empty;
  (* src = "rtl/obi/obi_err_sbr.sv:28.9" *)
  wire fifo_full;
  (* src = "rtl/obi/obi_err_sbr.sv:28.32" *)
  wire fifo_pop;
  (* src = "rtl/obi/obi_err_sbr.sv:23.20" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "rtl/obi/obi_err_sbr.sv:24.20" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "rtl/obi/obi_err_sbr.sv:27.30" *)
  wire [2:0] rid;
  (* src = "rtl/obi/obi_err_sbr.sv:20.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_err_sbr.sv:21.16" *)
  input testmode_i;
  wire testmode_i;
  assign obi_rsp_o[1] = ~ fifo_full;
  assign fifo_pop = ~ fifo_empty;
  assign \$6  = obi_req_i[0] && obi_rsp_o[1];
  (* src = "rtl/obi/obi_err_sbr.sv:50.5" *)
  \fifo_v3$croc_chip.i_croc_soc.i_user.i_user_err.i_id_fifo  i_id_fifo (
    .clk_i(clk_i),
    .data_i(obi_req_i[4:2]),
    .data_o(rid),
    .empty_o(fifo_empty),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$6 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { obi_rsp_o[38:2], obi_rsp_o[0] } = { 32'hbadcab1e, rid, 2'h2, fifo_pop };
endmodule

(* src = "rtl/obi/obi_mux.sv:10.8" *)
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$1 ;
  wire \$10 ;
  wire \$3 ;
  wire [127:0] \$auto$opt_expr.cc:205:group_cell_inputs$17170 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$385 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$392 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$376 ;
  (* src = "rtl/obi/obi_mux.sv:34.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_mux.sv:60.23" *)
  wire fifo_full;
  (* src = "rtl/obi/obi_mux.sv:58.21" *)
  wire [70:0] mgr_port_a_in_sbr;
  (* src = "rtl/obi/obi_mux.sv:60.9" *)
  wire mgr_port_req;
  (* src = "rtl/obi/obi_mux.sv:41.47" *)
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  (* src = "rtl/obi/obi_mux.sv:42.47" *)
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  (* src = "rtl/obi/obi_mux.sv:59.49" *)
  wire [1:0] response_id;
  (* src = "rtl/obi/obi_mux.sv:35.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_mux.sv:50.42" *)
  wire [3:0] sbr_ports_gnt;
  (* src = "rtl/obi/obi_mux.sv:38.47" *)
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  (* src = "rtl/obi/obi_mux.sv:39.47" *)
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  (* src = "rtl/obi/obi_mux.sv:141.39" *)
  wire [139:0] sbr_rsp_r;
  (* src = "rtl/obi/obi_mux.sv:140.27" *)
  wire [3:0] sbr_rsp_rvalid;
  (* src = "rtl/obi/obi_mux.sv:59.36" *)
  wire [1:0] selected_id;
  (* src = "rtl/obi/obi_mux.sv:36.16" *)
  input testmode_i;
  wire testmode_i;
  assign \$1  = ~ fifo_full;
  assign \$3  = mgr_port_rsp_i[1] && \$1 ;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$25  (
    .A({ \$auto$opt_expr.cc:205:group_cell_inputs$17170 [127], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [123], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [119], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [115], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [111], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [107], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [103], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [99], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [95], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [91], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [87], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [83], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [79], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [75], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [71], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [67], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [63], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [59], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [55], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [51], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [47], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [43], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [39], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [35], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [31], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [27], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [23], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [19], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [15], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [11], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [7], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [3], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17170 [126], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [122], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [118], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [114], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [110], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [106], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [102], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [98], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [94], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [90], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [86], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [82], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [78], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [74], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [70], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [66], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [62], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [58], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [54], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [50], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [46], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [42], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [38], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [34], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [30], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [26], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [22], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [18], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [14], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [10], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [6], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [2], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17170 [125], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [121], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [117], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [113], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [109], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [105], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [101], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [97], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [93], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [89], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [85], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [81], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [77], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [73], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [69], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [65], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [61], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [57], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [53], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [49], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [45], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [41], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [37], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [33], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [29], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [25], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [21], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [17], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [13], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [9], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [5], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [1], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17170 [124], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [120], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [116], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [112], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [108], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [104], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [100], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [96], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [92], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [88], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [84], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [80], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [76], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [72], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [68], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [64], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [60], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [56], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [52], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [48], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [44], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [40], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [36], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [32], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [28], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [24], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [20], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [16], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [12], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [8], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [4], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [0], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$auto$rtlil.cc:3114:Demux$376 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$376 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$376 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$376 [34], 2'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$385 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$32  (
    .A(\$auto$rtlil.cc:3093:Bwmux$385 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$auto$rtlil.cc:3114:Demux$376 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$376 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$376 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$376 [34], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$392 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$39  (
    .A(\$auto$rtlil.cc:3093:Bwmux$392 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$auto$rtlil.cc:3114:Demux$376 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$376 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$376 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$376 [34] }),
    .Y(sbr_rsp_r)
  );
  assign mgr_port_req_o[0] = mgr_port_req && \$1 ;
  assign \$10  = mgr_port_req_o[0] && mgr_port_rsp_i[1];
  assign \$auto$rtlil.cc:3114:Demux$376 [34] = response_id == 2'h0;
  assign \$auto$rtlil.cc:3114:Demux$376 [69] = response_id == 2'h1;
  assign \$auto$rtlil.cc:3114:Demux$376 [104] = response_id == 2'h2;
  assign \$auto$rtlil.cc:3114:Demux$376 [139] = response_id == 2'h3;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17170  = { mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] } & { \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34] };
  assign sbr_rsp_rvalid = { mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] } & { \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34] };
  (* src = "rtl/obi/obi_mux.sv:119.7" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$10 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/obi/obi_mux.sv:67.5" *)
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$3 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:3114:Demux$376 [138:105], \$auto$rtlil.cc:3114:Demux$376 [103:70], \$auto$rtlil.cc:3114:Demux$376 [68:35], \$auto$rtlil.cc:3114:Demux$376 [33:0] } = { \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], 3'h0, \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], 3'h0, \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], 3'h0, \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], 3'h0 };
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

(* src = "rtl/obi/obi_mux.sv:10.8" *)
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$1 ;
  wire \$10 ;
  wire \$3 ;
  wire [127:0] \$auto$opt_expr.cc:205:group_cell_inputs$17173 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$420 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$427 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$411 ;
  (* src = "rtl/obi/obi_mux.sv:34.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_mux.sv:60.23" *)
  wire fifo_full;
  (* src = "rtl/obi/obi_mux.sv:58.21" *)
  wire [70:0] mgr_port_a_in_sbr;
  (* src = "rtl/obi/obi_mux.sv:60.9" *)
  wire mgr_port_req;
  (* src = "rtl/obi/obi_mux.sv:41.47" *)
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  (* src = "rtl/obi/obi_mux.sv:42.47" *)
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  (* src = "rtl/obi/obi_mux.sv:59.49" *)
  wire [1:0] response_id;
  (* src = "rtl/obi/obi_mux.sv:35.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_mux.sv:50.42" *)
  wire [3:0] sbr_ports_gnt;
  (* src = "rtl/obi/obi_mux.sv:38.47" *)
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  (* src = "rtl/obi/obi_mux.sv:39.47" *)
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  (* src = "rtl/obi/obi_mux.sv:141.39" *)
  wire [139:0] sbr_rsp_r;
  (* src = "rtl/obi/obi_mux.sv:140.27" *)
  wire [3:0] sbr_rsp_rvalid;
  (* src = "rtl/obi/obi_mux.sv:59.36" *)
  wire [1:0] selected_id;
  (* src = "rtl/obi/obi_mux.sv:36.16" *)
  input testmode_i;
  wire testmode_i;
  assign \$1  = ~ fifo_full;
  assign \$3  = mgr_port_rsp_i[1] && \$1 ;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$25  (
    .A({ \$auto$opt_expr.cc:205:group_cell_inputs$17173 [127], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [123], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [119], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [115], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [111], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [107], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [103], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [99], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [95], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [91], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [87], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [83], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [79], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [75], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [71], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [67], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [63], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [59], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [55], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [51], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [47], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [43], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [39], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [35], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [31], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [27], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [23], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [19], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [15], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [11], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [7], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [3], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17173 [126], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [122], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [118], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [114], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [110], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [106], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [102], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [98], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [94], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [90], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [86], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [82], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [78], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [74], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [70], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [66], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [62], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [58], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [54], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [50], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [46], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [42], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [38], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [34], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [30], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [26], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [22], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [18], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [14], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [10], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [6], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [2], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17173 [125], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [121], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [117], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [113], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [109], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [105], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [101], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [97], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [93], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [89], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [85], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [81], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [77], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [73], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [69], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [65], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [61], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [57], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [53], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [49], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [45], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [41], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [37], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [33], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [29], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [25], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [21], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [17], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [13], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [9], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [5], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [1], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17173 [124], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [120], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [116], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [112], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [108], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [104], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [100], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [96], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [92], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [88], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [84], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [80], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [76], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [72], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [68], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [64], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [60], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [56], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [52], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [48], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [44], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [40], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [36], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [32], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [28], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [24], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [20], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [16], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [12], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [8], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [4], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [0], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$auto$rtlil.cc:3114:Demux$411 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$411 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$411 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$411 [34], 2'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$420 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$32  (
    .A(\$auto$rtlil.cc:3093:Bwmux$420 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$auto$rtlil.cc:3114:Demux$411 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$411 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$411 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$411 [34], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$427 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$39  (
    .A(\$auto$rtlil.cc:3093:Bwmux$427 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$auto$rtlil.cc:3114:Demux$411 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$411 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$411 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$411 [34] }),
    .Y(sbr_rsp_r)
  );
  assign mgr_port_req_o[0] = mgr_port_req && \$1 ;
  assign \$10  = mgr_port_req_o[0] && mgr_port_rsp_i[1];
  assign \$auto$rtlil.cc:3114:Demux$411 [34] = response_id == 2'h0;
  assign \$auto$rtlil.cc:3114:Demux$411 [69] = response_id == 2'h1;
  assign \$auto$rtlil.cc:3114:Demux$411 [104] = response_id == 2'h2;
  assign \$auto$rtlil.cc:3114:Demux$411 [139] = response_id == 2'h3;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17173  = { mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] } & { \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34] };
  assign sbr_rsp_rvalid = { mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] } & { \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34] };
  (* src = "rtl/obi/obi_mux.sv:119.7" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$10 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/obi/obi_mux.sv:67.5" *)
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$3 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:3114:Demux$411 [138:105], \$auto$rtlil.cc:3114:Demux$411 [103:70], \$auto$rtlil.cc:3114:Demux$411 [68:35], \$auto$rtlil.cc:3114:Demux$411 [33:0] } = { \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], 3'h0, \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], 3'h0, \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], 3'h0, \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], 3'h0 };
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

(* src = "rtl/obi/obi_mux.sv:10.8" *)
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$1 ;
  wire \$10 ;
  wire \$3 ;
  wire [127:0] \$auto$opt_expr.cc:205:group_cell_inputs$17176 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$455 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$462 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$446 ;
  (* src = "rtl/obi/obi_mux.sv:34.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_mux.sv:60.23" *)
  wire fifo_full;
  (* src = "rtl/obi/obi_mux.sv:58.21" *)
  wire [70:0] mgr_port_a_in_sbr;
  (* src = "rtl/obi/obi_mux.sv:60.9" *)
  wire mgr_port_req;
  (* src = "rtl/obi/obi_mux.sv:41.47" *)
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  (* src = "rtl/obi/obi_mux.sv:42.47" *)
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  (* src = "rtl/obi/obi_mux.sv:59.49" *)
  wire [1:0] response_id;
  (* src = "rtl/obi/obi_mux.sv:35.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_mux.sv:50.42" *)
  wire [3:0] sbr_ports_gnt;
  (* src = "rtl/obi/obi_mux.sv:38.47" *)
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  (* src = "rtl/obi/obi_mux.sv:39.47" *)
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  (* src = "rtl/obi/obi_mux.sv:141.39" *)
  wire [139:0] sbr_rsp_r;
  (* src = "rtl/obi/obi_mux.sv:140.27" *)
  wire [3:0] sbr_rsp_rvalid;
  (* src = "rtl/obi/obi_mux.sv:59.36" *)
  wire [1:0] selected_id;
  (* src = "rtl/obi/obi_mux.sv:36.16" *)
  input testmode_i;
  wire testmode_i;
  assign \$1  = ~ fifo_full;
  assign \$3  = mgr_port_rsp_i[1] && \$1 ;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$25  (
    .A({ \$auto$opt_expr.cc:205:group_cell_inputs$17176 [127], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [123], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [119], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [115], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [111], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [107], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [103], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [99], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [95], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [91], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [87], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [83], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [79], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [75], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [71], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [67], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [63], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [59], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [55], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [51], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [47], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [43], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [39], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [35], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [31], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [27], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [23], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [19], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [15], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [11], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [7], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [3], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17176 [126], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [122], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [118], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [114], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [110], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [106], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [102], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [98], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [94], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [90], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [86], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [82], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [78], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [74], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [70], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [66], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [62], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [58], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [54], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [50], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [46], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [42], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [38], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [34], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [30], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [26], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [22], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [18], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [14], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [10], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [6], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [2], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17176 [125], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [121], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [117], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [113], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [109], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [105], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [101], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [97], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [93], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [89], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [85], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [81], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [77], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [73], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [69], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [65], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [61], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [57], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [53], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [49], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [45], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [41], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [37], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [33], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [29], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [25], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [21], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [17], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [13], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [9], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [5], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [1], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17176 [124], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [120], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [116], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [112], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [108], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [104], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [100], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [96], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [92], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [88], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [84], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [80], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [76], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [72], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [68], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [64], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [60], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [56], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [52], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [48], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [44], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [40], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [36], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [32], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [28], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [24], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [20], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [16], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [12], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [8], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [4], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [0], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$auto$rtlil.cc:3114:Demux$446 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$446 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$446 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$446 [34], 2'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$455 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$32  (
    .A(\$auto$rtlil.cc:3093:Bwmux$455 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$auto$rtlil.cc:3114:Demux$446 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$446 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$446 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$446 [34], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$462 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$39  (
    .A(\$auto$rtlil.cc:3093:Bwmux$462 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$auto$rtlil.cc:3114:Demux$446 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$446 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$446 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$446 [34] }),
    .Y(sbr_rsp_r)
  );
  assign mgr_port_req_o[0] = mgr_port_req && \$1 ;
  assign \$10  = mgr_port_req_o[0] && mgr_port_rsp_i[1];
  assign \$auto$rtlil.cc:3114:Demux$446 [34] = response_id == 2'h0;
  assign \$auto$rtlil.cc:3114:Demux$446 [69] = response_id == 2'h1;
  assign \$auto$rtlil.cc:3114:Demux$446 [104] = response_id == 2'h2;
  assign \$auto$rtlil.cc:3114:Demux$446 [139] = response_id == 2'h3;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17176  = { mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] } & { \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34] };
  assign sbr_rsp_rvalid = { mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] } & { \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34] };
  (* src = "rtl/obi/obi_mux.sv:119.7" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$10 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/obi/obi_mux.sv:67.5" *)
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$3 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:3114:Demux$446 [138:105], \$auto$rtlil.cc:3114:Demux$446 [103:70], \$auto$rtlil.cc:3114:Demux$446 [68:35], \$auto$rtlil.cc:3114:Demux$446 [33:0] } = { \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], 3'h0, \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], 3'h0, \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], 3'h0, \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], 3'h0 };
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

(* src = "rtl/obi/obi_mux.sv:10.8" *)
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$1 ;
  wire \$10 ;
  wire \$3 ;
  wire [127:0] \$auto$opt_expr.cc:205:group_cell_inputs$17179 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$490 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$497 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$481 ;
  (* src = "rtl/obi/obi_mux.sv:34.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_mux.sv:60.23" *)
  wire fifo_full;
  (* src = "rtl/obi/obi_mux.sv:58.21" *)
  wire [70:0] mgr_port_a_in_sbr;
  (* src = "rtl/obi/obi_mux.sv:60.9" *)
  wire mgr_port_req;
  (* src = "rtl/obi/obi_mux.sv:41.47" *)
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  (* src = "rtl/obi/obi_mux.sv:42.47" *)
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  (* src = "rtl/obi/obi_mux.sv:59.49" *)
  wire [1:0] response_id;
  (* src = "rtl/obi/obi_mux.sv:35.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_mux.sv:50.42" *)
  wire [3:0] sbr_ports_gnt;
  (* src = "rtl/obi/obi_mux.sv:38.47" *)
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  (* src = "rtl/obi/obi_mux.sv:39.47" *)
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  (* src = "rtl/obi/obi_mux.sv:141.39" *)
  wire [139:0] sbr_rsp_r;
  (* src = "rtl/obi/obi_mux.sv:140.27" *)
  wire [3:0] sbr_rsp_rvalid;
  (* src = "rtl/obi/obi_mux.sv:59.36" *)
  wire [1:0] selected_id;
  (* src = "rtl/obi/obi_mux.sv:36.16" *)
  input testmode_i;
  wire testmode_i;
  assign \$1  = ~ fifo_full;
  assign \$3  = mgr_port_rsp_i[1] && \$1 ;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$25  (
    .A({ \$auto$opt_expr.cc:205:group_cell_inputs$17179 [127], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [123], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [119], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [115], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [111], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [107], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [103], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [99], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [95], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [91], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [87], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [83], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [79], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [75], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [71], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [67], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [63], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [59], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [55], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [51], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [47], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [43], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [39], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [35], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [31], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [27], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [23], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [19], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [15], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [11], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [7], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [3], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17179 [126], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [122], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [118], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [114], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [110], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [106], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [102], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [98], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [94], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [90], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [86], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [82], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [78], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [74], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [70], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [66], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [62], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [58], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [54], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [50], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [46], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [42], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [38], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [34], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [30], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [26], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [22], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [18], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [14], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [10], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [6], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [2], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17179 [125], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [121], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [117], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [113], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [109], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [105], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [101], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [97], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [93], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [89], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [85], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [81], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [77], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [73], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [69], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [65], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [61], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [57], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [53], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [49], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [45], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [41], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [37], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [33], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [29], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [25], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [21], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [17], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [13], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [9], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [5], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [1], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17179 [124], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [120], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [116], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [112], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [108], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [104], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [100], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [96], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [92], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [88], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [84], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [80], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [76], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [72], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [68], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [64], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [60], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [56], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [52], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [48], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [44], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [40], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [36], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [32], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [28], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [24], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [20], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [16], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [12], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [8], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [4], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [0], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$auto$rtlil.cc:3114:Demux$481 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$481 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$481 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$481 [34], 2'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$490 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$32  (
    .A(\$auto$rtlil.cc:3093:Bwmux$490 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$auto$rtlil.cc:3114:Demux$481 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$481 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$481 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$481 [34], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$497 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$39  (
    .A(\$auto$rtlil.cc:3093:Bwmux$497 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$auto$rtlil.cc:3114:Demux$481 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$481 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$481 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$481 [34] }),
    .Y(sbr_rsp_r)
  );
  assign mgr_port_req_o[0] = mgr_port_req && \$1 ;
  assign \$10  = mgr_port_req_o[0] && mgr_port_rsp_i[1];
  assign \$auto$rtlil.cc:3114:Demux$481 [34] = response_id == 2'h0;
  assign \$auto$rtlil.cc:3114:Demux$481 [69] = response_id == 2'h1;
  assign \$auto$rtlil.cc:3114:Demux$481 [104] = response_id == 2'h2;
  assign \$auto$rtlil.cc:3114:Demux$481 [139] = response_id == 2'h3;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17179  = { mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] } & { \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34] };
  assign sbr_rsp_rvalid = { mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] } & { \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34] };
  (* src = "rtl/obi/obi_mux.sv:119.7" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$10 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/obi/obi_mux.sv:67.5" *)
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$3 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:3114:Demux$481 [138:105], \$auto$rtlil.cc:3114:Demux$481 [103:70], \$auto$rtlil.cc:3114:Demux$481 [68:35], \$auto$rtlil.cc:3114:Demux$481 [33:0] } = { \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], 3'h0, \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], 3'h0, \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], 3'h0, \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], 3'h0 };
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

(* src = "rtl/obi/obi_mux.sv:10.8" *)
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$1 ;
  wire \$10 ;
  wire \$3 ;
  wire [127:0] \$auto$opt_expr.cc:205:group_cell_inputs$17182 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$525 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$532 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$516 ;
  (* src = "rtl/obi/obi_mux.sv:34.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_mux.sv:60.23" *)
  wire fifo_full;
  (* src = "rtl/obi/obi_mux.sv:58.21" *)
  wire [70:0] mgr_port_a_in_sbr;
  (* src = "rtl/obi/obi_mux.sv:60.9" *)
  wire mgr_port_req;
  (* src = "rtl/obi/obi_mux.sv:41.47" *)
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  (* src = "rtl/obi/obi_mux.sv:42.47" *)
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  (* src = "rtl/obi/obi_mux.sv:59.49" *)
  wire [1:0] response_id;
  (* src = "rtl/obi/obi_mux.sv:35.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_mux.sv:50.42" *)
  wire [3:0] sbr_ports_gnt;
  (* src = "rtl/obi/obi_mux.sv:38.47" *)
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  (* src = "rtl/obi/obi_mux.sv:39.47" *)
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  (* src = "rtl/obi/obi_mux.sv:141.39" *)
  wire [139:0] sbr_rsp_r;
  (* src = "rtl/obi/obi_mux.sv:140.27" *)
  wire [3:0] sbr_rsp_rvalid;
  (* src = "rtl/obi/obi_mux.sv:59.36" *)
  wire [1:0] selected_id;
  (* src = "rtl/obi/obi_mux.sv:36.16" *)
  input testmode_i;
  wire testmode_i;
  assign \$1  = ~ fifo_full;
  assign \$3  = mgr_port_rsp_i[1] && \$1 ;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$25  (
    .A({ \$auto$opt_expr.cc:205:group_cell_inputs$17182 [127], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [123], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [119], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [115], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [111], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [107], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [103], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [99], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [95], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [91], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [87], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [83], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [79], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [75], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [71], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [67], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [63], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [59], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [55], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [51], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [47], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [43], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [39], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [35], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [31], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [27], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [23], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [19], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [15], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [11], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [7], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [3], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17182 [126], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [122], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [118], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [114], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [110], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [106], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [102], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [98], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [94], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [90], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [86], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [82], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [78], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [74], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [70], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [66], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [62], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [58], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [54], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [50], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [46], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [42], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [38], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [34], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [30], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [26], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [22], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [18], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [14], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [10], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [6], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [2], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17182 [125], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [121], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [117], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [113], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [109], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [105], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [101], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [97], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [93], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [89], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [85], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [81], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [77], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [73], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [69], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [65], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [61], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [57], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [53], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [49], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [45], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [41], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [37], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [33], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [29], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [25], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [21], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [17], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [13], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [9], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [5], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [1], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17182 [124], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [120], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [116], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [112], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [108], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [104], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [100], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [96], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [92], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [88], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [84], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [80], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [76], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [72], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [68], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [64], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [60], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [56], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [52], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [48], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [44], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [40], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [36], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [32], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [28], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [24], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [20], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [16], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [12], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [8], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [4], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [0], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$auto$rtlil.cc:3114:Demux$516 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$516 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$516 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$516 [34], 2'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$525 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$32  (
    .A(\$auto$rtlil.cc:3093:Bwmux$525 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$auto$rtlil.cc:3114:Demux$516 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$516 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$516 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$516 [34], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$532 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$39  (
    .A(\$auto$rtlil.cc:3093:Bwmux$532 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$auto$rtlil.cc:3114:Demux$516 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$516 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$516 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$516 [34] }),
    .Y(sbr_rsp_r)
  );
  assign mgr_port_req_o[0] = mgr_port_req && \$1 ;
  assign \$10  = mgr_port_req_o[0] && mgr_port_rsp_i[1];
  assign \$auto$rtlil.cc:3114:Demux$516 [34] = response_id == 2'h0;
  assign \$auto$rtlil.cc:3114:Demux$516 [69] = response_id == 2'h1;
  assign \$auto$rtlil.cc:3114:Demux$516 [104] = response_id == 2'h2;
  assign \$auto$rtlil.cc:3114:Demux$516 [139] = response_id == 2'h3;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17182  = { mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] } & { \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34] };
  assign sbr_rsp_rvalid = { mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] } & { \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34] };
  (* src = "rtl/obi/obi_mux.sv:119.7" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$10 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/obi/obi_mux.sv:67.5" *)
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$3 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:3114:Demux$516 [138:105], \$auto$rtlil.cc:3114:Demux$516 [103:70], \$auto$rtlil.cc:3114:Demux$516 [68:35], \$auto$rtlil.cc:3114:Demux$516 [33:0] } = { \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], 3'h0, \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], 3'h0, \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], 3'h0, \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], 3'h0 };
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

(* src = "rtl/obi/obi_sram_shim.sv:7.8" *)
module \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram_shim (clk_i, rst_ni, obi_req_i, obi_rsp_o, req_o, we_o, addr_o, wdata_o, be_o, gnt_i, rdata_i);
  (* src = "rtl/obi/obi_sram_shim.sv:23.41" *)
  output [31:0] addr_o;
  wire [31:0] addr_o;
  (* src = "rtl/obi/obi_sram_shim.sv:25.41" *)
  output [3:0] be_o;
  wire [3:0] be_o;
  (* src = "rtl/obi/obi_sram_shim.sv:15.41" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_sram_shim.sv:27.41" *)
  input gnt_i;
  wire gnt_i;
  (* src = "rtl/obi/obi_sram_shim.sv:38.36" *)
  reg [2:0] id_q;
  (* src = "rtl/obi/obi_sram_shim.sv:18.41" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "rtl/obi/obi_sram_shim.sv:19.41" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "rtl/obi/obi_sram_shim.sv:28.41" *)
  input [31:0] rdata_i;
  wire [31:0] rdata_i;
  (* src = "rtl/obi/obi_sram_shim.sv:21.41" *)
  output req_o;
  wire req_o;
  (* src = "rtl/obi/obi_sram_shim.sv:16.41" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_sram_shim.sv:37.9" *)
  wire rvalid_d;
  (* src = "rtl/obi/obi_sram_shim.sv:37.19" *)
  reg rvalid_q;
  (* src = "rtl/obi/obi_sram_shim.sv:24.41" *)
  output [31:0] wdata_o;
  wire [31:0] wdata_o;
  (* src = "rtl/obi/obi_sram_shim.sv:22.41" *)
  output we_o;
  wire we_o;
  assign rvalid_d = obi_req_i[0] & gnt_i;
  (* src = "rtl/obi/obi_sram_shim.sv:58.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) id_q <= 3'h0;
    else id_q <= obi_req_i[4:2];
  (* src = "rtl/obi/obi_sram_shim.sv:58.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rvalid_q <= 1'h0;
    else rvalid_q <= rvalid_d;
  assign be_o = obi_req_i[40:37];
  assign addr_o = obi_req_i[73:42];
  assign obi_rsp_o = { rdata_i, id_q, 2'h0, gnt_i, rvalid_q };
  assign req_o = obi_req_i[0];
  assign wdata_o = obi_req_i[36:5];
  assign we_o = obi_req_i[41];
endmodule

(* src = "rtl/obi/obi_sram_shim.sv:7.8" *)
module \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram_shim (clk_i, rst_ni, obi_req_i, obi_rsp_o, req_o, we_o, addr_o, wdata_o, be_o, gnt_i, rdata_i);
  (* src = "rtl/obi/obi_sram_shim.sv:23.41" *)
  output [31:0] addr_o;
  wire [31:0] addr_o;
  (* src = "rtl/obi/obi_sram_shim.sv:25.41" *)
  output [3:0] be_o;
  wire [3:0] be_o;
  (* src = "rtl/obi/obi_sram_shim.sv:15.41" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_sram_shim.sv:27.41" *)
  input gnt_i;
  wire gnt_i;
  (* src = "rtl/obi/obi_sram_shim.sv:38.36" *)
  reg [2:0] id_q;
  (* src = "rtl/obi/obi_sram_shim.sv:18.41" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "rtl/obi/obi_sram_shim.sv:19.41" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "rtl/obi/obi_sram_shim.sv:28.41" *)
  input [31:0] rdata_i;
  wire [31:0] rdata_i;
  (* src = "rtl/obi/obi_sram_shim.sv:21.41" *)
  output req_o;
  wire req_o;
  (* src = "rtl/obi/obi_sram_shim.sv:16.41" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_sram_shim.sv:37.9" *)
  wire rvalid_d;
  (* src = "rtl/obi/obi_sram_shim.sv:37.19" *)
  reg rvalid_q;
  (* src = "rtl/obi/obi_sram_shim.sv:24.41" *)
  output [31:0] wdata_o;
  wire [31:0] wdata_o;
  (* src = "rtl/obi/obi_sram_shim.sv:22.41" *)
  output we_o;
  wire we_o;
  assign rvalid_d = obi_req_i[0] & gnt_i;
  (* src = "rtl/obi/obi_sram_shim.sv:58.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) id_q <= 3'h0;
    else id_q <= obi_req_i[4:2];
  (* src = "rtl/obi/obi_sram_shim.sv:58.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rvalid_q <= 1'h0;
    else rvalid_q <= rvalid_d;
  assign be_o = obi_req_i[40:37];
  assign addr_o = obi_req_i[73:42];
  assign obi_rsp_o = { rdata_i, id_q, 2'h0, gnt_i, rvalid_q };
  assign req_o = obi_req_i[0];
  assign wdata_o = obi_req_i[36:5];
  assign we_o = obi_req_i[41];
endmodule

(* src = "rtl/obi/obi_xbar.sv:8.8" *)
module \obi_xbar$croc_chip.i_croc_soc.i_croc.i_main_xbar (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_ports_req_o, mgr_ports_rsp_i, addr_map_i, en_default_idx_i, default_idx_i);
  (* src = "rtl/obi/obi_xbar.sv:50.47" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "rtl/obi/obi_xbar.sv:40.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/obi/obi_xbar.sv:52.75" *)
  input [11:0] default_idx_i;
  wire [11:0] default_idx_i;
  (* src = "rtl/obi/obi_xbar.sv:51.47" *)
  input [3:0] en_default_idx_i;
  wire [3:0] en_default_idx_i;
  (* src = "rtl/obi/obi_xbar.sv:47.47" *)
  output [369:0] mgr_ports_req_o;
  wire [369:0] mgr_ports_req_o;
  (* src = "rtl/obi/obi_xbar.sv:48.47" *)
  input [194:0] mgr_ports_rsp_i;
  wire [194:0] mgr_ports_rsp_i;
  (* src = "rtl/obi/obi_xbar.sv:62.57" *)
  wire [1439:0] mgr_reqs;
  (* src = "rtl/obi/obi_xbar.sv:63.57" *)
  wire [739:0] mgr_rsps;
  (* src = "rtl/obi/obi_xbar.sv:41.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/obi/obi_xbar.sv:55.68" *)
  wire [11:0] sbr_port_select;
  (* src = "rtl/obi/obi_xbar.sv:44.47" *)
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  (* src = "rtl/obi/obi_xbar.sv:45.47" *)
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  (* src = "rtl/obi/obi_xbar.sv:42.16" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/obi/obi_xbar.sv:71.7" *)
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode  \gen_demux[0].i_addr_decode  (
    .addr_i(sbr_ports_req_i[71:40]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[2:0]),
    .en_default_idx_i(en_default_idx_i[0]),
    .idx_o(sbr_port_select[2:0])
  );
  (* src = "rtl/obi/obi_xbar.sv:87.7" *)
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux  \gen_demux[0].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1223:1152], mgr_reqs[935:864], mgr_reqs[647:576], mgr_reqs[359:288], mgr_reqs[71:0] }),
    .mgr_ports_rsp_i({ mgr_rsps[628:592], mgr_rsps[480:444], mgr_rsps[332:296], mgr_rsps[184:148], mgr_rsps[36:0] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[71:0]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[36:0]),
    .sbr_port_select_i(sbr_port_select[2:0])
  );
  (* src = "rtl/obi/obi_xbar.sv:71.7" *)
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode  \gen_demux[1].i_addr_decode  (
    .addr_i(sbr_ports_req_i[143:112]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[5:3]),
    .en_default_idx_i(en_default_idx_i[1]),
    .idx_o(sbr_port_select[5:3])
  );
  (* src = "rtl/obi/obi_xbar.sv:87.7" *)
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux  \gen_demux[1].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1295:1224], mgr_reqs[1007:936], mgr_reqs[719:648], mgr_reqs[431:360], mgr_reqs[143:72] }),
    .mgr_ports_rsp_i({ mgr_rsps[665:629], mgr_rsps[517:481], mgr_rsps[369:333], mgr_rsps[221:185], mgr_rsps[73:37] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[143:72]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[73:37]),
    .sbr_port_select_i(sbr_port_select[5:3])
  );
  (* src = "rtl/obi/obi_xbar.sv:71.7" *)
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode  \gen_demux[2].i_addr_decode  (
    .addr_i(sbr_ports_req_i[215:184]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[8:6]),
    .en_default_idx_i(en_default_idx_i[2]),
    .idx_o(sbr_port_select[8:6])
  );
  (* src = "rtl/obi/obi_xbar.sv:87.7" *)
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux  \gen_demux[2].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1367:1296], mgr_reqs[1079:1008], mgr_reqs[791:720], mgr_reqs[503:432], mgr_reqs[215:144] }),
    .mgr_ports_rsp_i({ mgr_rsps[702:666], mgr_rsps[554:518], mgr_rsps[406:370], mgr_rsps[258:222], mgr_rsps[110:74] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[215:144]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[110:74]),
    .sbr_port_select_i(sbr_port_select[8:6])
  );
  (* src = "rtl/obi/obi_xbar.sv:71.7" *)
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode  \gen_demux[3].i_addr_decode  (
    .addr_i(sbr_ports_req_i[287:256]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[11:9]),
    .en_default_idx_i(en_default_idx_i[3]),
    .idx_o(sbr_port_select[11:9])
  );
  (* src = "rtl/obi/obi_xbar.sv:87.7" *)
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux  \gen_demux[3].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1439:1368], mgr_reqs[1151:1080], mgr_reqs[863:792], mgr_reqs[575:504], mgr_reqs[287:216] }),
    .mgr_ports_rsp_i({ mgr_rsps[739:703], mgr_rsps[591:555], mgr_rsps[443:407], mgr_rsps[295:259], mgr_rsps[147:111] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[287:216]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[147:111]),
    .sbr_port_select_i(sbr_port_select[11:9])
  );
  (* src = "rtl/obi/obi_xbar.sv:145.7" *)
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux  \gen_mux[0].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[73:0]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[38:0]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[287:0]),
    .sbr_ports_rsp_o(mgr_rsps[147:0]),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/obi/obi_xbar.sv:145.7" *)
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux  \gen_mux[1].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[147:74]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[77:39]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[575:288]),
    .sbr_ports_rsp_o(mgr_rsps[295:148]),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/obi/obi_xbar.sv:145.7" *)
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux  \gen_mux[2].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[221:148]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[116:78]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[863:576]),
    .sbr_ports_rsp_o(mgr_rsps[443:296]),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/obi/obi_xbar.sv:145.7" *)
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux  \gen_mux[3].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[295:222]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[155:117]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[1151:864]),
    .sbr_ports_rsp_o(mgr_rsps[591:444]),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/obi/obi_xbar.sv:145.7" *)
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux  \gen_mux[4].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[369:296]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[194:156]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[1439:1152]),
    .sbr_ports_rsp_o(mgr_rsps[739:592]),
    .testmode_i(testmode_i)
  );
endmodule

(* src = "rtl/register_interface/periph_to_reg.sv:13.8" *)
module \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl_translate (clk_i, rst_ni, req_i, wdata_i, be_i, add_i, wen_i, id_i, gnt_o, r_rdata_o, r_opc_o, r_id_o, r_valid_o, reg_req_o, reg_rsp_i);
  (* src = "rtl/register_interface/periph_to_reg.sv:25.28" *)
  input [31:0] add_i;
  wire [31:0] add_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:28.28" *)
  input [3:0] be_i;
  wire [3:0] be_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:21.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:30.28" *)
  output gnt_o;
  wire gnt_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:29.28" *)
  input [2:0] id_i;
  wire [2:0] id_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:33.28" *)
  output [2:0] r_id_o;
  reg [2:0] r_id_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:32.28" *)
  output r_opc_o;
  reg r_opc_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:31.28" *)
  output [31:0] r_rdata_o;
  reg [31:0] r_rdata_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:34.28" *)
  output r_valid_o;
  reg r_valid_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:36.28" *)
  output [69:0] reg_req_o;
  wire [69:0] reg_req_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:37.28" *)
  input [33:0] reg_rsp_i;
  wire [33:0] reg_rsp_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:24.28" *)
  input req_i;
  wire req_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:22.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/register_interface/periph_to_reg.sv:27.28" *)
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:26.28" *)
  input wen_i;
  wire wen_i;
  assign reg_req_o[37] = ~ wen_i;
  assign gnt_o = req_i & reg_rsp_i[0];
  (* src = "rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_id_o <= 3'h0;
    else r_id_o <= id_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_opc_o <= 1'h0;
    else r_opc_o <= reg_rsp_i[1];
  (* src = "rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_rdata_o <= 32'd0;
    else r_rdata_o <= reg_rsp_i[33:2];
  (* src = "rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_valid_o <= 1'h0;
    else r_valid_o <= gnt_o;
  assign { reg_req_o[69:38], reg_req_o[36:0] } = { add_i, wdata_i, be_i, req_i };
endmodule

(* src = "rtl/register_interface/periph_to_reg.sv:13.8" *)
module \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_uart_translate (clk_i, rst_ni, req_i, wdata_i, be_i, add_i, wen_i, id_i, gnt_o, r_rdata_o, r_opc_o, r_id_o, r_valid_o, reg_req_o, reg_rsp_i);
  (* src = "rtl/register_interface/periph_to_reg.sv:25.28" *)
  input [31:0] add_i;
  wire [31:0] add_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:28.28" *)
  input [3:0] be_i;
  wire [3:0] be_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:21.28" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:30.28" *)
  output gnt_o;
  wire gnt_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:29.28" *)
  input [2:0] id_i;
  wire [2:0] id_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:33.28" *)
  output [2:0] r_id_o;
  reg [2:0] r_id_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:32.28" *)
  output r_opc_o;
  reg r_opc_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:31.28" *)
  output [31:0] r_rdata_o;
  reg [31:0] r_rdata_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:34.28" *)
  output r_valid_o;
  reg r_valid_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:36.28" *)
  output [69:0] reg_req_o;
  wire [69:0] reg_req_o;
  (* src = "rtl/register_interface/periph_to_reg.sv:37.28" *)
  input [33:0] reg_rsp_i;
  wire [33:0] reg_rsp_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:24.28" *)
  input req_i;
  wire req_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:22.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/register_interface/periph_to_reg.sv:27.28" *)
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:26.28" *)
  input wen_i;
  wire wen_i;
  assign reg_req_o[37] = ~ wen_i;
  assign gnt_o = req_i & reg_rsp_i[0];
  (* src = "rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_id_o <= 3'h0;
    else r_id_o <= id_i;
  (* src = "rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_opc_o <= 1'h0;
    else r_opc_o <= reg_rsp_i[1];
  (* src = "rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_rdata_o <= 32'd0;
    else r_rdata_o <= reg_rsp_i[33:2];
  (* src = "rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_valid_o <= 1'h0;
    else r_valid_o <= gnt_o;
  assign { reg_req_o[69:38], reg_req_o[36:0] } = { add_i, wdata_i, be_i, req_i };
endmodule

(* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" *)
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" *)
  input [31:0] d;
  wire [31:0] d;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" *)
  input de;
  wire de;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" *)
  output [31:0] q;
  reg [31:0] q;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" *)
  output qe;
  reg qe;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" *)
  output [31:0] qs;
  wire [31:0] qs;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" *)
  input [31:0] wd;
  wire [31:0] wd;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" *)
  input we;
  wire we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" *)
  wire [31:0] wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" *)
  wire wr_en;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) q <= 32'd268435456;
    else if (wr_en) q <= wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) qe <= 1'h0;
    else qe <= we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" *)
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

(* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" *)
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" *)
  input d;
  wire d;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" *)
  input de;
  wire de;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" *)
  output q;
  reg q;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" *)
  output qe;
  reg qe;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" *)
  output qs;
  wire qs;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" *)
  input wd;
  wire wd;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" *)
  input we;
  wire we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" *)
  wire wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" *)
  wire wr_en;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) q <= 1'h0;
    else if (wr_en) q <= wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) qe <= 1'h0;
    else qe <= we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" *)
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

(* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" *)
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" *)
  input [31:0] d;
  wire [31:0] d;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" *)
  input de;
  wire de;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" *)
  output [31:0] q;
  reg [31:0] q;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" *)
  output qe;
  reg qe;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" *)
  output [31:0] qs;
  wire [31:0] qs;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" *)
  input [31:0] wd;
  wire [31:0] wd;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" *)
  input we;
  wire we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" *)
  wire [31:0] wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" *)
  wire wr_en;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) q <= 32'd0;
    else if (wr_en) q <= wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) qe <= 1'h0;
    else qe <= we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" *)
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

(* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" *)
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" *)
  input d;
  wire d;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" *)
  input de;
  wire de;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" *)
  output q;
  reg q;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" *)
  output qe;
  reg qe;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" *)
  output qs;
  wire qs;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" *)
  input wd;
  wire wd;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" *)
  input we;
  wire we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" *)
  wire wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" *)
  wire wr_en;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) q <= 1'h0;
    else if (wr_en) q <= wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) qe <= 1'h0;
    else qe <= we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" *)
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

(* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" *)
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" *)
  input d;
  wire d;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" *)
  input de;
  wire de;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" *)
  output q;
  reg q;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" *)
  output qe;
  reg qe;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" *)
  output qs;
  wire qs;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" *)
  input wd;
  wire wd;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" *)
  input we;
  wire we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" *)
  wire wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" *)
  wire wr_en;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) q <= 1'h1;
    else if (wr_en) q <= wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) qe <= 1'h0;
    else qe <= we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" *)
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

(* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" *)
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" *)
  input [31:0] d;
  wire [31:0] d;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" *)
  input de;
  wire de;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" *)
  input [31:0] q;
  wire [31:0] q;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" *)
  input [31:0] wd;
  wire [31:0] wd;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" *)
  input we;
  wire we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" *)
  output [31:0] wr_data;
  wire [31:0] wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" *)
  output wr_en;
  wire wr_en;
  assign wr_en = we | de;
  assign wr_data = we ? wd : d;
endmodule

(* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" *)
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" *)
  input d;
  wire d;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" *)
  input de;
  wire de;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" *)
  input q;
  wire q;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" *)
  input wd;
  wire wd;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" *)
  input we;
  wire we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" *)
  output wr_data;
  wire wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" *)
  output wr_en;
  wire wr_en;
  assign wr_en = we | de;
  assign wr_data = we ? wd : d;
endmodule

(* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" *)
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" *)
  input [31:0] d;
  wire [31:0] d;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" *)
  input de;
  wire de;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" *)
  input [31:0] q;
  wire [31:0] q;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" *)
  input [31:0] wd;
  wire [31:0] wd;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" *)
  input we;
  wire we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" *)
  output [31:0] wr_data;
  wire [31:0] wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" *)
  output wr_en;
  wire wr_en;
  assign wr_en = we | de;
  assign wr_data = we ? wd : d;
endmodule

(* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" *)
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" *)
  input d;
  wire d;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" *)
  input de;
  wire de;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" *)
  input q;
  wire q;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" *)
  input wd;
  wire wd;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" *)
  input we;
  wire we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" *)
  output wr_data;
  wire wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" *)
  output wr_en;
  wire wr_en;
  assign wr_en = we | de;
  assign wr_data = we ? wd : d;
endmodule

(* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" *)
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" *)
  input d;
  wire d;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" *)
  input de;
  wire de;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" *)
  input q;
  wire q;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" *)
  input wd;
  wire wd;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" *)
  input we;
  wire we;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" *)
  output wr_data;
  wire wr_data;
  (* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" *)
  output wr_en;
  wire wr_en;
  assign wr_en = we | de;
  assign wr_data = we ? wd : d;
endmodule

(* src = "rtl/register_interface/reg_to_apb.sv:7.8" *)
module \reg_to_apb$croc_chip.i_croc_soc.i_croc.i_uart.i_reg_uart_reg_to_apb (clk_i, rst_ni, reg_req_i, reg_rsp_o, apb_req_o, apb_rsp_i);
  wire \$procmux$13792_Y ;
  (* src = "rtl/register_interface/reg_to_apb.sv:26.20" *)
  output [73:0] apb_req_o;
  wire [73:0] apb_req_o;
  (* src = "rtl/register_interface/reg_to_apb.sv:27.20" *)
  input [33:0] apb_rsp_i;
  wire [33:0] apb_rsp_i;
  (* src = "rtl/register_interface/reg_to_apb.sv:18.20" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/register_interface/reg_to_apb.sv:22.20" *)
  input [69:0] reg_req_i;
  wire [69:0] reg_req_i;
  (* src = "rtl/register_interface/reg_to_apb.sv:23.20" *)
  output [33:0] reg_rsp_o;
  wire [33:0] reg_rsp_o;
  (* src = "rtl/register_interface/reg_to_apb.sv:19.20" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/register_interface/reg_to_apb.sv:32.11" *)
  wire state_d;
  (* src = "rtl/register_interface/reg_to_apb.sv:32.20" *)
  reg state_q;
  (* src = "rtl/register_interface/reg_to_apb.sv:66.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 1'h0;
    else state_q <= state_d;
  assign \$procmux$13792_Y  = ~ (* src = "rtl/register_interface/reg_to_apb.sv:59.31-59.47|rtl/register_interface/reg_to_apb.sv:59.9-59.47" *) apb_rsp_i[33];
  assign state_d = state_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/register_interface/reg_to_apb.sv:56.15-60.10|rtl/register_interface/reg_to_apb.sv:52.5-63.12" *) \$procmux$13792_Y  : reg_req_i[0];
  assign reg_rsp_o[0] = state_q & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "rtl/register_interface/reg_to_apb.sv:56.15-60.10|rtl/register_interface/reg_to_apb.sv:52.5-63.12" *) apb_rsp_i[33];
  assign apb_req_o = { reg_req_i[69:38], 3'h2, reg_req_i[0], state_q, reg_req_i[37:1] };
  assign reg_rsp_o[33:1] = apb_rsp_i[32:0];
endmodule

(* src = "rtl/apb_uart/reg_uart_wrap.sv:31.8" *)
module \reg_uart_wrap$croc_chip.i_croc_soc.i_croc.i_uart (clk_i, rst_ni, reg_req_i, reg_rsp_o, intr_o, cts_ni, dsr_ni, dcd_ni, rin_ni, sin_i, sout_o, out1_no, out2_no, rts_no, dtr_no);
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:36.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:49.16" *)
  input cts_ni;
  wire cts_ni;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:51.16" *)
  input dcd_ni;
  wire dcd_ni;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:50.16" *)
  input dsr_ni;
  wire dsr_ni;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:48.16" *)
  output dtr_no;
  wire dtr_no;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:44.16" *)
  output intr_o;
  wire intr_o;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:45.16" *)
  output out1_no;
  wire out1_no;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:46.16" *)
  output out2_no;
  wire out2_no;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:40.20" *)
  input [69:0] reg_req_i;
  wire [69:0] reg_req_i;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:41.20" *)
  output [33:0] reg_rsp_o;
  wire [33:0] reg_rsp_o;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:52.16" *)
  input rin_ni;
  wire rin_ni;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:37.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:47.16" *)
  output rts_no;
  wire rts_no;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:53.16" *)
  input sin_i;
  wire sin_i;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:54.16" *)
  output sout_o;
  wire sout_o;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:59.22" *)
  (* unused_bits = "0 1 2 3 39 40 41 42 43 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73" *)
  wire [73:0] uart_apb_req;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:60.22" *)
  wire [33:0] uart_apb_rsp;
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:76.12" *)
  \apb_uart$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart  i_apb_uart (
    .CLK(clk_i),
    .CTSN(cts_ni),
    .DCDN(dcd_ni),
    .DSRN(dsr_ni),
    .DTRN(dtr_no),
    .INT(intr_o),
    .OUT1N(out1_no),
    .OUT2N(out2_no),
    .PADDR(uart_apb_req[46:44]),
    .PENABLE(uart_apb_req[37]),
    .PRDATA(uart_apb_rsp[32:1]),
    .PREADY(uart_apb_rsp[33]),
    .PSEL(uart_apb_req[38]),
    .PSLVERR(uart_apb_rsp[0]),
    .PWDATA(uart_apb_req[35:4]),
    .PWRITE(uart_apb_req[36]),
    .RIN(rin_ni),
    .RSTN(rst_ni),
    .RTSN(rts_no),
    .SIN(sin_i),
    .SOUT(sout_o)
  );
  (* src = "rtl/apb_uart/reg_uart_wrap.sv:67.5" *)
  \reg_to_apb$croc_chip.i_croc_soc.i_croc.i_uart.i_reg_uart_reg_to_apb  i_reg_uart_reg_to_apb (
    .apb_req_o(uart_apb_req),
    .apb_rsp_i(uart_apb_rsp),
    .clk_i(clk_i),
    .reg_req_i(reg_req_i),
    .reg_rsp_o(reg_rsp_o),
    .rst_ni(rst_ni)
  );
endmodule

(* src = "rtl/common_cells/rr_arb_tree.sv:49.8" *)
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$1 ;
  wire \$14 ;
  wire \$17 ;
  wire \$26 ;
  wire \$29 ;
  wire \$33 ;
  wire \$42 ;
  wire \$44 ;
  wire \$50 ;
  wire \$58 ;
  wire \$60 ;
  wire \$69 ;
  wire \$81 ;
  wire \$83 ;
  wire \$92 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18167 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *)
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *)
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *)
  wire [1:0] \$gen_arbiter.rr_q$38 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:89.31" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:103.31" *)
  input [283:0] data_i;
  wire [283:0] data_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:109.31" *)
  output [70:0] data_o;
  wire [70:0] data_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:93.31" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:126.33" *)
  wire [212:0] \gen_arbiter.data_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.40" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:191.40" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.53" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:193.27" *)
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.27" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:191.27" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:146.16" *)
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:146.24" *)
  reg \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:147.27" *)
  reg [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:127.33" *)
  wire [2:0] \gen_arbiter.gnt_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:131.33" *)
  wire [3:0] \gen_arbiter.req_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:128.33" *)
  wire [2:0] \gen_arbiter.req_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:130.33" *)
  reg [1:0] \gen_arbiter.rr_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:107.31" *)
  input gnt_i;
  wire gnt_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:100.31" *)
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:111.31" *)
  output [1:0] idx_o;
  wire [1:0] idx_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:97.31" *)
  input [3:0] req_i;
  wire [3:0] req_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:105.31" *)
  output req_o;
  wire req_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:95.31" *)
  input [1:0] rr_i;
  wire [1:0] rr_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:91.31" *)
  input rst_ni;
  wire rst_ni;
  assign \$1  = ~ gnt_i;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = \$14  & \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = \$17  & \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_lock.lock_d  = req_o & \$1 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = \gen_arbiter.rr_q [1] ? 1'h0 : \gen_arbiter.req_d [2];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = \gen_arbiter.rr_q [1] & \gen_arbiter.req_d [2];
  assign \$26  = 2'h3 > \gen_arbiter.rr_q ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = \$26  & \gen_arbiter.req_d [3];
  assign \$29  = 2'h3 <= \gen_arbiter.rr_q ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = \$29  & \gen_arbiter.req_d [3];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign \$33  = gnt_i && req_o;
  assign req_o = \gen_arbiter.req_nodes [1] | \gen_arbiter.req_nodes [2];
  assign \gen_arbiter.req_d  = \gen_arbiter.gen_int_rr.gen_lock.lock_q  ? \gen_arbiter.gen_int_rr.gen_lock.req_q  : req_i;
  assign \$42  = ~ \gen_arbiter.req_nodes [1];
  assign \$44  = \gen_arbiter.req_nodes [2] & \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = \$42  | \$44 ;
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? { 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  } : { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? \gen_arbiter.data_nodes [212:142] : \gen_arbiter.data_nodes [141:71];
  assign \$50  = ~ \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & \$50 ;
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [1] = \gen_arbiter.req_d [0] | \gen_arbiter.req_d [1];
  assign \$58  = ~ \gen_arbiter.req_d [0];
  assign \$60  = \gen_arbiter.req_d [1] & \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = \$58  | \$60 ;
  assign \gen_arbiter.data_nodes [141:71] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? data_i[141:71] : data_i[70:0];
  assign \$69  = ~ \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [1] & \$69 ;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [1] & \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [2] = \gen_arbiter.req_d [2] | \gen_arbiter.req_d [3];
  assign \$81  = ~ \gen_arbiter.req_d [2];
  assign \$83  = \gen_arbiter.req_d [3] & \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = \$81  | \$83 ;
  assign \gen_arbiter.data_nodes [212:142] = \gen_arbiter.gen_levels[1].gen_level[1].sel  ? data_i[283:213] : data_i[212:142];
  assign \$92  = ~ \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [2] & \$92 ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [2] & \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:226.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18167 ) \gen_arbiter.rr_q  <= \$gen_arbiter.rr_q$38 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18167  = | { flush_i, \$33  };
  assign \$14  = ! \gen_arbiter.rr_q ;
  assign \$17  = | \gen_arbiter.rr_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:152.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= 1'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:175.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.req_q  <= 4'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.req_q  <= \$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ;
  assign \$gen_arbiter.rr_q$38  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *) 2'h0 : \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \$gen_arbiter.gen_int_rr.gen_lock.req_q$12  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *) 4'h0 : \gen_arbiter.req_d ;
  assign \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *) 1'h0 : \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:212.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  (* src = "rtl/common_cells/rr_arb_tree.sv:203.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

(* src = "rtl/common_cells/rr_arb_tree.sv:49.8" *)
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$1 ;
  wire \$14 ;
  wire \$17 ;
  wire \$26 ;
  wire \$29 ;
  wire \$33 ;
  wire \$42 ;
  wire \$44 ;
  wire \$50 ;
  wire \$58 ;
  wire \$60 ;
  wire \$69 ;
  wire \$81 ;
  wire \$83 ;
  wire \$92 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18170 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *)
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *)
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *)
  wire [1:0] \$gen_arbiter.rr_q$38 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:89.31" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:103.31" *)
  input [283:0] data_i;
  wire [283:0] data_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:109.31" *)
  output [70:0] data_o;
  wire [70:0] data_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:93.31" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:126.33" *)
  wire [212:0] \gen_arbiter.data_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.40" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:191.40" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.53" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:193.27" *)
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.27" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:191.27" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:146.16" *)
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:146.24" *)
  reg \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:147.27" *)
  reg [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:127.33" *)
  wire [2:0] \gen_arbiter.gnt_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:131.33" *)
  wire [3:0] \gen_arbiter.req_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:128.33" *)
  wire [2:0] \gen_arbiter.req_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:130.33" *)
  reg [1:0] \gen_arbiter.rr_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:107.31" *)
  input gnt_i;
  wire gnt_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:100.31" *)
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:111.31" *)
  output [1:0] idx_o;
  wire [1:0] idx_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:97.31" *)
  input [3:0] req_i;
  wire [3:0] req_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:105.31" *)
  output req_o;
  wire req_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:95.31" *)
  input [1:0] rr_i;
  wire [1:0] rr_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:91.31" *)
  input rst_ni;
  wire rst_ni;
  assign \$1  = ~ gnt_i;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = \$14  & \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = \$17  & \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_lock.lock_d  = req_o & \$1 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = \gen_arbiter.rr_q [1] ? 1'h0 : \gen_arbiter.req_d [2];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = \gen_arbiter.rr_q [1] & \gen_arbiter.req_d [2];
  assign \$26  = 2'h3 > \gen_arbiter.rr_q ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = \$26  & \gen_arbiter.req_d [3];
  assign \$29  = 2'h3 <= \gen_arbiter.rr_q ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = \$29  & \gen_arbiter.req_d [3];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign \$33  = gnt_i && req_o;
  assign req_o = \gen_arbiter.req_nodes [1] | \gen_arbiter.req_nodes [2];
  assign \gen_arbiter.req_d  = \gen_arbiter.gen_int_rr.gen_lock.lock_q  ? \gen_arbiter.gen_int_rr.gen_lock.req_q  : req_i;
  assign \$42  = ~ \gen_arbiter.req_nodes [1];
  assign \$44  = \gen_arbiter.req_nodes [2] & \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = \$42  | \$44 ;
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? { 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  } : { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? \gen_arbiter.data_nodes [212:142] : \gen_arbiter.data_nodes [141:71];
  assign \$50  = ~ \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & \$50 ;
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [1] = \gen_arbiter.req_d [0] | \gen_arbiter.req_d [1];
  assign \$58  = ~ \gen_arbiter.req_d [0];
  assign \$60  = \gen_arbiter.req_d [1] & \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = \$58  | \$60 ;
  assign \gen_arbiter.data_nodes [141:71] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? data_i[141:71] : data_i[70:0];
  assign \$69  = ~ \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [1] & \$69 ;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [1] & \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [2] = \gen_arbiter.req_d [2] | \gen_arbiter.req_d [3];
  assign \$81  = ~ \gen_arbiter.req_d [2];
  assign \$83  = \gen_arbiter.req_d [3] & \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = \$81  | \$83 ;
  assign \gen_arbiter.data_nodes [212:142] = \gen_arbiter.gen_levels[1].gen_level[1].sel  ? data_i[283:213] : data_i[212:142];
  assign \$92  = ~ \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [2] & \$92 ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [2] & \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:226.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18170 ) \gen_arbiter.rr_q  <= \$gen_arbiter.rr_q$38 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18170  = | { flush_i, \$33  };
  assign \$14  = ! \gen_arbiter.rr_q ;
  assign \$17  = | \gen_arbiter.rr_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:152.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= 1'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:175.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.req_q  <= 4'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.req_q  <= \$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ;
  assign \$gen_arbiter.rr_q$38  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *) 2'h0 : \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \$gen_arbiter.gen_int_rr.gen_lock.req_q$12  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *) 4'h0 : \gen_arbiter.req_d ;
  assign \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *) 1'h0 : \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:212.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  (* src = "rtl/common_cells/rr_arb_tree.sv:203.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

(* src = "rtl/common_cells/rr_arb_tree.sv:49.8" *)
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$1 ;
  wire \$14 ;
  wire \$17 ;
  wire \$26 ;
  wire \$29 ;
  wire \$33 ;
  wire \$42 ;
  wire \$44 ;
  wire \$50 ;
  wire \$58 ;
  wire \$60 ;
  wire \$69 ;
  wire \$81 ;
  wire \$83 ;
  wire \$92 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18173 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *)
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *)
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *)
  wire [1:0] \$gen_arbiter.rr_q$38 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:89.31" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:103.31" *)
  input [283:0] data_i;
  wire [283:0] data_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:109.31" *)
  output [70:0] data_o;
  wire [70:0] data_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:93.31" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:126.33" *)
  wire [212:0] \gen_arbiter.data_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.40" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:191.40" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.53" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:193.27" *)
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.27" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:191.27" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:146.16" *)
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:146.24" *)
  reg \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:147.27" *)
  reg [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:127.33" *)
  wire [2:0] \gen_arbiter.gnt_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:131.33" *)
  wire [3:0] \gen_arbiter.req_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:128.33" *)
  wire [2:0] \gen_arbiter.req_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:130.33" *)
  reg [1:0] \gen_arbiter.rr_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:107.31" *)
  input gnt_i;
  wire gnt_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:100.31" *)
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:111.31" *)
  output [1:0] idx_o;
  wire [1:0] idx_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:97.31" *)
  input [3:0] req_i;
  wire [3:0] req_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:105.31" *)
  output req_o;
  wire req_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:95.31" *)
  input [1:0] rr_i;
  wire [1:0] rr_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:91.31" *)
  input rst_ni;
  wire rst_ni;
  assign \$1  = ~ gnt_i;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = \$14  & \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = \$17  & \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_lock.lock_d  = req_o & \$1 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = \gen_arbiter.rr_q [1] ? 1'h0 : \gen_arbiter.req_d [2];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = \gen_arbiter.rr_q [1] & \gen_arbiter.req_d [2];
  assign \$26  = 2'h3 > \gen_arbiter.rr_q ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = \$26  & \gen_arbiter.req_d [3];
  assign \$29  = 2'h3 <= \gen_arbiter.rr_q ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = \$29  & \gen_arbiter.req_d [3];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign \$33  = gnt_i && req_o;
  assign req_o = \gen_arbiter.req_nodes [1] | \gen_arbiter.req_nodes [2];
  assign \gen_arbiter.req_d  = \gen_arbiter.gen_int_rr.gen_lock.lock_q  ? \gen_arbiter.gen_int_rr.gen_lock.req_q  : req_i;
  assign \$42  = ~ \gen_arbiter.req_nodes [1];
  assign \$44  = \gen_arbiter.req_nodes [2] & \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = \$42  | \$44 ;
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? { 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  } : { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? \gen_arbiter.data_nodes [212:142] : \gen_arbiter.data_nodes [141:71];
  assign \$50  = ~ \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & \$50 ;
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [1] = \gen_arbiter.req_d [0] | \gen_arbiter.req_d [1];
  assign \$58  = ~ \gen_arbiter.req_d [0];
  assign \$60  = \gen_arbiter.req_d [1] & \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = \$58  | \$60 ;
  assign \gen_arbiter.data_nodes [141:71] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? data_i[141:71] : data_i[70:0];
  assign \$69  = ~ \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [1] & \$69 ;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [1] & \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [2] = \gen_arbiter.req_d [2] | \gen_arbiter.req_d [3];
  assign \$81  = ~ \gen_arbiter.req_d [2];
  assign \$83  = \gen_arbiter.req_d [3] & \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = \$81  | \$83 ;
  assign \gen_arbiter.data_nodes [212:142] = \gen_arbiter.gen_levels[1].gen_level[1].sel  ? data_i[283:213] : data_i[212:142];
  assign \$92  = ~ \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [2] & \$92 ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [2] & \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:226.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18173 ) \gen_arbiter.rr_q  <= \$gen_arbiter.rr_q$38 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18173  = | { flush_i, \$33  };
  assign \$14  = ! \gen_arbiter.rr_q ;
  assign \$17  = | \gen_arbiter.rr_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:152.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= 1'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:175.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.req_q  <= 4'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.req_q  <= \$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ;
  assign \$gen_arbiter.rr_q$38  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *) 2'h0 : \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \$gen_arbiter.gen_int_rr.gen_lock.req_q$12  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *) 4'h0 : \gen_arbiter.req_d ;
  assign \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *) 1'h0 : \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:212.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  (* src = "rtl/common_cells/rr_arb_tree.sv:203.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

(* src = "rtl/common_cells/rr_arb_tree.sv:49.8" *)
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$1 ;
  wire \$14 ;
  wire \$17 ;
  wire \$26 ;
  wire \$29 ;
  wire \$33 ;
  wire \$42 ;
  wire \$44 ;
  wire \$50 ;
  wire \$58 ;
  wire \$60 ;
  wire \$69 ;
  wire \$81 ;
  wire \$83 ;
  wire \$92 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18176 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *)
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *)
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *)
  wire [1:0] \$gen_arbiter.rr_q$38 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:89.31" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:103.31" *)
  input [283:0] data_i;
  wire [283:0] data_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:109.31" *)
  output [70:0] data_o;
  wire [70:0] data_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:93.31" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:126.33" *)
  wire [212:0] \gen_arbiter.data_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.40" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:191.40" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.53" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:193.27" *)
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.27" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:191.27" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:146.16" *)
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:146.24" *)
  reg \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:147.27" *)
  reg [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:127.33" *)
  wire [2:0] \gen_arbiter.gnt_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:131.33" *)
  wire [3:0] \gen_arbiter.req_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:128.33" *)
  wire [2:0] \gen_arbiter.req_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:130.33" *)
  reg [1:0] \gen_arbiter.rr_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:107.31" *)
  input gnt_i;
  wire gnt_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:100.31" *)
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:111.31" *)
  output [1:0] idx_o;
  wire [1:0] idx_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:97.31" *)
  input [3:0] req_i;
  wire [3:0] req_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:105.31" *)
  output req_o;
  wire req_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:95.31" *)
  input [1:0] rr_i;
  wire [1:0] rr_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:91.31" *)
  input rst_ni;
  wire rst_ni;
  assign \$1  = ~ gnt_i;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = \$14  & \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = \$17  & \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_lock.lock_d  = req_o & \$1 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = \gen_arbiter.rr_q [1] ? 1'h0 : \gen_arbiter.req_d [2];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = \gen_arbiter.rr_q [1] & \gen_arbiter.req_d [2];
  assign \$26  = 2'h3 > \gen_arbiter.rr_q ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = \$26  & \gen_arbiter.req_d [3];
  assign \$29  = 2'h3 <= \gen_arbiter.rr_q ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = \$29  & \gen_arbiter.req_d [3];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign \$33  = gnt_i && req_o;
  assign req_o = \gen_arbiter.req_nodes [1] | \gen_arbiter.req_nodes [2];
  assign \gen_arbiter.req_d  = \gen_arbiter.gen_int_rr.gen_lock.lock_q  ? \gen_arbiter.gen_int_rr.gen_lock.req_q  : req_i;
  assign \$42  = ~ \gen_arbiter.req_nodes [1];
  assign \$44  = \gen_arbiter.req_nodes [2] & \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = \$42  | \$44 ;
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? { 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  } : { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? \gen_arbiter.data_nodes [212:142] : \gen_arbiter.data_nodes [141:71];
  assign \$50  = ~ \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & \$50 ;
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [1] = \gen_arbiter.req_d [0] | \gen_arbiter.req_d [1];
  assign \$58  = ~ \gen_arbiter.req_d [0];
  assign \$60  = \gen_arbiter.req_d [1] & \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = \$58  | \$60 ;
  assign \gen_arbiter.data_nodes [141:71] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? data_i[141:71] : data_i[70:0];
  assign \$69  = ~ \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [1] & \$69 ;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [1] & \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [2] = \gen_arbiter.req_d [2] | \gen_arbiter.req_d [3];
  assign \$81  = ~ \gen_arbiter.req_d [2];
  assign \$83  = \gen_arbiter.req_d [3] & \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = \$81  | \$83 ;
  assign \gen_arbiter.data_nodes [212:142] = \gen_arbiter.gen_levels[1].gen_level[1].sel  ? data_i[283:213] : data_i[212:142];
  assign \$92  = ~ \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [2] & \$92 ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [2] & \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:226.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18176 ) \gen_arbiter.rr_q  <= \$gen_arbiter.rr_q$38 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18176  = | { flush_i, \$33  };
  assign \$14  = ! \gen_arbiter.rr_q ;
  assign \$17  = | \gen_arbiter.rr_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:152.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= 1'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:175.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.req_q  <= 4'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.req_q  <= \$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ;
  assign \$gen_arbiter.rr_q$38  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *) 2'h0 : \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \$gen_arbiter.gen_int_rr.gen_lock.req_q$12  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *) 4'h0 : \gen_arbiter.req_d ;
  assign \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *) 1'h0 : \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:212.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  (* src = "rtl/common_cells/rr_arb_tree.sv:203.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

(* src = "rtl/common_cells/rr_arb_tree.sv:49.8" *)
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$1 ;
  wire \$14 ;
  wire \$17 ;
  wire \$26 ;
  wire \$29 ;
  wire \$33 ;
  wire \$42 ;
  wire \$44 ;
  wire \$50 ;
  wire \$58 ;
  wire \$60 ;
  wire \$69 ;
  wire \$81 ;
  wire \$83 ;
  wire \$92 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18179 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *)
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *)
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *)
  wire [1:0] \$gen_arbiter.rr_q$38 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:89.31" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:103.31" *)
  input [283:0] data_i;
  wire [283:0] data_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:109.31" *)
  output [70:0] data_o;
  wire [70:0] data_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:93.31" *)
  input flush_i;
  wire flush_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:126.33" *)
  wire [212:0] \gen_arbiter.data_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.40" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:191.40" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.53" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:193.27" *)
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:192.27" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:191.27" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:146.16" *)
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:146.24" *)
  reg \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:147.27" *)
  reg [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:127.33" *)
  wire [2:0] \gen_arbiter.gnt_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:131.33" *)
  wire [3:0] \gen_arbiter.req_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:128.33" *)
  wire [2:0] \gen_arbiter.req_nodes ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:130.33" *)
  reg [1:0] \gen_arbiter.rr_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:107.31" *)
  input gnt_i;
  wire gnt_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:100.31" *)
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:111.31" *)
  output [1:0] idx_o;
  wire [1:0] idx_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:97.31" *)
  input [3:0] req_i;
  wire [3:0] req_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:105.31" *)
  output req_o;
  wire req_o;
  (* src = "rtl/common_cells/rr_arb_tree.sv:95.31" *)
  input [1:0] rr_i;
  wire [1:0] rr_i;
  (* src = "rtl/common_cells/rr_arb_tree.sv:91.31" *)
  input rst_ni;
  wire rst_ni;
  assign \$1  = ~ gnt_i;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = \$14  & \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = \$17  & \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_lock.lock_d  = req_o & \$1 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = \gen_arbiter.rr_q [1] ? 1'h0 : \gen_arbiter.req_d [2];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = \gen_arbiter.rr_q [1] & \gen_arbiter.req_d [2];
  assign \$26  = 2'h3 > \gen_arbiter.rr_q ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = \$26  & \gen_arbiter.req_d [3];
  assign \$29  = 2'h3 <= \gen_arbiter.rr_q ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = \$29  & \gen_arbiter.req_d [3];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign \$33  = gnt_i && req_o;
  assign req_o = \gen_arbiter.req_nodes [1] | \gen_arbiter.req_nodes [2];
  assign \gen_arbiter.req_d  = \gen_arbiter.gen_int_rr.gen_lock.lock_q  ? \gen_arbiter.gen_int_rr.gen_lock.req_q  : req_i;
  assign \$42  = ~ \gen_arbiter.req_nodes [1];
  assign \$44  = \gen_arbiter.req_nodes [2] & \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = \$42  | \$44 ;
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? { 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  } : { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? \gen_arbiter.data_nodes [212:142] : \gen_arbiter.data_nodes [141:71];
  assign \$50  = ~ \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & \$50 ;
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [1] = \gen_arbiter.req_d [0] | \gen_arbiter.req_d [1];
  assign \$58  = ~ \gen_arbiter.req_d [0];
  assign \$60  = \gen_arbiter.req_d [1] & \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = \$58  | \$60 ;
  assign \gen_arbiter.data_nodes [141:71] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? data_i[141:71] : data_i[70:0];
  assign \$69  = ~ \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [1] & \$69 ;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [1] & \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [2] = \gen_arbiter.req_d [2] | \gen_arbiter.req_d [3];
  assign \$81  = ~ \gen_arbiter.req_d [2];
  assign \$83  = \gen_arbiter.req_d [3] & \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = \$81  | \$83 ;
  assign \gen_arbiter.data_nodes [212:142] = \gen_arbiter.gen_levels[1].gen_level[1].sel  ? data_i[283:213] : data_i[212:142];
  assign \$92  = ~ \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [2] & \$92 ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [2] & \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:226.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18179 ) \gen_arbiter.rr_q  <= \$gen_arbiter.rr_q$38 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18179  = | { flush_i, \$33  };
  assign \$14  = ! \gen_arbiter.rr_q ;
  assign \$17  = | \gen_arbiter.rr_q ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:152.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= 1'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:175.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.req_q  <= 4'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.req_q  <= \$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ;
  assign \$gen_arbiter.rr_q$38  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *) 2'h0 : \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \$gen_arbiter.gen_int_rr.gen_lock.req_q$12  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *) 4'h0 : \gen_arbiter.req_d ;
  assign \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8  = flush_i ? (* full_case = 32'd1 *) (* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *) 1'h0 : \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "rtl/common_cells/rr_arb_tree.sv:212.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  (* src = "rtl/common_cells/rr_arb_tree.sv:203.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

(* src = "rtl/common_cells/rstgen.sv:13.8" *)
module \rstgen$croc_chip.i_croc_soc.i_rstgen (clk_i, rst_ni, test_mode_i, rst_no, init_no);
  (* src = "rtl/common_cells/rstgen.sv:14.18" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/rstgen.sv:18.18" *)
  output init_no;
  wire init_no;
  (* src = "rtl/common_cells/rstgen.sv:15.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/rstgen.sv:17.18" *)
  output rst_no;
  wire rst_no;
  (* src = "rtl/common_cells/rstgen.sv:16.18" *)
  input test_mode_i;
  wire test_mode_i;
  (* src = "rtl/common_cells/rstgen.sv:21.19" *)
  \rstgen_bypass$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass  i_rstgen_bypass (
    .clk_i(clk_i),
    .init_no(init_no),
    .rst_ni(rst_ni),
    .rst_no(rst_no),
    .rst_test_mode_ni(rst_ni),
    .test_mode_i(test_mode_i)
  );
endmodule

(* src = "rtl/common_cells/rstgen_bypass.sv:15.8" *)
module \rstgen_bypass$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass (clk_i, rst_ni, test_mode_i, rst_no, init_no, rst_test_mode_ni);
  (* src = "rtl/common_cells/rstgen_bypass.sv:18.18" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/common_cells/rstgen_bypass.sv:23.18" *)
  output init_no;
  wire init_no;
  (* src = "rtl/common_cells/rstgen_bypass.sv:27.11" *)
  wire rst_n;
  (* src = "rtl/common_cells/rstgen_bypass.sv:19.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/rstgen_bypass.sv:22.18" *)
  output rst_no;
  wire rst_no;
  (* src = "rtl/common_cells/rstgen_bypass.sv:20.18" *)
  input rst_test_mode_ni;
  wire rst_test_mode_ni;
  (* src = "rtl/common_cells/rstgen_bypass.sv:29.25" *)
  reg [3:0] synch_regs_q;
  (* src = "rtl/common_cells/rstgen_bypass.sv:21.18" *)
  input test_mode_i;
  wire test_mode_i;
  (* src = "rtl/common_cells/rstgen_bypass.sv:53.5" *)
  always @(posedge clk_i, negedge rst_n)
    if (!rst_n) synch_regs_q <= 4'h0;
    else synch_regs_q <= { synch_regs_q[2:0], 1'h1 };
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/rstgen_bypass.sv:46.17" *)
  \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_init_no  i_tc_clk_mux2_init_no (
    .clk0_i(synch_regs_q[3]),
    .clk1_i(1'h1),
    .clk_o(init_no),
    .clk_sel_i(test_mode_i)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/rstgen_bypass.sv:32.17" *)
  \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_n  i_tc_clk_mux2_rst_n (
    .clk0_i(rst_ni),
    .clk1_i(rst_test_mode_ni),
    .clk_o(rst_n),
    .clk_sel_i(test_mode_i)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "rtl/common_cells/rstgen_bypass.sv:39.17" *)
  \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_no  i_tc_clk_mux2_rst_no (
    .clk0_i(synch_regs_q[3]),
    .clk1_i(rst_test_mode_ni),
    .clk_o(rst_no),
    .clk_sel_i(test_mode_i)
  );
endmodule

(* src = "rtl/apb_uart/slib_clock_div.sv:35.8" *)
module \slib_clock_div$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG2 (CLK, Q, RST, CE);
  wire \$5 ;
  wire [2:0] \$7 ;
  (* src = "rtl/apb_uart/slib_clock_div.sv:58.7-66.26" *)
  wire [2:0] \$iCounter$9 ;
  (* src = "rtl/apb_uart/slib_clock_div.sv:56.5-67.20" *)
  wire \$iQ$10 ;
  (* src = "rtl/apb_uart/slib_clock_div.sv:38.14" *)
  input CE;
  wire CE;
  (* src = "rtl/apb_uart/slib_clock_div.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_clock_div.sv:39.16" *)
  output Q;
  reg Q;
  (* src = "rtl/apb_uart/slib_clock_div.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_clock_div.sv:44.27" *)
  reg [2:0] iCounter;
  assign \$5  = iCounter == 3'h7;
  assign \$7  = iCounter + 1'h1;
  (* src = "rtl/apb_uart/slib_clock_div.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCounter <= 3'h0;
    else if (CE) iCounter <= \$iCounter$9 ;
  (* src = "rtl/apb_uart/slib_clock_div.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 1'h0;
    else Q <= \$iQ$10 ;
  assign \$iCounter$9  = \$5  ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_clock_div.sv:59.19-62.26|rtl/apb_uart/slib_clock_div.sv:58.7-66.26" *) 3'h0 : \$7 ;
  assign \$iQ$10  = CE & (* src = "rtl/apb_uart/slib_clock_div.sv:58.7-66.26|rtl/apb_uart/slib_clock_div.sv:56.5-67.20" *) \$5 ;
endmodule

(* src = "rtl/apb_uart/slib_counter.sv:35.8" *)
module \slib_counter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_BRC (CLK, D, Q, RST, CLEAR, LOAD, ENABLE, DOWN, OVERFLOW);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18183 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18186 ;
  wire [4:0] \$auto$opt_share.cc:222:merge_operators$17260 ;
  wire [4:0] \$auto$rtlil.cc:3092:Mux$17262 ;
  (* src = "rtl/apb_uart/slib_counter.sv:63.11-78.11" *)
  wire [4:0] \$iCounter$16 ;
  (* src = "rtl/apb_uart/slib_counter.sv:58.6-78.11" *)
  wire [4:0] \$iCounter$17 ;
  (* src = "rtl/apb_uart/slib_counter.sv:80.6-83.11" *)
  wire \$iCounter[4]$20 ;
  (* src = "rtl/apb_uart/slib_counter.sv:38.14" *)
  input CLEAR;
  wire CLEAR;
  (* src = "rtl/apb_uart/slib_counter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_counter.sv:42.28" *)
  input [3:0] D;
  wire [3:0] D;
  (* src = "rtl/apb_uart/slib_counter.sv:41.14" *)
  input DOWN;
  wire DOWN;
  (* src = "rtl/apb_uart/slib_counter.sv:40.14" *)
  input ENABLE;
  wire ENABLE;
  (* src = "rtl/apb_uart/slib_counter.sv:39.14" *)
  input LOAD;
  wire LOAD;
  (* src = "rtl/apb_uart/slib_counter.sv:44.16" *)
  output OVERFLOW;
  reg OVERFLOW;
  (* src = "rtl/apb_uart/slib_counter.sv:43.30" *)
  output [3:0] Q;
  reg [3:0] Q;
  (* src = "rtl/apb_uart/slib_counter.sv:37.14" *)
  input RST;
  wire RST;
  assign \$auto$opt_share.cc:222:merge_operators$17260  = { OVERFLOW, Q } - { \$auto$rtlil.cc:3092:Mux$17262 [4], \$auto$rtlil.cc:3092:Mux$17262 [4], \$auto$rtlil.cc:3092:Mux$17262 [4], \$auto$rtlil.cc:3092:Mux$17262 [4], 1'h1 };
  (* src = "rtl/apb_uart/slib_counter.sv:50.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) OVERFLOW <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18183 ) OVERFLOW <= \$iCounter[4]$20 ;
  (* src = "rtl/apb_uart/slib_counter.sv:50.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 4'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18186 ) Q <= \$iCounter$17 [3:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18183  = | { ENABLE, LOAD, OVERFLOW, CLEAR };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18186  = | { ENABLE, LOAD, CLEAR };
  assign \$auto$rtlil.cc:3092:Mux$17262 [4] = ~ DOWN;
  assign \$iCounter[4]$20  = OVERFLOW ? (* src = "rtl/apb_uart/slib_counter.sv:82.11-82.32|rtl/apb_uart/slib_counter.sv:80.6-83.11" *) 1'h0 : \$iCounter$17 [4];
  assign \$iCounter$16  = LOAD ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_counter.sv:65.11-65.45|rtl/apb_uart/slib_counter.sv:63.11-78.11" *) { 1'h0, D } : \$auto$opt_share.cc:222:merge_operators$17260 ;
  assign \$iCounter$17  = CLEAR ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_counter.sv:61.11-61.25|rtl/apb_uart/slib_counter.sv:58.6-78.11" *) 5'h00 : \$iCounter$16 ;
  assign \$auto$rtlil.cc:3092:Mux$17262 [3:0] = { \$auto$rtlil.cc:3092:Mux$17262 [4], \$auto$rtlil.cc:3092:Mux$17262 [4], \$auto$rtlil.cc:3092:Mux$17262 [4], 1'h1 };
endmodule

(* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BIDET (CLK, D, RST, RE, FE);
  wire \$12 ;
  wire \$3 ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$12  = ~ D;
  assign FE = iDd && \$12 ;
  assign \$3  = ~ iDd;
  assign RE = \$3  && D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_CTS (CLK, D, RST, RE, FE);
  wire \$12 ;
  wire \$3 ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$12  = ~ D;
  assign FE = iDd && \$12 ;
  assign \$3  = ~ iDd;
  assign RE = \$3  && D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DCD (CLK, D, RST, RE, FE);
  wire \$12 ;
  wire \$3 ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$12  = ~ D;
  assign FE = iDd && \$12 ;
  assign \$3  = ~ iDd;
  assign RE = \$3  && D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DSR (CLK, D, RST, RE, FE);
  wire \$12 ;
  wire \$3 ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$12  = ~ D;
  assign FE = iDd && \$12 ;
  assign \$3  = ~ iDd;
  assign RE = \$3  && D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_RI (CLK, D, RST, RE, FE);
  wire \$12 ;
  wire \$3 ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$12  = ~ D;
  assign FE = iDd && \$12 ;
  assign \$3  = ~ iDd;
  assign RE = \$3  && D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_FEDET (CLK, D, RST, RE, FE);
  wire \$12 ;
  wire \$3 ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$12  = ~ D;
  assign FE = iDd && \$12 ;
  assign \$3  = ~ iDd;
  assign RE = \$3  && D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC_THRE_ED (CLK, D, RST, RE, FE);
  wire \$12 ;
  wire \$3 ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$12  = ~ D;
  assign FE = iDd && \$12 ;
  assign \$3  = ~ iDd;
  assign RE = \$3  && D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_PEDET (CLK, D, RST, RE, FE);
  wire \$12 ;
  wire \$3 ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$12  = ~ D;
  assign FE = iDd && \$12 ;
  assign \$3  = ~ iDd;
  assign RE = \$3  && D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RCLK (CLK, D, RST, RE, FE);
  wire \$12 ;
  wire \$3 ;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$12  = ~ D;
  assign FE = iDd && \$12 ;
  assign \$3  = ~ iDd;
  assign RE = \$3  && D;
  (* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "rtl/apb_uart/slib_fifo.sv:35.8" *)
module \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RXFF (CLK, D, FULL, Q, RST, CLEAR, WRITE, READ, EMPTY, USAGE);
  wire \$1 ;
  wire \$12 ;
  wire \$14 ;
  wire [6:0] \$16 ;
  wire \$21 ;
  wire \$23 ;
  wire [6:0] \$25 ;
  wire \$3 ;
  wire \$32 ;
  wire \$60 ;
  wire \$64 ;
  wire \$68 ;
  wire \$73 ;
  wire \$77 ;
  wire \$81 ;
  wire [351:0] \$auto$bmuxmap.cc:84:execute$19082 ;
  wire [175:0] \$auto$bmuxmap.cc:84:execute$19115 ;
  wire [87:0] \$auto$bmuxmap.cc:84:execute$19132 ;
  wire [43:0] \$auto$bmuxmap.cc:84:execute$19141 ;
  wire [21:0] \$auto$bmuxmap.cc:84:execute$19146 ;
  wire [10:0] \$auto$bmuxmap.cc:84:execute$19149 ;
  wire \$auto$demuxmap.cc:63:execute$19344 ;
  wire \$auto$demuxmap.cc:63:execute$19347 ;
  wire \$auto$demuxmap.cc:63:execute$19350 ;
  wire \$auto$demuxmap.cc:63:execute$19353 ;
  wire \$auto$demuxmap.cc:63:execute$19356 ;
  wire \$auto$demuxmap.cc:63:execute$19359 ;
  wire \$auto$demuxmap.cc:63:execute$19362 ;
  wire \$auto$demuxmap.cc:63:execute$19365 ;
  wire \$auto$demuxmap.cc:63:execute$19368 ;
  wire \$auto$demuxmap.cc:63:execute$19371 ;
  wire \$auto$demuxmap.cc:63:execute$19374 ;
  wire \$auto$demuxmap.cc:63:execute$19377 ;
  wire \$auto$demuxmap.cc:63:execute$19380 ;
  wire \$auto$demuxmap.cc:63:execute$19383 ;
  wire \$auto$demuxmap.cc:63:execute$19386 ;
  wire \$auto$demuxmap.cc:63:execute$19389 ;
  wire \$auto$demuxmap.cc:63:execute$19392 ;
  wire \$auto$demuxmap.cc:63:execute$19395 ;
  wire \$auto$demuxmap.cc:63:execute$19398 ;
  wire \$auto$demuxmap.cc:63:execute$19401 ;
  wire \$auto$demuxmap.cc:63:execute$19404 ;
  wire \$auto$demuxmap.cc:63:execute$19407 ;
  wire \$auto$demuxmap.cc:63:execute$19410 ;
  wire \$auto$demuxmap.cc:63:execute$19413 ;
  wire \$auto$demuxmap.cc:63:execute$19416 ;
  wire \$auto$demuxmap.cc:63:execute$19419 ;
  wire \$auto$demuxmap.cc:63:execute$19422 ;
  wire \$auto$demuxmap.cc:63:execute$19425 ;
  wire \$auto$demuxmap.cc:63:execute$19428 ;
  wire \$auto$demuxmap.cc:63:execute$19431 ;
  wire \$auto$demuxmap.cc:63:execute$19434 ;
  wire \$auto$demuxmap.cc:63:execute$19437 ;
  wire \$auto$demuxmap.cc:63:execute$19440 ;
  wire \$auto$demuxmap.cc:63:execute$19443 ;
  wire \$auto$demuxmap.cc:63:execute$19446 ;
  wire \$auto$demuxmap.cc:63:execute$19449 ;
  wire \$auto$demuxmap.cc:63:execute$19452 ;
  wire \$auto$demuxmap.cc:63:execute$19455 ;
  wire \$auto$demuxmap.cc:63:execute$19458 ;
  wire \$auto$demuxmap.cc:63:execute$19461 ;
  wire \$auto$demuxmap.cc:63:execute$19464 ;
  wire \$auto$demuxmap.cc:63:execute$19467 ;
  wire \$auto$demuxmap.cc:63:execute$19470 ;
  wire \$auto$demuxmap.cc:63:execute$19473 ;
  wire \$auto$demuxmap.cc:63:execute$19476 ;
  wire \$auto$demuxmap.cc:63:execute$19479 ;
  wire \$auto$demuxmap.cc:63:execute$19482 ;
  wire \$auto$demuxmap.cc:63:execute$19485 ;
  wire \$auto$demuxmap.cc:63:execute$19488 ;
  wire \$auto$demuxmap.cc:63:execute$19491 ;
  wire \$auto$demuxmap.cc:63:execute$19494 ;
  wire \$auto$demuxmap.cc:63:execute$19497 ;
  wire \$auto$demuxmap.cc:63:execute$19500 ;
  wire \$auto$demuxmap.cc:63:execute$19503 ;
  wire \$auto$demuxmap.cc:63:execute$19506 ;
  wire \$auto$demuxmap.cc:63:execute$19509 ;
  wire \$auto$demuxmap.cc:63:execute$19512 ;
  wire \$auto$demuxmap.cc:63:execute$19515 ;
  wire \$auto$demuxmap.cc:63:execute$19518 ;
  wire \$auto$demuxmap.cc:63:execute$19521 ;
  wire \$auto$demuxmap.cc:63:execute$19524 ;
  wire \$auto$demuxmap.cc:63:execute$19527 ;
  wire \$auto$demuxmap.cc:63:execute$19530 ;
  wire \$auto$demuxmap.cc:63:execute$19533 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18189 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18192 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18195 ;
  wire [5:0] \$auto$opt_expr.cc:205:group_cell_inputs$17205 ;
  wire [5:0] \$auto$opt_expr.cc:205:group_cell_inputs$17209 ;
  wire [5:0] \$auto$opt_share.cc:222:merge_operators$18494 ;
  wire \$auto$rtlil.cc:3015:Ge$1556 ;
  wire [10:0] \$auto$rtlil.cc:3092:Mux$1565 ;
  wire [5:0] \$auto$rtlil.cc:3092:Mux$18496 ;
  wire [703:0] \$auto$rtlil.cc:3093:Bwmux$1561 ;
  wire [703:0] \$auto$rtlil.cc:3114:Demux$1560 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:81.1-87.10" *)
  wire [6:0] \$iRDAddr$30 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:133.3-150.10" *)
  wire [5:0] \$iUSAGE$85 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:81.1-87.10" *)
  wire [6:0] \$iWRAddr$29 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:38.14" *)
  input CLEAR;
  wire CLEAR;
  (* src = "rtl/apb_uart/slib_fifo.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_fifo.sv:41.28" *)
  input [10:0] D;
  wire [10:0] D;
  (* src = "rtl/apb_uart/slib_fifo.sv:43.16" *)
  output EMPTY;
  reg EMPTY;
  (* src = "rtl/apb_uart/slib_fifo.sv:44.16" *)
  output FULL;
  wire FULL;
  (* src = "rtl/apb_uart/slib_fifo.sv:42.30" *)
  output [10:0] Q;
  reg [10:0] Q;
  (* src = "rtl/apb_uart/slib_fifo.sv:40.14" *)
  input READ;
  wire READ;
  (* src = "rtl/apb_uart/slib_fifo.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_fifo.sv:45.31" *)
  output [5:0] USAGE;
  reg [5:0] USAGE;
  (* src = "rtl/apb_uart/slib_fifo.sv:39.14" *)
  input WRITE;
  wire WRITE;
  (* src = "rtl/apb_uart/slib_fifo.sv:55.17" *)
  reg [703:0] iFIFOMem;
  (* src = "rtl/apb_uart/slib_fifo.sv:52.16" *)
  reg [6:0] iRDAddr;
  (* src = "rtl/apb_uart/slib_fifo.sv:51.16" *)
  reg [6:0] iWRAddr;
  assign \$1  = iRDAddr[5:0] == iWRAddr[5:0];
  assign \$12  = ~ FULL;
  assign \$14  = WRITE && \$12 ;
  assign \$16  = iWRAddr + 1'h1;
  assign \$3  = iRDAddr[6] != iWRAddr[6];
  assign \$21  = ~ EMPTY;
  assign \$23  = READ && \$21 ;
  assign \$25  = iRDAddr + 1'h1;
  assign \$32  = iRDAddr == iWRAddr;
  assign FULL = \$1  && \$3 ;
  assign \$auto$rtlil.cc:3015:Ge$1556  = $signed({ 1'h1, \$auto$opt_expr.cc:205:group_cell_inputs$17205  }) >= $signed(7'h40);
  \$bwmux  #(
    .WIDTH(32'd704)
  ) \$48  (
    .A(iFIFOMem),
    .B({ D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D }),
    .S({ \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10] }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$1561 )
  );
  assign \$60  = ~ READ;
  assign \$64  = \$60  && WRITE;
  assign \$68  = \$64  && \$12 ;
  assign \$73  = ~ WRITE;
  assign \$77  = \$73  && READ;
  assign \$81  = \$77  && \$21 ;
  assign \$auto$opt_share.cc:222:merge_operators$18494  = USAGE - { \$auto$rtlil.cc:3092:Mux$18496 [5], \$auto$rtlil.cc:3092:Mux$18496 [5], \$auto$rtlil.cc:3092:Mux$18496 [5], \$auto$rtlil.cc:3092:Mux$18496 [5], \$auto$rtlil.cc:3092:Mux$18496 [5], 1'h1 };
  assign \$auto$bmuxmap.cc:84:execute$19082 [10:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[21:11] : iFIFOMem[10:0];
  assign \$auto$bmuxmap.cc:84:execute$19082 [21:11] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[43:33] : iFIFOMem[32:22];
  assign \$auto$bmuxmap.cc:84:execute$19082 [32:22] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[65:55] : iFIFOMem[54:44];
  assign \$auto$bmuxmap.cc:84:execute$19082 [43:33] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[87:77] : iFIFOMem[76:66];
  assign \$auto$bmuxmap.cc:84:execute$19082 [54:44] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[109:99] : iFIFOMem[98:88];
  assign \$auto$bmuxmap.cc:84:execute$19082 [65:55] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[131:121] : iFIFOMem[120:110];
  assign \$auto$bmuxmap.cc:84:execute$19082 [76:66] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[153:143] : iFIFOMem[142:132];
  assign \$auto$bmuxmap.cc:84:execute$19082 [87:77] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[175:165] : iFIFOMem[164:154];
  assign \$auto$bmuxmap.cc:84:execute$19082 [98:88] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[197:187] : iFIFOMem[186:176];
  assign \$auto$bmuxmap.cc:84:execute$19082 [109:99] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[219:209] : iFIFOMem[208:198];
  assign \$auto$bmuxmap.cc:84:execute$19082 [120:110] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[241:231] : iFIFOMem[230:220];
  assign \$auto$bmuxmap.cc:84:execute$19082 [131:121] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[263:253] : iFIFOMem[252:242];
  assign \$auto$bmuxmap.cc:84:execute$19082 [142:132] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[285:275] : iFIFOMem[274:264];
  assign \$auto$bmuxmap.cc:84:execute$19082 [153:143] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[307:297] : iFIFOMem[296:286];
  assign \$auto$bmuxmap.cc:84:execute$19082 [164:154] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[329:319] : iFIFOMem[318:308];
  assign \$auto$bmuxmap.cc:84:execute$19082 [175:165] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[351:341] : iFIFOMem[340:330];
  assign \$auto$bmuxmap.cc:84:execute$19082 [186:176] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[373:363] : iFIFOMem[362:352];
  assign \$auto$bmuxmap.cc:84:execute$19082 [197:187] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[395:385] : iFIFOMem[384:374];
  assign \$auto$bmuxmap.cc:84:execute$19082 [208:198] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[417:407] : iFIFOMem[406:396];
  assign \$auto$bmuxmap.cc:84:execute$19082 [219:209] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[439:429] : iFIFOMem[428:418];
  assign \$auto$bmuxmap.cc:84:execute$19082 [230:220] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[461:451] : iFIFOMem[450:440];
  assign \$auto$bmuxmap.cc:84:execute$19082 [241:231] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[483:473] : iFIFOMem[472:462];
  assign \$auto$bmuxmap.cc:84:execute$19082 [252:242] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[505:495] : iFIFOMem[494:484];
  assign \$auto$bmuxmap.cc:84:execute$19082 [263:253] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[527:517] : iFIFOMem[516:506];
  assign \$auto$bmuxmap.cc:84:execute$19082 [274:264] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[549:539] : iFIFOMem[538:528];
  assign \$auto$bmuxmap.cc:84:execute$19082 [285:275] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[571:561] : iFIFOMem[560:550];
  assign \$auto$bmuxmap.cc:84:execute$19082 [296:286] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[593:583] : iFIFOMem[582:572];
  assign \$auto$bmuxmap.cc:84:execute$19082 [307:297] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[615:605] : iFIFOMem[604:594];
  assign \$auto$bmuxmap.cc:84:execute$19082 [318:308] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[637:627] : iFIFOMem[626:616];
  assign \$auto$bmuxmap.cc:84:execute$19082 [329:319] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[659:649] : iFIFOMem[648:638];
  assign \$auto$bmuxmap.cc:84:execute$19082 [340:330] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[681:671] : iFIFOMem[670:660];
  assign \$auto$bmuxmap.cc:84:execute$19082 [351:341] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [0] ? iFIFOMem[703:693] : iFIFOMem[692:682];
  assign \$auto$bmuxmap.cc:84:execute$19115 [10:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [1] ? \$auto$bmuxmap.cc:84:execute$19082 [21:11] : \$auto$bmuxmap.cc:84:execute$19082 [10:0];
  assign \$auto$bmuxmap.cc:84:execute$19115 [21:11] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [1] ? \$auto$bmuxmap.cc:84:execute$19082 [43:33] : \$auto$bmuxmap.cc:84:execute$19082 [32:22];
  assign \$auto$bmuxmap.cc:84:execute$19115 [32:22] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [1] ? \$auto$bmuxmap.cc:84:execute$19082 [65:55] : \$auto$bmuxmap.cc:84:execute$19082 [54:44];
  assign \$auto$bmuxmap.cc:84:execute$19115 [43:33] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [1] ? \$auto$bmuxmap.cc:84:execute$19082 [87:77] : \$auto$bmuxmap.cc:84:execute$19082 [76:66];
  assign \$auto$bmuxmap.cc:84:execute$19115 [54:44] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [1] ? \$auto$bmuxmap.cc:84:execute$19082 [109:99] : \$auto$bmuxmap.cc:84:execute$19082 [98:88];
  assign \$auto$bmuxmap.cc:84:execute$19115 [65:55] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [1] ? \$auto$bmuxmap.cc:84:execute$19082 [131:121] : \$auto$bmuxmap.cc:84:execute$19082 [120:110];
  assign \$auto$bmuxmap.cc:84:execute$19115 [76:66] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [1] ? \$auto$bmuxmap.cc:84:execute$19082 [153:143] : \$auto$bmuxmap.cc:84:execute$19082 [142:132];
  assign \$auto$bmuxmap.cc:84:execute$19115 [87:77] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [1] ? \$auto$bmuxmap.cc:84:execute$19082 [175:165] : \$auto$bmuxmap.cc:84:execute$19082 [164:154];
  assign \$auto$bmuxmap.cc:84:execute$19115 [98:88] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [1] ? \$auto$bmuxmap.cc:84:execute$19082 [197:187] : \$auto$bmuxmap.cc:84:execute$19082 [186:176];
  assign \$auto$bmuxmap.cc:84:execute$19115 [109:99] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [1] ? \$auto$bmuxmap.cc:84:execute$19082 [219:209] : \$auto$bmuxmap.cc:84:execute$19082 [208:198];
  assign \$auto$bmuxmap.cc:84:execute$19115 [120:110] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [1] ? \$auto$bmuxmap.cc:84:execute$19082 [241:231] : \$auto$bmuxmap.cc:84:execute$19082 [230:220];
  assign \$auto$bmuxmap.cc:84:execute$19115 [131:121] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [1] ? \$auto$bmuxmap.cc:84:execute$19082 [263:253] : \$auto$bmuxmap.cc:84:execute$19082 [252:242];
  assign \$auto$bmuxmap.cc:84:execute$19115 [142:132] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [1] ? \$auto$bmuxmap.cc:84:execute$19082 [285:275] : \$auto$bmuxmap.cc:84:execute$19082 [274:264];
  assign \$auto$bmuxmap.cc:84:execute$19115 [153:143] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [1] ? \$auto$bmuxmap.cc:84:execute$19082 [307:297] : \$auto$bmuxmap.cc:84:execute$19082 [296:286];
  assign \$auto$bmuxmap.cc:84:execute$19115 [164:154] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [1] ? \$auto$bmuxmap.cc:84:execute$19082 [329:319] : \$auto$bmuxmap.cc:84:execute$19082 [318:308];
  assign \$auto$bmuxmap.cc:84:execute$19115 [175:165] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [1] ? \$auto$bmuxmap.cc:84:execute$19082 [351:341] : \$auto$bmuxmap.cc:84:execute$19082 [340:330];
  assign \$auto$bmuxmap.cc:84:execute$19132 [10:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [2] ? \$auto$bmuxmap.cc:84:execute$19115 [21:11] : \$auto$bmuxmap.cc:84:execute$19115 [10:0];
  assign \$auto$bmuxmap.cc:84:execute$19132 [21:11] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [2] ? \$auto$bmuxmap.cc:84:execute$19115 [43:33] : \$auto$bmuxmap.cc:84:execute$19115 [32:22];
  assign \$auto$bmuxmap.cc:84:execute$19132 [32:22] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [2] ? \$auto$bmuxmap.cc:84:execute$19115 [65:55] : \$auto$bmuxmap.cc:84:execute$19115 [54:44];
  assign \$auto$bmuxmap.cc:84:execute$19132 [43:33] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [2] ? \$auto$bmuxmap.cc:84:execute$19115 [87:77] : \$auto$bmuxmap.cc:84:execute$19115 [76:66];
  assign \$auto$bmuxmap.cc:84:execute$19132 [54:44] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [2] ? \$auto$bmuxmap.cc:84:execute$19115 [109:99] : \$auto$bmuxmap.cc:84:execute$19115 [98:88];
  assign \$auto$bmuxmap.cc:84:execute$19132 [65:55] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [2] ? \$auto$bmuxmap.cc:84:execute$19115 [131:121] : \$auto$bmuxmap.cc:84:execute$19115 [120:110];
  assign \$auto$bmuxmap.cc:84:execute$19132 [76:66] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [2] ? \$auto$bmuxmap.cc:84:execute$19115 [153:143] : \$auto$bmuxmap.cc:84:execute$19115 [142:132];
  assign \$auto$bmuxmap.cc:84:execute$19132 [87:77] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [2] ? \$auto$bmuxmap.cc:84:execute$19115 [175:165] : \$auto$bmuxmap.cc:84:execute$19115 [164:154];
  assign \$auto$bmuxmap.cc:84:execute$19141 [10:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [3] ? \$auto$bmuxmap.cc:84:execute$19132 [21:11] : \$auto$bmuxmap.cc:84:execute$19132 [10:0];
  assign \$auto$bmuxmap.cc:84:execute$19141 [21:11] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [3] ? \$auto$bmuxmap.cc:84:execute$19132 [43:33] : \$auto$bmuxmap.cc:84:execute$19132 [32:22];
  assign \$auto$bmuxmap.cc:84:execute$19141 [32:22] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [3] ? \$auto$bmuxmap.cc:84:execute$19132 [65:55] : \$auto$bmuxmap.cc:84:execute$19132 [54:44];
  assign \$auto$bmuxmap.cc:84:execute$19141 [43:33] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [3] ? \$auto$bmuxmap.cc:84:execute$19132 [87:77] : \$auto$bmuxmap.cc:84:execute$19132 [76:66];
  assign \$auto$bmuxmap.cc:84:execute$19146 [10:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [4] ? \$auto$bmuxmap.cc:84:execute$19141 [21:11] : \$auto$bmuxmap.cc:84:execute$19141 [10:0];
  assign \$auto$bmuxmap.cc:84:execute$19146 [21:11] = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [4] ? \$auto$bmuxmap.cc:84:execute$19141 [43:33] : \$auto$bmuxmap.cc:84:execute$19141 [32:22];
  assign \$auto$bmuxmap.cc:84:execute$19149  = \$auto$opt_expr.cc:205:group_cell_inputs$17209 [5] ? \$auto$bmuxmap.cc:84:execute$19146 [21:11] : \$auto$bmuxmap.cc:84:execute$19146 [10:0];
  assign \$auto$demuxmap.cc:63:execute$19344  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h00;
  assign \$auto$demuxmap.cc:63:execute$19347  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h01;
  assign \$auto$demuxmap.cc:63:execute$19350  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h02;
  assign \$auto$demuxmap.cc:63:execute$19353  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h03;
  assign \$auto$demuxmap.cc:63:execute$19356  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h04;
  assign \$auto$demuxmap.cc:63:execute$19359  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h05;
  assign \$auto$demuxmap.cc:63:execute$19362  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h06;
  assign \$auto$demuxmap.cc:63:execute$19365  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h07;
  assign \$auto$demuxmap.cc:63:execute$19368  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h08;
  assign \$auto$demuxmap.cc:63:execute$19371  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h09;
  assign \$auto$demuxmap.cc:63:execute$19374  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h0a;
  assign \$auto$demuxmap.cc:63:execute$19377  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h0b;
  assign \$auto$demuxmap.cc:63:execute$19380  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h0c;
  assign \$auto$demuxmap.cc:63:execute$19383  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h0d;
  assign \$auto$demuxmap.cc:63:execute$19386  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h0e;
  assign \$auto$demuxmap.cc:63:execute$19389  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h0f;
  assign \$auto$demuxmap.cc:63:execute$19392  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h10;
  assign \$auto$demuxmap.cc:63:execute$19395  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h11;
  assign \$auto$demuxmap.cc:63:execute$19398  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h12;
  assign \$auto$demuxmap.cc:63:execute$19401  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h13;
  assign \$auto$demuxmap.cc:63:execute$19404  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h14;
  assign \$auto$demuxmap.cc:63:execute$19407  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h15;
  assign \$auto$demuxmap.cc:63:execute$19410  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h16;
  assign \$auto$demuxmap.cc:63:execute$19413  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h17;
  assign \$auto$demuxmap.cc:63:execute$19416  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h18;
  assign \$auto$demuxmap.cc:63:execute$19419  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h19;
  assign \$auto$demuxmap.cc:63:execute$19422  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h1a;
  assign \$auto$demuxmap.cc:63:execute$19425  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h1b;
  assign \$auto$demuxmap.cc:63:execute$19428  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h1c;
  assign \$auto$demuxmap.cc:63:execute$19431  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h1d;
  assign \$auto$demuxmap.cc:63:execute$19434  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h1e;
  assign \$auto$demuxmap.cc:63:execute$19437  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h1f;
  assign \$auto$demuxmap.cc:63:execute$19440  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h20;
  assign \$auto$demuxmap.cc:63:execute$19443  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h21;
  assign \$auto$demuxmap.cc:63:execute$19446  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h22;
  assign \$auto$demuxmap.cc:63:execute$19449  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h23;
  assign \$auto$demuxmap.cc:63:execute$19452  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h24;
  assign \$auto$demuxmap.cc:63:execute$19455  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h25;
  assign \$auto$demuxmap.cc:63:execute$19458  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h26;
  assign \$auto$demuxmap.cc:63:execute$19461  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h27;
  assign \$auto$demuxmap.cc:63:execute$19464  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h28;
  assign \$auto$demuxmap.cc:63:execute$19467  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h29;
  assign \$auto$demuxmap.cc:63:execute$19470  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h2a;
  assign \$auto$demuxmap.cc:63:execute$19473  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h2b;
  assign \$auto$demuxmap.cc:63:execute$19476  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h2c;
  assign \$auto$demuxmap.cc:63:execute$19479  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h2d;
  assign \$auto$demuxmap.cc:63:execute$19482  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h2e;
  assign \$auto$demuxmap.cc:63:execute$19485  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h2f;
  assign \$auto$demuxmap.cc:63:execute$19488  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h30;
  assign \$auto$demuxmap.cc:63:execute$19491  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h31;
  assign \$auto$demuxmap.cc:63:execute$19494  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h32;
  assign \$auto$demuxmap.cc:63:execute$19497  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h33;
  assign \$auto$demuxmap.cc:63:execute$19500  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h34;
  assign \$auto$demuxmap.cc:63:execute$19503  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h35;
  assign \$auto$demuxmap.cc:63:execute$19506  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h36;
  assign \$auto$demuxmap.cc:63:execute$19509  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h37;
  assign \$auto$demuxmap.cc:63:execute$19512  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h38;
  assign \$auto$demuxmap.cc:63:execute$19515  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h39;
  assign \$auto$demuxmap.cc:63:execute$19518  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h3a;
  assign \$auto$demuxmap.cc:63:execute$19521  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h3b;
  assign \$auto$demuxmap.cc:63:execute$19524  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h3c;
  assign \$auto$demuxmap.cc:63:execute$19527  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h3d;
  assign \$auto$demuxmap.cc:63:execute$19530  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h3e;
  assign \$auto$demuxmap.cc:63:execute$19533  = \$auto$opt_expr.cc:205:group_cell_inputs$17205  == 6'h3f;
  assign \$auto$rtlil.cc:3114:Demux$1560 [10] = \$auto$demuxmap.cc:63:execute$19344  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [21] = \$auto$demuxmap.cc:63:execute$19347  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [32] = \$auto$demuxmap.cc:63:execute$19350  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [43] = \$auto$demuxmap.cc:63:execute$19353  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [54] = \$auto$demuxmap.cc:63:execute$19356  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [65] = \$auto$demuxmap.cc:63:execute$19359  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [76] = \$auto$demuxmap.cc:63:execute$19362  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [87] = \$auto$demuxmap.cc:63:execute$19365  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [98] = \$auto$demuxmap.cc:63:execute$19368  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [109] = \$auto$demuxmap.cc:63:execute$19371  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [120] = \$auto$demuxmap.cc:63:execute$19374  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [131] = \$auto$demuxmap.cc:63:execute$19377  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [142] = \$auto$demuxmap.cc:63:execute$19380  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [153] = \$auto$demuxmap.cc:63:execute$19383  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [164] = \$auto$demuxmap.cc:63:execute$19386  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [175] = \$auto$demuxmap.cc:63:execute$19389  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [186] = \$auto$demuxmap.cc:63:execute$19392  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [197] = \$auto$demuxmap.cc:63:execute$19395  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [208] = \$auto$demuxmap.cc:63:execute$19398  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [219] = \$auto$demuxmap.cc:63:execute$19401  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [230] = \$auto$demuxmap.cc:63:execute$19404  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [241] = \$auto$demuxmap.cc:63:execute$19407  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [252] = \$auto$demuxmap.cc:63:execute$19410  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [263] = \$auto$demuxmap.cc:63:execute$19413  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [274] = \$auto$demuxmap.cc:63:execute$19416  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [285] = \$auto$demuxmap.cc:63:execute$19419  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [296] = \$auto$demuxmap.cc:63:execute$19422  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [307] = \$auto$demuxmap.cc:63:execute$19425  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [318] = \$auto$demuxmap.cc:63:execute$19428  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [329] = \$auto$demuxmap.cc:63:execute$19431  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [340] = \$auto$demuxmap.cc:63:execute$19434  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [351] = \$auto$demuxmap.cc:63:execute$19437  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [362] = \$auto$demuxmap.cc:63:execute$19440  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [373] = \$auto$demuxmap.cc:63:execute$19443  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [384] = \$auto$demuxmap.cc:63:execute$19446  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [395] = \$auto$demuxmap.cc:63:execute$19449  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [406] = \$auto$demuxmap.cc:63:execute$19452  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [417] = \$auto$demuxmap.cc:63:execute$19455  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [428] = \$auto$demuxmap.cc:63:execute$19458  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [439] = \$auto$demuxmap.cc:63:execute$19461  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [450] = \$auto$demuxmap.cc:63:execute$19464  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [461] = \$auto$demuxmap.cc:63:execute$19467  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [472] = \$auto$demuxmap.cc:63:execute$19470  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [483] = \$auto$demuxmap.cc:63:execute$19473  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [494] = \$auto$demuxmap.cc:63:execute$19476  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [505] = \$auto$demuxmap.cc:63:execute$19479  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [516] = \$auto$demuxmap.cc:63:execute$19482  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [527] = \$auto$demuxmap.cc:63:execute$19485  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [538] = \$auto$demuxmap.cc:63:execute$19488  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [549] = \$auto$demuxmap.cc:63:execute$19491  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [560] = \$auto$demuxmap.cc:63:execute$19494  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [571] = \$auto$demuxmap.cc:63:execute$19497  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [582] = \$auto$demuxmap.cc:63:execute$19500  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [593] = \$auto$demuxmap.cc:63:execute$19503  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [604] = \$auto$demuxmap.cc:63:execute$19506  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [615] = \$auto$demuxmap.cc:63:execute$19509  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [626] = \$auto$demuxmap.cc:63:execute$19512  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [637] = \$auto$demuxmap.cc:63:execute$19515  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [648] = \$auto$demuxmap.cc:63:execute$19518  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [659] = \$auto$demuxmap.cc:63:execute$19521  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [670] = \$auto$demuxmap.cc:63:execute$19524  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [681] = \$auto$demuxmap.cc:63:execute$19527  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [692] = \$auto$demuxmap.cc:63:execute$19530  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1560 [703] = \$auto$demuxmap.cc:63:execute$19533  ? \$auto$rtlil.cc:3015:Ge$1556  : 1'h0;
  (* src = "rtl/apb_uart/slib_fifo.sv:59.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iWRAddr <= 7'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18189 ) iWRAddr <= \$iWRAddr$29 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:124.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) USAGE <= 6'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18192 ) USAGE <= \$iUSAGE$85 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:59.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iRDAddr <= 7'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18195 ) iRDAddr <= \$iRDAddr$30 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[604:594] <= 11'h000;
    else if (\$14 ) iFIFOMem[604:594] <= \$auto$rtlil.cc:3093:Bwmux$1561 [604:594];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[615:605] <= 11'h000;
    else if (\$14 ) iFIFOMem[615:605] <= \$auto$rtlil.cc:3093:Bwmux$1561 [615:605];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[626:616] <= 11'h000;
    else if (\$14 ) iFIFOMem[626:616] <= \$auto$rtlil.cc:3093:Bwmux$1561 [626:616];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[637:627] <= 11'h000;
    else if (\$14 ) iFIFOMem[637:627] <= \$auto$rtlil.cc:3093:Bwmux$1561 [637:627];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[10:0] <= 11'h000;
    else if (\$14 ) iFIFOMem[10:0] <= \$auto$rtlil.cc:3093:Bwmux$1561 [10:0];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[21:11] <= 11'h000;
    else if (\$14 ) iFIFOMem[21:11] <= \$auto$rtlil.cc:3093:Bwmux$1561 [21:11];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[32:22] <= 11'h000;
    else if (\$14 ) iFIFOMem[32:22] <= \$auto$rtlil.cc:3093:Bwmux$1561 [32:22];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[43:33] <= 11'h000;
    else if (\$14 ) iFIFOMem[43:33] <= \$auto$rtlil.cc:3093:Bwmux$1561 [43:33];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[648:638] <= 11'h000;
    else if (\$14 ) iFIFOMem[648:638] <= \$auto$rtlil.cc:3093:Bwmux$1561 [648:638];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[54:44] <= 11'h000;
    else if (\$14 ) iFIFOMem[54:44] <= \$auto$rtlil.cc:3093:Bwmux$1561 [54:44];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[65:55] <= 11'h000;
    else if (\$14 ) iFIFOMem[65:55] <= \$auto$rtlil.cc:3093:Bwmux$1561 [65:55];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[76:66] <= 11'h000;
    else if (\$14 ) iFIFOMem[76:66] <= \$auto$rtlil.cc:3093:Bwmux$1561 [76:66];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[87:77] <= 11'h000;
    else if (\$14 ) iFIFOMem[87:77] <= \$auto$rtlil.cc:3093:Bwmux$1561 [87:77];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[98:88] <= 11'h000;
    else if (\$14 ) iFIFOMem[98:88] <= \$auto$rtlil.cc:3093:Bwmux$1561 [98:88];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[109:99] <= 11'h000;
    else if (\$14 ) iFIFOMem[109:99] <= \$auto$rtlil.cc:3093:Bwmux$1561 [109:99];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[120:110] <= 11'h000;
    else if (\$14 ) iFIFOMem[120:110] <= \$auto$rtlil.cc:3093:Bwmux$1561 [120:110];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[131:121] <= 11'h000;
    else if (\$14 ) iFIFOMem[131:121] <= \$auto$rtlil.cc:3093:Bwmux$1561 [131:121];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[142:132] <= 11'h000;
    else if (\$14 ) iFIFOMem[142:132] <= \$auto$rtlil.cc:3093:Bwmux$1561 [142:132];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[153:143] <= 11'h000;
    else if (\$14 ) iFIFOMem[153:143] <= \$auto$rtlil.cc:3093:Bwmux$1561 [153:143];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[659:649] <= 11'h000;
    else if (\$14 ) iFIFOMem[659:649] <= \$auto$rtlil.cc:3093:Bwmux$1561 [659:649];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[164:154] <= 11'h000;
    else if (\$14 ) iFIFOMem[164:154] <= \$auto$rtlil.cc:3093:Bwmux$1561 [164:154];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[175:165] <= 11'h000;
    else if (\$14 ) iFIFOMem[175:165] <= \$auto$rtlil.cc:3093:Bwmux$1561 [175:165];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[186:176] <= 11'h000;
    else if (\$14 ) iFIFOMem[186:176] <= \$auto$rtlil.cc:3093:Bwmux$1561 [186:176];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[197:187] <= 11'h000;
    else if (\$14 ) iFIFOMem[197:187] <= \$auto$rtlil.cc:3093:Bwmux$1561 [197:187];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[208:198] <= 11'h000;
    else if (\$14 ) iFIFOMem[208:198] <= \$auto$rtlil.cc:3093:Bwmux$1561 [208:198];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[219:209] <= 11'h000;
    else if (\$14 ) iFIFOMem[219:209] <= \$auto$rtlil.cc:3093:Bwmux$1561 [219:209];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[230:220] <= 11'h000;
    else if (\$14 ) iFIFOMem[230:220] <= \$auto$rtlil.cc:3093:Bwmux$1561 [230:220];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[241:231] <= 11'h000;
    else if (\$14 ) iFIFOMem[241:231] <= \$auto$rtlil.cc:3093:Bwmux$1561 [241:231];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[252:242] <= 11'h000;
    else if (\$14 ) iFIFOMem[252:242] <= \$auto$rtlil.cc:3093:Bwmux$1561 [252:242];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[263:253] <= 11'h000;
    else if (\$14 ) iFIFOMem[263:253] <= \$auto$rtlil.cc:3093:Bwmux$1561 [263:253];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[670:660] <= 11'h000;
    else if (\$14 ) iFIFOMem[670:660] <= \$auto$rtlil.cc:3093:Bwmux$1561 [670:660];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[274:264] <= 11'h000;
    else if (\$14 ) iFIFOMem[274:264] <= \$auto$rtlil.cc:3093:Bwmux$1561 [274:264];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[285:275] <= 11'h000;
    else if (\$14 ) iFIFOMem[285:275] <= \$auto$rtlil.cc:3093:Bwmux$1561 [285:275];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[296:286] <= 11'h000;
    else if (\$14 ) iFIFOMem[296:286] <= \$auto$rtlil.cc:3093:Bwmux$1561 [296:286];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[307:297] <= 11'h000;
    else if (\$14 ) iFIFOMem[307:297] <= \$auto$rtlil.cc:3093:Bwmux$1561 [307:297];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[318:308] <= 11'h000;
    else if (\$14 ) iFIFOMem[318:308] <= \$auto$rtlil.cc:3093:Bwmux$1561 [318:308];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[329:319] <= 11'h000;
    else if (\$14 ) iFIFOMem[329:319] <= \$auto$rtlil.cc:3093:Bwmux$1561 [329:319];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[340:330] <= 11'h000;
    else if (\$14 ) iFIFOMem[340:330] <= \$auto$rtlil.cc:3093:Bwmux$1561 [340:330];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[351:341] <= 11'h000;
    else if (\$14 ) iFIFOMem[351:341] <= \$auto$rtlil.cc:3093:Bwmux$1561 [351:341];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[362:352] <= 11'h000;
    else if (\$14 ) iFIFOMem[362:352] <= \$auto$rtlil.cc:3093:Bwmux$1561 [362:352];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[373:363] <= 11'h000;
    else if (\$14 ) iFIFOMem[373:363] <= \$auto$rtlil.cc:3093:Bwmux$1561 [373:363];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[681:671] <= 11'h000;
    else if (\$14 ) iFIFOMem[681:671] <= \$auto$rtlil.cc:3093:Bwmux$1561 [681:671];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[384:374] <= 11'h000;
    else if (\$14 ) iFIFOMem[384:374] <= \$auto$rtlil.cc:3093:Bwmux$1561 [384:374];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[395:385] <= 11'h000;
    else if (\$14 ) iFIFOMem[395:385] <= \$auto$rtlil.cc:3093:Bwmux$1561 [395:385];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[406:396] <= 11'h000;
    else if (\$14 ) iFIFOMem[406:396] <= \$auto$rtlil.cc:3093:Bwmux$1561 [406:396];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[417:407] <= 11'h000;
    else if (\$14 ) iFIFOMem[417:407] <= \$auto$rtlil.cc:3093:Bwmux$1561 [417:407];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[428:418] <= 11'h000;
    else if (\$14 ) iFIFOMem[428:418] <= \$auto$rtlil.cc:3093:Bwmux$1561 [428:418];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[439:429] <= 11'h000;
    else if (\$14 ) iFIFOMem[439:429] <= \$auto$rtlil.cc:3093:Bwmux$1561 [439:429];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[450:440] <= 11'h000;
    else if (\$14 ) iFIFOMem[450:440] <= \$auto$rtlil.cc:3093:Bwmux$1561 [450:440];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[461:451] <= 11'h000;
    else if (\$14 ) iFIFOMem[461:451] <= \$auto$rtlil.cc:3093:Bwmux$1561 [461:451];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[472:462] <= 11'h000;
    else if (\$14 ) iFIFOMem[472:462] <= \$auto$rtlil.cc:3093:Bwmux$1561 [472:462];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[483:473] <= 11'h000;
    else if (\$14 ) iFIFOMem[483:473] <= \$auto$rtlil.cc:3093:Bwmux$1561 [483:473];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[692:682] <= 11'h000;
    else if (\$14 ) iFIFOMem[692:682] <= \$auto$rtlil.cc:3093:Bwmux$1561 [692:682];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[494:484] <= 11'h000;
    else if (\$14 ) iFIFOMem[494:484] <= \$auto$rtlil.cc:3093:Bwmux$1561 [494:484];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[505:495] <= 11'h000;
    else if (\$14 ) iFIFOMem[505:495] <= \$auto$rtlil.cc:3093:Bwmux$1561 [505:495];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[516:506] <= 11'h000;
    else if (\$14 ) iFIFOMem[516:506] <= \$auto$rtlil.cc:3093:Bwmux$1561 [516:506];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[527:517] <= 11'h000;
    else if (\$14 ) iFIFOMem[527:517] <= \$auto$rtlil.cc:3093:Bwmux$1561 [527:517];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[538:528] <= 11'h000;
    else if (\$14 ) iFIFOMem[538:528] <= \$auto$rtlil.cc:3093:Bwmux$1561 [538:528];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[549:539] <= 11'h000;
    else if (\$14 ) iFIFOMem[549:539] <= \$auto$rtlil.cc:3093:Bwmux$1561 [549:539];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[560:550] <= 11'h000;
    else if (\$14 ) iFIFOMem[560:550] <= \$auto$rtlil.cc:3093:Bwmux$1561 [560:550];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[571:561] <= 11'h000;
    else if (\$14 ) iFIFOMem[571:561] <= \$auto$rtlil.cc:3093:Bwmux$1561 [571:561];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[582:572] <= 11'h000;
    else if (\$14 ) iFIFOMem[582:572] <= \$auto$rtlil.cc:3093:Bwmux$1561 [582:572];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[593:583] <= 11'h000;
    else if (\$14 ) iFIFOMem[593:583] <= \$auto$rtlil.cc:3093:Bwmux$1561 [593:583];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[703:693] <= 11'h000;
    else if (\$14 ) iFIFOMem[703:693] <= \$auto$rtlil.cc:3093:Bwmux$1561 [703:693];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18189  = | { CLEAR, \$14  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18192  = | { CLEAR, \$81 , \$68  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18195  = | { CLEAR, \$23  };
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17205  = ~ iWRAddr[5:0];
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17209  = ~ iRDAddr[5:0];
  assign \$auto$rtlil.cc:3092:Mux$18496 [5] = ~ \$81 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 11'h000;
    else Q <= \$auto$rtlil.cc:3092:Mux$1565 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:59.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) EMPTY <= 1'h1;
    else EMPTY <= \$32 ;
  assign \$iUSAGE$85  = CLEAR ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_fifo.sv:136.1-136.13|rtl/apb_uart/slib_fifo.sv:133.3-150.10" *) 6'h00 : \$auto$opt_share.cc:222:merge_operators$18494 ;
  assign \$iRDAddr$30  = CLEAR ? (* src = "rtl/apb_uart/slib_fifo.sv:82.11-87.10|rtl/apb_uart/slib_fifo.sv:81.1-87.10" *) 7'h00 : \$25 ;
  assign \$iWRAddr$29  = CLEAR ? (* src = "rtl/apb_uart/slib_fifo.sv:82.11-87.10|rtl/apb_uart/slib_fifo.sv:81.1-87.10" *) 7'h00 : \$16 ;
  assign \$auto$rtlil.cc:3092:Mux$18496 [4:0] = { \$auto$rtlil.cc:3092:Mux$18496 [5], \$auto$rtlil.cc:3092:Mux$18496 [5], \$auto$rtlil.cc:3092:Mux$18496 [5], \$auto$rtlil.cc:3092:Mux$18496 [5], 1'h1 };
  assign { \$auto$rtlil.cc:3114:Demux$1560 [702:693], \$auto$rtlil.cc:3114:Demux$1560 [691:682], \$auto$rtlil.cc:3114:Demux$1560 [680:671], \$auto$rtlil.cc:3114:Demux$1560 [669:660], \$auto$rtlil.cc:3114:Demux$1560 [658:649], \$auto$rtlil.cc:3114:Demux$1560 [647:638], \$auto$rtlil.cc:3114:Demux$1560 [636:627], \$auto$rtlil.cc:3114:Demux$1560 [625:616], \$auto$rtlil.cc:3114:Demux$1560 [614:605], \$auto$rtlil.cc:3114:Demux$1560 [603:594], \$auto$rtlil.cc:3114:Demux$1560 [592:583], \$auto$rtlil.cc:3114:Demux$1560 [581:572], \$auto$rtlil.cc:3114:Demux$1560 [570:561], \$auto$rtlil.cc:3114:Demux$1560 [559:550], \$auto$rtlil.cc:3114:Demux$1560 [548:539], \$auto$rtlil.cc:3114:Demux$1560 [537:528], \$auto$rtlil.cc:3114:Demux$1560 [526:517], \$auto$rtlil.cc:3114:Demux$1560 [515:506], \$auto$rtlil.cc:3114:Demux$1560 [504:495], \$auto$rtlil.cc:3114:Demux$1560 [493:484], \$auto$rtlil.cc:3114:Demux$1560 [482:473], \$auto$rtlil.cc:3114:Demux$1560 [471:462], \$auto$rtlil.cc:3114:Demux$1560 [460:451], \$auto$rtlil.cc:3114:Demux$1560 [449:440], \$auto$rtlil.cc:3114:Demux$1560 [438:429], \$auto$rtlil.cc:3114:Demux$1560 [427:418], \$auto$rtlil.cc:3114:Demux$1560 [416:407], \$auto$rtlil.cc:3114:Demux$1560 [405:396], \$auto$rtlil.cc:3114:Demux$1560 [394:385], \$auto$rtlil.cc:3114:Demux$1560 [383:374], \$auto$rtlil.cc:3114:Demux$1560 [372:363], \$auto$rtlil.cc:3114:Demux$1560 [361:352], \$auto$rtlil.cc:3114:Demux$1560 [350:341], \$auto$rtlil.cc:3114:Demux$1560 [339:330], \$auto$rtlil.cc:3114:Demux$1560 [328:319], \$auto$rtlil.cc:3114:Demux$1560 [317:308], \$auto$rtlil.cc:3114:Demux$1560 [306:297], \$auto$rtlil.cc:3114:Demux$1560 [295:286], \$auto$rtlil.cc:3114:Demux$1560 [284:275], \$auto$rtlil.cc:3114:Demux$1560 [273:264], \$auto$rtlil.cc:3114:Demux$1560 [262:253], \$auto$rtlil.cc:3114:Demux$1560 [251:242], \$auto$rtlil.cc:3114:Demux$1560 [240:231], \$auto$rtlil.cc:3114:Demux$1560 [229:220], \$auto$rtlil.cc:3114:Demux$1560 [218:209], \$auto$rtlil.cc:3114:Demux$1560 [207:198], \$auto$rtlil.cc:3114:Demux$1560 [196:187], \$auto$rtlil.cc:3114:Demux$1560 [185:176], \$auto$rtlil.cc:3114:Demux$1560 [174:165], \$auto$rtlil.cc:3114:Demux$1560 [163:154], \$auto$rtlil.cc:3114:Demux$1560 [152:143], \$auto$rtlil.cc:3114:Demux$1560 [141:132], \$auto$rtlil.cc:3114:Demux$1560 [130:121], \$auto$rtlil.cc:3114:Demux$1560 [119:110], \$auto$rtlil.cc:3114:Demux$1560 [108:99], \$auto$rtlil.cc:3114:Demux$1560 [97:88], \$auto$rtlil.cc:3114:Demux$1560 [86:77], \$auto$rtlil.cc:3114:Demux$1560 [75:66], \$auto$rtlil.cc:3114:Demux$1560 [64:55], \$auto$rtlil.cc:3114:Demux$1560 [53:44], \$auto$rtlil.cc:3114:Demux$1560 [42:33], \$auto$rtlil.cc:3114:Demux$1560 [31:22], \$auto$rtlil.cc:3114:Demux$1560 [20:11], \$auto$rtlil.cc:3114:Demux$1560 [9:0] } = { \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10] };
  assign \$auto$rtlil.cc:3092:Mux$1565  = \$auto$bmuxmap.cc:84:execute$19149 ;
endmodule

(* src = "rtl/apb_uart/slib_fifo.sv:35.8" *)
module \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TXFF (CLK, D, FULL, Q, RST, CLEAR, WRITE, READ, EMPTY, USAGE);
  wire \$1 ;
  wire \$12 ;
  wire \$14 ;
  wire [6:0] \$16 ;
  wire \$21 ;
  wire \$23 ;
  (* unused_bits = "7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] \$25 ;
  wire \$3 ;
  wire \$32 ;
  wire \$60 ;
  wire \$64 ;
  wire \$68 ;
  wire \$73 ;
  wire \$77 ;
  wire \$81 ;
  wire [255:0] \$auto$bmuxmap.cc:84:execute$19151 ;
  wire [127:0] \$auto$bmuxmap.cc:84:execute$19184 ;
  wire [63:0] \$auto$bmuxmap.cc:84:execute$19201 ;
  wire [31:0] \$auto$bmuxmap.cc:84:execute$19210 ;
  wire [15:0] \$auto$bmuxmap.cc:84:execute$19215 ;
  wire [7:0] \$auto$bmuxmap.cc:84:execute$19218 ;
  wire \$auto$demuxmap.cc:63:execute$19536 ;
  wire \$auto$demuxmap.cc:63:execute$19539 ;
  wire \$auto$demuxmap.cc:63:execute$19542 ;
  wire \$auto$demuxmap.cc:63:execute$19545 ;
  wire \$auto$demuxmap.cc:63:execute$19548 ;
  wire \$auto$demuxmap.cc:63:execute$19551 ;
  wire \$auto$demuxmap.cc:63:execute$19554 ;
  wire \$auto$demuxmap.cc:63:execute$19557 ;
  wire \$auto$demuxmap.cc:63:execute$19560 ;
  wire \$auto$demuxmap.cc:63:execute$19563 ;
  wire \$auto$demuxmap.cc:63:execute$19566 ;
  wire \$auto$demuxmap.cc:63:execute$19569 ;
  wire \$auto$demuxmap.cc:63:execute$19572 ;
  wire \$auto$demuxmap.cc:63:execute$19575 ;
  wire \$auto$demuxmap.cc:63:execute$19578 ;
  wire \$auto$demuxmap.cc:63:execute$19581 ;
  wire \$auto$demuxmap.cc:63:execute$19584 ;
  wire \$auto$demuxmap.cc:63:execute$19587 ;
  wire \$auto$demuxmap.cc:63:execute$19590 ;
  wire \$auto$demuxmap.cc:63:execute$19593 ;
  wire \$auto$demuxmap.cc:63:execute$19596 ;
  wire \$auto$demuxmap.cc:63:execute$19599 ;
  wire \$auto$demuxmap.cc:63:execute$19602 ;
  wire \$auto$demuxmap.cc:63:execute$19605 ;
  wire \$auto$demuxmap.cc:63:execute$19608 ;
  wire \$auto$demuxmap.cc:63:execute$19611 ;
  wire \$auto$demuxmap.cc:63:execute$19614 ;
  wire \$auto$demuxmap.cc:63:execute$19617 ;
  wire \$auto$demuxmap.cc:63:execute$19620 ;
  wire \$auto$demuxmap.cc:63:execute$19623 ;
  wire \$auto$demuxmap.cc:63:execute$19626 ;
  wire \$auto$demuxmap.cc:63:execute$19629 ;
  wire \$auto$demuxmap.cc:63:execute$19632 ;
  wire \$auto$demuxmap.cc:63:execute$19635 ;
  wire \$auto$demuxmap.cc:63:execute$19638 ;
  wire \$auto$demuxmap.cc:63:execute$19641 ;
  wire \$auto$demuxmap.cc:63:execute$19644 ;
  wire \$auto$demuxmap.cc:63:execute$19647 ;
  wire \$auto$demuxmap.cc:63:execute$19650 ;
  wire \$auto$demuxmap.cc:63:execute$19653 ;
  wire \$auto$demuxmap.cc:63:execute$19656 ;
  wire \$auto$demuxmap.cc:63:execute$19659 ;
  wire \$auto$demuxmap.cc:63:execute$19662 ;
  wire \$auto$demuxmap.cc:63:execute$19665 ;
  wire \$auto$demuxmap.cc:63:execute$19668 ;
  wire \$auto$demuxmap.cc:63:execute$19671 ;
  wire \$auto$demuxmap.cc:63:execute$19674 ;
  wire \$auto$demuxmap.cc:63:execute$19677 ;
  wire \$auto$demuxmap.cc:63:execute$19680 ;
  wire \$auto$demuxmap.cc:63:execute$19683 ;
  wire \$auto$demuxmap.cc:63:execute$19686 ;
  wire \$auto$demuxmap.cc:63:execute$19689 ;
  wire \$auto$demuxmap.cc:63:execute$19692 ;
  wire \$auto$demuxmap.cc:63:execute$19695 ;
  wire \$auto$demuxmap.cc:63:execute$19698 ;
  wire \$auto$demuxmap.cc:63:execute$19701 ;
  wire \$auto$demuxmap.cc:63:execute$19704 ;
  wire \$auto$demuxmap.cc:63:execute$19707 ;
  wire \$auto$demuxmap.cc:63:execute$19710 ;
  wire \$auto$demuxmap.cc:63:execute$19713 ;
  wire \$auto$demuxmap.cc:63:execute$19716 ;
  wire \$auto$demuxmap.cc:63:execute$19719 ;
  wire \$auto$demuxmap.cc:63:execute$19722 ;
  wire \$auto$demuxmap.cc:63:execute$19725 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18262 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18265 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18268 ;
  wire [5:0] \$auto$opt_expr.cc:205:group_cell_inputs$17213 ;
  wire [5:0] \$auto$opt_expr.cc:205:group_cell_inputs$17217 ;
  wire [5:0] \$auto$opt_share.cc:222:merge_operators$18499 ;
  wire \$auto$rtlil.cc:3015:Ge$1540 ;
  wire [7:0] \$auto$rtlil.cc:3092:Mux$1549 ;
  wire [5:0] \$auto$rtlil.cc:3092:Mux$18501 ;
  wire [511:0] \$auto$rtlil.cc:3093:Bwmux$1545 ;
  wire [511:0] \$auto$rtlil.cc:3114:Demux$1544 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:81.1-87.10" *)
  wire [6:0] \$iRDAddr$30 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:133.3-150.10" *)
  wire [5:0] \$iUSAGE$85 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:81.1-87.10" *)
  wire [6:0] \$iWRAddr$29 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:38.14" *)
  input CLEAR;
  wire CLEAR;
  (* src = "rtl/apb_uart/slib_fifo.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_fifo.sv:41.28" *)
  input [7:0] D;
  wire [7:0] D;
  (* src = "rtl/apb_uart/slib_fifo.sv:43.16" *)
  output EMPTY;
  reg EMPTY;
  (* src = "rtl/apb_uart/slib_fifo.sv:44.16" *)
  output FULL;
  wire FULL;
  (* src = "rtl/apb_uart/slib_fifo.sv:42.30" *)
  output [7:0] Q;
  reg [7:0] Q;
  (* src = "rtl/apb_uart/slib_fifo.sv:40.14" *)
  input READ;
  wire READ;
  (* src = "rtl/apb_uart/slib_fifo.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_fifo.sv:45.31" *)
  output [5:0] USAGE;
  reg [5:0] USAGE;
  (* src = "rtl/apb_uart/slib_fifo.sv:39.14" *)
  input WRITE;
  wire WRITE;
  (* src = "rtl/apb_uart/slib_fifo.sv:55.17" *)
  reg [511:0] iFIFOMem;
  (* src = "rtl/apb_uart/slib_fifo.sv:52.16" *)
  reg [6:0] iRDAddr;
  (* src = "rtl/apb_uart/slib_fifo.sv:51.16" *)
  reg [6:0] iWRAddr;
  assign \$1  = iRDAddr[5:0] == iWRAddr[5:0];
  assign \$12  = ~ FULL;
  assign \$14  = WRITE && \$12 ;
  assign \$16  = iWRAddr + 1'h1;
  assign \$3  = iRDAddr[6] != iWRAddr[6];
  assign \$21  = ~ EMPTY;
  assign \$23  = READ && \$21 ;
  assign \$25 [6:0] = iRDAddr + 1'h1;
  assign \$32  = iRDAddr == iWRAddr;
  assign FULL = \$1  && \$3 ;
  assign \$auto$rtlil.cc:3015:Ge$1540  = $signed({ 1'h1, \$auto$opt_expr.cc:205:group_cell_inputs$17213  }) >= $signed(7'h40);
  \$bwmux  #(
    .WIDTH(32'd512)
  ) \$48  (
    .A(iFIFOMem),
    .B({ D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D }),
    .S({ \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7] }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$1545 )
  );
  assign \$60  = ~ READ;
  assign \$64  = \$60  && WRITE;
  assign \$68  = \$64  && \$12 ;
  assign \$73  = ~ WRITE;
  assign \$77  = \$73  && READ;
  assign \$81  = \$77  && \$21 ;
  assign \$auto$opt_share.cc:222:merge_operators$18499  = USAGE - { \$auto$rtlil.cc:3092:Mux$18501 [5], \$auto$rtlil.cc:3092:Mux$18501 [5], \$auto$rtlil.cc:3092:Mux$18501 [5], \$auto$rtlil.cc:3092:Mux$18501 [5], \$auto$rtlil.cc:3092:Mux$18501 [5], 1'h1 };
  assign \$auto$bmuxmap.cc:84:execute$19151 [7:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[15:8] : iFIFOMem[7:0];
  assign \$auto$bmuxmap.cc:84:execute$19151 [15:8] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[31:24] : iFIFOMem[23:16];
  assign \$auto$bmuxmap.cc:84:execute$19151 [23:16] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[47:40] : iFIFOMem[39:32];
  assign \$auto$bmuxmap.cc:84:execute$19151 [31:24] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[63:56] : iFIFOMem[55:48];
  assign \$auto$bmuxmap.cc:84:execute$19151 [39:32] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[79:72] : iFIFOMem[71:64];
  assign \$auto$bmuxmap.cc:84:execute$19151 [47:40] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[95:88] : iFIFOMem[87:80];
  assign \$auto$bmuxmap.cc:84:execute$19151 [55:48] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[111:104] : iFIFOMem[103:96];
  assign \$auto$bmuxmap.cc:84:execute$19151 [63:56] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[127:120] : iFIFOMem[119:112];
  assign \$auto$bmuxmap.cc:84:execute$19151 [71:64] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[143:136] : iFIFOMem[135:128];
  assign \$auto$bmuxmap.cc:84:execute$19151 [79:72] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[159:152] : iFIFOMem[151:144];
  assign \$auto$bmuxmap.cc:84:execute$19151 [87:80] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[175:168] : iFIFOMem[167:160];
  assign \$auto$bmuxmap.cc:84:execute$19151 [95:88] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[191:184] : iFIFOMem[183:176];
  assign \$auto$bmuxmap.cc:84:execute$19151 [103:96] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[207:200] : iFIFOMem[199:192];
  assign \$auto$bmuxmap.cc:84:execute$19151 [111:104] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[223:216] : iFIFOMem[215:208];
  assign \$auto$bmuxmap.cc:84:execute$19151 [119:112] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[239:232] : iFIFOMem[231:224];
  assign \$auto$bmuxmap.cc:84:execute$19151 [127:120] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[255:248] : iFIFOMem[247:240];
  assign \$auto$bmuxmap.cc:84:execute$19151 [135:128] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[271:264] : iFIFOMem[263:256];
  assign \$auto$bmuxmap.cc:84:execute$19151 [143:136] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[287:280] : iFIFOMem[279:272];
  assign \$auto$bmuxmap.cc:84:execute$19151 [151:144] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[303:296] : iFIFOMem[295:288];
  assign \$auto$bmuxmap.cc:84:execute$19151 [159:152] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[319:312] : iFIFOMem[311:304];
  assign \$auto$bmuxmap.cc:84:execute$19151 [167:160] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[335:328] : iFIFOMem[327:320];
  assign \$auto$bmuxmap.cc:84:execute$19151 [175:168] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[351:344] : iFIFOMem[343:336];
  assign \$auto$bmuxmap.cc:84:execute$19151 [183:176] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[367:360] : iFIFOMem[359:352];
  assign \$auto$bmuxmap.cc:84:execute$19151 [191:184] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[383:376] : iFIFOMem[375:368];
  assign \$auto$bmuxmap.cc:84:execute$19151 [199:192] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[399:392] : iFIFOMem[391:384];
  assign \$auto$bmuxmap.cc:84:execute$19151 [207:200] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[415:408] : iFIFOMem[407:400];
  assign \$auto$bmuxmap.cc:84:execute$19151 [215:208] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[431:424] : iFIFOMem[423:416];
  assign \$auto$bmuxmap.cc:84:execute$19151 [223:216] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[447:440] : iFIFOMem[439:432];
  assign \$auto$bmuxmap.cc:84:execute$19151 [231:224] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[463:456] : iFIFOMem[455:448];
  assign \$auto$bmuxmap.cc:84:execute$19151 [239:232] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[479:472] : iFIFOMem[471:464];
  assign \$auto$bmuxmap.cc:84:execute$19151 [247:240] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[495:488] : iFIFOMem[487:480];
  assign \$auto$bmuxmap.cc:84:execute$19151 [255:248] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [0] ? iFIFOMem[511:504] : iFIFOMem[503:496];
  assign \$auto$bmuxmap.cc:84:execute$19184 [7:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [1] ? \$auto$bmuxmap.cc:84:execute$19151 [15:8] : \$auto$bmuxmap.cc:84:execute$19151 [7:0];
  assign \$auto$bmuxmap.cc:84:execute$19184 [15:8] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [1] ? \$auto$bmuxmap.cc:84:execute$19151 [31:24] : \$auto$bmuxmap.cc:84:execute$19151 [23:16];
  assign \$auto$bmuxmap.cc:84:execute$19184 [23:16] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [1] ? \$auto$bmuxmap.cc:84:execute$19151 [47:40] : \$auto$bmuxmap.cc:84:execute$19151 [39:32];
  assign \$auto$bmuxmap.cc:84:execute$19184 [31:24] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [1] ? \$auto$bmuxmap.cc:84:execute$19151 [63:56] : \$auto$bmuxmap.cc:84:execute$19151 [55:48];
  assign \$auto$bmuxmap.cc:84:execute$19184 [39:32] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [1] ? \$auto$bmuxmap.cc:84:execute$19151 [79:72] : \$auto$bmuxmap.cc:84:execute$19151 [71:64];
  assign \$auto$bmuxmap.cc:84:execute$19184 [47:40] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [1] ? \$auto$bmuxmap.cc:84:execute$19151 [95:88] : \$auto$bmuxmap.cc:84:execute$19151 [87:80];
  assign \$auto$bmuxmap.cc:84:execute$19184 [55:48] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [1] ? \$auto$bmuxmap.cc:84:execute$19151 [111:104] : \$auto$bmuxmap.cc:84:execute$19151 [103:96];
  assign \$auto$bmuxmap.cc:84:execute$19184 [63:56] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [1] ? \$auto$bmuxmap.cc:84:execute$19151 [127:120] : \$auto$bmuxmap.cc:84:execute$19151 [119:112];
  assign \$auto$bmuxmap.cc:84:execute$19184 [71:64] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [1] ? \$auto$bmuxmap.cc:84:execute$19151 [143:136] : \$auto$bmuxmap.cc:84:execute$19151 [135:128];
  assign \$auto$bmuxmap.cc:84:execute$19184 [79:72] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [1] ? \$auto$bmuxmap.cc:84:execute$19151 [159:152] : \$auto$bmuxmap.cc:84:execute$19151 [151:144];
  assign \$auto$bmuxmap.cc:84:execute$19184 [87:80] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [1] ? \$auto$bmuxmap.cc:84:execute$19151 [175:168] : \$auto$bmuxmap.cc:84:execute$19151 [167:160];
  assign \$auto$bmuxmap.cc:84:execute$19184 [95:88] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [1] ? \$auto$bmuxmap.cc:84:execute$19151 [191:184] : \$auto$bmuxmap.cc:84:execute$19151 [183:176];
  assign \$auto$bmuxmap.cc:84:execute$19184 [103:96] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [1] ? \$auto$bmuxmap.cc:84:execute$19151 [207:200] : \$auto$bmuxmap.cc:84:execute$19151 [199:192];
  assign \$auto$bmuxmap.cc:84:execute$19184 [111:104] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [1] ? \$auto$bmuxmap.cc:84:execute$19151 [223:216] : \$auto$bmuxmap.cc:84:execute$19151 [215:208];
  assign \$auto$bmuxmap.cc:84:execute$19184 [119:112] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [1] ? \$auto$bmuxmap.cc:84:execute$19151 [239:232] : \$auto$bmuxmap.cc:84:execute$19151 [231:224];
  assign \$auto$bmuxmap.cc:84:execute$19184 [127:120] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [1] ? \$auto$bmuxmap.cc:84:execute$19151 [255:248] : \$auto$bmuxmap.cc:84:execute$19151 [247:240];
  assign \$auto$bmuxmap.cc:84:execute$19201 [7:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [2] ? \$auto$bmuxmap.cc:84:execute$19184 [15:8] : \$auto$bmuxmap.cc:84:execute$19184 [7:0];
  assign \$auto$bmuxmap.cc:84:execute$19201 [15:8] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [2] ? \$auto$bmuxmap.cc:84:execute$19184 [31:24] : \$auto$bmuxmap.cc:84:execute$19184 [23:16];
  assign \$auto$bmuxmap.cc:84:execute$19201 [23:16] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [2] ? \$auto$bmuxmap.cc:84:execute$19184 [47:40] : \$auto$bmuxmap.cc:84:execute$19184 [39:32];
  assign \$auto$bmuxmap.cc:84:execute$19201 [31:24] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [2] ? \$auto$bmuxmap.cc:84:execute$19184 [63:56] : \$auto$bmuxmap.cc:84:execute$19184 [55:48];
  assign \$auto$bmuxmap.cc:84:execute$19201 [39:32] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [2] ? \$auto$bmuxmap.cc:84:execute$19184 [79:72] : \$auto$bmuxmap.cc:84:execute$19184 [71:64];
  assign \$auto$bmuxmap.cc:84:execute$19201 [47:40] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [2] ? \$auto$bmuxmap.cc:84:execute$19184 [95:88] : \$auto$bmuxmap.cc:84:execute$19184 [87:80];
  assign \$auto$bmuxmap.cc:84:execute$19201 [55:48] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [2] ? \$auto$bmuxmap.cc:84:execute$19184 [111:104] : \$auto$bmuxmap.cc:84:execute$19184 [103:96];
  assign \$auto$bmuxmap.cc:84:execute$19201 [63:56] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [2] ? \$auto$bmuxmap.cc:84:execute$19184 [127:120] : \$auto$bmuxmap.cc:84:execute$19184 [119:112];
  assign \$auto$bmuxmap.cc:84:execute$19210 [7:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [3] ? \$auto$bmuxmap.cc:84:execute$19201 [15:8] : \$auto$bmuxmap.cc:84:execute$19201 [7:0];
  assign \$auto$bmuxmap.cc:84:execute$19210 [15:8] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [3] ? \$auto$bmuxmap.cc:84:execute$19201 [31:24] : \$auto$bmuxmap.cc:84:execute$19201 [23:16];
  assign \$auto$bmuxmap.cc:84:execute$19210 [23:16] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [3] ? \$auto$bmuxmap.cc:84:execute$19201 [47:40] : \$auto$bmuxmap.cc:84:execute$19201 [39:32];
  assign \$auto$bmuxmap.cc:84:execute$19210 [31:24] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [3] ? \$auto$bmuxmap.cc:84:execute$19201 [63:56] : \$auto$bmuxmap.cc:84:execute$19201 [55:48];
  assign \$auto$bmuxmap.cc:84:execute$19215 [7:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [4] ? \$auto$bmuxmap.cc:84:execute$19210 [15:8] : \$auto$bmuxmap.cc:84:execute$19210 [7:0];
  assign \$auto$bmuxmap.cc:84:execute$19215 [15:8] = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [4] ? \$auto$bmuxmap.cc:84:execute$19210 [31:24] : \$auto$bmuxmap.cc:84:execute$19210 [23:16];
  assign \$auto$bmuxmap.cc:84:execute$19218  = \$auto$opt_expr.cc:205:group_cell_inputs$17217 [5] ? \$auto$bmuxmap.cc:84:execute$19215 [15:8] : \$auto$bmuxmap.cc:84:execute$19215 [7:0];
  assign \$auto$demuxmap.cc:63:execute$19536  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h00;
  assign \$auto$demuxmap.cc:63:execute$19539  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h01;
  assign \$auto$demuxmap.cc:63:execute$19542  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h02;
  assign \$auto$demuxmap.cc:63:execute$19545  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h03;
  assign \$auto$demuxmap.cc:63:execute$19548  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h04;
  assign \$auto$demuxmap.cc:63:execute$19551  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h05;
  assign \$auto$demuxmap.cc:63:execute$19554  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h06;
  assign \$auto$demuxmap.cc:63:execute$19557  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h07;
  assign \$auto$demuxmap.cc:63:execute$19560  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h08;
  assign \$auto$demuxmap.cc:63:execute$19563  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h09;
  assign \$auto$demuxmap.cc:63:execute$19566  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h0a;
  assign \$auto$demuxmap.cc:63:execute$19569  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h0b;
  assign \$auto$demuxmap.cc:63:execute$19572  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h0c;
  assign \$auto$demuxmap.cc:63:execute$19575  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h0d;
  assign \$auto$demuxmap.cc:63:execute$19578  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h0e;
  assign \$auto$demuxmap.cc:63:execute$19581  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h0f;
  assign \$auto$demuxmap.cc:63:execute$19584  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h10;
  assign \$auto$demuxmap.cc:63:execute$19587  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h11;
  assign \$auto$demuxmap.cc:63:execute$19590  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h12;
  assign \$auto$demuxmap.cc:63:execute$19593  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h13;
  assign \$auto$demuxmap.cc:63:execute$19596  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h14;
  assign \$auto$demuxmap.cc:63:execute$19599  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h15;
  assign \$auto$demuxmap.cc:63:execute$19602  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h16;
  assign \$auto$demuxmap.cc:63:execute$19605  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h17;
  assign \$auto$demuxmap.cc:63:execute$19608  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h18;
  assign \$auto$demuxmap.cc:63:execute$19611  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h19;
  assign \$auto$demuxmap.cc:63:execute$19614  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h1a;
  assign \$auto$demuxmap.cc:63:execute$19617  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h1b;
  assign \$auto$demuxmap.cc:63:execute$19620  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h1c;
  assign \$auto$demuxmap.cc:63:execute$19623  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h1d;
  assign \$auto$demuxmap.cc:63:execute$19626  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h1e;
  assign \$auto$demuxmap.cc:63:execute$19629  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h1f;
  assign \$auto$demuxmap.cc:63:execute$19632  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h20;
  assign \$auto$demuxmap.cc:63:execute$19635  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h21;
  assign \$auto$demuxmap.cc:63:execute$19638  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h22;
  assign \$auto$demuxmap.cc:63:execute$19641  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h23;
  assign \$auto$demuxmap.cc:63:execute$19644  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h24;
  assign \$auto$demuxmap.cc:63:execute$19647  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h25;
  assign \$auto$demuxmap.cc:63:execute$19650  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h26;
  assign \$auto$demuxmap.cc:63:execute$19653  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h27;
  assign \$auto$demuxmap.cc:63:execute$19656  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h28;
  assign \$auto$demuxmap.cc:63:execute$19659  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h29;
  assign \$auto$demuxmap.cc:63:execute$19662  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h2a;
  assign \$auto$demuxmap.cc:63:execute$19665  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h2b;
  assign \$auto$demuxmap.cc:63:execute$19668  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h2c;
  assign \$auto$demuxmap.cc:63:execute$19671  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h2d;
  assign \$auto$demuxmap.cc:63:execute$19674  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h2e;
  assign \$auto$demuxmap.cc:63:execute$19677  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h2f;
  assign \$auto$demuxmap.cc:63:execute$19680  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h30;
  assign \$auto$demuxmap.cc:63:execute$19683  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h31;
  assign \$auto$demuxmap.cc:63:execute$19686  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h32;
  assign \$auto$demuxmap.cc:63:execute$19689  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h33;
  assign \$auto$demuxmap.cc:63:execute$19692  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h34;
  assign \$auto$demuxmap.cc:63:execute$19695  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h35;
  assign \$auto$demuxmap.cc:63:execute$19698  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h36;
  assign \$auto$demuxmap.cc:63:execute$19701  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h37;
  assign \$auto$demuxmap.cc:63:execute$19704  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h38;
  assign \$auto$demuxmap.cc:63:execute$19707  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h39;
  assign \$auto$demuxmap.cc:63:execute$19710  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h3a;
  assign \$auto$demuxmap.cc:63:execute$19713  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h3b;
  assign \$auto$demuxmap.cc:63:execute$19716  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h3c;
  assign \$auto$demuxmap.cc:63:execute$19719  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h3d;
  assign \$auto$demuxmap.cc:63:execute$19722  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h3e;
  assign \$auto$demuxmap.cc:63:execute$19725  = \$auto$opt_expr.cc:205:group_cell_inputs$17213  == 6'h3f;
  assign \$auto$rtlil.cc:3114:Demux$1544 [7] = \$auto$demuxmap.cc:63:execute$19536  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [15] = \$auto$demuxmap.cc:63:execute$19539  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [23] = \$auto$demuxmap.cc:63:execute$19542  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [31] = \$auto$demuxmap.cc:63:execute$19545  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [39] = \$auto$demuxmap.cc:63:execute$19548  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [47] = \$auto$demuxmap.cc:63:execute$19551  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [55] = \$auto$demuxmap.cc:63:execute$19554  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [63] = \$auto$demuxmap.cc:63:execute$19557  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [71] = \$auto$demuxmap.cc:63:execute$19560  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [79] = \$auto$demuxmap.cc:63:execute$19563  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [87] = \$auto$demuxmap.cc:63:execute$19566  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [95] = \$auto$demuxmap.cc:63:execute$19569  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [103] = \$auto$demuxmap.cc:63:execute$19572  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [111] = \$auto$demuxmap.cc:63:execute$19575  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [119] = \$auto$demuxmap.cc:63:execute$19578  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [127] = \$auto$demuxmap.cc:63:execute$19581  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [135] = \$auto$demuxmap.cc:63:execute$19584  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [143] = \$auto$demuxmap.cc:63:execute$19587  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [151] = \$auto$demuxmap.cc:63:execute$19590  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [159] = \$auto$demuxmap.cc:63:execute$19593  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [167] = \$auto$demuxmap.cc:63:execute$19596  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [175] = \$auto$demuxmap.cc:63:execute$19599  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [183] = \$auto$demuxmap.cc:63:execute$19602  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [191] = \$auto$demuxmap.cc:63:execute$19605  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [199] = \$auto$demuxmap.cc:63:execute$19608  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [207] = \$auto$demuxmap.cc:63:execute$19611  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [215] = \$auto$demuxmap.cc:63:execute$19614  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [223] = \$auto$demuxmap.cc:63:execute$19617  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [231] = \$auto$demuxmap.cc:63:execute$19620  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [239] = \$auto$demuxmap.cc:63:execute$19623  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [247] = \$auto$demuxmap.cc:63:execute$19626  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [255] = \$auto$demuxmap.cc:63:execute$19629  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [263] = \$auto$demuxmap.cc:63:execute$19632  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [271] = \$auto$demuxmap.cc:63:execute$19635  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [279] = \$auto$demuxmap.cc:63:execute$19638  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [287] = \$auto$demuxmap.cc:63:execute$19641  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [295] = \$auto$demuxmap.cc:63:execute$19644  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [303] = \$auto$demuxmap.cc:63:execute$19647  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [311] = \$auto$demuxmap.cc:63:execute$19650  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [319] = \$auto$demuxmap.cc:63:execute$19653  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [327] = \$auto$demuxmap.cc:63:execute$19656  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [335] = \$auto$demuxmap.cc:63:execute$19659  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [343] = \$auto$demuxmap.cc:63:execute$19662  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [351] = \$auto$demuxmap.cc:63:execute$19665  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [359] = \$auto$demuxmap.cc:63:execute$19668  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [367] = \$auto$demuxmap.cc:63:execute$19671  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [375] = \$auto$demuxmap.cc:63:execute$19674  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [383] = \$auto$demuxmap.cc:63:execute$19677  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [391] = \$auto$demuxmap.cc:63:execute$19680  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [399] = \$auto$demuxmap.cc:63:execute$19683  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [407] = \$auto$demuxmap.cc:63:execute$19686  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [415] = \$auto$demuxmap.cc:63:execute$19689  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [423] = \$auto$demuxmap.cc:63:execute$19692  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [431] = \$auto$demuxmap.cc:63:execute$19695  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [439] = \$auto$demuxmap.cc:63:execute$19698  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [447] = \$auto$demuxmap.cc:63:execute$19701  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [455] = \$auto$demuxmap.cc:63:execute$19704  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [463] = \$auto$demuxmap.cc:63:execute$19707  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [471] = \$auto$demuxmap.cc:63:execute$19710  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [479] = \$auto$demuxmap.cc:63:execute$19713  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [487] = \$auto$demuxmap.cc:63:execute$19716  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [495] = \$auto$demuxmap.cc:63:execute$19719  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [503] = \$auto$demuxmap.cc:63:execute$19722  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1544 [511] = \$auto$demuxmap.cc:63:execute$19725  ? \$auto$rtlil.cc:3015:Ge$1540  : 1'h0;
  (* src = "rtl/apb_uart/slib_fifo.sv:59.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iWRAddr <= 7'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18262 ) iWRAddr <= \$iWRAddr$29 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:124.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) USAGE <= 6'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18265 ) USAGE <= \$iUSAGE$85 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:59.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iRDAddr <= 7'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18268 ) iRDAddr <= \$iRDAddr$30 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[439:432] <= 8'h00;
    else if (\$14 ) iFIFOMem[439:432] <= \$auto$rtlil.cc:3093:Bwmux$1545 [439:432];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[447:440] <= 8'h00;
    else if (\$14 ) iFIFOMem[447:440] <= \$auto$rtlil.cc:3093:Bwmux$1545 [447:440];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[455:448] <= 8'h00;
    else if (\$14 ) iFIFOMem[455:448] <= \$auto$rtlil.cc:3093:Bwmux$1545 [455:448];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[463:456] <= 8'h00;
    else if (\$14 ) iFIFOMem[463:456] <= \$auto$rtlil.cc:3093:Bwmux$1545 [463:456];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[7:0] <= 8'h00;
    else if (\$14 ) iFIFOMem[7:0] <= \$auto$rtlil.cc:3093:Bwmux$1545 [7:0];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[15:8] <= 8'h00;
    else if (\$14 ) iFIFOMem[15:8] <= \$auto$rtlil.cc:3093:Bwmux$1545 [15:8];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[23:16] <= 8'h00;
    else if (\$14 ) iFIFOMem[23:16] <= \$auto$rtlil.cc:3093:Bwmux$1545 [23:16];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[31:24] <= 8'h00;
    else if (\$14 ) iFIFOMem[31:24] <= \$auto$rtlil.cc:3093:Bwmux$1545 [31:24];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[471:464] <= 8'h00;
    else if (\$14 ) iFIFOMem[471:464] <= \$auto$rtlil.cc:3093:Bwmux$1545 [471:464];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[39:32] <= 8'h00;
    else if (\$14 ) iFIFOMem[39:32] <= \$auto$rtlil.cc:3093:Bwmux$1545 [39:32];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[47:40] <= 8'h00;
    else if (\$14 ) iFIFOMem[47:40] <= \$auto$rtlil.cc:3093:Bwmux$1545 [47:40];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[55:48] <= 8'h00;
    else if (\$14 ) iFIFOMem[55:48] <= \$auto$rtlil.cc:3093:Bwmux$1545 [55:48];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[63:56] <= 8'h00;
    else if (\$14 ) iFIFOMem[63:56] <= \$auto$rtlil.cc:3093:Bwmux$1545 [63:56];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[71:64] <= 8'h00;
    else if (\$14 ) iFIFOMem[71:64] <= \$auto$rtlil.cc:3093:Bwmux$1545 [71:64];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[79:72] <= 8'h00;
    else if (\$14 ) iFIFOMem[79:72] <= \$auto$rtlil.cc:3093:Bwmux$1545 [79:72];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[87:80] <= 8'h00;
    else if (\$14 ) iFIFOMem[87:80] <= \$auto$rtlil.cc:3093:Bwmux$1545 [87:80];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[95:88] <= 8'h00;
    else if (\$14 ) iFIFOMem[95:88] <= \$auto$rtlil.cc:3093:Bwmux$1545 [95:88];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[103:96] <= 8'h00;
    else if (\$14 ) iFIFOMem[103:96] <= \$auto$rtlil.cc:3093:Bwmux$1545 [103:96];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[111:104] <= 8'h00;
    else if (\$14 ) iFIFOMem[111:104] <= \$auto$rtlil.cc:3093:Bwmux$1545 [111:104];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[479:472] <= 8'h00;
    else if (\$14 ) iFIFOMem[479:472] <= \$auto$rtlil.cc:3093:Bwmux$1545 [479:472];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[119:112] <= 8'h00;
    else if (\$14 ) iFIFOMem[119:112] <= \$auto$rtlil.cc:3093:Bwmux$1545 [119:112];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[127:120] <= 8'h00;
    else if (\$14 ) iFIFOMem[127:120] <= \$auto$rtlil.cc:3093:Bwmux$1545 [127:120];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[135:128] <= 8'h00;
    else if (\$14 ) iFIFOMem[135:128] <= \$auto$rtlil.cc:3093:Bwmux$1545 [135:128];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[143:136] <= 8'h00;
    else if (\$14 ) iFIFOMem[143:136] <= \$auto$rtlil.cc:3093:Bwmux$1545 [143:136];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[151:144] <= 8'h00;
    else if (\$14 ) iFIFOMem[151:144] <= \$auto$rtlil.cc:3093:Bwmux$1545 [151:144];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[159:152] <= 8'h00;
    else if (\$14 ) iFIFOMem[159:152] <= \$auto$rtlil.cc:3093:Bwmux$1545 [159:152];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[167:160] <= 8'h00;
    else if (\$14 ) iFIFOMem[167:160] <= \$auto$rtlil.cc:3093:Bwmux$1545 [167:160];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[175:168] <= 8'h00;
    else if (\$14 ) iFIFOMem[175:168] <= \$auto$rtlil.cc:3093:Bwmux$1545 [175:168];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[183:176] <= 8'h00;
    else if (\$14 ) iFIFOMem[183:176] <= \$auto$rtlil.cc:3093:Bwmux$1545 [183:176];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[191:184] <= 8'h00;
    else if (\$14 ) iFIFOMem[191:184] <= \$auto$rtlil.cc:3093:Bwmux$1545 [191:184];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[487:480] <= 8'h00;
    else if (\$14 ) iFIFOMem[487:480] <= \$auto$rtlil.cc:3093:Bwmux$1545 [487:480];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[199:192] <= 8'h00;
    else if (\$14 ) iFIFOMem[199:192] <= \$auto$rtlil.cc:3093:Bwmux$1545 [199:192];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[207:200] <= 8'h00;
    else if (\$14 ) iFIFOMem[207:200] <= \$auto$rtlil.cc:3093:Bwmux$1545 [207:200];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[215:208] <= 8'h00;
    else if (\$14 ) iFIFOMem[215:208] <= \$auto$rtlil.cc:3093:Bwmux$1545 [215:208];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[223:216] <= 8'h00;
    else if (\$14 ) iFIFOMem[223:216] <= \$auto$rtlil.cc:3093:Bwmux$1545 [223:216];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[231:224] <= 8'h00;
    else if (\$14 ) iFIFOMem[231:224] <= \$auto$rtlil.cc:3093:Bwmux$1545 [231:224];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[239:232] <= 8'h00;
    else if (\$14 ) iFIFOMem[239:232] <= \$auto$rtlil.cc:3093:Bwmux$1545 [239:232];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[247:240] <= 8'h00;
    else if (\$14 ) iFIFOMem[247:240] <= \$auto$rtlil.cc:3093:Bwmux$1545 [247:240];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[255:248] <= 8'h00;
    else if (\$14 ) iFIFOMem[255:248] <= \$auto$rtlil.cc:3093:Bwmux$1545 [255:248];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[263:256] <= 8'h00;
    else if (\$14 ) iFIFOMem[263:256] <= \$auto$rtlil.cc:3093:Bwmux$1545 [263:256];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[271:264] <= 8'h00;
    else if (\$14 ) iFIFOMem[271:264] <= \$auto$rtlil.cc:3093:Bwmux$1545 [271:264];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[495:488] <= 8'h00;
    else if (\$14 ) iFIFOMem[495:488] <= \$auto$rtlil.cc:3093:Bwmux$1545 [495:488];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[279:272] <= 8'h00;
    else if (\$14 ) iFIFOMem[279:272] <= \$auto$rtlil.cc:3093:Bwmux$1545 [279:272];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[287:280] <= 8'h00;
    else if (\$14 ) iFIFOMem[287:280] <= \$auto$rtlil.cc:3093:Bwmux$1545 [287:280];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[295:288] <= 8'h00;
    else if (\$14 ) iFIFOMem[295:288] <= \$auto$rtlil.cc:3093:Bwmux$1545 [295:288];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[303:296] <= 8'h00;
    else if (\$14 ) iFIFOMem[303:296] <= \$auto$rtlil.cc:3093:Bwmux$1545 [303:296];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[311:304] <= 8'h00;
    else if (\$14 ) iFIFOMem[311:304] <= \$auto$rtlil.cc:3093:Bwmux$1545 [311:304];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[319:312] <= 8'h00;
    else if (\$14 ) iFIFOMem[319:312] <= \$auto$rtlil.cc:3093:Bwmux$1545 [319:312];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[327:320] <= 8'h00;
    else if (\$14 ) iFIFOMem[327:320] <= \$auto$rtlil.cc:3093:Bwmux$1545 [327:320];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[335:328] <= 8'h00;
    else if (\$14 ) iFIFOMem[335:328] <= \$auto$rtlil.cc:3093:Bwmux$1545 [335:328];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[343:336] <= 8'h00;
    else if (\$14 ) iFIFOMem[343:336] <= \$auto$rtlil.cc:3093:Bwmux$1545 [343:336];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[351:344] <= 8'h00;
    else if (\$14 ) iFIFOMem[351:344] <= \$auto$rtlil.cc:3093:Bwmux$1545 [351:344];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[503:496] <= 8'h00;
    else if (\$14 ) iFIFOMem[503:496] <= \$auto$rtlil.cc:3093:Bwmux$1545 [503:496];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[359:352] <= 8'h00;
    else if (\$14 ) iFIFOMem[359:352] <= \$auto$rtlil.cc:3093:Bwmux$1545 [359:352];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[367:360] <= 8'h00;
    else if (\$14 ) iFIFOMem[367:360] <= \$auto$rtlil.cc:3093:Bwmux$1545 [367:360];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[375:368] <= 8'h00;
    else if (\$14 ) iFIFOMem[375:368] <= \$auto$rtlil.cc:3093:Bwmux$1545 [375:368];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[383:376] <= 8'h00;
    else if (\$14 ) iFIFOMem[383:376] <= \$auto$rtlil.cc:3093:Bwmux$1545 [383:376];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[391:384] <= 8'h00;
    else if (\$14 ) iFIFOMem[391:384] <= \$auto$rtlil.cc:3093:Bwmux$1545 [391:384];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[399:392] <= 8'h00;
    else if (\$14 ) iFIFOMem[399:392] <= \$auto$rtlil.cc:3093:Bwmux$1545 [399:392];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[407:400] <= 8'h00;
    else if (\$14 ) iFIFOMem[407:400] <= \$auto$rtlil.cc:3093:Bwmux$1545 [407:400];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[415:408] <= 8'h00;
    else if (\$14 ) iFIFOMem[415:408] <= \$auto$rtlil.cc:3093:Bwmux$1545 [415:408];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[423:416] <= 8'h00;
    else if (\$14 ) iFIFOMem[423:416] <= \$auto$rtlil.cc:3093:Bwmux$1545 [423:416];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[431:424] <= 8'h00;
    else if (\$14 ) iFIFOMem[431:424] <= \$auto$rtlil.cc:3093:Bwmux$1545 [431:424];
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[511:504] <= 8'h00;
    else if (\$14 ) iFIFOMem[511:504] <= \$auto$rtlil.cc:3093:Bwmux$1545 [511:504];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18262  = | { CLEAR, \$14  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18265  = | { CLEAR, \$81 , \$68  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18268  = | { CLEAR, \$23  };
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17213  = ~ iWRAddr[5:0];
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17217  = ~ iRDAddr[5:0];
  assign \$auto$rtlil.cc:3092:Mux$18501 [5] = ~ \$81 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 8'h00;
    else Q <= \$auto$rtlil.cc:3092:Mux$1549 ;
  (* src = "rtl/apb_uart/slib_fifo.sv:59.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) EMPTY <= 1'h1;
    else EMPTY <= \$32 ;
  assign \$iUSAGE$85  = CLEAR ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_fifo.sv:136.1-136.13|rtl/apb_uart/slib_fifo.sv:133.3-150.10" *) 6'h00 : \$auto$opt_share.cc:222:merge_operators$18499 ;
  assign \$iRDAddr$30  = CLEAR ? (* src = "rtl/apb_uart/slib_fifo.sv:82.11-87.10|rtl/apb_uart/slib_fifo.sv:81.1-87.10" *) 7'h00 : \$25 [6:0];
  assign \$iWRAddr$29  = CLEAR ? (* src = "rtl/apb_uart/slib_fifo.sv:82.11-87.10|rtl/apb_uart/slib_fifo.sv:81.1-87.10" *) 7'h00 : \$16 ;
  assign \$auto$rtlil.cc:3092:Mux$18501 [4:0] = { \$auto$rtlil.cc:3092:Mux$18501 [5], \$auto$rtlil.cc:3092:Mux$18501 [5], \$auto$rtlil.cc:3092:Mux$18501 [5], \$auto$rtlil.cc:3092:Mux$18501 [5], 1'h1 };
  assign { \$auto$rtlil.cc:3114:Demux$1544 [510:504], \$auto$rtlil.cc:3114:Demux$1544 [502:496], \$auto$rtlil.cc:3114:Demux$1544 [494:488], \$auto$rtlil.cc:3114:Demux$1544 [486:480], \$auto$rtlil.cc:3114:Demux$1544 [478:472], \$auto$rtlil.cc:3114:Demux$1544 [470:464], \$auto$rtlil.cc:3114:Demux$1544 [462:456], \$auto$rtlil.cc:3114:Demux$1544 [454:448], \$auto$rtlil.cc:3114:Demux$1544 [446:440], \$auto$rtlil.cc:3114:Demux$1544 [438:432], \$auto$rtlil.cc:3114:Demux$1544 [430:424], \$auto$rtlil.cc:3114:Demux$1544 [422:416], \$auto$rtlil.cc:3114:Demux$1544 [414:408], \$auto$rtlil.cc:3114:Demux$1544 [406:400], \$auto$rtlil.cc:3114:Demux$1544 [398:392], \$auto$rtlil.cc:3114:Demux$1544 [390:384], \$auto$rtlil.cc:3114:Demux$1544 [382:376], \$auto$rtlil.cc:3114:Demux$1544 [374:368], \$auto$rtlil.cc:3114:Demux$1544 [366:360], \$auto$rtlil.cc:3114:Demux$1544 [358:352], \$auto$rtlil.cc:3114:Demux$1544 [350:344], \$auto$rtlil.cc:3114:Demux$1544 [342:336], \$auto$rtlil.cc:3114:Demux$1544 [334:328], \$auto$rtlil.cc:3114:Demux$1544 [326:320], \$auto$rtlil.cc:3114:Demux$1544 [318:312], \$auto$rtlil.cc:3114:Demux$1544 [310:304], \$auto$rtlil.cc:3114:Demux$1544 [302:296], \$auto$rtlil.cc:3114:Demux$1544 [294:288], \$auto$rtlil.cc:3114:Demux$1544 [286:280], \$auto$rtlil.cc:3114:Demux$1544 [278:272], \$auto$rtlil.cc:3114:Demux$1544 [270:264], \$auto$rtlil.cc:3114:Demux$1544 [262:256], \$auto$rtlil.cc:3114:Demux$1544 [254:248], \$auto$rtlil.cc:3114:Demux$1544 [246:240], \$auto$rtlil.cc:3114:Demux$1544 [238:232], \$auto$rtlil.cc:3114:Demux$1544 [230:224], \$auto$rtlil.cc:3114:Demux$1544 [222:216], \$auto$rtlil.cc:3114:Demux$1544 [214:208], \$auto$rtlil.cc:3114:Demux$1544 [206:200], \$auto$rtlil.cc:3114:Demux$1544 [198:192], \$auto$rtlil.cc:3114:Demux$1544 [190:184], \$auto$rtlil.cc:3114:Demux$1544 [182:176], \$auto$rtlil.cc:3114:Demux$1544 [174:168], \$auto$rtlil.cc:3114:Demux$1544 [166:160], \$auto$rtlil.cc:3114:Demux$1544 [158:152], \$auto$rtlil.cc:3114:Demux$1544 [150:144], \$auto$rtlil.cc:3114:Demux$1544 [142:136], \$auto$rtlil.cc:3114:Demux$1544 [134:128], \$auto$rtlil.cc:3114:Demux$1544 [126:120], \$auto$rtlil.cc:3114:Demux$1544 [118:112], \$auto$rtlil.cc:3114:Demux$1544 [110:104], \$auto$rtlil.cc:3114:Demux$1544 [102:96], \$auto$rtlil.cc:3114:Demux$1544 [94:88], \$auto$rtlil.cc:3114:Demux$1544 [86:80], \$auto$rtlil.cc:3114:Demux$1544 [78:72], \$auto$rtlil.cc:3114:Demux$1544 [70:64], \$auto$rtlil.cc:3114:Demux$1544 [62:56], \$auto$rtlil.cc:3114:Demux$1544 [54:48], \$auto$rtlil.cc:3114:Demux$1544 [46:40], \$auto$rtlil.cc:3114:Demux$1544 [38:32], \$auto$rtlil.cc:3114:Demux$1544 [30:24], \$auto$rtlil.cc:3114:Demux$1544 [22:16], \$auto$rtlil.cc:3114:Demux$1544 [14:8], \$auto$rtlil.cc:3114:Demux$1544 [6:0] } = { \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7] };
  assign \$auto$rtlil.cc:3092:Mux$1549  = \$auto$bmuxmap.cc:84:execute$19218 ;
endmodule

(* src = "rtl/apb_uart/slib_input_filter.sv:35.8" *)
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_CTS (CLK, D, Q, RST, CE);
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$24 ;
  wire \$26 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *)
  wire \$Q$27 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *)
  wire \$Q$28 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18335 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18337 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$18504 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18506 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:38.14" *)
  input CE;
  wire CE;
  (* src = "rtl/apb_uart/slib_input_filter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_input_filter.sv:39.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_input_filter.sv:40.16" *)
  output Q;
  reg Q;
  (* src = "rtl/apb_uart/slib_input_filter.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_input_filter.sv:45.26" *)
  reg [1:0] iCount;
  assign \$auto$opt_share.cc:222:merge_operators$18504  = iCount + { \$auto$rtlil.cc:3092:Mux$18506 [1], 1'h1 };
  assign \$13  = ~ D;
  assign \$15  = | iCount;
  assign \$17  = \$13  && \$15 ;
  assign \$24  = iCount == 2'h2;
  assign \$26  = ! iCount;
  assign \$7  = iCount != 2'h2;
  assign \$9  = D && \$7 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCount <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18337 ) iCount <= \$auto$opt_share.cc:222:merge_operators$18504 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18335  = | { \$17 , \$9  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18337  = & { CE, \$auto$opt_dff.cc:194:make_patterns_logic$18335  };
  assign \$auto$rtlil.cc:3092:Mux$18506 [1] = ~ \$9 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 1'h0;
    else Q <= \$Q$28 ;
  assign \$Q$27  = \$26  ? (* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *) 1'h0 : Q;
  assign \$Q$28  = \$Q$27  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *) \$24 ;
  assign \$auto$rtlil.cc:3092:Mux$18506 [0] = 1'h1;
endmodule

(* src = "rtl/apb_uart/slib_input_filter.sv:35.8" *)
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DCD (CLK, D, Q, RST, CE);
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$24 ;
  wire \$26 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *)
  wire \$Q$27 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *)
  wire \$Q$28 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18340 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18342 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$18509 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18511 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:38.14" *)
  input CE;
  wire CE;
  (* src = "rtl/apb_uart/slib_input_filter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_input_filter.sv:39.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_input_filter.sv:40.16" *)
  output Q;
  reg Q;
  (* src = "rtl/apb_uart/slib_input_filter.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_input_filter.sv:45.26" *)
  reg [1:0] iCount;
  assign \$auto$opt_share.cc:222:merge_operators$18509  = iCount + { \$auto$rtlil.cc:3092:Mux$18511 [1], 1'h1 };
  assign \$13  = ~ D;
  assign \$15  = | iCount;
  assign \$17  = \$13  && \$15 ;
  assign \$24  = iCount == 2'h2;
  assign \$26  = ! iCount;
  assign \$7  = iCount != 2'h2;
  assign \$9  = D && \$7 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCount <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18342 ) iCount <= \$auto$opt_share.cc:222:merge_operators$18509 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18340  = | { \$17 , \$9  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18342  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18340 , CE };
  assign \$auto$rtlil.cc:3092:Mux$18511 [1] = ~ \$9 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 1'h0;
    else Q <= \$Q$28 ;
  assign \$Q$27  = \$26  ? (* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *) 1'h0 : Q;
  assign \$Q$28  = \$Q$27  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *) \$24 ;
  assign \$auto$rtlil.cc:3092:Mux$18511 [0] = 1'h1;
endmodule

(* src = "rtl/apb_uart/slib_input_filter.sv:35.8" *)
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DSR (CLK, D, Q, RST, CE);
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$24 ;
  wire \$26 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *)
  wire \$Q$27 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *)
  wire \$Q$28 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18345 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18347 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$18514 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18516 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:38.14" *)
  input CE;
  wire CE;
  (* src = "rtl/apb_uart/slib_input_filter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_input_filter.sv:39.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_input_filter.sv:40.16" *)
  output Q;
  reg Q;
  (* src = "rtl/apb_uart/slib_input_filter.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_input_filter.sv:45.26" *)
  reg [1:0] iCount;
  assign \$auto$opt_share.cc:222:merge_operators$18514  = iCount + { \$auto$rtlil.cc:3092:Mux$18516 [1], 1'h1 };
  assign \$13  = ~ D;
  assign \$15  = | iCount;
  assign \$17  = \$13  && \$15 ;
  assign \$24  = iCount == 2'h2;
  assign \$26  = ! iCount;
  assign \$7  = iCount != 2'h2;
  assign \$9  = D && \$7 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCount <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18347 ) iCount <= \$auto$opt_share.cc:222:merge_operators$18514 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18345  = | { \$17 , \$9  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18347  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18345 , CE };
  assign \$auto$rtlil.cc:3092:Mux$18516 [1] = ~ \$9 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 1'h0;
    else Q <= \$Q$28 ;
  assign \$Q$27  = \$26  ? (* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *) 1'h0 : Q;
  assign \$Q$28  = \$Q$27  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *) \$24 ;
  assign \$auto$rtlil.cc:3092:Mux$18516 [0] = 1'h1;
endmodule

(* src = "rtl/apb_uart/slib_input_filter.sv:35.8" *)
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_RI (CLK, D, Q, RST, CE);
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$24 ;
  wire \$26 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *)
  wire \$Q$27 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *)
  wire \$Q$28 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18350 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18352 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$18519 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18521 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:38.14" *)
  input CE;
  wire CE;
  (* src = "rtl/apb_uart/slib_input_filter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_input_filter.sv:39.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_input_filter.sv:40.16" *)
  output Q;
  reg Q;
  (* src = "rtl/apb_uart/slib_input_filter.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_input_filter.sv:45.26" *)
  reg [1:0] iCount;
  assign \$auto$opt_share.cc:222:merge_operators$18519  = iCount + { \$auto$rtlil.cc:3092:Mux$18521 [1], 1'h1 };
  assign \$13  = ~ D;
  assign \$15  = | iCount;
  assign \$17  = \$13  && \$15 ;
  assign \$24  = iCount == 2'h2;
  assign \$26  = ! iCount;
  assign \$7  = iCount != 2'h2;
  assign \$9  = D && \$7 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCount <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18352 ) iCount <= \$auto$opt_share.cc:222:merge_operators$18519 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18350  = | { \$17 , \$9  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18352  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18350 , CE };
  assign \$auto$rtlil.cc:3092:Mux$18521 [1] = ~ \$9 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 1'h0;
    else Q <= \$Q$28 ;
  assign \$Q$27  = \$26  ? (* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *) 1'h0 : Q;
  assign \$Q$28  = \$Q$27  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *) \$24 ;
  assign \$auto$rtlil.cc:3092:Mux$18521 [0] = 1'h1;
endmodule

(* src = "rtl/apb_uart/slib_input_filter.sv:35.8" *)
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_IFSB (CLK, D, Q, RST, CE);
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$24 ;
  wire \$26 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *)
  wire \$Q$27 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *)
  wire \$Q$28 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18355 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18357 ;
  wire [2:0] \$auto$opt_share.cc:222:merge_operators$18524 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$18526 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:38.14" *)
  input CE;
  wire CE;
  (* src = "rtl/apb_uart/slib_input_filter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_input_filter.sv:39.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_input_filter.sv:40.16" *)
  output Q;
  reg Q;
  (* src = "rtl/apb_uart/slib_input_filter.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_input_filter.sv:45.26" *)
  reg [2:0] iCount;
  assign \$auto$opt_share.cc:222:merge_operators$18524  = iCount + { \$auto$rtlil.cc:3092:Mux$18526 [2], \$auto$rtlil.cc:3092:Mux$18526 [2], 1'h1 };
  assign \$13  = ~ D;
  assign \$15  = | iCount;
  assign \$17  = \$13  && \$15 ;
  assign \$24  = iCount == 3'h4;
  assign \$26  = ! iCount;
  assign \$7  = iCount != 3'h4;
  assign \$9  = D && \$7 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCount <= 3'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18357 ) iCount <= \$auto$opt_share.cc:222:merge_operators$18524 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18355  = | { \$17 , \$9  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18357  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18355 , CE };
  assign \$auto$rtlil.cc:3092:Mux$18526 [2] = ~ \$9 ;
  (* src = "rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 1'h0;
    else Q <= \$Q$28 ;
  assign \$Q$27  = \$26  ? (* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *) 1'h0 : Q;
  assign \$Q$28  = \$Q$27  | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *) \$24 ;
  assign \$auto$rtlil.cc:3092:Mux$18526 [1:0] = { \$auto$rtlil.cc:3092:Mux$18526 [2], 1'h1 };
endmodule

(* src = "rtl/apb_uart/slib_input_sync.sv:35.8" *)
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_CTS (CLK, D, Q, RST);
  (* src = "rtl/apb_uart/slib_input_sync.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_input_sync.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_input_sync.sv:39.16" *)
  output Q;
  wire Q;
  (* src = "rtl/apb_uart/slib_input_sync.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_input_sync.sv:43.11" *)
  reg [1:0] iD;
  (* src = "rtl/apb_uart/slib_input_sync.sv:45.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iD <= 2'h0;
    else iD <= { iD[0], D };
  assign Q = iD[1];
endmodule

(* src = "rtl/apb_uart/slib_input_sync.sv:35.8" *)
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DCD (CLK, D, Q, RST);
  (* src = "rtl/apb_uart/slib_input_sync.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_input_sync.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_input_sync.sv:39.16" *)
  output Q;
  wire Q;
  (* src = "rtl/apb_uart/slib_input_sync.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_input_sync.sv:43.11" *)
  reg [1:0] iD;
  (* src = "rtl/apb_uart/slib_input_sync.sv:45.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iD <= 2'h0;
    else iD <= { iD[0], D };
  assign Q = iD[1];
endmodule

(* src = "rtl/apb_uart/slib_input_sync.sv:35.8" *)
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DSR (CLK, D, Q, RST);
  (* src = "rtl/apb_uart/slib_input_sync.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_input_sync.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_input_sync.sv:39.16" *)
  output Q;
  wire Q;
  (* src = "rtl/apb_uart/slib_input_sync.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_input_sync.sv:43.11" *)
  reg [1:0] iD;
  (* src = "rtl/apb_uart/slib_input_sync.sv:45.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iD <= 2'h0;
    else iD <= { iD[0], D };
  assign Q = iD[1];
endmodule

(* src = "rtl/apb_uart/slib_input_sync.sv:35.8" *)
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_RI (CLK, D, Q, RST);
  (* src = "rtl/apb_uart/slib_input_sync.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_input_sync.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_input_sync.sv:39.16" *)
  output Q;
  wire Q;
  (* src = "rtl/apb_uart/slib_input_sync.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_input_sync.sv:43.11" *)
  reg [1:0] iD;
  (* src = "rtl/apb_uart/slib_input_sync.sv:45.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iD <= 2'h0;
    else iD <= { iD[0], D };
  assign Q = iD[1];
endmodule

(* src = "rtl/apb_uart/slib_input_sync.sv:35.8" *)
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_SIN (CLK, D, Q, RST);
  (* src = "rtl/apb_uart/slib_input_sync.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_input_sync.sv:38.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_input_sync.sv:39.16" *)
  output Q;
  wire Q;
  (* src = "rtl/apb_uart/slib_input_sync.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_input_sync.sv:43.11" *)
  reg [1:0] iD;
  (* src = "rtl/apb_uart/slib_input_sync.sv:45.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iD <= 2'h0;
    else iD <= { iD[0], D };
  assign Q = iD[1];
endmodule

(* src = "rtl/apb_uart/slib_mv_filter.sv:35.8" *)
module \slib_mv_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_MVF (CLK, D, Q, RST, CLEAR, SAMPLE);
  wire [4:0] \$11 ;
  wire \$3 ;
  wire \$9 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18360 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18362 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18364 ;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" *)
  wire [4:0] \$iCounter$17 ;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:57.8-67.13" *)
  wire \$iQ$14 ;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" *)
  wire \$iQ$18 ;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:39.14" *)
  input CLEAR;
  wire CLEAR;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:40.14" *)
  input D;
  wire D;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:41.16" *)
  output Q;
  reg Q;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:38.14" *)
  input SAMPLE;
  wire SAMPLE;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:45.15" *)
  reg [4:0] iCounter;
  assign \$11  = iCounter + 1'h1;
  assign \$3  = iCounter >= 4'ha;
  assign \$9  = SAMPLE && D;
  (* src = "rtl/apb_uart/slib_mv_filter.sv:48.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCounter <= 5'h00;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18364 ) iCounter <= \$iCounter$17 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18360  = | { CLEAR, \$9 , \$3  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18362  = { CLEAR, \$3  } != 2'h1;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18364  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18362 , \$auto$opt_dff.cc:194:make_patterns_logic$18360  };
  (* src = "rtl/apb_uart/slib_mv_filter.sv:48.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 1'h0;
    else Q <= \$iQ$18 ;
  assign \$iQ$18  = CLEAR ? (* src = "rtl/apb_uart/slib_mv_filter.sv:69.10-73.13|rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" *) 1'h0 : \$iQ$14 ;
  assign \$iCounter$17  = CLEAR ? (* src = "rtl/apb_uart/slib_mv_filter.sv:69.10-73.13|rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" *) 5'h00 : \$11 ;
  assign \$iQ$14  = Q | (* full_case = 32'd1 *) (* src = "rtl/apb_uart/slib_mv_filter.sv:59.13-59.25|rtl/apb_uart/slib_mv_filter.sv:57.8-67.13" *) \$3 ;
endmodule

(* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:10.8" *)
module \soc_ctrl_reg_top$croc_chip.i_croc_soc.i_croc.i_soc_ctrl (clk_i, rst_ni, reg_req_i, reg_rsp_o, reg2hw, hw2reg, devmode_i);
  wire \$103 ;
  wire \$105 ;
  wire \$22 ;
  wire \$25 ;
  wire [3:0] \$29 ;
  wire \$3 ;
  wire \$33 ;
  wire \$35 ;
  wire \$43 ;
  wire \$45 ;
  wire \$53 ;
  wire \$55 ;
  wire \$63 ;
  wire \$65 ;
  wire \$7 ;
  wire \$73 ;
  wire \$75 ;
  wire \$79 ;
  wire \$85 ;
  wire \$91 ;
  wire \$97 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16874 ;
  wire \$auto$rtlil.cc:2965:LogicNot$59 ;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:226.15" *)
  wire [4:0] addr_hit;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:43.18" *)
  wire addrmiss;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:72.16" *)
  wire [31:0] bootaddr_qs;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:74.9" *)
  wire bootaddr_we;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:81.9" *)
  wire bootmode_qs;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:83.9" *)
  wire bootmode_we;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:16.15" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:78.16" *)
  wire [31:0] corestatus_qs;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:80.9" *)
  wire corestatus_we;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:26.9" *)
  input devmode_i;
  wire devmode_i;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:75.9" *)
  wire fetchen_qs;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:77.9" *)
  wire fetchen_we;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:22.46" *)
  input [3:0] hw2reg;
  wire [3:0] hw2reg;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:21.46" *)
  output [66:0] reg2hw;
  wire [66:0] reg2hw;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:41.19" *)
  wire reg_error;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:36.19" *)
  wire reg_re;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:18.20" *)
  input [69:0] reg_req_i;
  wire [69:0] reg_req_i;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:19.20" *)
  output [33:0] reg_rsp_o;
  wire [33:0] reg_rsp_o;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:35.19" *)
  wire reg_we;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:17.15" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:84.9" *)
  wire sram_dly_qs;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:86.9" *)
  wire sram_dly_we;
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:43.28" *)
  wire wr_err;
  assign reg_we = reg_req_i[0] & reg_req_i[37];
  assign bootmode_we = \$97  & \$105 ;
  assign \$103  = addr_hit[4] & reg_we;
  assign \$105  = ! reg_error;
  assign sram_dly_we = \$103  & \$105 ;
  assign addr_hit[0] = ! reg_req_i[42:38];
  assign addr_hit[1] = reg_req_i[42:38] == 3'h4;
  assign addr_hit[2] = reg_req_i[42:38] == 4'h8;
  assign addr_hit[3] = reg_req_i[42:38] == 4'hc;
  assign addr_hit[4] = reg_req_i[42:38] == 5'h10;
  assign \$3  = ~ reg_req_i[37];
  assign \$22  = | addr_hit;
  assign \$auto$rtlil.cc:2965:LogicNot$59  = ! \$22 ;
  assign \$25  = reg_re || reg_we;
  assign addrmiss = \$25  & \$auto$rtlil.cc:2965:LogicNot$59 ;
  assign \$29  = ~ reg_req_i[4:1];
  assign \$33  = | \$29 ;
  assign \$35  = addr_hit[0] & \$33 ;
  assign reg_re = reg_req_i[0] & \$3 ;
  assign \$43  = addr_hit[1] & \$29 [0];
  assign \$45  = \$35  | \$43 ;
  assign \$53  = addr_hit[2] & \$33 ;
  assign \$55  = \$45  | \$53 ;
  assign \$7  = devmode_i & addrmiss;
  assign \$63  = addr_hit[3] & \$29 [0];
  assign \$65  = \$55  | \$63 ;
  assign \$73  = addr_hit[4] & \$29 [0];
  assign \$75  = \$65  | \$73 ;
  assign wr_err = reg_we & \$75 ;
  assign \$79  = addr_hit[0] & reg_we;
  assign reg_error = \$7  | wr_err;
  assign bootaddr_we = \$79  & \$105 ;
  assign \$85  = addr_hit[1] & reg_we;
  assign fetchen_we = \$85  & \$105 ;
  assign \$91  = addr_hit[2] & reg_we;
  assign corestatus_we = \$91  & \$105 ;
  assign \$97  = addr_hit[3] & reg_we;
  assign \$auto$opt_reduce.cc:137:opt_pmux$16874  = | { addr_hit[4:3], addr_hit[1] };
  function [30:0] \$procmux$14928 ;
    input [30:0] a;
    input [92:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:284.9-284.41|rtl/soc_ctrl/soc_ctrl_reg_top.sv:266.5-290.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$14928  = b[30:0];
      3'b?1?:
        \$procmux$14928  = b[61:31];
      3'b1??:
        \$procmux$14928  = b[92:62];
      default:
        \$procmux$14928  = a;
    endcase
  endfunction
  assign reg_rsp_o[33:3] = \$procmux$14928 (31'h7fffffff, { bootaddr_qs[31:1], corestatus_qs[31:1], 31'h00000000 }, { addr_hit[0], addr_hit[2], \$auto$opt_reduce.cc:137:opt_pmux$16874  });
  function [0:0] \$procmux$14935 ;
    input [0:0] a;
    input [4:0] b;
    input [4:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:284.9-284.41|rtl/soc_ctrl/soc_ctrl_reg_top.sv:266.5-290.12" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        \$procmux$14935  = b[0:0];
      5'b???1?:
        \$procmux$14935  = b[1:1];
      5'b??1??:
        \$procmux$14935  = b[2:2];
      5'b?1???:
        \$procmux$14935  = b[3:3];
      5'b1????:
        \$procmux$14935  = b[4:4];
      default:
        \$procmux$14935  = a;
    endcase
  endfunction
  assign reg_rsp_o[2] = \$procmux$14935 (1'h1, { bootaddr_qs[0], fetchen_qs, corestatus_qs[0], bootmode_qs, sram_dly_qs }, { addr_hit[0], addr_hit[1], addr_hit[2], addr_hit[3], addr_hit[4] });
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:95.5" *)
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr  u_bootaddr (
    .clk_i(clk_i),
    .d(32'd0),
    .de(1'h0),
    .q(reg2hw[66:35]),
    .qs(bootaddr_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[36:5]),
    .we(bootaddr_we)
  );
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:176.5" *)
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode  u_bootmode (
    .clk_i(clk_i),
    .d(hw2reg[1]),
    .de(hw2reg[0]),
    .q(reg2hw[1]),
    .qs(bootmode_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[5]),
    .we(bootmode_we)
  );
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:149.5" *)
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus  u_corestatus (
    .clk_i(clk_i),
    .d(32'd0),
    .de(1'h0),
    .q(reg2hw[33:2]),
    .qs(corestatus_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[36:5]),
    .we(corestatus_we)
  );
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:122.5" *)
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen  u_fetchen (
    .clk_i(clk_i),
    .d(hw2reg[3]),
    .de(hw2reg[2]),
    .q(reg2hw[34]),
    .qs(fetchen_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[5]),
    .we(fetchen_we)
  );
  (* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:203.5" *)
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly  u_sram_dly (
    .clk_i(clk_i),
    .d(1'h0),
    .de(1'h0),
    .q(reg2hw[0]),
    .qs(sram_dly_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[5]),
    .we(sram_dly_we)
  );
  assign reg_rsp_o[1:0] = { reg_error, 1'h1 };
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [2:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 3'h0;
    else reg_q <= { reg_q[1:0], serial_i };
  assign serial_o = reg_q[2];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [2:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 3'h0;
    else reg_q <= { reg_q[1:0], serial_i };
  assign serial_o = reg_q[2];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [2:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 3'h0;
    else reg_q <= { reg_q[1:0], serial_i };
  assign serial_o = reg_q[2];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [2:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 3'h0;
    else reg_q <= { reg_q[1:0], serial_i };
  assign serial_o = reg_q[2];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[0].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[10].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[11].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[12].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[13].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[14].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[15].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[16].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[17].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[18].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[19].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[1].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[20].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[21].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[22].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[23].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[24].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[25].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[26].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[27].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[28].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[29].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[2].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[30].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[31].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[3].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[4].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[5].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[6].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[7].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[8].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[9].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_ext_intr_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "ihp13/tc_clk.sv:9.8" *)
module \tc_clk_inverter$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_tck_inv (clk_i, clk_o);
  (* src = "ihp13/tc_clk.sv:10.18" *)
  input clk_i;
  wire clk_i;
  (* src = "ihp13/tc_clk.sv:11.18" *)
  output clk_o;
  wire clk_o;
  (* keep = 1'h1 *)
  (* src = "ihp13/tc_clk.sv:14.16" *)
  sg13g2_inv_1 i_inv (
    .A(clk_i),
    .Y(clk_o)
  );
endmodule

(* src = "ihp13/tc_clk.sv:33.8" *)
module \tc_clk_mux2$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_dft_tck_mux (clk0_i, clk1_i, clk_sel_i, clk_o);
  (* src = "ihp13/tc_clk.sv:34.18" *)
  input clk0_i;
  wire clk0_i;
  (* src = "ihp13/tc_clk.sv:35.18" *)
  input clk1_i;
  wire clk1_i;
  (* src = "ihp13/tc_clk.sv:37.18" *)
  output clk_o;
  wire clk_o;
  (* src = "ihp13/tc_clk.sv:36.18" *)
  input clk_sel_i;
  wire clk_sel_i;
  (* keep = 1'h1 *)
  (* src = "ihp13/tc_clk.sv:40.17" *)
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

(* src = "ihp13/tc_clk.sv:33.8" *)
module \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_init_no (clk0_i, clk1_i, clk_sel_i, clk_o);
  (* src = "ihp13/tc_clk.sv:34.18" *)
  input clk0_i;
  wire clk0_i;
  (* src = "ihp13/tc_clk.sv:35.18" *)
  input clk1_i;
  wire clk1_i;
  (* src = "ihp13/tc_clk.sv:37.18" *)
  output clk_o;
  wire clk_o;
  (* src = "ihp13/tc_clk.sv:36.18" *)
  input clk_sel_i;
  wire clk_sel_i;
  (* keep = 1'h1 *)
  (* src = "ihp13/tc_clk.sv:40.17" *)
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

(* src = "ihp13/tc_clk.sv:33.8" *)
module \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_n (clk0_i, clk1_i, clk_sel_i, clk_o);
  (* src = "ihp13/tc_clk.sv:34.18" *)
  input clk0_i;
  wire clk0_i;
  (* src = "ihp13/tc_clk.sv:35.18" *)
  input clk1_i;
  wire clk1_i;
  (* src = "ihp13/tc_clk.sv:37.18" *)
  output clk_o;
  wire clk_o;
  (* src = "ihp13/tc_clk.sv:36.18" *)
  input clk_sel_i;
  wire clk_sel_i;
  (* keep = 1'h1 *)
  (* src = "ihp13/tc_clk.sv:40.17" *)
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

(* src = "ihp13/tc_clk.sv:33.8" *)
module \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_no (clk0_i, clk1_i, clk_sel_i, clk_o);
  (* src = "ihp13/tc_clk.sv:34.18" *)
  input clk0_i;
  wire clk0_i;
  (* src = "ihp13/tc_clk.sv:35.18" *)
  input clk1_i;
  wire clk1_i;
  (* src = "ihp13/tc_clk.sv:37.18" *)
  output clk_o;
  wire clk_o;
  (* src = "ihp13/tc_clk.sv:36.18" *)
  input clk_sel_i;
  wire clk_sel_i;
  (* keep = 1'h1 *)
  (* src = "ihp13/tc_clk.sv:40.17" *)
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

(* src = "ihp13/tc_sram_impl.sv:73.8" *)
module \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram (clk_i, rst_ni, impl_i, req_i, we_i, addr_i, wdata_i, be_i, rdata_o, impl_o);
  wire \$101 ;
  wire \$293 ;
  wire \$295 ;
  (* src = "ihp13/tc_sram_impl.sv:100.32" *)
  input [8:0] addr_i;
  wire [8:0] addr_i;
  (* src = "ihp13/tc_sram_impl.sv:102.32" *)
  input [3:0] be_i;
  wire [3:0] be_i;
  (* src = "ihp13/tc_sram_impl.sv:92.32" *)
  input clk_i;
  wire clk_i;
  (* src = "ihp13/tc_sram_impl.sv:223.36" *)
  wire [63:0] \gen_512x32xBx1.bm64 ;
  (* src = "ihp13/tc_sram_impl.sv:223.27" *)
  wire [63:0] \gen_512x32xBx1.rdata64 ;
  (* src = "ihp13/tc_sram_impl.sv:224.18" *)
  reg \gen_512x32xBx1.sel_q ;
  (* src = "ihp13/tc_sram_impl.sv:95.32" *)
  input impl_i;
  wire impl_i;
  (* src = "ihp13/tc_sram_impl.sv:96.32" *)
  output impl_o;
  wire impl_o;
  (* src = "ihp13/tc_sram_impl.sv:104.32" *)
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  (* src = "ihp13/tc_sram_impl.sv:98.32" *)
  input req_i;
  wire req_i;
  (* src = "ihp13/tc_sram_impl.sv:93.32" *)
  input rst_ni;
  wire rst_ni;
  (* src = "ihp13/tc_sram_impl.sv:101.32" *)
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  (* src = "ihp13/tc_sram_impl.sv:99.32" *)
  input we_i;
  wire we_i;
  assign \$101  = ~ addr_i[0];
  assign \gen_512x32xBx1.bm64 [30] = be_i[1] & \$101 ;
  assign \gen_512x32xBx1.bm64 [31] = be_i[1] & addr_i[0];
  assign \gen_512x32xBx1.bm64 [14] = be_i[0] & \$101 ;
  assign \gen_512x32xBx1.bm64 [15] = be_i[0] & addr_i[0];
  assign \gen_512x32xBx1.bm64 [46] = be_i[2] & \$101 ;
  assign \gen_512x32xBx1.bm64 [47] = be_i[2] & addr_i[0];
  assign \gen_512x32xBx1.bm64 [62] = be_i[3] & \$101 ;
  assign \gen_512x32xBx1.bm64 [63] = be_i[3] & addr_i[0];
  assign \$293  = ~ we_i;
  assign \$295  = req_i & \$293 ;
  (* src = "ihp13/tc_sram_impl.sv:246.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_512x32xBx1.sel_q  <= 1'h0;
    else if (\$295 ) \gen_512x32xBx1.sel_q  <= addr_i[0];
  assign rdata_o[31] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [63] : \gen_512x32xBx1.rdata64 [62];
  assign rdata_o[30] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [61] : \gen_512x32xBx1.rdata64 [60];
  assign rdata_o[29] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [59] : \gen_512x32xBx1.rdata64 [58];
  assign rdata_o[28] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [57] : \gen_512x32xBx1.rdata64 [56];
  assign rdata_o[27] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [55] : \gen_512x32xBx1.rdata64 [54];
  assign rdata_o[26] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [53] : \gen_512x32xBx1.rdata64 [52];
  assign rdata_o[25] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [51] : \gen_512x32xBx1.rdata64 [50];
  assign rdata_o[24] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [49] : \gen_512x32xBx1.rdata64 [48];
  assign rdata_o[23] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [47] : \gen_512x32xBx1.rdata64 [46];
  assign rdata_o[22] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [45] : \gen_512x32xBx1.rdata64 [44];
  assign rdata_o[21] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [43] : \gen_512x32xBx1.rdata64 [42];
  assign rdata_o[20] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [41] : \gen_512x32xBx1.rdata64 [40];
  assign rdata_o[19] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [39] : \gen_512x32xBx1.rdata64 [38];
  assign rdata_o[18] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [37] : \gen_512x32xBx1.rdata64 [36];
  assign rdata_o[17] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [35] : \gen_512x32xBx1.rdata64 [34];
  assign rdata_o[16] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [33] : \gen_512x32xBx1.rdata64 [32];
  assign rdata_o[15] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [31] : \gen_512x32xBx1.rdata64 [30];
  assign rdata_o[14] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [29] : \gen_512x32xBx1.rdata64 [28];
  assign rdata_o[13] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [27] : \gen_512x32xBx1.rdata64 [26];
  assign rdata_o[12] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [25] : \gen_512x32xBx1.rdata64 [24];
  assign rdata_o[11] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [23] : \gen_512x32xBx1.rdata64 [22];
  assign rdata_o[10] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [21] : \gen_512x32xBx1.rdata64 [20];
  assign rdata_o[9] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [19] : \gen_512x32xBx1.rdata64 [18];
  assign rdata_o[8] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [17] : \gen_512x32xBx1.rdata64 [16];
  assign rdata_o[7] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [15] : \gen_512x32xBx1.rdata64 [14];
  assign rdata_o[6] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [13] : \gen_512x32xBx1.rdata64 [12];
  assign rdata_o[5] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [11] : \gen_512x32xBx1.rdata64 [10];
  assign rdata_o[4] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [9] : \gen_512x32xBx1.rdata64 [8];
  assign rdata_o[3] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [7] : \gen_512x32xBx1.rdata64 [6];
  assign rdata_o[2] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [5] : \gen_512x32xBx1.rdata64 [4];
  assign rdata_o[1] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [3] : \gen_512x32xBx1.rdata64 [2];
  assign rdata_o[0] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [1] : \gen_512x32xBx1.rdata64 [0];
  (* src = "ihp13/tc_sram_impl.sv:251.37" *)
  RM_IHPSG13_1P_256x64_c2_bm_bist \gen_512x32xBx1.i_cut  (
    .A_ADDR(addr_i[8:1]),
    .A_BIST_ADDR(8'h00),
    .A_BIST_BM(64'h0000000000000000),
    .A_BIST_CLK(1'h0),
    .A_BIST_DIN(64'h0000000000000000),
    .A_BIST_EN(1'h0),
    .A_BIST_MEN(1'h0),
    .A_BIST_REN(1'h0),
    .A_BIST_WEN(1'h0),
    .A_BM({ \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] }),
    .A_CLK(clk_i),
    .A_DIN({ wdata_i[31], wdata_i[31:30], wdata_i[30:29], wdata_i[29:28], wdata_i[28:27], wdata_i[27:26], wdata_i[26:25], wdata_i[25:24], wdata_i[24:23], wdata_i[23:22], wdata_i[22:21], wdata_i[21:20], wdata_i[20:19], wdata_i[19:18], wdata_i[18:17], wdata_i[17:16], wdata_i[16:15], wdata_i[15:14], wdata_i[14:13], wdata_i[13:12], wdata_i[12:11], wdata_i[11:10], wdata_i[10:9], wdata_i[9:8], wdata_i[8:7], wdata_i[7:6], wdata_i[6:5], wdata_i[5:4], wdata_i[4:3], wdata_i[3:2], wdata_i[2:1], wdata_i[1:0], wdata_i[0] }),
    .A_DLY(impl_i),
    .A_DOUT(\gen_512x32xBx1.rdata64 ),
    .A_MEN(req_i),
    .A_REN(\$293 ),
    .A_WEN(we_i)
  );
  assign { \gen_512x32xBx1.bm64 [61:48], \gen_512x32xBx1.bm64 [45:32], \gen_512x32xBx1.bm64 [29:16], \gen_512x32xBx1.bm64 [13:0] } = { \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] };
  assign impl_o = 1'hx;
endmodule

(* src = "ihp13/tc_sram_impl.sv:73.8" *)
module \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram (clk_i, rst_ni, impl_i, req_i, we_i, addr_i, wdata_i, be_i, rdata_o, impl_o);
  wire \$101 ;
  wire \$293 ;
  wire \$295 ;
  (* src = "ihp13/tc_sram_impl.sv:100.32" *)
  input [8:0] addr_i;
  wire [8:0] addr_i;
  (* src = "ihp13/tc_sram_impl.sv:102.32" *)
  input [3:0] be_i;
  wire [3:0] be_i;
  (* src = "ihp13/tc_sram_impl.sv:92.32" *)
  input clk_i;
  wire clk_i;
  (* src = "ihp13/tc_sram_impl.sv:223.36" *)
  wire [63:0] \gen_512x32xBx1.bm64 ;
  (* src = "ihp13/tc_sram_impl.sv:223.27" *)
  wire [63:0] \gen_512x32xBx1.rdata64 ;
  (* src = "ihp13/tc_sram_impl.sv:224.18" *)
  reg \gen_512x32xBx1.sel_q ;
  (* src = "ihp13/tc_sram_impl.sv:95.32" *)
  input impl_i;
  wire impl_i;
  (* src = "ihp13/tc_sram_impl.sv:96.32" *)
  output impl_o;
  wire impl_o;
  (* src = "ihp13/tc_sram_impl.sv:104.32" *)
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  (* src = "ihp13/tc_sram_impl.sv:98.32" *)
  input req_i;
  wire req_i;
  (* src = "ihp13/tc_sram_impl.sv:93.32" *)
  input rst_ni;
  wire rst_ni;
  (* src = "ihp13/tc_sram_impl.sv:101.32" *)
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  (* src = "ihp13/tc_sram_impl.sv:99.32" *)
  input we_i;
  wire we_i;
  assign \$101  = ~ addr_i[0];
  assign \gen_512x32xBx1.bm64 [30] = be_i[1] & \$101 ;
  assign \gen_512x32xBx1.bm64 [31] = be_i[1] & addr_i[0];
  assign \gen_512x32xBx1.bm64 [14] = be_i[0] & \$101 ;
  assign \gen_512x32xBx1.bm64 [15] = be_i[0] & addr_i[0];
  assign \gen_512x32xBx1.bm64 [46] = be_i[2] & \$101 ;
  assign \gen_512x32xBx1.bm64 [47] = be_i[2] & addr_i[0];
  assign \gen_512x32xBx1.bm64 [62] = be_i[3] & \$101 ;
  assign \gen_512x32xBx1.bm64 [63] = be_i[3] & addr_i[0];
  assign \$293  = ~ we_i;
  assign \$295  = req_i & \$293 ;
  (* src = "ihp13/tc_sram_impl.sv:246.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_512x32xBx1.sel_q  <= 1'h0;
    else if (\$295 ) \gen_512x32xBx1.sel_q  <= addr_i[0];
  assign rdata_o[31] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [63] : \gen_512x32xBx1.rdata64 [62];
  assign rdata_o[30] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [61] : \gen_512x32xBx1.rdata64 [60];
  assign rdata_o[29] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [59] : \gen_512x32xBx1.rdata64 [58];
  assign rdata_o[28] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [57] : \gen_512x32xBx1.rdata64 [56];
  assign rdata_o[27] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [55] : \gen_512x32xBx1.rdata64 [54];
  assign rdata_o[26] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [53] : \gen_512x32xBx1.rdata64 [52];
  assign rdata_o[25] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [51] : \gen_512x32xBx1.rdata64 [50];
  assign rdata_o[24] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [49] : \gen_512x32xBx1.rdata64 [48];
  assign rdata_o[23] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [47] : \gen_512x32xBx1.rdata64 [46];
  assign rdata_o[22] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [45] : \gen_512x32xBx1.rdata64 [44];
  assign rdata_o[21] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [43] : \gen_512x32xBx1.rdata64 [42];
  assign rdata_o[20] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [41] : \gen_512x32xBx1.rdata64 [40];
  assign rdata_o[19] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [39] : \gen_512x32xBx1.rdata64 [38];
  assign rdata_o[18] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [37] : \gen_512x32xBx1.rdata64 [36];
  assign rdata_o[17] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [35] : \gen_512x32xBx1.rdata64 [34];
  assign rdata_o[16] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [33] : \gen_512x32xBx1.rdata64 [32];
  assign rdata_o[15] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [31] : \gen_512x32xBx1.rdata64 [30];
  assign rdata_o[14] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [29] : \gen_512x32xBx1.rdata64 [28];
  assign rdata_o[13] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [27] : \gen_512x32xBx1.rdata64 [26];
  assign rdata_o[12] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [25] : \gen_512x32xBx1.rdata64 [24];
  assign rdata_o[11] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [23] : \gen_512x32xBx1.rdata64 [22];
  assign rdata_o[10] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [21] : \gen_512x32xBx1.rdata64 [20];
  assign rdata_o[9] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [19] : \gen_512x32xBx1.rdata64 [18];
  assign rdata_o[8] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [17] : \gen_512x32xBx1.rdata64 [16];
  assign rdata_o[7] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [15] : \gen_512x32xBx1.rdata64 [14];
  assign rdata_o[6] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [13] : \gen_512x32xBx1.rdata64 [12];
  assign rdata_o[5] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [11] : \gen_512x32xBx1.rdata64 [10];
  assign rdata_o[4] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [9] : \gen_512x32xBx1.rdata64 [8];
  assign rdata_o[3] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [7] : \gen_512x32xBx1.rdata64 [6];
  assign rdata_o[2] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [5] : \gen_512x32xBx1.rdata64 [4];
  assign rdata_o[1] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [3] : \gen_512x32xBx1.rdata64 [2];
  assign rdata_o[0] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [1] : \gen_512x32xBx1.rdata64 [0];
  (* src = "ihp13/tc_sram_impl.sv:251.37" *)
  RM_IHPSG13_1P_256x64_c2_bm_bist \gen_512x32xBx1.i_cut  (
    .A_ADDR(addr_i[8:1]),
    .A_BIST_ADDR(8'h00),
    .A_BIST_BM(64'h0000000000000000),
    .A_BIST_CLK(1'h0),
    .A_BIST_DIN(64'h0000000000000000),
    .A_BIST_EN(1'h0),
    .A_BIST_MEN(1'h0),
    .A_BIST_REN(1'h0),
    .A_BIST_WEN(1'h0),
    .A_BM({ \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] }),
    .A_CLK(clk_i),
    .A_DIN({ wdata_i[31], wdata_i[31:30], wdata_i[30:29], wdata_i[29:28], wdata_i[28:27], wdata_i[27:26], wdata_i[26:25], wdata_i[25:24], wdata_i[24:23], wdata_i[23:22], wdata_i[22:21], wdata_i[21:20], wdata_i[20:19], wdata_i[19:18], wdata_i[18:17], wdata_i[17:16], wdata_i[16:15], wdata_i[15:14], wdata_i[14:13], wdata_i[13:12], wdata_i[12:11], wdata_i[11:10], wdata_i[10:9], wdata_i[9:8], wdata_i[8:7], wdata_i[7:6], wdata_i[6:5], wdata_i[5:4], wdata_i[4:3], wdata_i[3:2], wdata_i[2:1], wdata_i[1:0], wdata_i[0] }),
    .A_DLY(impl_i),
    .A_DOUT(\gen_512x32xBx1.rdata64 ),
    .A_MEN(req_i),
    .A_REN(\$293 ),
    .A_WEN(we_i)
  );
  assign { \gen_512x32xBx1.bm64 [61:48], \gen_512x32xBx1.bm64 [45:32], \gen_512x32xBx1.bm64 [29:16], \gen_512x32xBx1.bm64 [13:0] } = { \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] };
  assign impl_o = 1'hx;
endmodule

(* src = "rtl/timer_unit/timer_unit.sv:37.8" *)
module \timer_unit$croc_chip.i_croc_soc.i_croc.i_timer (clk_i, rst_ni, ref_clk_i, req_i, addr_i, wdata_i, be_i, wen_i, id_i, gnt_o, r_rdata_o, r_opc_o, r_id_o, r_valid_o, event_lo_i, event_hi_i, irq_lo_o, irq_hi_o, busy_o);
  wire \$101 ;
  wire \$116 ;
  wire \$125 ;
  wire \$133 ;
  wire \$144 ;
  wire \$154 ;
  wire \$162 ;
  wire \$17 ;
  wire \$181 ;
  wire \$186 ;
  wire \$19 ;
  wire \$192 ;
  wire \$194 ;
  wire \$196 ;
  wire \$202 ;
  wire \$208 ;
  wire \$220 ;
  wire \$222 ;
  wire \$224 ;
  wire \$230 ;
  wire \$236 ;
  wire \$250 ;
  wire \$258 ;
  wire \$276 ;
  wire \$303 ;
  wire \$305 ;
  wire \$316 ;
  wire \$323 ;
  wire \$45 ;
  wire \$49 ;
  wire \$57 ;
  wire \$77 ;
  wire \$81 ;
  wire \$83 ;
  wire \$87 ;
  wire \$91 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18378 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18380 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18389 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18391 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18369 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18372 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18375 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18382 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18386 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18393 ;
  wire \$auto$opt_share.cc:222:merge_operators$18527 ;
  wire \$auto$rtlil.cc:3092:Mux$17265 ;
  wire \$auto$rtlil.cc:3092:Mux$17268 ;
  wire \$auto$rtlil.cc:3092:Mux$18529 ;
  wire [31:0] \$procmux$14331_Y ;
  wire \$procmux$14332_CMP ;
  wire \$procmux$14333_CMP ;
  wire \$procmux$14334_CMP ;
  wire \$procmux$14335_CMP ;
  wire \$procmux$14336_CMP ;
  wire \$procmux$14337_CMP ;
  wire \$procmux$14360_Y ;
  wire \$procmux$14372_Y ;
  wire \$procmux$14385_Y ;
  wire \$procmux$14397_Y ;
  wire \$procmux$14404_Y ;
  wire \$procmux$14422_CMP ;
  wire \$procmux$14431_CMP ;
  wire [31:0] \$procmux$14442_Y ;
  wire \$procmux$14443_CMP ;
  wire [31:0] \$procmux$14455_Y ;
  wire \$procmux$14456_CMP ;
  wire \$procmux$14459_Y ;
  wire \$procmux$14464_Y ;
  wire \$procmux$14470_Y ;
  wire \$procmux$14477_Y ;
  wire \$procmux$14487_Y ;
  wire \$procmux$14498_Y ;
  (* unused_bits = "2 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] \$procmux$14509_Y ;
  (* unused_bits = "2 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] \$procmux$14512_Y ;
  wire \$procmux$14533_Y ;
  wire \$procmux$14583_Y ;
  wire \$procmux$14594_Y ;
  wire \$procmux$14605_Y ;
  wire \$procmux$14613_Y ;
  wire \$procmux$14621_Y ;
  wire \$procmux$14643_Y ;
  wire \$procmux$14667_Y ;
  wire \$procmux$14677_Y ;
  wire \$procmux$14687_Y ;
  wire \$procmux$14694_Y ;
  wire \$procmux$14704_Y ;
  wire \$procmux$14739_Y ;
  wire \$procmux$14754_Y ;
  wire \$procmux$14759_Y ;
  wire \$procmux$14762_Y ;
  wire \$procmux$14808_Y ;
  wire \$procmux$14843_Y ;
  (* src = "rtl/timer_unit/timer_unit.sv:48.39" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "rtl/timer_unit/timer_unit.sv:51.39" *)
  input [3:0] be_i;
  wire [3:0] be_i;
  (* src = "rtl/timer_unit/timer_unit.sv:66.39" *)
  output busy_o;
  wire busy_o;
  (* src = "rtl/timer_unit/timer_unit.sv:42.39" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/timer_unit/timer_unit.sv:61.39" *)
  input event_hi_i;
  wire event_hi_i;
  (* src = "rtl/timer_unit/timer_unit.sv:60.39" *)
  input event_lo_i;
  wire event_lo_i;
  (* src = "rtl/timer_unit/timer_unit.sv:53.39" *)
  output gnt_o;
  wire gnt_o;
  (* src = "rtl/timer_unit/timer_unit.sv:52.39" *)
  input [2:0] id_i;
  wire [2:0] id_i;
  (* src = "rtl/timer_unit/timer_unit.sv:64.39" *)
  output irq_hi_o;
  wire irq_hi_o;
  (* src = "rtl/timer_unit/timer_unit.sv:63.39" *)
  output irq_lo_o;
  wire irq_lo_o;
  (* src = "rtl/timer_unit/timer_unit.sv:57.39" *)
  output [2:0] r_id_o;
  reg [2:0] r_id_o;
  (* src = "rtl/timer_unit/timer_unit.sv:56.39" *)
  output r_opc_o;
  wire r_opc_o;
  (* src = "rtl/timer_unit/timer_unit.sv:58.39" *)
  output [31:0] r_rdata_o;
  wire [31:0] r_rdata_o;
  (* src = "rtl/timer_unit/timer_unit.sv:55.39" *)
  output r_valid_o;
  reg r_valid_o;
  (* src = "rtl/timer_unit/timer_unit.sv:45.39" *)
  input ref_clk_i;
  wire ref_clk_i;
  (* src = "rtl/timer_unit/timer_unit.sv:47.39" *)
  input req_i;
  wire req_i;
  (* src = "rtl/timer_unit/timer_unit.sv:43.39" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/timer_unit/timer_unit.sv:70.25" *)
  (* unused_bits = "6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  reg [31:0] s_addr;
  (* src = "rtl/timer_unit/timer_unit.sv:80.25" *)
  (* unused_bits = "2 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] s_cfg_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:80.35" *)
  wire [31:0] s_cfg_hi_reg;
  (* src = "rtl/timer_unit/timer_unit.sv:79.25" *)
  (* unused_bits = "2 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] s_cfg_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:79.35" *)
  wire [31:0] s_cfg_lo_reg;
  (* src = "rtl/timer_unit/timer_unit.sv:86.37" *)
  wire s_enable_count_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:86.19" *)
  wire s_enable_count_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:86.83" *)
  wire s_enable_count_prescaler_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:86.55" *)
  wire s_enable_count_prescaler_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:75.19" *)
  reg s_ref_clk0;
  (* src = "rtl/timer_unit/timer_unit.sv:75.31" *)
  reg s_ref_clk1;
  (* src = "rtl/timer_unit/timer_unit.sv:75.43" *)
  reg s_ref_clk2;
  (* src = "rtl/timer_unit/timer_unit.sv:75.55" *)
  reg s_ref_clk3;
  (* src = "rtl/timer_unit/timer_unit.sv:75.67" *)
  wire s_ref_clk_edge;
  (* src = "rtl/timer_unit/timer_unit.sv:75.83" *)
  wire s_ref_clk_edge_del;
  (* src = "rtl/timer_unit/timer_unit.sv:87.36" *)
  wire s_reset_count_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:87.19" *)
  wire s_reset_count_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:87.80" *)
  wire s_reset_count_prescaler_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:87.53" *)
  wire s_reset_count_prescaler_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:73.70" *)
  wire s_reset_timer_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:73.53" *)
  wire s_reset_timer_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:73.36" *)
  wire s_start_timer_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:73.19" *)
  wire s_start_timer_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:88.39" *)
  wire s_target_reached_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:88.19" *)
  wire s_target_reached_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:88.90" *)
  wire s_target_reached_prescaler_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:88.59" *)
  wire s_target_reached_prescaler_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:84.41" *)
  reg [31:0] s_timer_cmp_hi_reg;
  (* src = "rtl/timer_unit/timer_unit.sv:83.41" *)
  reg [31:0] s_timer_cmp_lo_reg;
  (* src = "rtl/timer_unit/timer_unit.sv:82.25" *)
  wire [31:0] s_timer_val_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:81.25" *)
  wire [31:0] s_timer_val_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:69.25" *)
  reg s_wen;
  (* src = "rtl/timer_unit/timer_unit.sv:72.39" *)
  wire s_write_counter_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:72.19" *)
  wire s_write_counter_lo;
  (* src = "rtl/timer_unit/timer_unit.sv:50.39" *)
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  (* src = "rtl/timer_unit/timer_unit.sv:49.39" *)
  input wen_i;
  wire wen_i;
  assign \$116  = r_valid_o && s_wen;
  assign \$125  = s_cfg_lo_reg[1] | s_reset_timer_lo;
  assign \$133  = s_cfg_lo_reg[4] && s_target_reached_lo;
  assign \$144  = \$133  && s_target_reached_hi;
  assign \$154  = s_cfg_hi_reg[1] | s_reset_timer_hi;
  assign \$17  = ~ wen_i;
  assign \$162  = s_cfg_hi_reg[4] && s_target_reached_hi;
  assign \$19  = req_i && \$17 ;
  assign \$181  = s_cfg_lo_reg[6] && s_target_reached_prescaler_lo;
  assign \$186  = s_cfg_hi_reg[6] && s_target_reached_prescaler_hi;
  assign \$192  = ~ s_cfg_lo_reg[6];
  assign \$194  = ~ s_cfg_lo_reg[7];
  assign \$196  = \$192  && \$194 ;
  assign \$202  = \$192  && s_cfg_lo_reg[7];
  assign \$208  = s_cfg_lo_reg[6] && s_cfg_lo_reg[7];
  assign \$220  = ~ s_cfg_hi_reg[6];
  assign \$222  = ~ s_cfg_hi_reg[7];
  assign \$224  = \$220  && \$222 ;
  assign \$230  = \$220  && s_cfg_hi_reg[7];
  assign \$236  = s_cfg_hi_reg[6] && s_cfg_hi_reg[7];
  assign \$250  = s_cfg_lo_reg[0] && s_cfg_lo_reg[31];
  assign \$258  = s_timer_val_lo == 32'd4294967295;
  assign \$auto$opt_share.cc:222:merge_operators$18527  = \$auto$rtlil.cc:3092:Mux$18529  && \$258 ;
  assign \$276  = s_target_reached_prescaler_lo && s_ref_clk_edge_del;
  assign \$303  = s_target_reached_hi & s_cfg_hi_reg[2];
  assign \$305  = s_target_reached_lo & s_target_reached_hi;
  assign irq_lo_o = \$auto$rtlil.cc:3092:Mux$17265  & s_cfg_lo_reg[2];
  assign \$316  = ~ s_ref_clk2;
  assign s_ref_clk_edge = s_ref_clk1 & \$316 ;
  assign \$323  = ~ s_ref_clk3;
  assign s_ref_clk_edge_del = s_ref_clk2 & \$323 ;
  assign busy_o = s_cfg_hi_reg[0] | s_cfg_lo_reg[0];
  assign \$45  = event_lo_i && s_cfg_lo[3];
  assign \$49  = \$45  | s_start_timer_lo;
  assign \$57  = s_cfg_lo[5] && s_target_reached_lo;
  assign \$101  = \$57  && s_target_reached_hi;
  assign \$77  = event_hi_i && s_cfg_hi[3];
  assign \$81  = \$77  | s_start_timer_hi;
  assign \$83  = ~ s_cfg_hi_reg[31];
  assign \$87  = \$83  && s_cfg_hi[5];
  assign \$91  = \$87  && s_target_reached_hi;
  (* src = "rtl/timer_unit/timer_unit.sv:259.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) s_timer_cmp_lo_reg <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18369 ) s_timer_cmp_lo_reg <= wdata_i;
  (* src = "rtl/timer_unit/timer_unit.sv:259.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) s_timer_cmp_hi_reg <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18372 ) s_timer_cmp_hi_reg <= wdata_i;
  reg [27:0] \$auto$ff.cc:266:slice$18374 ;
  (* src = "rtl/timer_unit/timer_unit.sv:259.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$18374  <= 28'h0000000;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18375 ) \$auto$ff.cc:266:slice$18374  <= { wdata_i[31:6], wdata_i[4], wdata_i[2] };
  assign { s_cfg_lo_reg[31:6], s_cfg_lo_reg[4], s_cfg_lo_reg[2] } = \$auto$ff.cc:266:slice$18374 ;
  reg \$auto$ff.cc:266:slice$18377 ;
  (* src = "rtl/timer_unit/timer_unit.sv:259.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$18377  <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18382 ) \$auto$ff.cc:266:slice$18377  <= s_cfg_lo[1];
  assign s_cfg_lo_reg[1] = \$auto$ff.cc:266:slice$18377 ;
  reg [2:0] \$auto$ff.cc:266:slice$18384 ;
  (* src = "rtl/timer_unit/timer_unit.sv:259.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$18384  <= 3'h0;
    else \$auto$ff.cc:266:slice$18384  <= { s_cfg_lo[5], s_cfg_lo[3], s_cfg_lo[0] };
  assign { s_cfg_lo_reg[5], s_cfg_lo_reg[3], s_cfg_lo_reg[0] } = \$auto$ff.cc:266:slice$18384 ;
  reg [27:0] \$auto$ff.cc:266:slice$18385 ;
  (* src = "rtl/timer_unit/timer_unit.sv:259.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$18385  <= 28'h0000000;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18386 ) \$auto$ff.cc:266:slice$18385  <= { wdata_i[31:6], wdata_i[4], wdata_i[2] };
  assign { s_cfg_hi_reg[31:6], s_cfg_hi_reg[4], s_cfg_hi_reg[2] } = \$auto$ff.cc:266:slice$18385 ;
  reg \$auto$ff.cc:266:slice$18388 ;
  (* src = "rtl/timer_unit/timer_unit.sv:259.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$18388  <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18393 ) \$auto$ff.cc:266:slice$18388  <= s_cfg_hi[1];
  assign s_cfg_hi_reg[1] = \$auto$ff.cc:266:slice$18388 ;
  reg [2:0] \$auto$ff.cc:266:slice$18395 ;
  (* src = "rtl/timer_unit/timer_unit.sv:259.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$18395  <= 3'h0;
    else \$auto$ff.cc:266:slice$18395  <= { s_cfg_hi[5], s_cfg_hi[3], s_cfg_hi[0] };
  assign { s_cfg_hi_reg[5], s_cfg_hi_reg[3], s_cfg_hi_reg[0] } = \$auto$ff.cc:266:slice$18395 ;
  (* src = "rtl/timer_unit/timer_unit.sv:98.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_valid_o <= 1'h0;
    else r_valid_o <= req_i;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18378  = | { s_reset_count_lo, \$19  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18380  = { \$procmux$14456_CMP , s_reset_count_lo, \$19  } != 3'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18389  = | { s_reset_count_hi, \$19  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18391  = { \$procmux$14443_CMP , s_reset_count_hi, \$19  } != 3'h1;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18369  = & { \$procmux$14431_CMP , \$19  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18372  = & { \$procmux$14422_CMP , \$19  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18375  = & { \$procmux$14456_CMP , \$19  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18382  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18380 , \$auto$opt_dff.cc:194:make_patterns_logic$18378  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18386  = & { \$procmux$14443_CMP , \$19  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18393  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18391 , \$auto$opt_dff.cc:194:make_patterns_logic$18389  };
  assign \$auto$rtlil.cc:3092:Mux$17265  = s_cfg_lo_reg[31] ? \$305  : s_target_reached_lo;
  assign \$auto$rtlil.cc:3092:Mux$17268  = \$208  ? \$276  : s_target_reached_prescaler_lo;
  assign \$auto$rtlil.cc:3092:Mux$18529  = \$202  ? s_ref_clk_edge_del : \$auto$rtlil.cc:3092:Mux$17268 ;
  (* src = "rtl/timer_unit/timer_unit.sv:142.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_id_o <= 3'h0;
    else r_id_o <= id_i;
  (* src = "rtl/timer_unit/timer_unit.sv:142.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) s_addr <= 32'd0;
    else s_addr <= addr_i;
  (* src = "rtl/timer_unit/timer_unit.sv:488.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) s_ref_clk0 <= 1'h0;
    else s_ref_clk0 <= ref_clk_i;
  (* src = "rtl/timer_unit/timer_unit.sv:488.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) s_ref_clk1 <= 1'h0;
    else s_ref_clk1 <= s_ref_clk0;
  (* src = "rtl/timer_unit/timer_unit.sv:488.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) s_ref_clk2 <= 1'h0;
    else s_ref_clk2 <= s_ref_clk1;
  (* src = "rtl/timer_unit/timer_unit.sv:488.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) s_ref_clk3 <= 1'h0;
    else s_ref_clk3 <= s_ref_clk2;
  (* src = "rtl/timer_unit/timer_unit.sv:142.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) s_wen <= 1'h0;
    else s_wen <= wen_i;
  function [31:0] \$procmux$14331 ;
    input [31:0] a;
    input [191:0] b;
    input [5:0] s;
    (* src = "rtl/timer_unit/timer_unit.sv:303.18-303.49|rtl/timer_unit/timer_unit.sv:285.14-305.21" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$14331  = b[31:0];
      6'b????1?:
        \$procmux$14331  = b[63:32];
      6'b???1??:
        \$procmux$14331  = b[95:64];
      6'b??1???:
        \$procmux$14331  = b[127:96];
      6'b?1????:
        \$procmux$14331  = b[159:128];
      6'b1?????:
        \$procmux$14331  = b[191:160];
      default:
        \$procmux$14331  = a;
    endcase
  endfunction
  assign \$procmux$14331_Y  = \$procmux$14331 (32'd0, { s_cfg_lo_reg, s_cfg_hi_reg, s_timer_val_lo, s_timer_val_hi, s_timer_cmp_lo_reg, s_timer_cmp_hi_reg }, { \$procmux$14337_CMP , \$procmux$14336_CMP , \$procmux$14335_CMP , \$procmux$14334_CMP , \$procmux$14333_CMP , \$procmux$14332_CMP  });
  assign \$procmux$14332_CMP  = s_addr[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:303.18-303.49|rtl/timer_unit/timer_unit.sv:285.14-305.21" *) 5'h14;
  assign \$procmux$14333_CMP  = s_addr[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:300.18-300.49|rtl/timer_unit/timer_unit.sv:285.14-305.21" *) 5'h10;
  assign \$procmux$14334_CMP  = s_addr[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:297.18-297.45|rtl/timer_unit/timer_unit.sv:285.14-305.21" *) 4'hc;
  assign \$procmux$14335_CMP  = s_addr[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:294.18-294.45|rtl/timer_unit/timer_unit.sv:285.14-305.21" *) 4'h8;
  assign \$procmux$14336_CMP  = s_addr[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:291.18-291.43|rtl/timer_unit/timer_unit.sv:285.14-305.21" *) 3'h4;
  assign \$procmux$14337_CMP  = ! (* src = "rtl/timer_unit/timer_unit.sv:288.18-288.43|rtl/timer_unit/timer_unit.sv:285.14-305.21" *) s_addr[5:0];
  assign r_rdata_o = \$116  ? (* src = "rtl/timer_unit/timer_unit.sv:285.14-305.21|rtl/timer_unit/timer_unit.sv:282.9-307.14" *) \$procmux$14331_Y  : 32'd0;
  assign irq_hi_o = s_cfg_lo_reg[31] ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:474.4-477.7|rtl/timer_unit/timer_unit.sv:473.2-481.7" *) 1'h0 : \$303 ;
  assign s_cfg_hi[1] = s_reset_count_hi ? (* src = "rtl/timer_unit/timer_unit.sv:254.4-254.32|rtl/timer_unit/timer_unit.sv:253.2-254.32" *) 1'h0 : \$procmux$14509_Y [1];
  assign s_cfg_lo[1] = s_reset_count_lo ? (* src = "rtl/timer_unit/timer_unit.sv:250.4-250.32|rtl/timer_unit/timer_unit.sv:249.2-250.32" *) 1'h0 : \$procmux$14512_Y [1];
  assign \$procmux$14360_Y  = \$101  ? (* src = "rtl/timer_unit/timer_unit.sv:244.11-244.37|rtl/timer_unit/timer_unit.sv:243.7-244.37" *) 1'h0 : \$procmux$14509_Y [0];
  assign \$procmux$14372_Y  = \$91  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:241.9-241.35|rtl/timer_unit/timer_unit.sv:240.7-245.9" *) 1'h0 : \$procmux$14360_Y ;
  assign s_cfg_hi[0] = \$procmux$14372_Y  | (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:237.4-237.30|rtl/timer_unit/timer_unit.sv:236.2-246.7" *) \$81 ;
  assign \$procmux$14385_Y  = \$101  ? (* src = "rtl/timer_unit/timer_unit.sv:231.7-231.33|rtl/timer_unit/timer_unit.sv:230.6-231.33" *) 1'h0 : \$procmux$14512_Y [0];
  assign \$procmux$14397_Y  = s_cfg_lo_reg[31] ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:225.5-226.33|rtl/timer_unit/timer_unit.sv:223.7-232.12" *) \$procmux$14385_Y  : \$procmux$14404_Y ;
  assign \$procmux$14404_Y  = \$57  ? (* src = "rtl/timer_unit/timer_unit.sv:226.7-226.33|rtl/timer_unit/timer_unit.sv:225.5-226.33" *) 1'h0 : \$procmux$14512_Y [0];
  assign s_cfg_lo[0] = \$procmux$14397_Y  | (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:220.4-220.30|rtl/timer_unit/timer_unit.sv:219.2-233.7" *) \$49 ;
  assign \$procmux$14422_CMP  = addr_i[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:201.18-201.47|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) 5'h14;
  assign \$procmux$14431_CMP  = addr_i[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:198.18-198.47|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) 5'h10;
  assign \$procmux$14442_Y  = \$procmux$14443_CMP  ? (* src = "rtl/timer_unit/timer_unit.sv:189.4-189.33|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) wdata_i : { s_cfg_hi_reg[31:2], 1'hx, s_cfg_hi_reg[0] };
  assign \$procmux$14443_CMP  = addr_i[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:189.4-189.33|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) 3'h4;
  assign \$procmux$14455_Y  = \$procmux$14456_CMP  ? (* src = "rtl/timer_unit/timer_unit.sv:186.4-186.33|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) wdata_i : { s_cfg_lo_reg[31:2], 1'hx, s_cfg_lo_reg[0] };
  assign \$procmux$14456_CMP  = ! (* src = "rtl/timer_unit/timer_unit.sv:186.4-186.33|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) addr_i[5:0];
  assign \$procmux$14459_Y  = addr_i[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:213.4-213.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) 6'h24;
  assign \$procmux$14464_Y  = addr_i[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:210.4-210.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) 6'h20;
  assign \$procmux$14470_Y  = addr_i[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:207.4-207.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) 5'h1c;
  assign \$procmux$14477_Y  = addr_i[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:204.4-204.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) 5'h18;
  assign \$procmux$14487_Y  = addr_i[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:195.4-195.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) 4'hc;
  assign \$procmux$14498_Y  = addr_i[5:0] == (* src = "rtl/timer_unit/timer_unit.sv:192.4-192.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" *) 4'h8;
  assign { s_cfg_hi[31:2], \$procmux$14509_Y [1:0] } = \$19  ? (* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" *) \$procmux$14442_Y  : { s_cfg_hi_reg[31:2], 1'hx, s_cfg_hi_reg[0] };
  assign { s_cfg_lo[31:2], \$procmux$14512_Y [1:0] } = \$19  ? (* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" *) \$procmux$14455_Y  : { s_cfg_lo_reg[31:2], 1'hx, s_cfg_lo_reg[0] };
  assign s_reset_timer_hi = \$19  & (* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" *) \$procmux$14459_Y ;
  assign s_reset_timer_lo = \$19  & (* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" *) \$procmux$14464_Y ;
  assign s_start_timer_hi = \$19  & (* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" *) \$procmux$14470_Y ;
  assign s_start_timer_lo = \$19  & (* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" *) \$procmux$14477_Y ;
  assign s_write_counter_hi = \$19  & (* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" *) \$procmux$14487_Y ;
  assign s_write_counter_lo = \$19  & (* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" *) \$procmux$14498_Y ;
  assign \$procmux$14533_Y  = \$208  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:453.3-457.6|rtl/timer_unit/timer_unit.sv:452.14-463.6" *) s_ref_clk_edge : 1'h1;
  assign \$procmux$14583_Y  = \$202  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:448.3-451.6|rtl/timer_unit/timer_unit.sv:447.11-463.6" *) s_ref_clk_edge : s_target_reached_prescaler_lo;
  assign \$procmux$14594_Y  = \$202  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:448.3-451.6|rtl/timer_unit/timer_unit.sv:447.11-463.6" *) \$procmux$14759_Y  : \$procmux$14533_Y ;
  assign \$procmux$14605_Y  = \$196  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:443.6-446.9|rtl/timer_unit/timer_unit.sv:442.6-463.6" *) \$258  : \$auto$opt_share.cc:222:merge_operators$18527 ;
  assign \$procmux$14613_Y  = \$procmux$14583_Y  | (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:443.6-446.9|rtl/timer_unit/timer_unit.sv:442.6-463.6" *) \$196 ;
  assign \$procmux$14621_Y  = \$196  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:443.6-446.9|rtl/timer_unit/timer_unit.sv:442.6-463.6" *) \$procmux$14759_Y  : \$procmux$14594_Y ;
  assign s_enable_count_prescaler_lo = \$250  ? (* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" *) \$procmux$14621_Y  : \$procmux$14759_Y ;
  assign s_enable_count_hi = \$250  ? (* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" *) \$procmux$14605_Y  : \$procmux$14704_Y ;
  assign s_enable_count_lo = \$250  ? (* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" *) \$procmux$14613_Y  : \$procmux$14762_Y ;
  assign \$procmux$14643_Y  = \$236  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:428.6-431.9|rtl/timer_unit/timer_unit.sv:427.4-436.9" *) s_ref_clk_edge : 1'h1;
  assign \$procmux$14667_Y  = \$230  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:424.7-424.42|rtl/timer_unit/timer_unit.sv:422.9-436.9" *) s_ref_clk_edge : s_target_reached_prescaler_hi;
  assign \$procmux$14677_Y  = \$230  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:424.7-424.42|rtl/timer_unit/timer_unit.sv:422.9-436.9" *) 1'h0 : \$procmux$14643_Y ;
  assign \$procmux$14687_Y  = \$procmux$14667_Y  | (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:419.5-419.30|rtl/timer_unit/timer_unit.sv:417.7-436.9" *) \$224 ;
  assign \$procmux$14694_Y  = \$224  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:419.5-419.30|rtl/timer_unit/timer_unit.sv:417.7-436.9" *) 1'h0 : \$procmux$14677_Y ;
  assign s_enable_count_prescaler_hi = s_cfg_hi_reg[0] & (* src = "rtl/timer_unit/timer_unit.sv:417.7-436.9|rtl/timer_unit/timer_unit.sv:415.2-437.7" *) \$procmux$14694_Y ;
  assign \$procmux$14704_Y  = s_cfg_hi_reg[0] & (* src = "rtl/timer_unit/timer_unit.sv:417.7-436.9|rtl/timer_unit/timer_unit.sv:415.2-437.7" *) \$procmux$14687_Y ;
  assign \$procmux$14739_Y  = \$202  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:399.7-399.42|rtl/timer_unit/timer_unit.sv:397.9-411.9" *) 1'h0 : \$procmux$14533_Y ;
  assign \$procmux$14754_Y  = \$196  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:394.5-394.30|rtl/timer_unit/timer_unit.sv:392.7-411.9" *) 1'h0 : \$procmux$14739_Y ;
  assign \$procmux$14759_Y  = s_cfg_lo_reg[0] & (* src = "rtl/timer_unit/timer_unit.sv:392.7-411.9|rtl/timer_unit/timer_unit.sv:390.2-412.7" *) \$procmux$14754_Y ;
  assign \$procmux$14762_Y  = s_cfg_lo_reg[0] & (* src = "rtl/timer_unit/timer_unit.sv:392.7-411.9|rtl/timer_unit/timer_unit.sv:390.2-412.7" *) \$procmux$14613_Y ;
  assign s_reset_count_prescaler_hi = \$154  | (* src = "rtl/timer_unit/timer_unit.sv:376.7-376.41|rtl/timer_unit/timer_unit.sv:374.2-377.7" *) \$186 ;
  assign s_reset_count_prescaler_lo = \$125  | (* src = "rtl/timer_unit/timer_unit.sv:371.7-371.41|rtl/timer_unit/timer_unit.sv:369.2-372.7" *) \$181 ;
  assign \$procmux$14808_Y  = s_cfg_lo_reg[31] ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:355.5-358.10|rtl/timer_unit/timer_unit.sv:353.7-366.12" *) \$144  : \$162 ;
  assign s_reset_count_hi = \$procmux$14808_Y  | (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:347.4-350.7|rtl/timer_unit/timer_unit.sv:346.2-367.14" *) \$154 ;
  assign \$procmux$14843_Y  = s_cfg_lo_reg[31] ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:332.5-335.10|rtl/timer_unit/timer_unit.sv:330.7-343.12" *) \$144  : \$133 ;
  assign s_reset_count_lo = \$procmux$14843_Y  | (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit.sv:324.4-327.7|rtl/timer_unit/timer_unit.sv:323.2-344.7" *) \$125 ;
  (* src = "rtl/timer_unit/timer_unit.sv:561.23" *)
  \timer_unit_counter$croc_chip.i_croc_soc.i_croc.i_timer.counter_hi_i  counter_hi_i (
    .clk_i(clk_i),
    .compare_value_i(s_timer_cmp_hi_reg),
    .counter_value_i(wdata_i),
    .counter_value_o(s_timer_val_hi),
    .enable_count_i(s_enable_count_hi),
    .reset_count_i(s_reset_count_hi),
    .rst_ni(rst_ni),
    .target_reached_o(s_target_reached_hi),
    .write_counter_i(s_write_counter_hi)
  );
  (* src = "rtl/timer_unit/timer_unit.sv:545.23" *)
  \timer_unit_counter$croc_chip.i_croc_soc.i_croc.i_timer.counter_lo_i  counter_lo_i (
    .clk_i(clk_i),
    .compare_value_i(s_timer_cmp_lo_reg),
    .counter_value_i(wdata_i),
    .counter_value_o(s_timer_val_lo),
    .enable_count_i(s_enable_count_lo),
    .reset_count_i(s_reset_count_lo),
    .rst_ni(rst_ni),
    .target_reached_o(s_target_reached_lo),
    .write_counter_i(s_write_counter_lo)
  );
  (* src = "rtl/timer_unit/timer_unit.sv:529.29" *)
  \timer_unit_counter_presc$croc_chip.i_croc_soc.i_croc.i_timer.prescaler_hi_i  prescaler_hi_i (
    .clk_i(clk_i),
    .compare_value_i({ 24'h000000, s_cfg_hi_reg[15:8] }),
    .counter_value_i(32'd0),
    .enable_count_i(s_enable_count_prescaler_hi),
    .reset_count_i(s_reset_count_prescaler_hi),
    .rst_ni(rst_ni),
    .target_reached_o(s_target_reached_prescaler_hi),
    .write_counter_i(1'h0)
  );
  (* src = "rtl/timer_unit/timer_unit.sv:513.29" *)
  \timer_unit_counter_presc$croc_chip.i_croc_soc.i_croc.i_timer.prescaler_lo_i  prescaler_lo_i (
    .clk_i(clk_i),
    .compare_value_i({ 24'h000000, s_cfg_lo_reg[15:8] }),
    .counter_value_i(32'd0),
    .enable_count_i(s_enable_count_prescaler_lo),
    .reset_count_i(s_reset_count_prescaler_lo),
    .rst_ni(rst_ni),
    .target_reached_o(s_target_reached_prescaler_lo),
    .write_counter_i(1'h0)
  );
  assign \$procmux$14509_Y [31:2] = s_cfg_hi[31:2];
  assign \$procmux$14512_Y [31:2] = s_cfg_lo[31:2];
  assign gnt_o = 1'h1;
  assign r_opc_o = 1'h0;
endmodule

(* src = "rtl/timer_unit/timer_unit_counter.sv:13.8" *)
module \timer_unit_counter$croc_chip.i_croc_soc.i_croc.i_timer.counter_hi_i (clk_i, rst_ni, write_counter_i, counter_value_i, reset_count_i, enable_count_i, compare_value_i, target_reached_o, counter_value_o);
  wire \$19 ;
  wire [31:0] \$8 ;
  wire [31:0] \$procmux$13165_Y ;
  wire [31:0] \$procmux$13175_Y ;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:15.24" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:23.24" *)
  input [31:0] compare_value_i;
  wire [31:0] compare_value_i;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:19.24" *)
  input [31:0] counter_value_i;
  wire [31:0] counter_value_i;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:25.24" *)
  output [31:0] counter_value_o;
  reg [31:0] counter_value_o;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:22.24" *)
  input enable_count_i;
  wire enable_count_i;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:21.24" *)
  input reset_count_i;
  wire reset_count_i;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:16.24" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:29.24" *)
  wire [31:0] s_count;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:26.24" *)
  output target_reached_o;
  reg target_reached_o;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:18.24" *)
  input write_counter_i;
  wire write_counter_i;
  assign \$19  = s_count == compare_value_i;
  assign \$8  = counter_value_o + 1'h1;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:51.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_value_o <= 32'd0;
    else counter_value_o <= s_count;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:60.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) target_reached_o <= 1'h0;
    else target_reached_o <= \$19 ;
  assign \$procmux$13165_Y  = enable_count_i ? (* src = "rtl/timer_unit/timer_unit_counter.sv:46.5-46.31|rtl/timer_unit/timer_unit_counter.sv:45.3-46.31" *) \$8  : counter_value_o;
  assign \$procmux$13175_Y  = write_counter_i ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit_counter.sv:42.7-42.33|rtl/timer_unit/timer_unit_counter.sv:41.5-47.10" *) counter_value_i : \$procmux$13165_Y ;
  assign s_count = reset_count_i ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit_counter.sv:38.10-38.22|rtl/timer_unit/timer_unit_counter.sv:37.7-48.5" *) 32'd0 : \$procmux$13175_Y ;
endmodule

(* src = "rtl/timer_unit/timer_unit_counter.sv:13.8" *)
module \timer_unit_counter$croc_chip.i_croc_soc.i_croc.i_timer.counter_lo_i (clk_i, rst_ni, write_counter_i, counter_value_i, reset_count_i, enable_count_i, compare_value_i, target_reached_o, counter_value_o);
  wire \$19 ;
  wire [31:0] \$8 ;
  wire [31:0] \$procmux$13187_Y ;
  wire [31:0] \$procmux$13197_Y ;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:15.24" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:23.24" *)
  input [31:0] compare_value_i;
  wire [31:0] compare_value_i;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:19.24" *)
  input [31:0] counter_value_i;
  wire [31:0] counter_value_i;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:25.24" *)
  output [31:0] counter_value_o;
  reg [31:0] counter_value_o;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:22.24" *)
  input enable_count_i;
  wire enable_count_i;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:21.24" *)
  input reset_count_i;
  wire reset_count_i;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:16.24" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:29.24" *)
  wire [31:0] s_count;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:26.24" *)
  output target_reached_o;
  reg target_reached_o;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:18.24" *)
  input write_counter_i;
  wire write_counter_i;
  assign \$19  = s_count == compare_value_i;
  assign \$8  = counter_value_o + 1'h1;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:51.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_value_o <= 32'd0;
    else counter_value_o <= s_count;
  (* src = "rtl/timer_unit/timer_unit_counter.sv:60.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) target_reached_o <= 1'h0;
    else target_reached_o <= \$19 ;
  assign \$procmux$13187_Y  = enable_count_i ? (* src = "rtl/timer_unit/timer_unit_counter.sv:46.5-46.31|rtl/timer_unit/timer_unit_counter.sv:45.3-46.31" *) \$8  : counter_value_o;
  assign \$procmux$13197_Y  = write_counter_i ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit_counter.sv:42.7-42.33|rtl/timer_unit/timer_unit_counter.sv:41.5-47.10" *) counter_value_i : \$procmux$13187_Y ;
  assign s_count = reset_count_i ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit_counter.sv:38.10-38.22|rtl/timer_unit/timer_unit_counter.sv:37.7-48.5" *) 32'd0 : \$procmux$13197_Y ;
endmodule

(* src = "rtl/timer_unit/timer_unit_counter_presc.sv:13.8" *)
module \timer_unit_counter_presc$croc_chip.i_croc_soc.i_croc.i_timer.prescaler_hi_i (clk_i, rst_ni, write_counter_i, counter_value_i, reset_count_i, enable_count_i, compare_value_i, target_reached_o, counter_value_o);
  wire [31:0] \$12 ;
  wire \$23 ;
  wire \$6 ;
  wire [31:0] \$procmux$13209_Y ;
  wire [31:0] \$procmux$13219_Y ;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:15.24" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:23.24" *)
  input [31:0] compare_value_i;
  wire [31:0] compare_value_i;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:19.24" *)
  input [31:0] counter_value_i;
  wire [31:0] counter_value_i;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:25.24" *)
  output [31:0] counter_value_o;
  reg [31:0] counter_value_o;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:22.24" *)
  input enable_count_i;
  wire enable_count_i;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:21.24" *)
  input reset_count_i;
  wire reset_count_i;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:16.24" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:29.24" *)
  wire [31:0] s_count;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:26.24" *)
  output target_reached_o;
  reg target_reached_o;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:18.24" *)
  input write_counter_i;
  wire write_counter_i;
  assign \$12  = counter_value_o + 1'h1;
  assign \$23  = s_count == compare_value_i;
  assign \$6  = reset_count_i || target_reached_o;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:51.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_value_o <= 32'd0;
    else counter_value_o <= s_count;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:60.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) target_reached_o <= 1'h0;
    else target_reached_o <= \$23 ;
  assign \$procmux$13209_Y  = enable_count_i ? (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:46.16-46.42|rtl/timer_unit/timer_unit_counter_presc.sv:45.14-46.42" *) \$12  : counter_value_o;
  assign \$procmux$13219_Y  = write_counter_i ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:42.12-42.38|rtl/timer_unit/timer_unit_counter_presc.sv:41.9-47.12" *) counter_value_i : \$procmux$13209_Y ;
  assign s_count = \$6  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:38.8-38.20|rtl/timer_unit/timer_unit_counter_presc.sv:37.6-48.9" *) 32'd0 : \$procmux$13219_Y ;
endmodule

(* src = "rtl/timer_unit/timer_unit_counter_presc.sv:13.8" *)
module \timer_unit_counter_presc$croc_chip.i_croc_soc.i_croc.i_timer.prescaler_lo_i (clk_i, rst_ni, write_counter_i, counter_value_i, reset_count_i, enable_count_i, compare_value_i, target_reached_o, counter_value_o);
  wire [31:0] \$12 ;
  wire \$23 ;
  wire \$6 ;
  wire [31:0] \$procmux$13231_Y ;
  wire [31:0] \$procmux$13241_Y ;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:15.24" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:23.24" *)
  input [31:0] compare_value_i;
  wire [31:0] compare_value_i;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:19.24" *)
  input [31:0] counter_value_i;
  wire [31:0] counter_value_i;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:25.24" *)
  output [31:0] counter_value_o;
  reg [31:0] counter_value_o;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:22.24" *)
  input enable_count_i;
  wire enable_count_i;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:21.24" *)
  input reset_count_i;
  wire reset_count_i;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:16.24" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:29.24" *)
  wire [31:0] s_count;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:26.24" *)
  output target_reached_o;
  reg target_reached_o;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:18.24" *)
  input write_counter_i;
  wire write_counter_i;
  assign \$12  = counter_value_o + 1'h1;
  assign \$23  = s_count == compare_value_i;
  assign \$6  = reset_count_i || target_reached_o;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:51.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_value_o <= 32'd0;
    else counter_value_o <= s_count;
  (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:60.4" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) target_reached_o <= 1'h0;
    else target_reached_o <= \$23 ;
  assign \$procmux$13231_Y  = enable_count_i ? (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:46.16-46.42|rtl/timer_unit/timer_unit_counter_presc.sv:45.14-46.42" *) \$12  : counter_value_o;
  assign \$procmux$13241_Y  = write_counter_i ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:42.12-42.38|rtl/timer_unit/timer_unit_counter_presc.sv:41.9-47.12" *) counter_value_i : \$procmux$13231_Y ;
  assign s_count = \$6  ? (* full_case = 32'd1 *) (* src = "rtl/timer_unit/timer_unit_counter_presc.sv:38.8-38.20|rtl/timer_unit/timer_unit_counter_presc.sv:37.6-48.9" *) 32'd0 : \$procmux$13241_Y ;
endmodule

(* src = "rtl/apb_uart/uart_baudgen.sv:35.8" *)
module \uart_baudgen$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG16 (CLK, RST, CE, CLEAR, DIVIDER, BAUDTICK);
  wire \$11 ;
  wire [15:0] \$13 ;
  wire [15:0] \$7 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18398 ;
  (* src = "rtl/apb_uart/uart_baudgen.sv:67.5-72.18" *)
  wire [15:0] \$iCounter$14 ;
  (* src = "rtl/apb_uart/uart_baudgen.sv:57.3-65.18" *)
  wire [15:0] \$iCounter$9 ;
  (* src = "rtl/apb_uart/uart_baudgen.sv:41.16" *)
  output BAUDTICK;
  reg BAUDTICK;
  (* src = "rtl/apb_uart/uart_baudgen.sv:38.14" *)
  input CE;
  wire CE;
  (* src = "rtl/apb_uart/uart_baudgen.sv:39.14" *)
  input CLEAR;
  wire CLEAR;
  (* src = "rtl/apb_uart/uart_baudgen.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/uart_baudgen.sv:40.21" *)
  input [15:0] DIVIDER;
  wire [15:0] DIVIDER;
  (* src = "rtl/apb_uart/uart_baudgen.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/uart_baudgen.sv:45.12" *)
  reg [15:0] iCounter;
  assign \$11  = ! iCounter;
  assign \$13  = DIVIDER - 1'h1;
  assign \$7  = iCounter - 1'h1;
  (* src = "rtl/apb_uart/uart_baudgen.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCounter <= 16'h0000;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18398 ) iCounter <= \$iCounter$14 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18398  = | { CLEAR, CE, \$11  };
  (* src = "rtl/apb_uart/uart_baudgen.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) BAUDTICK <= 1'h0;
    else BAUDTICK <= \$11 ;
  assign \$iCounter$14  = \$11  ? (* src = "rtl/apb_uart/uart_baudgen.sv:68.11-72.18|rtl/apb_uart/uart_baudgen.sv:67.5-72.18" *) \$13  : \$iCounter$9 ;
  assign \$iCounter$9  = CLEAR ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_baudgen.sv:60.1-60.131|rtl/apb_uart/uart_baudgen.sv:57.3-65.18" *) 16'h0000 : \$7 ;
endmodule

(* src = "rtl/apb_uart/uart_interrupt.sv:35.8" *)
module \uart_interrupt$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC (CLK, INT, RST, IER, LSR, THI, RDA, CTI, AFE, MSR, IIR);
  wire \$1 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$3 ;
  wire \$5 ;
  (* src = "rtl/apb_uart/uart_interrupt.sv:85.13-92.13" *)
  wire [3:0] \$auto$wreduce.cc:514:run$17112 ;
  (* src = "rtl/apb_uart/uart_interrupt.sv:81.13-92.13" *)
  wire [3:0] \$auto$wreduce.cc:514:run$17113 ;
  (* src = "rtl/apb_uart/uart_interrupt.sv:77.13-92.13" *)
  wire [3:0] \$iIIR$40 ;
  (* src = "rtl/apb_uart/uart_interrupt.sv:73.13-92.13" *)
  wire [3:0] \$iIIR$41 ;
  (* src = "rtl/apb_uart/uart_interrupt.sv:69.8-92.13" *)
  wire [3:0] \$iIIR$42 ;
  (* src = "rtl/apb_uart/uart_interrupt.sv:43.14" *)
  input AFE;
  wire AFE;
  (* src = "rtl/apb_uart/uart_interrupt.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/uart_interrupt.sv:42.14" *)
  input CTI;
  wire CTI;
  (* src = "rtl/apb_uart/uart_interrupt.sv:38.20" *)
  input [3:0] IER;
  wire [3:0] IER;
  (* src = "rtl/apb_uart/uart_interrupt.sv:45.22" *)
  output [3:0] IIR;
  reg [3:0] IIR;
  (* src = "rtl/apb_uart/uart_interrupt.sv:46.16" *)
  output INT;
  wire INT;
  (* src = "rtl/apb_uart/uart_interrupt.sv:39.20" *)
  input [4:0] LSR;
  wire [4:0] LSR;
  (* src = "rtl/apb_uart/uart_interrupt.sv:44.20" *)
  input [3:0] MSR;
  wire [3:0] MSR;
  (* src = "rtl/apb_uart/uart_interrupt.sv:41.14" *)
  input RDA;
  wire RDA;
  (* src = "rtl/apb_uart/uart_interrupt.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/uart_interrupt.sv:40.14" *)
  input THI;
  wire THI;
  (* src = "rtl/apb_uart/uart_interrupt.sv:52.5" *)
  wire iCTIInterrupt;
  (* src = "rtl/apb_uart/uart_interrupt.sv:54.5" *)
  wire iMSRInterrupt;
  (* src = "rtl/apb_uart/uart_interrupt.sv:51.5" *)
  wire iRDAInterrupt;
  (* src = "rtl/apb_uart/uart_interrupt.sv:50.5" *)
  wire iRLSInterrupt;
  (* src = "rtl/apb_uart/uart_interrupt.sv:53.5" *)
  wire iTHRInterrupt;
  assign \$1  = LSR[1] | LSR[2];
  assign iCTIInterrupt = IER[0] && CTI;
  assign iTHRInterrupt = IER[1] && THI;
  assign \$15  = ~ AFE;
  assign \$17  = MSR[0] && \$15 ;
  assign \$19  = \$17  | MSR[1];
  assign \$3  = \$1  | LSR[3];
  assign \$21  = \$19  | MSR[2];
  assign \$23  = \$21  | MSR[3];
  assign iMSRInterrupt = IER[3] && \$23 ;
  assign \$5  = \$3  | LSR[4];
  assign INT = ~ IIR[0];
  assign iRLSInterrupt = IER[2] && \$5 ;
  assign iRDAInterrupt = IER[0] && RDA;
  (* src = "rtl/apb_uart/uart_interrupt.sv:62.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) IIR <= 4'h1;
    else IIR <= \$iIIR$42 ;
  assign \$auto$wreduce.cc:514:run$17112 [0] = ~ (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_interrupt.sv:87.13-87.29|rtl/apb_uart/uart_interrupt.sv:85.13-92.13" *) iMSRInterrupt;
  assign \$auto$wreduce.cc:514:run$17113 [1:0] = iTHRInterrupt ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_interrupt.sv:83.13-83.29|rtl/apb_uart/uart_interrupt.sv:81.13-92.13" *) 2'h2 : { 1'h0, \$auto$wreduce.cc:514:run$17112 [0] };
  assign \$iIIR$40 [2:0] = iRDAInterrupt ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_interrupt.sv:79.13-79.29|rtl/apb_uart/uart_interrupt.sv:77.13-92.13" *) 3'h4 : { 1'h0, \$auto$wreduce.cc:514:run$17113 [1:0] };
  assign \$iIIR$41  = iCTIInterrupt ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_interrupt.sv:75.13-75.29|rtl/apb_uart/uart_interrupt.sv:73.13-92.13" *) 4'hc : { 1'h0, \$iIIR$40 [2:0] };
  assign \$iIIR$42  = iRLSInterrupt ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_interrupt.sv:71.13-71.29|rtl/apb_uart/uart_interrupt.sv:69.8-92.13" *) 4'h6 : \$iIIR$41 ;
  assign \$auto$wreduce.cc:514:run$17112 [3:1] = 3'h0;
  assign \$auto$wreduce.cc:514:run$17113 [3:2] = 2'h0;
  assign \$iIIR$40 [3] = 1'h0;
endmodule

(* src = "rtl/apb_uart/uart_receiver.sv:35.8" *)
module \uart_receiver$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX (BI, CLK, SIN, RST, FE, WLS, STB, PEN, EPS, SP, RXCLK, RXCLEAR, PE, DOUT, RXFINISHED);
  wire \$10 ;
  wire \$101 ;
  wire \$116 ;
  wire \$12 ;
  wire \$120 ;
  wire \$127 ;
  wire \$132 ;
  wire \$14 ;
  wire \$140 ;
  wire \$145 ;
  wire \$147 ;
  wire \$149 ;
  wire \$16 ;
  wire \$18 ;
  wire \$20 ;
  wire \$30 ;
  wire \$32 ;
  wire [3:0] \$41 ;
  wire \$47 ;
  wire \$49 ;
  wire \$51 ;
  wire \$53 ;
  wire \$55 ;
  wire \$57 ;
  wire \$59 ;
  wire \$6 ;
  wire \$61 ;
  wire \$63 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$71 ;
  wire \$73 ;
  wire \$8 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:228.3-244.18" *)
  wire [2:0] \$NState$104 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:249.3-252.18" *)
  wire [2:0] \$NState$108 ;
  wire [1:0] \$NState$87 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:181.5-192.18" *)
  wire [2:0] \$NState$88 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:199.7-206.26" *)
  wire [2:0] \$NState$93 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:197.3-211.18" *)
  wire [2:0] \$NState$94 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:216.3-223.18" *)
  wire [2:0] \$NState$97 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:284.11-287.34" *)
  wire \$PE$130 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:282.9-297.14" *)
  wire \$PE$134 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:279.1-303.18" *)
  wire \$PE$136 ;
  wire \$auto$demuxmap.cc:63:execute$19728 ;
  wire \$auto$demuxmap.cc:63:execute$19731 ;
  wire \$auto$demuxmap.cc:63:execute$19734 ;
  wire \$auto$demuxmap.cc:63:execute$19737 ;
  wire \$auto$demuxmap.cc:63:execute$19740 ;
  wire \$auto$demuxmap.cc:63:execute$19743 ;
  wire \$auto$demuxmap.cc:63:execute$19746 ;
  wire \$auto$demuxmap.cc:63:execute$19749 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18401 ;
  wire \$auto$rtlil.cc:3009:Lt$1574 ;
  wire [7:0] \$auto$rtlil.cc:3093:Bwmux$1579 ;
  wire [7:0] \$auto$rtlil.cc:3114:Demux$1577 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:132.8-145.13" *)
  wire [7:0] \$iDOUT$45 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:132.8-145.13" *)
  wire [3:0] \$iDataCount$44 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:274.3-277.18" *)
  wire \$iParityReceived$121 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:279.1-303.18" *)
  wire \$iParityReceived$135 ;
  wire \$procmux$7205_CMP ;
  wire \$procmux$7252_CMP ;
  wire \$procmux$7273_CMP ;
  (* src = "rtl/apb_uart/uart_receiver.sv:48.16" *)
  output BI;
  wire BI;
  (* src = "rtl/apb_uart/uart_receiver.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/uart_receiver.sv:60.12" *)
  reg [2:0] CState;
  (* src = "rtl/apb_uart/uart_receiver.sv:49.22" *)
  output [7:0] DOUT;
  reg [7:0] DOUT;
  (* src = "rtl/apb_uart/uart_receiver.sv:43.14" *)
  input EPS;
  wire EPS;
  (* src = "rtl/apb_uart/uart_receiver.sv:47.16" *)
  output FE;
  wire FE;
  (* src = "rtl/apb_uart/uart_receiver.sv:60.20" *)
  wire [2:0] NState;
  (* src = "rtl/apb_uart/uart_receiver.sv:46.16" *)
  output PE;
  reg PE;
  (* src = "rtl/apb_uart/uart_receiver.sv:42.14" *)
  input PEN;
  wire PEN;
  (* src = "rtl/apb_uart/uart_receiver.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/uart_receiver.sv:39.14" *)
  input RXCLEAR;
  wire RXCLEAR;
  (* src = "rtl/apb_uart/uart_receiver.sv:38.14" *)
  input RXCLK;
  wire RXCLK;
  (* src = "rtl/apb_uart/uart_receiver.sv:50.16" *)
  output RXFINISHED;
  wire RXFINISHED;
  (* src = "rtl/apb_uart/uart_receiver.sv:45.14" *)
  input SIN;
  wire SIN;
  (* src = "rtl/apb_uart/uart_receiver.sv:44.14" *)
  input SP;
  wire SP;
  (* src = "rtl/apb_uart/uart_receiver.sv:41.14" *)
  input STB;
  wire STB;
  (* src = "rtl/apb_uart/uart_receiver.sv:40.20" *)
  input [1:0] WLS;
  wire [1:0] WLS;
  (* src = "rtl/apb_uart/uart_receiver.sv:61.11" *)
  (* unused_bits = "0 1 2" *)
  wire [3:0] iBaudCount;
  (* src = "rtl/apb_uart/uart_receiver.sv:62.5" *)
  wire iBaudCountClear;
  (* src = "rtl/apb_uart/uart_receiver.sv:63.5" *)
  wire iBaudStep;
  (* src = "rtl/apb_uart/uart_receiver.sv:64.5" *)
  reg iBaudStepD;
  (* src = "rtl/apb_uart/uart_receiver.sv:70.11" *)
  reg [3:0] iDataCount;
  (* src = "rtl/apb_uart/uart_receiver.sv:72.5" *)
  wire iDataCountFinish;
  (* src = "rtl/apb_uart/uart_receiver.sv:71.5" *)
  wire iDataCountInit;
  (* src = "rtl/apb_uart/uart_receiver.sv:66.5" *)
  wire iFSIN;
  (* src = "rtl/apb_uart/uart_receiver.sv:67.5" *)
  wire iFStopBit;
  (* src = "rtl/apb_uart/uart_receiver.sv:65.5" *)
  wire iFilterClear;
  (* src = "rtl/apb_uart/uart_receiver.sv:68.5" *)
  wire iParity;
  (* src = "rtl/apb_uart/uart_receiver.sv:69.5" *)
  reg iParityReceived;
  assign \$101  = ~ iFStopBit;
  assign \$12  = \$10  ^ DOUT[3];
  assign \$116  = CState == 2'h3;
  assign \$120  = \$116  && iBaudStep;
  assign \$127  = EPS ^ iParityReceived;
  assign \$14  = \$12  ^ DOUT[2];
  assign \$132  = iParity != iParityReceived;
  assign \$140  = CState == 3'h4;
  assign FE = \$101  && \$140 ;
  assign \$145  = ! DOUT;
  assign \$147  = ~ iParityReceived;
  assign \$149  = \$145  && \$147 ;
  assign \$16  = \$14  ^ DOUT[1];
  assign BI = \$149  && FE;
  assign \$18  = \$16  ^ DOUT[0];
  assign \$20  = ~ EPS;
  assign iFilterClear = iBaudStepD | iBaudCountClear;
  assign iParity = \$18  ^ \$20 ;
  assign \$30  = ~ iDataCountFinish;
  assign \$32  = iBaudStep && \$30 ;
  \$bwmux  #(
    .WIDTH(32'd8)
  ) \$39  (
    .A(DOUT),
    .B({ iFSIN, iFSIN, iFSIN, iFSIN, iFSIN, iFSIN, iFSIN, iFSIN }),
    .S(\$auto$rtlil.cc:3114:Demux$1577 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$1579 )
  );
  assign \$41  = iDataCount + 1'h1;
  assign \$47  = ! WLS;
  assign \$49  = iDataCount == 3'h5;
  assign \$6  = DOUT[7] ^ DOUT[6];
  assign \$51  = \$47  && \$49 ;
  assign \$53  = WLS == 1'h1;
  assign \$55  = iDataCount == 3'h6;
  assign \$57  = \$53  && \$55 ;
  assign \$59  = \$51  | \$57 ;
  assign \$61  = WLS == 2'h2;
  assign \$63  = iDataCount == 3'h7;
  assign \$65  = \$61  && \$63 ;
  assign \$67  = \$59  | \$65 ;
  assign \$69  = WLS == 2'h3;
  assign \$8  = \$6  ^ DOUT[5];
  assign \$71  = iDataCount == 4'h8;
  assign \$73  = \$69  && \$71 ;
  assign iDataCountFinish = \$67  | \$73 ;
  assign \$10  = \$8  ^ DOUT[4];
  assign \$auto$demuxmap.cc:63:execute$19728  = iDataCount[2:0] == 3'h0;
  assign \$auto$demuxmap.cc:63:execute$19731  = iDataCount[2:0] == 3'h1;
  assign \$auto$demuxmap.cc:63:execute$19734  = iDataCount[2:0] == 3'h2;
  assign \$auto$demuxmap.cc:63:execute$19737  = iDataCount[2:0] == 3'h3;
  assign \$auto$demuxmap.cc:63:execute$19740  = iDataCount[2:0] == 3'h4;
  assign \$auto$demuxmap.cc:63:execute$19743  = iDataCount[2:0] == 3'h5;
  assign \$auto$demuxmap.cc:63:execute$19746  = iDataCount[2:0] == 3'h6;
  assign \$auto$demuxmap.cc:63:execute$19749  = iDataCount[2:0] == 3'h7;
  assign \$auto$rtlil.cc:3114:Demux$1577 [0] = \$auto$demuxmap.cc:63:execute$19728  ? \$auto$rtlil.cc:3009:Lt$1574  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1577 [1] = \$auto$demuxmap.cc:63:execute$19731  ? \$auto$rtlil.cc:3009:Lt$1574  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1577 [2] = \$auto$demuxmap.cc:63:execute$19734  ? \$auto$rtlil.cc:3009:Lt$1574  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1577 [3] = \$auto$demuxmap.cc:63:execute$19737  ? \$auto$rtlil.cc:3009:Lt$1574  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1577 [4] = \$auto$demuxmap.cc:63:execute$19740  ? \$auto$rtlil.cc:3009:Lt$1574  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1577 [5] = \$auto$demuxmap.cc:63:execute$19743  ? \$auto$rtlil.cc:3009:Lt$1574  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1577 [6] = \$auto$demuxmap.cc:63:execute$19746  ? \$auto$rtlil.cc:3009:Lt$1574  : 1'h0;
  assign \$auto$rtlil.cc:3114:Demux$1577 [7] = \$auto$demuxmap.cc:63:execute$19749  ? \$auto$rtlil.cc:3009:Lt$1574  : 1'h0;
  (* src = "rtl/apb_uart/uart_receiver.sv:123.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDataCount <= 4'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18401 ) iDataCount <= \$iDataCount$44 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:123.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) DOUT <= 8'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18401 ) DOUT <= \$iDOUT$45 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18401  = | { iDataCountInit, \$32  };
  assign \$auto$rtlil.cc:3009:Lt$1574  = ! iDataCount[3];
  assign iDataCountInit = | { \$procmux$7273_CMP , iBaudCountClear };
  (* src = "rtl/apb_uart/uart_receiver.sv:150.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) CState <= 3'h0;
    else CState <= NState;
  (* src = "rtl/apb_uart/uart_receiver.sv:265.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) PE <= 1'h0;
    else PE <= \$PE$136 ;
  (* src = "rtl/apb_uart/uart_receiver.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iBaudStepD <= 1'h0;
    else iBaudStepD <= iBaudStep;
  (* src = "rtl/apb_uart/uart_receiver.sv:265.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iParityReceived <= 1'h0;
    else iParityReceived <= \$iParityReceived$135 ;
  assign \$iDOUT$45  = iDataCountInit ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_receiver.sv:133.10-137.13|rtl/apb_uart/uart_receiver.sv:132.8-145.13" *) 8'h00 : \$auto$rtlil.cc:3093:Bwmux$1579 ;
  assign \$iDataCount$44  = iDataCountInit ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_receiver.sv:133.10-137.13|rtl/apb_uart/uart_receiver.sv:132.8-145.13" *) 4'h0 : \$41 ;
  assign \$NState$108 [2] = ~ (* src = "rtl/apb_uart/uart_receiver.sv:251.7-251.23|rtl/apb_uart/uart_receiver.sv:249.3-252.18" *) SIN;
  assign \$procmux$7205_CMP  = CState == (* src = "rtl/apb_uart/uart_receiver.sv:249.3-252.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" *) 3'h5;
  assign { \$NState$104 [2], \$NState$104 [0] } = iBaudCount[3] ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_receiver.sv:230.7-239.26|rtl/apb_uart/uart_receiver.sv:228.3-244.18" *) { \$101 , \$101  } : 2'h2;
  assign \$NState$97 [2:1] = iBaudStep ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_receiver.sv:218.7-218.22|rtl/apb_uart/uart_receiver.sv:216.3-223.18" *) 2'h2 : 2'h1;
  assign \$NState$94  = iDataCountFinish ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_receiver.sv:199.7-206.26|rtl/apb_uart/uart_receiver.sv:197.3-211.18" *) { \$NState$93 [2:1], \$NState$93 [1] } : 3'h2;
  assign \$procmux$7252_CMP  = CState == (* src = "rtl/apb_uart/uart_receiver.sv:197.3-211.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" *) 2'h2;
  assign \$NState$93 [2:1] = PEN ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_receiver.sv:201.11-201.25|rtl/apb_uart/uart_receiver.sv:199.7-206.26" *) 2'h1 : 2'h2;
  assign \$NState$88 [1:0] = iBaudStep ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_receiver.sv:183.7-186.26|rtl/apb_uart/uart_receiver.sv:181.5-192.18" *) { \$NState$87 [1], 1'h0 } : 2'h1;
  assign \$procmux$7273_CMP  = CState == (* src = "rtl/apb_uart/uart_receiver.sv:179.5-193.12|rtl/apb_uart/uart_receiver.sv:166.1-260.8" *) 1'h1;
  assign \$NState$87 [1] = ~ (* src = "rtl/apb_uart/uart_receiver.sv:185.11-185.26|rtl/apb_uart/uart_receiver.sv:183.7-186.26" *) iFSIN;
  assign iBaudCountClear = ! (* src = "rtl/apb_uart/uart_receiver.sv:168.5-176.10|rtl/apb_uart/uart_receiver.sv:166.1-260.8" *) CState;
  assign RXFINISHED = \$140  & (* src = "rtl/apb_uart/uart_receiver.sv:228.3-244.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" *) iBaudCount[3];
  function [2:0] \$procmux$7316 ;
    input [2:0] a;
    input [17:0] b;
    input [5:0] s;
    (* src = "rtl/apb_uart/uart_receiver.sv:249.3-252.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$7316  = b[2:0];
      6'b????1?:
        \$procmux$7316  = b[5:3];
      6'b???1??:
        \$procmux$7316  = b[8:6];
      6'b??1???:
        \$procmux$7316  = b[11:9];
      6'b?1????:
        \$procmux$7316  = b[14:12];
      6'b1?????:
        \$procmux$7316  = b[17:15];
      default:
        \$procmux$7316  = a;
    endcase
  endfunction
  assign NState = \$procmux$7316 (3'h0, { 2'h0, \$NState$108 [2], 1'h0, \$NState$88 [1:0], \$NState$94 , \$NState$97 [2:1], \$NState$97 [1], \$NState$104 [2], 1'h0, \$NState$104 [0], \$NState$108 [2], 1'h0, \$NState$108 [2] }, { iBaudCountClear, \$procmux$7273_CMP , \$procmux$7252_CMP , \$116 , \$140 , \$procmux$7205_CMP  });
  assign \$PE$136  = PEN & (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_receiver.sv:280.11-298.20|rtl/apb_uart/uart_receiver.sv:279.1-303.18" *) \$PE$134 ;
  assign \$PE$134  = SP ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_receiver.sv:284.11-287.34|rtl/apb_uart/uart_receiver.sv:282.9-297.14" *) \$PE$130  : \$132 ;
  assign \$PE$130  = ~ (* src = "rtl/apb_uart/uart_receiver.sv:286.15-286.27|rtl/apb_uart/uart_receiver.sv:284.11-287.34" *) \$127 ;
  assign \$iParityReceived$135  = PEN & (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_receiver.sv:280.11-298.20|rtl/apb_uart/uart_receiver.sv:279.1-303.18" *) \$iParityReceived$121 ;
  assign \$iParityReceived$121  = \$120  ? (* src = "rtl/apb_uart/uart_receiver.sv:276.7-276.32|rtl/apb_uart/uart_receiver.sv:274.3-277.18" *) iFSIN : iParityReceived;
  (* src = "rtl/apb_uart/uart_receiver.sv:78.27" *)
  \slib_counter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_BRC  RX_BRC (
    .CLEAR(iBaudCountClear),
    .CLK(CLK),
    .D(4'h0),
    .DOWN(1'h0),
    .ENABLE(RXCLK),
    .LOAD(1'h0),
    .OVERFLOW(iBaudStep),
    .Q(iBaudCount),
    .RST(RST)
  );
  (* src = "rtl/apb_uart/uart_receiver.sv:95.31" *)
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_IFSB  RX_IFSB (
    .CE(RXCLK),
    .CLK(CLK),
    .D(SIN),
    .Q(iFStopBit),
    .RST(RST)
  );
  (* src = "rtl/apb_uart/uart_receiver.sv:88.44" *)
  \slib_mv_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_MVF  RX_MVF (
    .CLEAR(iFilterClear),
    .CLK(CLK),
    .D(SIN),
    .Q(iFSIN),
    .RST(RST),
    .SAMPLE(RXCLK)
  );
  assign \$NState$104 [1] = 1'h0;
  assign \$NState$108 [1:0] = { 1'h0, \$NState$108 [2] };
  assign \$NState$87 [0] = 1'h0;
  assign \$NState$88 [2] = 1'h0;
  assign \$NState$93 [0] = \$NState$93 [1];
  assign \$NState$97 [0] = \$NState$97 [1];
endmodule

(* src = "rtl/apb_uart/uart_transmitter.sv:35.8" *)
module \uart_transmitter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TX (CLK, SOUT, RST, CLEAR, TXCLK, TXSTART, WLS, STB, PEN, EPS, SP, BC, DIN, TXFINISHED);
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$27 ;
  wire \$33 ;
  wire \$39 ;
  wire \$55 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$88 ;
  wire \$90 ;
  wire \$92 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:152.18-159.23" *)
  wire [3:0] \$NState$30 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:150.13-164.18" *)
  wire [3:0] \$NState$31 ;
  wire [1:0] \$NState$37 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:190.13-204.18" *)
  wire [3:0] \$NState$43 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:249.13-260.18" *)
  wire [3:0] \$NState$63 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18408 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18410 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16924 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:224.18-231.23" *)
  wire \$iSout$51 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:235.18-242.23" *)
  wire \$iSout$56 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:222.13-243.18" *)
  wire \$iSout$57 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:82.13-99.18" *)
  wire \$iTx2$19 ;
  wire \$procmux$7405_CMP ;
  wire \$procmux$7432_CMP ;
  wire \$procmux$7442_CMP ;
  wire \$procmux$7465_CMP ;
  wire \$procmux$7490_CMP ;
  wire \$procmux$7520_CMP ;
  wire \$procmux$7534_CMP ;
  wire \$procmux$7535_CMP ;
  wire \$procmux$7536_CMP ;
  wire \$procmux$7537_CMP ;
  wire \$procmux$7538_CMP ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:46.14" *)
  input BC;
  wire BC;
  (* src = "rtl/apb_uart/uart_transmitter.sv:40.14" *)
  input CLEAR;
  wire CLEAR;
  (* src = "rtl/apb_uart/uart_transmitter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "rtl/apb_uart/uart_transmitter.sv:66.12" *)
  reg [3:0] CState;
  (* src = "rtl/apb_uart/uart_transmitter.sv:47.20" *)
  input [7:0] DIN;
  wire [7:0] DIN;
  (* src = "rtl/apb_uart/uart_transmitter.sv:44.14" *)
  input EPS;
  wire EPS;
  (* src = "rtl/apb_uart/uart_transmitter.sv:66.20" *)
  wire [3:0] NState;
  (* src = "rtl/apb_uart/uart_transmitter.sv:43.14" *)
  input PEN;
  wire PEN;
  (* src = "rtl/apb_uart/uart_transmitter.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "rtl/apb_uart/uart_transmitter.sv:49.16" *)
  output SOUT;
  wire SOUT;
  (* src = "rtl/apb_uart/uart_transmitter.sv:45.14" *)
  input SP;
  wire SP;
  (* src = "rtl/apb_uart/uart_transmitter.sv:42.14" *)
  input STB;
  wire STB;
  (* src = "rtl/apb_uart/uart_transmitter.sv:38.14" *)
  input TXCLK;
  wire TXCLK;
  (* src = "rtl/apb_uart/uart_transmitter.sv:48.16" *)
  output TXFINISHED;
  reg TXFINISHED;
  (* src = "rtl/apb_uart/uart_transmitter.sv:39.14" *)
  input TXSTART;
  wire TXSTART;
  (* src = "rtl/apb_uart/uart_transmitter.sv:283.15" *)
  wire \TX_PAR.iP40 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:283.21" *)
  wire \TX_PAR.iP50 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:283.27" *)
  wire \TX_PAR.iP60 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:283.33" *)
  wire \TX_PAR.iP70 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:41.20" *)
  input [1:0] WLS;
  wire [1:0] WLS;
  (* src = "rtl/apb_uart/uart_transmitter.sv:297.9" *)
  reg iLast;
  (* src = "rtl/apb_uart/uart_transmitter.sv:69.5" *)
  wire iParity;
  (* src = "rtl/apb_uart/uart_transmitter.sv:68.5" *)
  wire iSout;
  (* src = "rtl/apb_uart/uart_transmitter.sv:67.5" *)
  reg iTx2;
  assign \$11  = \$27  && STB;
  assign \$13  = CState == 4'hc;
  assign \$15  = \$11  && \$13 ;
  assign \$27  = ! WLS;
  assign \$33  = WLS == 1'h1;
  assign \$39  = WLS == 2'h2;
  assign \$55  = ~ iParity;
  assign \$71  = DIN[4] ^ DIN[3];
  assign \$73  = \$71  ^ DIN[2];
  assign \$75  = \$73  ^ DIN[1];
  assign \TX_PAR.iP40  = \$75  ^ DIN[0];
  assign \TX_PAR.iP50  = DIN[5] ^ \TX_PAR.iP40 ;
  assign \TX_PAR.iP60  = DIN[6] ^ \TX_PAR.iP50 ;
  assign \TX_PAR.iP70  = DIN[7] ^ \TX_PAR.iP60 ;
  assign \$88  = ~ iLast;
  assign \$90  = CState == 4'hb;
  assign \$92  = \$88  && \$90 ;
  assign SOUT = BC ? 1'h0 : iSout;
  (* src = "rtl/apb_uart/uart_transmitter.sv:72.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iTx2 <= 1'h0;
    else if (TXCLK) iTx2 <= \$iTx2$19 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:72.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) CState <= 4'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18410 ) CState <= NState;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18408  = { iTx2, \$15  } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18410  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18408 , TXCLK };
  assign \$auto$opt_reduce.cc:137:opt_pmux$16924  = | { \$procmux$7520_CMP , \$13  };
  (* src = "rtl/apb_uart/uart_transmitter.sv:298.5" *)
  always @(posedge CLK, posedge RST)
    if (RST) TXFINISHED <= 1'h0;
    else TXFINISHED <= \$92 ;
  (* src = "rtl/apb_uart/uart_transmitter.sv:298.5" *)
  always @(posedge CLK, posedge RST)
    if (RST) iLast <= 1'h0;
    else iLast <= \$90 ;
  function [0:0] \$procmux$7373 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/apb_uart/uart_transmitter.sv:292.20-292.36|rtl/apb_uart/uart_transmitter.sv:289.9-294.16" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$7373  = b[0:0];
      3'b?1?:
        \$procmux$7373  = b[1:1];
      3'b1??:
        \$procmux$7373  = b[2:2];
      default:
        \$procmux$7373  = a;
    endcase
  endfunction
  assign iParity = \$procmux$7373 (\TX_PAR.iP70 , { \TX_PAR.iP40 , \TX_PAR.iP50 , \TX_PAR.iP60  }, { \$27 , \$33 , \$39  });
  assign { \$NState$63 [3], \$NState$63 [0] } = STB ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_transmitter.sv:251.18-251.34|rtl/apb_uart/uart_transmitter.sv:249.13-260.18" *) 2'h2 : { 1'h0, TXSTART };
  assign \$iSout$56  = EPS ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_transmitter.sv:237.23-237.40|rtl/apb_uart/uart_transmitter.sv:235.18-242.23" *) iParity : \$55 ;
  assign \$procmux$7405_CMP  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:221.10-245.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 4'ha;
  assign \$iSout$57  = SP ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_transmitter.sv:224.18-231.23|rtl/apb_uart/uart_transmitter.sv:222.13-243.18" *) \$iSout$51  : \$iSout$56 ;
  assign \$iSout$51  = ~ (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_transmitter.sv:226.23-226.38|rtl/apb_uart/uart_transmitter.sv:224.18-231.23" *) EPS;
  assign \$procmux$7432_CMP  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:208.10-218.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 4'h9;
  assign \$NState$43 [1:0] = \$39  ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_transmitter.sv:192.18-199.23|rtl/apb_uart/uart_transmitter.sv:190.13-204.18" *) { 1'h1, \$NState$30 [0] } : 2'h1;
  assign \$procmux$7442_CMP  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:188.10-205.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 4'h8;
  assign \$NState$30 [0] = ~ (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_transmitter.sv:194.23-194.37|rtl/apb_uart/uart_transmitter.sv:192.18-199.23" *) PEN;
  assign \$NState$37  = \$33  ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_transmitter.sv:172.18-179.23|rtl/apb_uart/uart_transmitter.sv:170.13-184.18" *) { 1'h1, \$NState$30 [0] } : 2'h0;
  assign \$procmux$7465_CMP  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:168.10-185.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 3'h7;
  assign { \$NState$31 [3:2], \$NState$31 [0] } = \$27  ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_transmitter.sv:152.18-159.23|rtl/apb_uart/uart_transmitter.sv:150.13-164.18" *) { 2'h2, \$NState$30 [0] } : 3'h3;
  assign \$procmux$7490_CMP  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:148.10-165.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 3'h6;
  assign \$procmux$7520_CMP  = ! (* src = "rtl/apb_uart/uart_transmitter.sv:110.13-113.18|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) CState;
  function [0:0] \$procmux$7524 ;
    input [0:0] a;
    input [9:0] b;
    input [9:0] s;
    (* src = "rtl/apb_uart/uart_transmitter.sv:221.10-245.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *)
    (* parallel_case *)
    casez (s)
      10'b?????????1:
        \$procmux$7524  = b[0:0];
      10'b????????1?:
        \$procmux$7524  = b[1:1];
      10'b???????1??:
        \$procmux$7524  = b[2:2];
      10'b??????1???:
        \$procmux$7524  = b[3:3];
      10'b?????1????:
        \$procmux$7524  = b[4:4];
      10'b????1?????:
        \$procmux$7524  = b[5:5];
      10'b???1??????:
        \$procmux$7524  = b[6:6];
      10'b??1???????:
        \$procmux$7524  = b[7:7];
      10'b?1????????:
        \$procmux$7524  = b[8:8];
      10'b1?????????:
        \$procmux$7524  = b[9:9];
      default:
        \$procmux$7524  = a;
    endcase
  endfunction
  assign iSout = \$procmux$7524 (1'h1, { 1'h0, DIN[0], DIN[1], DIN[2], DIN[3], DIN[4], DIN[5], DIN[6], DIN[7], \$iSout$57  }, { \$procmux$7538_CMP , \$procmux$7537_CMP , \$procmux$7536_CMP , \$procmux$7535_CMP , \$procmux$7534_CMP , \$procmux$7490_CMP , \$procmux$7465_CMP , \$procmux$7442_CMP , \$procmux$7432_CMP , \$procmux$7405_CMP  });
  assign \$procmux$7534_CMP  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:142.10-145.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 3'h5;
  assign \$procmux$7535_CMP  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:136.10-139.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 3'h4;
  assign \$procmux$7536_CMP  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:130.10-133.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 2'h3;
  assign \$procmux$7537_CMP  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:124.10-127.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 2'h2;
  assign \$procmux$7538_CMP  = CState == (* src = "rtl/apb_uart/uart_transmitter.sv:118.10-121.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 1'h1;
  function [3:0] \$procmux$7540 ;
    input [3:0] a;
    input [47:0] b;
    input [11:0] s;
    (* src = "rtl/apb_uart/uart_transmitter.sv:265.8-268.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *)
    (* parallel_case *)
    casez (s)
      12'b???????????1:
        \$procmux$7540  = b[3:0];
      12'b??????????1?:
        \$procmux$7540  = b[7:4];
      12'b?????????1??:
        \$procmux$7540  = b[11:8];
      12'b????????1???:
        \$procmux$7540  = b[15:12];
      12'b???????1????:
        \$procmux$7540  = b[19:16];
      12'b??????1?????:
        \$procmux$7540  = b[23:20];
      12'b?????1??????:
        \$procmux$7540  = b[27:24];
      12'b????1???????:
        \$procmux$7540  = b[31:28];
      12'b???1????????:
        \$procmux$7540  = b[35:32];
      12'b??1?????????:
        \$procmux$7540  = b[39:36];
      12'b?1??????????:
        \$procmux$7540  = b[43:40];
      12'b1???????????:
        \$procmux$7540  = b[47:44];
      default:
        \$procmux$7540  = a;
    endcase
  endfunction
  assign NState = \$procmux$7540 (4'h0, { 20'h23456, \$NState$31 [3:2], 1'h1, \$NState$31 [0], 2'h2, \$NState$37 , 2'h2, \$NState$43 [1:0], 3'h5, \$NState$30 [0], 4'hb, \$NState$63 [3], \$NState$63 [3], 1'h0, \$NState$63 [0], 3'h0, TXSTART }, { \$procmux$7538_CMP , \$procmux$7537_CMP , \$procmux$7536_CMP , \$procmux$7535_CMP , \$procmux$7534_CMP , \$procmux$7490_CMP , \$procmux$7465_CMP , \$procmux$7442_CMP , \$procmux$7432_CMP , \$procmux$7405_CMP , \$90 , \$auto$opt_reduce.cc:137:opt_pmux$16924  });
  assign \$iTx2$19  = iTx2 ? (* full_case = 32'd1 *) (* src = "rtl/apb_uart/uart_transmitter.sv:83.15-86.18|rtl/apb_uart/uart_transmitter.sv:82.13-99.18" *) \$15  : 1'h1;
  assign \$NState$30 [3:1] = 3'h5;
  assign \$NState$31 [1] = 1'h1;
  assign \$NState$43 [3:2] = 2'h2;
  assign \$NState$63 [2:1] = { \$NState$63 [3], 1'h0 };
endmodule

(* src = "rtl/user_domain.sv:8.8" *)
module \user_domain$croc_chip.i_croc_soc.i_user (clk_i, rst_ni, ref_clk_i, testmode_i, user_sbr_obi_req_i, user_sbr_obi_rsp_o, user_mgr_obi_req_o, user_mgr_obi_rsp_i, gpio_in_sync_i, interrupts_o);
  (* src = "rtl/user_domain.sv:46.35" *)
  wire [147:0] all_user_sbr_obi_req;
  (* src = "rtl/user_domain.sv:11.21" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/user_domain.sv:22.38" *)
  input [31:0] gpio_in_sync_i;
  wire [31:0] gpio_in_sync_i;
  (* src = "rtl/user_domain.sv:23.38" *)
  output [3:0] interrupts_o;
  wire [3:0] interrupts_o;
  (* src = "rtl/user_domain.sv:12.21" *)
  input ref_clk_i;
  wire ref_clk_i;
  (* src = "rtl/user_domain.sv:13.21" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/user_domain.sv:14.21" *)
  input testmode_i;
  wire testmode_i;
  (* src = "rtl/user_domain.sv:55.17" *)
  wire [38:0] user_error_obi_rsp;
  (* src = "rtl/user_domain.sv:68.51" *)
  wire user_idx;
  (* src = "rtl/user_domain.sv:19.24" *)
  output [71:0] user_mgr_obi_req_o;
  wire [71:0] user_mgr_obi_req_o;
  (* src = "rtl/user_domain.sv:20.24" *)
  input [36:0] user_mgr_obi_rsp_i;
  wire [36:0] user_mgr_obi_rsp_i;
  (* src = "rtl/user_domain.sv:51.17" *)
  wire [38:0] user_rom_obi_rsp;
  (* src = "rtl/user_domain.sv:16.24" *)
  input [73:0] user_sbr_obi_req_i;
  wire [73:0] user_sbr_obi_req_i;
  (* src = "rtl/user_domain.sv:17.24" *)
  output [38:0] user_sbr_obi_rsp_o;
  wire [38:0] user_sbr_obi_rsp_o;
  (* src = "rtl/user_domain.sv:76.5" *)
  \addr_decode$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs  i_addr_decode_periphs (
    .addr_i(user_sbr_obi_req_i[73:42]),
    .addr_map_i(96'h000000012000000020001000),
    .default_idx_i(1'h0),
    .en_default_idx_i(1'h1),
    .idx_o(user_idx)
  );
  (* src = "rtl/user_domain.sv:92.5" *)
  \obi_demux$croc_chip.i_croc_soc.i_user.i_obi_demux  i_obi_demux (
    .clk_i(clk_i),
    .mgr_ports_req_o(all_user_sbr_obi_req),
    .mgr_ports_rsp_i({ user_rom_obi_rsp, user_error_obi_rsp }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(user_sbr_obi_req_i),
    .sbr_port_rsp_o(user_sbr_obi_rsp_o),
    .sbr_port_select_i(user_idx)
  );
  (* src = "rtl/user_domain.sv:128.5" *)
  \obi_err_sbr$croc_chip.i_croc_soc.i_user.i_user_err  i_user_err (
    .clk_i(clk_i),
    .obi_req_i(all_user_sbr_obi_req[73:0]),
    .obi_rsp_o(user_error_obi_rsp),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  (* src = "rtl/user_domain.sv:114.5" *)
  \user_rom$croc_chip.i_croc_soc.i_user.i_user_rom  i_user_rom (
    .clk_i(clk_i),
    .obi_req_i(all_user_sbr_obi_req[147:74]),
    .obi_rsp_o(user_rom_obi_rsp),
    .rst_ni(rst_ni)
  );
  assign interrupts_o = 4'h0;
  assign user_mgr_obi_req_o = 72'h000000000000000000;
endmodule

(* src = "rtl/user_domain/user_rom.sv:9.8" *)
module \user_rom$croc_chip.i_croc_soc.i_user.i_user_rom (clk_i, rst_ni, obi_req_i, obi_rsp_o);
  wire [31:0] \$auto$proc_rom.cc:154:do_switch$1819 ;
  wire [25:0] \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 ;
  wire [25:0] \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 ;
  wire [25:0] \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$a$18744 ;
  wire [25:0] \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$b$18745 ;
  wire [31:0] \$procmux$14301_Y ;
  (* src = "rtl/user_domain/user_rom.sv:18.16" *)
  input clk_i;
  wire clk_i;
  (* src = "rtl/user_domain/user_rom.sv:33.36" *)
  reg [2:0] id_q;
  (* src = "rtl/user_domain/user_rom.sv:29.9" *)
  wire obi_err;
  (* src = "rtl/user_domain/user_rom.sv:23.20" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "rtl/user_domain/user_rom.sv:25.20" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "rtl/user_domain/user_rom.sv:31.16" *)
  reg req_q;
  (* src = "rtl/user_domain/user_rom.sv:20.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "rtl/user_domain/user_rom.sv:30.15" *)
  reg we_q;
  (* src = "rtl/user_domain/user_rom.sv:32.28" *)
  reg [2:0] word_addr_q;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) id_q <= 3'h0;
    else id_q <= obi_req_i[4:2];
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) req_q <= 1'h0;
    else req_q <= obi_req_i[0];
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) we_q <= 1'h0;
    else we_q <= obi_req_i[41];
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) word_addr_q <= 3'h0;
    else word_addr_q <= obi_req_i[46:44];
  assign { \$auto$proc_rom.cc:154:do_switch$1819 [29:28], \$auto$proc_rom.cc:154:do_switch$1819 [26], \$auto$proc_rom.cc:154:do_switch$1819 [24], \$auto$proc_rom.cc:154:do_switch$1819 [22], \$auto$proc_rom.cc:154:do_switch$1819 [27], \$auto$proc_rom.cc:154:do_switch$1819 [19:18], \$auto$proc_rom.cc:154:do_switch$1819 [25], \$auto$proc_rom.cc:154:do_switch$1819 [14], \$auto$proc_rom.cc:154:do_switch$1819 [30], \$auto$proc_rom.cc:154:do_switch$1819 [12:11], \$auto$proc_rom.cc:154:do_switch$1819 [9:8], \$auto$proc_rom.cc:154:do_switch$1819 [6:0] } = word_addr_q[2] ? { 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [25], 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [25], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [25], 3'h0, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [25], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [13], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [25], 2'h0, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [13], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [13], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [6], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [25], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [25], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [13], 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [25], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [6] } : { \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [24:23], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [21], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [19], 1'h1, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [22], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [16], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [23], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [24], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [24], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [25], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [11:10], 4'ha, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [22], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [11], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [2:1], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [1] };
  assign { \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [21], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [19], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [16], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [23], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [24], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [25], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [10], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [22], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [11], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [2:1] } = word_addr_q[1] ? { 3'h6, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$b$18745 [25:24], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$b$18745 [25], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$b$18745 [25], 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$b$18745 [24], 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$b$18745 [25] } : { \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$a$18744 [24], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$a$18744 [25:24], 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$a$18744 [24], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$a$18744 [25], 1'h1, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$a$18744 [25], 2'h1, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$a$18744 [24] };
  assign { \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [13], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [25], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [6] } = word_addr_q[1] ? 3'h0 : { \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$b$18745 [24], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$b$18745 [25], 1'h1 };
  assign \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$a$18744 [25:24] = word_addr_q[0] ? 2'h1 : 2'h2;
  assign { \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$b$18745 [24], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$b$18745 [25] } = word_addr_q[0] ? 2'h2 : 2'h1;
  assign { \$procmux$14301_Y [29:28], \$procmux$14301_Y [26], \$procmux$14301_Y [24], \$procmux$14301_Y [22], \$procmux$14301_Y [27], \$procmux$14301_Y [19:18], \$procmux$14301_Y [25], \$procmux$14301_Y [14], \$procmux$14301_Y [30], \$procmux$14301_Y [12:11], \$procmux$14301_Y [9:8], \$procmux$14301_Y [6:0] } = we_q ? (* full_case = 32'd1 *) (* src = "rtl/user_domain/user_rom.sv:66.9-77.16|rtl/user_domain/user_rom.sv:65.7-80.10" *) 22'h000000 : { \$auto$proc_rom.cc:154:do_switch$1819 [29:28], \$auto$proc_rom.cc:154:do_switch$1819 [26], \$auto$proc_rom.cc:154:do_switch$1819 [24], \$auto$proc_rom.cc:154:do_switch$1819 [22], \$auto$proc_rom.cc:154:do_switch$1819 [27], \$auto$proc_rom.cc:154:do_switch$1819 [19:18], \$auto$proc_rom.cc:154:do_switch$1819 [25], \$auto$proc_rom.cc:154:do_switch$1819 [14], \$auto$proc_rom.cc:154:do_switch$1819 [30], \$auto$proc_rom.cc:154:do_switch$1819 [12:11], \$auto$proc_rom.cc:154:do_switch$1819 [9:8], \$auto$proc_rom.cc:154:do_switch$1819 [6:0] };
  assign obi_err = req_q & (* src = "rtl/user_domain/user_rom.sv:65.7-80.10|rtl/user_domain/user_rom.sv:64.5-81.8" *) we_q;
  assign { obi_rsp_o[36:35], obi_rsp_o[33], obi_rsp_o[31], obi_rsp_o[29], obi_rsp_o[34], obi_rsp_o[26:25], obi_rsp_o[32], obi_rsp_o[21], obi_rsp_o[37], obi_rsp_o[19:18], obi_rsp_o[16:15], obi_rsp_o[13:7] } = req_q ? (* src = "rtl/user_domain/user_rom.sv:65.7-80.10|rtl/user_domain/user_rom.sv:64.5-81.8" *) { \$procmux$14301_Y [29:28], \$procmux$14301_Y [26], \$procmux$14301_Y [24], \$procmux$14301_Y [22], \$procmux$14301_Y [27], \$procmux$14301_Y [19:18], \$procmux$14301_Y [25], \$procmux$14301_Y [14], \$procmux$14301_Y [30], \$procmux$14301_Y [12:11], \$procmux$14301_Y [9:8], \$procmux$14301_Y [6:0] } : 22'h000000;
  assign { \$procmux$14301_Y [31], \$procmux$14301_Y [23], \$procmux$14301_Y [21:20], \$procmux$14301_Y [17:15], \$procmux$14301_Y [13], \$procmux$14301_Y [10], \$procmux$14301_Y [7] } = { 3'h0, \$procmux$14301_Y [27], 1'h0, \$procmux$14301_Y [25], 1'h0, \$procmux$14301_Y [30], \$procmux$14301_Y [11], 1'h0 };
  assign \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$b$18745 [23:0] = { \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$b$18745 [25], 2'h1, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$b$18745 [24], 4'hc, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$b$18745 [25:24], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$b$18745 [24], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$b$18745 [25:24], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$b$18745 [25], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$b$18745 [25], 5'h14, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$b$18745 [24], 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$b$18745 [25], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$b$18745 [25] };
  assign { obi_rsp_o[38], obi_rsp_o[30], obi_rsp_o[28:27], obi_rsp_o[24:22], obi_rsp_o[20], obi_rsp_o[17], obi_rsp_o[14], obi_rsp_o[6:0] } = { 3'h0, obi_rsp_o[34], 1'h0, obi_rsp_o[32], 1'h0, obi_rsp_o[37], obi_rsp_o[18], 1'h0, id_q, obi_err, 1'h0, obi_req_i[0], req_q };
  assign \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$a$18744 [23:0] = { 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$a$18744 [25:24], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$a$18744 [24], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$a$18744 [25], 1'h1, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$a$18744 [25:24], 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$a$18744 [24], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$a$18744 [24], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$a$18744 [25], 7'h3a, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$a$18744 [25], 2'h1, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$a$18744 [24], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][1][0]$a$18744 [24] };
  assign { \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [24:14], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [12:7], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [5:0] } = { 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [25], 2'h0, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [25], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [25], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [25], 3'h0, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [25], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [25], 3'h0, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [13], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [13], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [25], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [25], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [13], 1'h0, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [25], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$b$18742 [6] };
  assign { \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [20], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [18:17], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [15:12], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [9:3], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [0] } = { \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [24], 1'h1, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [22], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [23], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [24], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [24], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [25], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [10], 4'ha, \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [22], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [11], \$memory$auto$proc_rom.cc:155:do_switch$1820$rdmux[0][0][0]$a$18741 [1] };
  assign { \$auto$proc_rom.cc:154:do_switch$1819 [31], \$auto$proc_rom.cc:154:do_switch$1819 [23], \$auto$proc_rom.cc:154:do_switch$1819 [21:20], \$auto$proc_rom.cc:154:do_switch$1819 [17:15], \$auto$proc_rom.cc:154:do_switch$1819 [13], \$auto$proc_rom.cc:154:do_switch$1819 [10], \$auto$proc_rom.cc:154:do_switch$1819 [7] } = { 3'h0, \$auto$proc_rom.cc:154:do_switch$1819 [27], 1'h0, \$auto$proc_rom.cc:154:do_switch$1819 [25], 1'h0, \$auto$proc_rom.cc:154:do_switch$1819 [30], \$auto$proc_rom.cc:154:do_switch$1819 [11], 1'h0 };
endmodule
